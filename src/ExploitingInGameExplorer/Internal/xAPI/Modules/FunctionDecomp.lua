--// Localization
local setmetatable = setmetatable
local pcall = pcall
local table = table
local debug = debug
local string = string
local setfenv = setfenv
local getfenv = getfenv

--// Init
local Metatable = require(script.Parent.Parent.Libraries.Metatable)

local function get_param_num(f)
	return debug.info(f, "a")
end

local function merge_t(a, b)
	local r = {}
	
	for i, v in a do r[i] = v end
	for i, v in b do r[i] = v end
	
	return r
end

--// Sandbox
local function Sandbox(f: (...any) -> (...any), upvalues: {any}?, constants: {string}?, protos: {(...any) -> (...any)}?, i: number?)
	upvalues = upvalues or {}
	constants = constants or {}
	protos = protos or {}
	i = i or 1
	
	local root = {
		root = true,
		children = {},
		stack = {},
		params = {},
		constants = constants,
		upvalues = upvalues,
		protos = protos,
		pc = 0,
		function_info = {debug.info(f, "na")},
		f = f,
		i = i
	}
	
	local id_i = 0
	local last_func
	
	local function wrap(parent: {pc: number?, children: {any}, arguments: {any?}?})
		local hooks = {}
		local t = {}
		
		for metamethod in Metatable.metamethods do
			hooks[metamethod] = function(_, ...)
				root.pc += 1
				
				local pc = root.pc
				local stack = root.stack
				local self = {pc = pc, children = {}, parent = parent, arguments = {...}, metamethod = metamethod}
				parent.children[pc] = self
				
				if metamethod == "__len" then
					return -1
				end
				
				return wrap(self)
			end
		end
		
		if root.pc ~= 0 then
			root.stack[t] = root.pc
		else
			root.stack[t] = id_i
			root.params[t] = id_i
			
			id_i += 1
		end
		
		return setmetatable(t, hooks)
	end
	
	local env = wrap(root)
	local params = {}
	
	local param_num, vararg = get_param_num(f)
	
	for i = 1, param_num do
		local arg = wrap(root)
		
		table.insert(params, arg)
		root.params[arg] = root.i
		
		root.i += 1
	end
	
	if vararg then
		local vararg = wrap(root)
		
		table.insert(params, vararg)
		root.params[vararg] = "..."
	end
	
	local original_env = getfenv(f)
	local return_value = {pcall(setfenv(f, env), unpack(params))}
	setfenv(f, original_env)
	
	root.return_value = table.move(return_value, 2, #return_value, 1, {})
	root.success = return_value[1]
	
	return root
end

--// Disassembler
local function Disassemble(tree: {any}, tabs: number?)
	tabs = tabs or 0
	local tab_formatting = ("\t"):rep(tabs)
	
	local stack = tree.stack
	local params = tree.params
	local upvalues = tree.upvalues
	local final_pc = tree.pc
	local success = tree.success
	local function_info = tree.function_info
	local i = tree.i
	
	local stack_offset do	
		stack_offset = (final_pc > 0 and 1) or 0
	end
	
	local disassembly = {}
	local constants = {}
	local protos = {}
	
	if final_pc > 0 then
		table.insert(disassembly, tab_formatting.."local stack = {};\n")
	end
	
	local pc = 0
	
	local function format(value)
		local type = type(value)
		
		local s_index = stack[value]
		local p_index = params[value]
		local uv_index = upvalues[value]
		
		if p_index then
			if p_index ~= "..." then
				return ("_p%d"):format(p_index)
			end
			
			return p_index
		elseif s_index then
			return ("stack[%d]"):format(s_index)
		elseif uv_index then
			if not upvalues[value] then
				disassembly[1] = ("%slocal _uv_%s = stack[%s];\n"):format(tab_formatting, uv_index, uv_index)..(disassembly[1] or "")
			else
				return ("_p%s"):format(uv_index)
			end

			return ("_uv_%d"):format(uv_index)
		end
		
		if type == "string" then
			local s = ""
			
			for _, char in {value:byte(1, -1)} do
				if char > 126 or char < 32 then
					s ..= "\\"..char
				else
					s ..= string.char(char)
				end
			end
			
			table.insert(constants, value)
			
			return ('"%s"'):format(s)
		elseif type == "table" then
			local t = ""
			
			for i, v in value do
				t ..= ("\n%s[%s] = %s;"):format(tab_formatting, format(i), format(v))
			end
			
			return ("{%s%s\n}"):format(tab_formatting, t)
		elseif type == "function" then
			if not table.find(protos, value) and value ~= tree.f then
				table.insert(protos, value)
				
				local param_override = table.clone(params)
				
				local sandbox = Sandbox(value, merge_t(param_override, upvalues), constants, protos, i)
				local _disassembly = Disassemble(sandbox, tabs + 1)
				local arguments = {}
				local params = {}
				
				for _, param in sandbox.params do
					if param ~= 0 and tostring(param) ~= "..." then
						table.insert(params, param)
					end
				end
				
				table.sort(params, function(a, b)
					return a < b
				end)
				
				for i, v in params do
					table.insert(arguments, "_p"..v)
				end
				
				if sandbox.function_info[3] then
					table.insert(arguments, "...")
				end
				
				if sandbox.function_info[1] == "" then
					return ("function(%s) %s\n%send"):format(table.concat(arguments, ", "), _disassembly, tab_formatting)
				else
					disassembly[pc + 1] = ("%slocal function %s(%s) %s\n%send\n"):format(
						tab_formatting,
						sandbox.function_info[1],
						table.concat(arguments, ", "),
						_disassembly,
						tab_formatting
					)..(disassembly[pc] or "") 
					
					pc += 1 + stack_offset
					
					return sandbox.function_info[1]
				end
			elseif value == tree.f then
				local func_name = debug.info(value, "n")
				
				if func_name == "" then
					return "debug.info(1, 'f')"
				else
					return func_name
				end
			else
				return ("(function() --[[ Unknown proto ]] end)")
			end
		end
		
		if type == "userdata" or type == "vector" then
			local index = math.random(0, 0xFFF)
			stack[value] = index

			return "_unknown_"..index
		end
		
		return tostring(value)
	end
	
	local function format_tuple(...)
		local t = {}
		
		local last = 0
		for i, index in {...} do
			if i - last > 1 then
				local void_size = i - last - 1
				table.move(table.create(void_size, "nil"), i, void_size, 1, t)
			end
			
			table.insert(t, format(index))
			
			last = i
		end
		
		return table.concat(t, ", ")
	end
	
	local function parse(branch, parent)
		if math.random(0, 2) == 0 then task.wait() end -- prevent script timeout while maintaining performance
		
		pc = branch.pc
		
		local metamethod = branch.metamethod
		local args = branch.arguments
		
		local parent_pc = (parent and parent.pc) or 0
		local a, b = args[1], args[2]
		local global = parent == nil
		
		local push = ("-- unsupported method '%s'"):format(metamethod)
		if metamethod == "__index" then
			if global then
				push = ("stack[%d] = %s;"):format(pc, a or "(???)")
				
				table.insert(constants, a)
			else
				push = ("stack[%d] = stack[%d][%s];"):format(pc, parent_pc, format(a))
			end
		elseif metamethod == "__newindex" then
			if global then
				push = ("%s = %s;"):format(a or "(???)", format(b))
				
				table.insert(constants, a)
			else
				push = ("stack[%d][%s] = %s;"):format(parent_pc, format(a), format(b))
			end
		elseif metamethod == "__call" then
			local namecall_info = ""
			local namecall_stack = stack[args[1] or -1]
			local is_namecall = namecall_stack == parent_pc - 1
			
			if is_namecall and (parent and parent.parent and parent.parent.arguments) then
				local a = parent.parent.arguments[1] or "(???)"
				local b = parent.arguments[1] or "(???)"
				
				local namecall_args = {}
				table.move(args, 2, #args, 1, namecall_args)
				
				namecall_info = ("-- %s:%s(%s)"):format(a, b, format_tuple(unpack(namecall_args)))
			end
			
			push = ("stack[%d] = stack[%d](%s); %s"):format(pc, parent_pc, format_tuple(unpack(args)), namecall_info)
		else
			local only_self = {
				__len = "#",
				__unm = "-"
			}
			
			local math = {
				__add = "+",
				__sub = "-",
				__mul = "*",
				__div = "/",
				__idiv = "//",
				__pow = "^",
				__eq = "==",
				__lt = "<",
				__le = "<=",
				__mod = "%"
			}
			
			local self_index, math_index = only_self[metamethod], math[metamethod]
			
			if self_index then
				push = ("stack[%d] = %sstack[%d]; -- Unable to process lua numbers"):format(pc, self_index, parent_pc)
			elseif math_index then
				push = ("stack[%d] = stack[%d] %s %s;"):format(pc, parent_pc, math_index, format(a))
			end
		end
		
		disassembly[pc + stack_offset] = push
		
		for _, child in branch.children do
			parse(child, branch)
		end
	end
	
	for _, child in tree.children do
		parse(child)
	end
	
	if success then
		local return_value = tree.return_value
		
		if final_pc > 0 then
			table.insert(disassembly, "")
		end
		
		if #return_value > 0 then
			table.insert(disassembly, ("return %s;"):format(format_tuple(unpack(return_value))))
		else
			table.insert(disassembly, "return;")
		end
	end
	
	local header = "-- %s, %d%s params, %d constants, %d protos\n\n"
	
	header = header:format(
		(function_info[1] == "" and "anonymous") or ('%s'):format(function_info[1]),
		function_info[2],
		(function_info[3] and "+") or "",
		#constants,
		#protos
	)
	
	disassembly = header..table.concat(disassembly, "\n"..("\t"):rep(tabs))
	
	return ((not success and ("-- An error occured while decompiling (@pc %d)\n"):format(final_pc)) or "")..disassembly, constants, protos, success
end

return setmetatable({
	sandbox = Sandbox,
	decompile = function(f: (...any) -> (...any))
		local disassembly, constants, protos, success = Disassemble(Sandbox(f))
		
		return {"-- Decompiled with the xAPI function sandbox.\n"..disassembly, constants, protos, success}
	end
}, {
	__call = function(self, f: (...any) -> (...any))
		return self.decompile(f)
	end
})