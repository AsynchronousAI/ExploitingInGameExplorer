--!optimize 2
--// LuauCeption - Compiler variant
--// Luau 0.621 (9c2146288d78e8beacefe692ae1149fec066440e)

local STUB_WARN = true

--// Vanilla Luau Vector3 implementation
--// Provides Vector3 lib if no existing implementation is available
--// Missing: xAxis, yAxis, zAxis, Magnitude, Unit, and all namecall functions
--// Last checked: 06 April 2024
local type = type
local typeof = typeof
local Vector3 = Vector3
if not Vector3 then
	local Vector3Internal = {}
	Vector3Internal.__index = Vector3Internal
	Vector3Internal.__type = "Vector3"
	Vector3Internal.__metatable = "This metatable is locked"

	Vector3 = {}
	Vector3.new = function(x, y, z)
		return setmetatable({X = x or 0, Y = y or 0, Z = z or 0}, Vector3Internal)
	end
	Vector3.zero = Vector3.new(0,0,0)
	Vector3.one = Vector3.new(1,1,1)
	table.freeze(Vector3)

	Vector3Internal.__concat = function()
		assert(false, "attempt to concatenate Vector3 with Vector3")
		return
	end
	Vector3Internal.__unm = function(self)
		return Vector3.new(-self.X, -self.Y, -self.Z)
	end
	Vector3Internal.__add = function(self, v3_2)
		v3_2 = if (typeof(v3_2) == "number") then Vector3.new(v3_2, v3_2, v3_2) else v3_2
		return Vector3.new(self.X + v3_2.X, self.Y + v3_2.Y, self.Z + v3_2.Z)
	end
	Vector3Internal.__sub = function(self, v3_2)
		v3_2 = if (typeof(v3_2) == "number") then Vector3.new(v3_2, v3_2, v3_2) else v3_2
		return Vector3.new(self.X - v3_2.X, self.Y - v3_2.Y, self.Z - v3_2.Z)
	end
	Vector3Internal.__mul = function(self, v3_2)
		v3_2 = if (typeof(v3_2) == "number") then Vector3.new(v3_2, v3_2, v3_2) else v3_2
		return Vector3.new(self.X * v3_2.X, self.Y * v3_2.Y, self.Z * v3_2.Z)
	end
	Vector3Internal.__div = function(self, v3_2)
		v3_2 = if (typeof(v3_2) == "number") then Vector3.new(v3_2, v3_2, v3_2) else v3_2
		return Vector3.new(self.X / v3_2.X, self.Y / v3_2.Y, self.Z / v3_2.Z)
	end
	Vector3Internal.__div = function(_, t)
		if (typeof(t) == "table") and (t["__type"] == "Vector3") then
			assert(false, "attempt to perform arithmetic (mod) on Vector3")
		else
			assert(false, "attempt to perform arithmetic (mod) on Vector3 and "..typeof(t))
		end
		return
	end
	Vector3Internal.__pow = function(_, t)
		if (typeof(t) == "table") and (t["__type"] == "Vector3") then
			assert(false, "attempt to perform arithmetic (pow) on Vector3")
		else
			assert(false, "attempt to perform arithmetic (pow) on Vector3 and "..typeof(t))
		end
		return
	end
	Vector3Internal.__tostring = function(self)
		return self.X..", "..self.Y..", "..self.Z
	end
	Vector3Internal.__eq = function(self, v3_2)
		if (typeof(v3_2) ~= "table") or (v3_2["__type"] == "Vector3") then return false end
		return (self.X == v3_2.X) and (self.Y == v3_2.Y) and (self.Z == v3_2.Z)
	end
	Vector3Internal.__lt = function(self, v3_2)
		if (typeof(v3_2) ~= "table") or (v3_2["__type"] == "Vector3") then return false end
		return (self.X < v3_2.X) and (self.Y < v3_2.Y) and (self.Z < v3_2.Z)
	end
	Vector3Internal.__le = function(self, v3_2)
		if (typeof(v3_2) ~= "table") or (v3_2["__type"] == "Vector3") then return false end
		return (self.X <= v3_2.X) and (self.Y <= v3_2.Y) and (self.Z <= v3_2.Z)
	end
	Vector3Internal.__len = function()
		assert(false, "attempt to get length of a Vector3 value")
		return
	end

	local oldtype = type
	type = function(v)
		return if (oldtype(v) == "table") and v["__type"] then v["__type"] else oldtype(v)
	end

	local oldtypeof = typeof
	typeof = function(v)
		return if (oldtypeof(v) == "table") and v["__type"] then v["__type"] else oldtypeof(v)
	end
end

local Integer = (function()
	local Numeric = {}

	local NUM_ZERO = Vector3.zero
	local NUM_ONE, NUM_SIX_FOUR

	local NUM_BIT_26, NUM_BIT_52

	local bit_lshift = bit32.lshift
	local bit_rshift = bit32.rshift
	local bit_arshift = bit32.arshift

	local bit_and = bit32.band
	local bit_or = bit32.bor
	local bit_xor = bit32.bxor
	local bit_not = bit32.bnot

	local bit_extract = bit32.extract
	local bit_replace = bit32.replace

	local from_u32, from_u64, into_u64
	local num_subtract, num_divide_unsigned, num_negate
	local num_or, num_shift_left, num_shift_right_unsigned
	local num_is_less_unsigned

	-- X: a[0 ..21]
	-- Y: a[22..31]
	--  | b[0 ..11]
	-- Z: b[12..31]
	local constructor = Vector3.new

	function Numeric.from_u32(data_1, data_2)
		local x = bit_and(data_1, 0x3FFFFF)
		local y = bit_and(data_2, 0x3FFFFF)
		local z = bit_replace(bit_rshift(data_1, 22), bit_rshift(data_2, 22), 10, 10)

		return constructor(x, y, z)
	end

	local function num_is_zero(value)
		return value == NUM_ZERO
	end

	local function load_d1(value)
		return bit_replace(bit_and(value.X, 0x3FFFFF), value.Z, 22, 10)
	end

	local function load_d2(value)
		return bit_replace(bit_and(value.Y, 0x3FFFFF), bit_rshift(value.Z, 10), 22, 10)
	end

	local function into_u32(value)
		local x, y, z = value.X, value.Y, value.Z
		return bit_replace(bit_and(x, 0x3FFFFF), z, 22, 10), bit_replace(bit_and(y, 0x3FFFFF), bit_rshift(z, 10), 22, 10)
	end
	Numeric.into_u32 = into_u32

	function Numeric.from_u64(value)
		return from_u32(bit_and(value % 0x100000000), bit_and(value / 0x100000000))
	end

	function Numeric.into_u64(value)
		local value_1, value_2 = into_u32(value)
		return value_1 + value_2 * 0x100000000
	end

	function Numeric.add(lhs, rhs)
		local lhs_1, lhs_2 = into_u32(lhs)
		local rhs_1, rhs_2 = into_u32(rhs)
		local data_1 = lhs_1 + rhs_1
		local data_2 = lhs_2 + rhs_2

		if data_1 >= 0x100000000 then
			data_1 = data_1 - 0x100000000
			data_2 = data_2 + 1
		end

		if data_2 >= 0x100000000 then
			data_2 = data_2 - 0x100000000
		end

		return from_u32(data_1, data_2)
	end

	function Numeric.subtract(lhs, rhs)
		local lhs_1, lhs_2 = into_u32(lhs)
		local rhs_1, rhs_2 = into_u32(rhs)
		local data_1 = lhs_1 - rhs_1
		local data_2 = lhs_2 - rhs_2

		if data_1 < 0 then
			data_1 = data_1 + 0x100000000
			data_2 = data_2 - 1
		end

		if data_2 < 0 then
			data_2 = data_2 + 0x100000000
		end

		return from_u32(data_1, data_2)
	end

	function Numeric.multiply(lhs, rhs)
		if num_is_zero(lhs) or num_is_zero(rhs) then
			return NUM_ZERO
		elseif num_is_less_unsigned(lhs, NUM_BIT_26) and num_is_less_unsigned(rhs, NUM_BIT_26) then
			return from_u64(load_d1(lhs) * load_d1(rhs))
		end

		-- Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
		-- We can skip products that would overflow.
		local lhs_1, lhs_2 = into_u32(lhs)
		local rhs_1, rhs_2 = into_u32(rhs)

		local a48 = bit_rshift(lhs_2, 16)
		local a32 = bit_and(lhs_2, 0xFFFF)
		local a16 = bit_rshift(lhs_1, 16)
		local a00 = bit_and(lhs_1, 0xFFFF)

		local b48 = bit_rshift(rhs_2, 16)
		local b32 = bit_and(rhs_2, 0xFFFF)
		local b16 = bit_rshift(rhs_1, 16)
		local b00 = bit_and(rhs_1, 0xFFFF)

		local c00 = a00 * b00
		local c16 = bit_rshift(c00, 16)

		c00 = bit_and(c00, 0xFFFF)
		c16 = c16 + a16 * b00

		local c32 = bit_rshift(c16, 16)

		c16 = bit_and(c16, 0xFFFF)
		c16 = c16 + a00 * b16
		c32 = c32 + bit_rshift(c16, 16)
		c16 = bit_and(c16, 0xFFFF)
		c32 = c32 + a32 * b00

		local c48 = bit_rshift(c32, 16)

		c32 = bit_and(c32, 0xFFFF)
		c32 = c32 + a16 * b16
		c48 = c48 + bit_rshift(c32, 16)
		c32 = bit_and(c32, 0xFFFF)
		c32 = c32 + a00 * b32
		c48 = c48 + bit_rshift(c32, 16)
		c32 = bit_and(c32, 0xFFFF)
		c48 = c48 + a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48
		c48 = bit_and(c48, 0xFFFF)

		local data_1 = bit_replace(c00, c16, 16, 16)
		local data_2 = bit_replace(c32, c48, 16, 16)

		return from_u32(data_1, data_2)
	end

	function Numeric.divide_unsigned(lhs, rhs)
		if num_is_zero(rhs) then
			error("division by zero")
		elseif num_is_zero(lhs) then
			return NUM_ZERO, NUM_ZERO
		elseif num_is_less_unsigned(lhs, NUM_BIT_52) and num_is_less_unsigned(rhs, NUM_BIT_52) then
			local lhs_u = into_u64(lhs)
			local rhs_u = into_u64(rhs)

			return from_u64(lhs_u / rhs_u), from_u64(lhs_u % rhs_u)
		end

		local quotient = NUM_ZERO
		local remainder = NUM_ZERO

		local num_1, num_2 = into_u32(lhs)

		for i = 63, 0, -1 do
			local rem_1, rem_2 = into_u32(num_shift_left(remainder, NUM_ONE))

			if i > 31 then
				rem_1 = bit_or(rem_1, bit_extract(num_2, i - 32, 1))
			else
				rem_1 = bit_or(rem_1, bit_extract(num_1, i, 1))
			end

			remainder = from_u32(rem_1, rem_2)

			if not num_is_less_unsigned(remainder, rhs) then
				remainder = num_subtract(remainder, rhs)
				quotient = num_or(quotient, num_shift_left(NUM_ONE, from_u32(i, 0)))
			end
		end

		return quotient, remainder
	end

	local function num_is_negative(value)
		return value.Z >= 0x80000
	end

	function Numeric.divide_signed(lhs, rhs)
		local left_negative = num_is_negative(lhs)
		local right_negative = num_is_negative(rhs)

		if left_negative then
			lhs = num_negate(lhs)
		end

		if right_negative then
			rhs = num_negate(rhs)
		end

		local quotient, remainder = num_divide_unsigned(lhs, rhs)

		if left_negative ~= right_negative then
			quotient = num_negate(quotient)
		end

		if left_negative then
			remainder = num_negate(remainder)
		end

		return quotient, remainder
	end

	function Numeric.negate(value)
		local value_1, value_2 = into_u32(value)
		local data_1 = bit_not(value_1) + 1
		local data_2 = bit_not(value_2)

		if data_1 >= 0x100000000 then
			data_1 = data_1 - 0x100000000
			data_2 = data_2 + 1
		end

		if data_2 >= 0x100000000 then
			data_2 = data_2 - 0x100000000
		end

		return from_u32(data_1, data_2)
	end

	function Numeric.bit_and(lhs, rhs)
		local x = bit_and(lhs.X, rhs.X)
		local y = bit_and(lhs.Y, rhs.Y)
		local z = bit_and(lhs.Z, rhs.Z)

		return constructor(x, y, z)
	end

	function Numeric.bit_not(value)
		local x = bit_and(bit_not(value.X), 0xFFFFFF)
		local y = bit_and(bit_not(value.Y), 0xFFFFFF)
		local z = bit_and(bit_not(value.Z), 0xFFFFFF)

		return constructor(x, y, z)
	end

	function Numeric.bit_or(lhs, rhs)
		local x = bit_or(lhs.X, rhs.X)
		local y = bit_or(lhs.Y, rhs.Y)
		local z = bit_or(lhs.Z, rhs.Z)

		return constructor(x, y, z)
	end

	function Numeric.bit_xor(lhs, rhs)
		local x = bit_xor(lhs.X, rhs.X)
		local y = bit_xor(lhs.Y, rhs.Y)
		local z = bit_xor(lhs.Z, rhs.Z)

		return constructor(x, y, z)
	end

	function Numeric.shift_left(lhs, rhs)
		local count = rhs.X % 64

		if count == 0 then
			return lhs
		elseif count < 32 then
			local pad = 32 - count
			local lhs_1, lhs_2 = into_u32(lhs)

			local data_1 = bit_lshift(lhs_1, count)
			local data_2 = bit_replace(bit_rshift(lhs_1, pad), lhs_2, count, pad)

			return from_u32(data_1, data_2)
		else
			local lhs_1 = load_d1(lhs)

			return from_u32(0, bit_lshift(lhs_1, count - 32))
		end
	end

	function Numeric.shift_right_unsigned(lhs, rhs)
		local count = rhs.X % 64

		if count == 0 then
			return lhs
		elseif count < 32 then
			local lhs_1, lhs_2 = into_u32(lhs)

			local data_1 = bit_replace(bit_rshift(lhs_1, count), lhs_2, 32 - count, count)
			local data_2 = bit_rshift(lhs_2, count)

			return from_u32(data_1, data_2)
		else
			local lhs_2 = load_d2(lhs)

			return from_u32(bit_rshift(lhs_2, count - 32), 0)
		end
	end

	function Numeric.shift_right_signed(lhs, rhs)
		local count = rhs.X % 64

		if count == 0 then
			return lhs
		elseif count < 32 then
			local lhs_1, lhs_2 = into_u32(lhs)

			local data_1 = bit_replace(bit_rshift(lhs_1, count), lhs_2, 32 - count, count)
			local data_2 = bit_arshift(lhs_2, count)

			return from_u32(data_1, data_2)
		else
			local lhs_2 = load_d2(lhs)

			local data_1 = bit_arshift(lhs_2, count - 32)
			local data_2 = lhs_2 >= 0x80000000 and 0xFFFFFFFF or 0

			return from_u32(data_1, data_2)
		end
	end

	function Numeric.rotate_left(lhs, rhs)
		if num_is_zero(rhs) then
			return lhs
		else
			local data_1 = num_shift_left(lhs, rhs)
			local data_2 = num_shift_right_unsigned(lhs, num_subtract(NUM_SIX_FOUR, rhs))

			return num_or(data_1, data_2)
		end
	end

	function Numeric.rotate_right(lhs, rhs)
		if num_is_zero(rhs) then
			return lhs
		else
			local data_1 = num_shift_right_unsigned(lhs, rhs)
			local data_2 = num_shift_left(lhs, num_subtract(NUM_SIX_FOUR, rhs))

			return num_or(data_1, data_2)
		end
	end

	function Numeric.is_equal(lhs, rhs)
		return lhs == rhs
	end

	function Numeric.is_less_unsigned(lhs, rhs)
		local data_l_2 = load_d2(lhs)
		local data_r_2 = load_d2(rhs)

		return data_l_2 < data_r_2 or (data_l_2 == data_r_2 and load_d1(lhs) < load_d1(rhs))
	end

	function Numeric.is_greater_unsigned(lhs, rhs)
		local data_l_2 = load_d2(lhs)
		local data_r_2 = load_d2(rhs)

		return data_l_2 > data_r_2 or (data_l_2 == data_r_2 and load_d1(lhs) > load_d1(rhs))
	end

	function Numeric.is_less_signed(lhs, rhs)
		local neg_a = num_is_negative(lhs)
		local neg_b = num_is_negative(rhs)

		if neg_a and not neg_b then
			return true
		elseif not neg_a and neg_b then
			return false
		else
			return num_is_negative(num_subtract(lhs, rhs))
		end
	end

	function Numeric.is_greater_signed(lhs, rhs)
		local neg_a = num_is_negative(lhs)
		local neg_b = num_is_negative(rhs)

		if neg_a and not neg_b then
			return false
		elseif not neg_a and neg_b then
			return true
		else
			return num_is_negative(num_subtract(rhs, lhs))
		end
	end

	from_u32 = Numeric.from_u32
	from_u64 = Numeric.from_u64
	into_u64 = Numeric.into_u64

	num_subtract = Numeric.subtract
	num_divide_unsigned = Numeric.divide_unsigned
	num_negate = Numeric.negate

	num_or = Numeric.bit_or
	num_shift_left = Numeric.shift_left
	num_shift_right_unsigned = Numeric.shift_right_unsigned

	Numeric.is_negative = num_is_negative
	Numeric.is_zero = num_is_zero
	num_is_less_unsigned = Numeric.is_less_unsigned

	NUM_ONE = from_u64(1)
	NUM_SIX_FOUR = from_u64(64)
	NUM_BIT_26 = from_u64(0x4000000)
	NUM_BIT_52 = from_u64(0x10000000000000)

	Numeric.ZERO = NUM_ZERO
	Numeric.ONE = NUM_ONE

	return table.freeze(Numeric)

end)()
local rt = (function()
	local module = {}

	local bit_and = bit32.band
	local bit_or = bit32.bor
	local bit_xor = bit32.bxor
	local bit_lshift = bit32.lshift
	local bit_rshift = bit32.rshift

	local num_from_u32 = Integer.from_u32
	local num_into_u32 = Integer.into_u32

	local function to_i32(num)
		return bit_xor(num, 0x80000000) - 0x80000000
	end

	local function no_op(num)
		return num
	end

	module.i64 = Integer

	do
		local add = {}
		local sub = {}
		local mul = {}
		local div = {}
		local rem = {}
		local neg = {}
		local min = {}
		local max = {}
		local copysign = {}
		local nearest = {}

		local assert = assert

		local math_abs = math.abs
		local math_fmod = math.fmod
		local math_modf = math.modf
		local math_round = math.round
		local math_sign = math.sign
		local math_min = math.min
		local math_max = math.max

		local num_divide_signed = Integer.divide_signed
		local num_divide_unsigned = Integer.divide_unsigned

		function add.i32(lhs, rhs)
			return bit_or(lhs + rhs, 0)
		end

		function sub.i32(lhs, rhs)
			return bit_or(lhs - rhs, 0)
		end

		function mul.i32(lhs, rhs)
			if (lhs + rhs) < 0x8000000 then
				return bit_or(lhs * rhs, 0)
			else
				local a16 = bit_rshift(lhs, 16)
				local a00 = bit_and(lhs, 0xFFFF)
				local b16 = bit_rshift(rhs, 16)
				local b00 = bit_and(rhs, 0xFFFF)

				local c00 = a00 * b00
				local c16 = a16 * b00 + a00 * b16

				return bit_or(c00 + bit_lshift(c16, 16), 0)
			end
		end

		function div.i32(lhs, rhs)
			assert(rhs ~= 0, "division by zero")

			lhs = to_i32(lhs)
			rhs = to_i32(rhs)

			return bit_or(math_modf(lhs / rhs), 0)
		end

		function div.u32(lhs, rhs)
			assert(rhs ~= 0, "division by zero")

			return bit_or(math_modf(lhs / rhs), 0)
		end

		function rem.i32(lhs, rhs)
			assert(rhs ~= 0, "division by zero")

			lhs = to_i32(lhs)
			rhs = to_i32(rhs)

			return bit_or(math_fmod(lhs, rhs), 0)
		end

		add.i64 = Integer.add
		sub.i64 = Integer.subtract
		mul.i64 = Integer.multiply
		div.i64 = num_divide_signed

		function rem.i64(lhs, rhs)
			local _, remainder = num_divide_signed(lhs, rhs)

			return remainder
		end

		div.u64 = num_divide_unsigned

		function rem.u64(lhs, rhs)
			local _, remainder = num_divide_unsigned(lhs, rhs)

			return remainder
		end

		function neg.f32(num)
			return -num
		end

		function min.f32(lhs, rhs)
			if rhs == rhs then
				return math_min(lhs, rhs)
			else
				return rhs
			end
		end

		function max.f32(lhs, rhs)
			if rhs == rhs then
				return math_max(lhs, rhs)
			else
				return rhs
			end
		end

		local CP_INSTANCE = buffer.create(8)

		local buffer_write_f64 = buffer.writef64
		local buffer_read_i8 = buffer.readi8

		function copysign.f32(lhs, rhs)
			buffer_write_f64(CP_INSTANCE, 0, rhs)

			if buffer_read_i8(CP_INSTANCE, 7) >= 0 then
				return (math_abs(lhs))
			else
				return -math_abs(lhs)
			end
		end

		function nearest.f32(num)
			local result = math_round(num)

			if (math_abs(num) + 0.5) % 2 == 1 then
				return result - math_sign(result)
			else
				return result
			end
		end

		neg.f64 = neg.f32
		min.f64 = min.f32
		max.f64 = max.f32
		copysign.f64 = copysign.f32
		nearest.f64 = nearest.f32

		module.add = add
		module.sub = sub
		module.mul = mul
		module.div = div
		module.rem = rem
		module.neg = neg
		module.min = min
		module.max = max
		module.copysign = copysign
		module.nearest = nearest
	end

	do
		local clz = {}
		local ctz = {}
		local popcnt = {}

		local bit_countlz = bit32.countlz
		local bit_countrz = bit32.countrz

		local function popcnt_i32(num)
			num = num - bit_and(bit_rshift(num, 1), 0x55555555)
			num = bit_and(num, 0x33333333) + bit_and(bit_rshift(num, 2), 0x33333333)
			num = bit_and((num + bit_rshift(num, 4)), 0x0F0F0F0F)
			num = num + bit_rshift(num, 8)
			num = num + bit_rshift(num, 16)
			return bit_and(num, 0x0000003F)
		end

		popcnt.i32 = popcnt_i32

		function clz.i64(num)
			local data_1, data_2 = num_into_u32(num)
			local temp

			if data_2 == 0 then
				temp = bit_countlz(data_1) + 32
			else
				temp = bit_countlz(data_2)
			end

			return num_from_u32(temp, 0)
		end

		function ctz.i64(num)
			local data_1, data_2 = num_into_u32(num)
			local temp

			if data_1 == 0 then
				temp = bit_countrz(data_2) + 32
			else
				temp = bit_countrz(data_1)
			end

			return num_from_u32(temp, 0)
		end

		function popcnt.i64(num)
			local data_1, data_2 = num_into_u32(num)
			local temp = popcnt_i32(data_1) + popcnt_i32(data_2)

			return num_from_u32(temp, 0)
		end

		module.clz = clz
		module.ctz = ctz
		module.popcnt = popcnt
	end

	do
		local eq = {}
		local ne = {}
		local le = {}
		local lt = {}
		local ge = {}
		local gt = {}

		local num_is_equal = Integer.is_equal
		local num_is_less_signed = Integer.is_less_signed
		local num_is_less_unsigned = Integer.is_less_unsigned
		local num_is_greater_signed = Integer.is_greater_signed
		local num_is_greater_unsigned = Integer.is_greater_unsigned

		function le.i32(lhs, rhs)
			return to_i32(lhs) <= to_i32(rhs)
		end

		function lt.i32(lhs, rhs)
			return to_i32(lhs) < to_i32(rhs)
		end

		function ge.i32(lhs, rhs)
			return to_i32(lhs) >= to_i32(rhs)
		end

		function gt.i32(lhs, rhs)
			return to_i32(lhs) > to_i32(rhs)
		end

		eq.i64 = num_is_equal

		function ne.i64(lhs, rhs)
			return not num_is_equal(lhs, rhs)
		end

		function le.i64(lhs, rhs)
			return num_is_less_signed(lhs, rhs) or num_is_equal(lhs, rhs)
		end

		function le.u64(lhs, rhs)
			return num_is_less_unsigned(lhs, rhs) or num_is_equal(lhs, rhs)
		end

		lt.i64 = num_is_less_signed
		lt.u64 = num_is_less_unsigned

		function ge.i64(lhs, rhs)
			return num_is_greater_signed(lhs, rhs) or num_is_equal(lhs, rhs)
		end

		function ge.u64(lhs, rhs)
			return num_is_greater_unsigned(lhs, rhs) or num_is_equal(lhs, rhs)
		end

		gt.i64 = num_is_greater_signed
		gt.u64 = num_is_greater_unsigned

		module.eq = eq
		module.ne = ne
		module.le = le
		module.lt = lt
		module.ge = ge
		module.gt = gt
	end

	do
		local band = {}
		local bor = {}
		local bxor = {}
		local bnot = {}

		band.i64 = Integer.bit_and
		bor.i64 = Integer.bit_or
		bxor.i64 = Integer.bit_xor
		bnot.i64 = Integer.bit_not

		module.band = band
		module.bor = bor
		module.bxor = bxor
		module.bnot = bnot
	end

	do
		local shl = {}
		local shr = {}
		local rotl = {}
		local rotr = {}

		local bit_arshift = bit32.arshift
		local bit_lrotate = bit32.lrotate
		local bit_rrotate = bit32.rrotate

		function shl.i32(lhs, rhs)
			return bit_lshift(lhs, rhs % 32)
		end

		function shr.u32(lhs, rhs)
			return bit_rshift(lhs, rhs % 32)
		end

		function shr.i32(lhs, rhs)
			return bit_arshift(lhs, rhs % 32)
		end

		function rotl.i32(lhs, rhs)
			return bit_lrotate(lhs, rhs % 32)
		end

		function rotr.i32(lhs, rhs)
			return bit_rrotate(lhs, rhs % 32)
		end

		shl.i64 = Integer.shift_left
		shr.i64 = Integer.shift_right_signed
		shr.u64 = Integer.shift_right_unsigned
		rotl.i64 = Integer.rotate_left
		rotr.i64 = Integer.rotate_right

		module.shl = shl
		module.shr = shr
		module.rotl = rotl
		module.rotr = rotr
	end

	do
		local wrap = {}
		local truncate = {}
		local saturate = {}
		local extend = {}
		local convert = {}
		local demote = {}
		local promote = {}
		local reinterpret = {}

		local math_ceil = math.ceil
		local math_floor = math.floor
		local math_clamp = math.clamp

		local NUM_ZERO = Integer.ZERO
		local NUM_MIN_I64 = num_from_u32(0, 0x80000000)
		local NUM_MAX_I64 = num_from_u32(0xFFFFFFFF, 0x7FFFFFFF)
		local NUM_MAX_U64 = num_from_u32(0xFFFFFFFF, 0xFFFFFFFF)

		local num_from_u64 = Integer.from_u64
		local num_into_u64 = Integer.into_u64

		local num_negate = Integer.negate
		local num_is_negative = Integer.is_negative

		local function truncate_f64(num)
			if num >= 0 then
				return math_floor(num)
			else
				return math_ceil(num)
			end
		end

		function wrap.i32_i64(num)
			local data_1, _ = num_into_u32(num)

			return data_1
		end

		function truncate.i32_f32(num)
			return bit_or(truncate_f64(num), 0)
		end

		truncate.i32_f64 = truncate.i32_f32

		truncate.u32_f32 = truncate_f64
		truncate.u32_f64 = truncate_f64

		function truncate.i64_f32(num)
			if num < 0 then
				local temp = num_from_u64(-num)

				return num_negate(temp)
			else
				return num_from_u64(num)
			end
		end

		truncate.i64_f64 = truncate.i64_f32

		function truncate.u64_f32(num)
			if num <= 0 then
				return NUM_ZERO
			else
				return num_from_u64(math_floor(num))
			end
		end

		truncate.u64_f64 = truncate.u64_f32

		truncate.f32 = truncate_f64
		truncate.f64 = truncate_f64

		function saturate.i32_f32(num)
			local temp = math_clamp(truncate_f64(num), -0x80000000, 0x7FFFFFFF)

			return bit_or(temp, 0)
		end

		saturate.i32_f64 = saturate.i32_f32

		function saturate.u32_f32(num)
			local temp = math_clamp(truncate_f64(num), 0, 0xFFFFFFFF)

			return temp
		end

		saturate.u32_f64 = saturate.u32_f32

		local truncate_i64_f64 = truncate.i64_f64

		function saturate.i64_f32(num)
			if num >= 2 ^ 63 - 1 then
				return NUM_MAX_I64
			elseif num <= -2 ^ 63 then
				return NUM_MIN_I64
			else
				return truncate_i64_f64(num)
			end
		end

		saturate.i64_f64 = saturate.i64_f32

		function saturate.u64_f32(num)
			if num >= 2 ^ 64 then
				return NUM_MAX_U64
			elseif num <= 0 then
				return NUM_ZERO
			else
				return truncate_i64_f64(num)
			end
		end

		saturate.u64_f64 = saturate.u64_f32

		function extend.i32_n8(num)
			num = bit_and(num, 0xFF)

			if num >= 0x80 then
				return bit_or(num - 0x100, 0)
			else
				return num
			end
		end

		function extend.i32_n16(num)
			num = bit_and(num, 0xFFFF)

			if num >= 0x8000 then
				return bit_or(num - 0x10000, 0)
			else
				return num
			end
		end

		function extend.i64_n8(num)
			local data_1, _ = num_into_u32(num)

			data_1 = bit_and(data_1, 0xFF)

			if data_1 >= 0x80 then
				local temp = num_from_u32(-data_1 + 0x100, 0)

				return num_negate(temp)
			else
				return num_from_u32(data_1, 0)
			end
		end

		function extend.i64_n16(num)
			local data_1, _ = num_into_u32(num)

			data_1 = bit_and(data_1, 0xFFFF)

			if data_1 >= 0x8000 then
				local temp = num_from_u32(-data_1 + 0x10000, 0)

				return num_negate(temp)
			else
				return num_from_u32(data_1, 0)
			end
		end

		function extend.i64_n32(num)
			local data_1, _ = num_into_u32(num)

			if data_1 >= 0x80000000 then
				local temp = num_from_u32(-data_1 + 0x100000000, 0)

				return num_negate(temp)
			else
				return num_from_u32(data_1, 0)
			end
		end

		function extend.i64_i32(num)
			if num >= 0x80000000 then
				local temp = num_from_u32(-num + 0x100000000, 0)

				return num_negate(temp)
			else
				return num_from_u32(num, 0)
			end
		end

		function extend.i64_u32(num)
			return num_from_u32(num, 0)
		end

		convert.f32_i32 = to_i32
		convert.f32_u32 = no_op

		function convert.f32_i64(num)
			if num_is_negative(num) then
				local temp = num_negate(num)

				return -num_into_u64(temp)
			else
				return num_into_u64(num)
			end
		end

		convert.f32_u64 = num_into_u64
		convert.f64_i32 = to_i32
		convert.f64_u32 = no_op
		convert.f64_i64 = convert.f32_i64
		convert.f64_u64 = num_into_u64

		demote.f32_f64 = no_op

		promote.f64_f32 = no_op

		local RE_INSTANCE = buffer.create(8)

		local buffer_read_f32 = buffer.readf32
		local buffer_read_f64 = buffer.readf64
		local buffer_read_u32 = buffer.readu32

		local buffer_write_f32 = buffer.writef32
		local buffer_write_f64 = buffer.writef64
		local buffer_write_u32 = buffer.writeu32

		function reinterpret.i32_f32(num)
			buffer_write_f32(RE_INSTANCE, 0, num)

			return buffer_read_u32(RE_INSTANCE, 0)
		end

		function reinterpret.i64_f64(num)
			buffer_write_f64(RE_INSTANCE, 0, num)

			local data_1 = buffer_read_u32(RE_INSTANCE, 0)
			local data_2 = buffer_read_u32(RE_INSTANCE, 4)

			return num_from_u32(data_1, data_2)
		end

		function reinterpret.f32_i32(num)
			buffer_write_u32(RE_INSTANCE, 0, num)

			return buffer_read_f32(RE_INSTANCE, 0)
		end

		function reinterpret.f64_i64(num)
			local data_1, data_2 = num_into_u32(num)

			buffer_write_u32(RE_INSTANCE, 0, data_1)
			buffer_write_u32(RE_INSTANCE, 4, data_2)

			return buffer_read_f64(RE_INSTANCE, 0)
		end

		module.wrap = wrap
		module.truncate = truncate
		module.saturate = saturate
		module.extend = extend
		module.convert = convert
		module.demote = demote
		module.promote = promote
		module.reinterpret = reinterpret
	end

	do
		local load = {}
		local store = {}
		local allocator = {}

		local string_sub = string.sub

		local buffer_create = buffer.create
		local buffer_to_string = buffer.tostring
		local buffer_from_string = buffer.fromstring

		local buffer_len = buffer.len
		local buffer_copy = buffer.copy
		local buffer_fill = buffer.fill

		local buffer_read_i8 = buffer.readi8
		local buffer_read_u8 = buffer.readu8
		local buffer_read_i16 = buffer.readi16
		local buffer_read_u16 = buffer.readu16
		local buffer_read_i32 = buffer.readi32
		local buffer_read_u32 = buffer.readu32
		local buffer_read_f32 = buffer.readf32
		local buffer_read_f64 = buffer.readf64

		local buffer_write_u8 = buffer.writeu8
		local buffer_write_u16 = buffer.writeu16
		local buffer_write_u32 = buffer.writeu32
		local buffer_write_f32 = buffer.writef32
		local buffer_write_f64 = buffer.writef64

		function load.i32_i8(memory, addr)
			return bit_or(buffer_read_i8(memory.data, addr), 0)
		end

		function load.i32_u8(memory, addr)
			return buffer_read_u8(memory.data, addr)
		end

		function load.i32_i16(memory, addr)
			return bit_or(buffer_read_i16(memory.data, addr), 0)
		end

		function load.i32_u16(memory, addr)
			return buffer_read_u16(memory.data, addr)
		end

		function load.i32(memory, addr)
			return buffer_read_u32(memory.data, addr)
		end

		function load.i64_i8(memory, addr)
			local value = buffer_read_i8(memory.data, addr)

			if value >= 0 then
				return num_from_u32(value, 0)
			else
				return num_from_u32(value + 0x100000000, 0xFFFFFFFF)
			end
		end

		function load.i64_u8(memory, addr)
			return num_from_u32(buffer_read_u8(memory.data, addr), 0)
		end

		function load.i64_i16(memory, addr)
			local value = buffer_read_i16(memory.data, addr)

			if value >= 0 then
				return num_from_u32(value, 0)
			else
				return num_from_u32(value + 0x100000000, 0xFFFFFFFF)
			end
		end

		function load.i64_u16(memory, addr)
			return num_from_u32(buffer_read_u16(memory.data, addr), 0)
		end

		function load.i64_i32(memory, addr)
			local value = buffer_read_i32(memory.data, addr)

			if value >= 0 then
				return num_from_u32(value, 0)
			else
				return num_from_u32(value + 0x100000000, 0xFFFFFFFF)
			end
		end

		function load.i64_u32(memory, addr)
			return num_from_u32(buffer_read_u32(memory.data, addr), 0)
		end

		function load.i64(memory, addr)
			local data = memory.data
			local value_1 = buffer_read_u32(data, addr)
			local value_2 = buffer_read_u32(data, addr + 4)

			return num_from_u32(value_1, value_2)
		end

		function load.f32(memory, addr)
			return buffer_read_f32(memory.data, addr)
		end

		function load.f64(memory, addr)
			return buffer_read_f64(memory.data, addr)
		end

		function load.string(memory, addr, len)
			local temp = buffer_create(len)

			buffer_copy(temp, 0, memory.data, addr, len)

			return buffer_to_string(temp)
		end

		function store.i32_n8(memory, addr, value)
			buffer_write_u8(memory.data, addr, value)
		end

		function store.i32_n16(memory, addr, value)
			buffer_write_u16(memory.data, addr, value)
		end

		function store.i32(memory, addr, value)
			buffer_write_u32(memory.data, addr, value)
		end

		function store.i64_n8(memory, addr, value)
			local value_1, _ = num_into_u32(value)

			buffer_write_u8(memory.data, addr, value_1)
		end

		function store.i64_n16(memory, addr, value)
			local value_1, _ = num_into_u32(value)

			buffer_write_u16(memory.data, addr, value_1)
		end

		function store.i64_n32(memory, addr, value)
			local value_1, _ = num_into_u32(value)

			buffer_write_u32(memory.data, addr, value_1)
		end

		function store.i64(memory, addr, value)
			local data = memory.data
			local value_1, value_2 = num_into_u32(value)

			buffer_write_u32(data, addr, value_1)
			buffer_write_u32(data, addr + 4, value_2)
		end

		function store.f32(memory, addr, value)
			buffer_write_f32(memory.data, addr, value)
		end

		function store.f64(memory, addr, value)
			buffer_write_f64(memory.data, addr, value)
		end

		function store.string(memory, addr, data, len)
			local content = if not len or len == #data then data else string_sub(data, 1, len)
			local temp = buffer_from_string(content)

			buffer_copy(memory.data, addr, temp)
		end

		function store.copy(memory_1, addr_1, memory_2, addr_2, len)
			buffer_copy(memory_1.data, addr_1, memory_2.data, addr_2, len)
		end

		function store.fill(memory, addr, len, value)
			buffer_fill(memory.data, addr, value, len)
		end

		local WASM_PAGE_SIZE = 65536

		function allocator.new(min, max)
			return { max = max, data = buffer_create(min * WASM_PAGE_SIZE) }
		end

		function allocator.size(memory)
			return buffer_len(memory.data) / WASM_PAGE_SIZE
		end

		function allocator.grow(memory, num)
			local old = allocator.size(memory)
			local new = old + num

			if new <= memory.max then
				local reallocated = buffer_create(new * WASM_PAGE_SIZE)

				buffer_copy(reallocated, 0, memory.data)

				memory.data = reallocated

				return old
			else
				return 0xFFFFFFFF
			end
		end

		module.load = load
		module.store = store
		module.allocator = allocator
	end

	return module

end)()
local abs_f64 = math.abs
local add_i32 = rt.add.i32
local add_i64 = rt.add.i64
local band_i32 = bit32.band
local band_i64 = rt.band.i64
local bor_i32 = bit32.bor
local bor_i64 = rt.bor.i64
local bxor_i32 = bit32.bxor
local bxor_i64 = rt.bxor.i64
local ceil_f64 = math.ceil
local clz_i32 = bit32.countlz
local clz_i64 = rt.clz.i64
local convert_f32_i32 = rt.convert.f32_i32
local convert_f64_i32 = rt.convert.f64_i32
local convert_f64_u32 = rt.convert.f64_u32
local convert_f64_u64 = rt.convert.f64_u64
local copysign_f64 = rt.copysign.f64
local ctz_i32 = bit32.countrz
local demote_f32_f64 = rt.demote.f32_f64
local div_i32 = rt.div.i32
local div_u32 = rt.div.u32
local div_u64 = rt.div.u64
local eq_i64 = rt.eq.i64
local extend_i32_n16 = rt.extend.i32_n16
local extend_i32_n8 = rt.extend.i32_n8
local extend_i64_i32 = rt.extend.i64_i32
local extend_i64_u32 = rt.extend.i64_u32
local floor_f64 = math.floor
local ge_i32 = rt.ge.i32
local ge_i64 = rt.ge.i64
local ge_u64 = rt.ge.u64
local gt_i32 = rt.gt.i32
local gt_i64 = rt.gt.i64
local gt_u64 = rt.gt.u64
local i64_ONE = rt.i64.ONE
local i64_ZERO = rt.i64.ZERO
local i64_from_u32 = rt.i64.from_u32
local le_i32 = rt.le.i32
local le_i64 = rt.le.i64
local le_u64 = rt.le.u64
local load_f32 = rt.load.f32
local load_f64 = rt.load.f64
local load_i32 = rt.load.i32
local load_i32_i8 = rt.load.i32_i8
local load_i32_u16 = rt.load.i32_u16
local load_i32_u8 = rt.load.i32_u8
local load_i64 = rt.load.i64
local load_i64_i16 = rt.load.i64_i16
local load_i64_i32 = rt.load.i64_i32
local load_i64_i8 = rt.load.i64_i8
local load_i64_u16 = rt.load.i64_u16
local load_i64_u32 = rt.load.i64_u32
local load_i64_u8 = rt.load.i64_u8
local lt_i32 = rt.lt.i32
local lt_i64 = rt.lt.i64
local lt_u64 = rt.lt.u64
local mul_i32 = rt.mul.i32
local mul_i64 = rt.mul.i64
local ne_i64 = rt.ne.i64
local neg_f64 = rt.neg.f64
local reinterpret_f64_i64 = rt.reinterpret.f64_i64
local reinterpret_i32_f32 = rt.reinterpret.i32_f32
local reinterpret_i64_f64 = rt.reinterpret.i64_f64
local rem_i32 = rt.rem.i32
local rotl_i32 = rt.rotl.i32
local rotl_i64 = rt.rotl.i64
local rotr_i32 = rt.rotr.i32
local shl_i32 = rt.shl.i32
local shl_i64 = rt.shl.i64
local shr_i32 = rt.shr.i32
local shr_i64 = rt.shr.i64
local shr_u32 = rt.shr.u32
local shr_u64 = rt.shr.u64
local sqrt_f64 = math.sqrt
local store_f32 = rt.store.f32
local store_f64 = rt.store.f64
local store_i32 = rt.store.i32
local store_i32_n16 = rt.store.i32_n16
local store_i32_n8 = rt.store.i32_n8
local store_i64 = rt.store.i64
local store_i64_n32 = rt.store.i64_n32
local store_i64_n8 = rt.store.i64_n8
local sub_i32 = rt.sub.i32
local sub_i64 = rt.sub.i64
local truncate_i32_f64 = rt.truncate.i32_f64
local truncate_i64_f64 = rt.truncate.i64_f64
local truncate_u32_f64 = rt.truncate.u32_f64
local truncate_u64_f64 = rt.truncate.u64_f64
local wrap_i32_i64 = rt.wrap.i32_i64
local memory_at_0
local FUNC_LIST = table.create(719)
local TABLE_LIST = table.create(0)
local MEMORY_LIST = table.create(0)
local GLOBAL_LIST = table.create(0)
FUNC_LIST[4] = --[[ Luau::Compile::assignMutable(Luau::DenseHashMap<Luau::AstName, Luau::Compile::Global, std::__2::hash<Luau::AstName>, std::__2::equal_to<Luau::AstName>>&, Luau::AstNameTable const&, char const* const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		reg_1 = FUNC_LIST[367](loc_1, 5812)
		loc_3 = reg_1
		store_i32(memory_at_0, loc_4 + 12, loc_3)
		if loc_3 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[5](loc_0, add_i32(loc_4, 12))
				store_i32(memory_at_0, reg_0, 1)
				break
			end
		end
		while true do
			if loc_2 == 0 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_2)
			if loc_3 == 0 then
				break
			end
			while true do
				reg_1 = FUNC_LIST[367](loc_1, loc_3)
				loc_3 = reg_1
				store_i32(memory_at_0, loc_4 + 8, loc_3)
				if loc_3 ~= 0 then
					while true do
						reg_0 = FUNC_LIST[5](loc_0, add_i32(loc_4, 8))
						store_i32(memory_at_0, reg_0, 1)
						break
					end
				end
				loc_3 = load_i32(memory_at_0, loc_2 + 4)
				loc_2 = add_i32(loc_2, 4)
				if loc_3 ~= 0 then
					continue
				end
				break
			end
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[5] = --[[ Luau::DenseHashMap<Luau::AstName, Luau::Compile::Global, std::__2::hash<Luau::AstName>, std::__2::equal_to<Luau::AstName>>::operator[](Luau::AstName const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			loc_6 = load_i32(memory_at_0, loc_0 + 4)
			if loc_3 < shr_u32(mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_3 == 0 then
					break
				end
				loc_4 = load_i32(memory_at_0, loc_1)
				loc_8 = load_i32(memory_at_0, loc_0 + 12)
				if loc_4 == loc_8 then
					break
				end
				loc_2 = bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9))
				loc_7 = sub_i32(loc_6, 1)
				loc_9 = load_i32(memory_at_0, loc_0)
				loc_3 = 0
				while true do
					loc_5 = band_i32(loc_2, loc_7)
					loc_2 = load_i32(memory_at_0, add_i32(shl_i32(loc_5, 3), loc_9))
					if loc_4 == loc_2 then
						desired = 1
						break
					end
					if loc_2 == loc_8 then
						desired = 2
						break
					end
					loc_3 = add_i32(loc_3, 1)
					loc_2 = add_i32(loc_5, loc_3)
					if loc_3 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[6](loc_0)
			loc_6 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_8 = load_i32(memory_at_0, loc_0)
				loc_6 = sub_i32(loc_6, 1)
				loc_5 = load_i32(memory_at_0, loc_1)
				loc_3 = band_i32(loc_6, bxor_i32(shr_u32(loc_5, 4), shr_u32(loc_5, 9)))
				loc_4 = add_i32(loc_8, shl_i32(loc_3, 3))
				loc_2 = load_i32(memory_at_0, loc_4)
				loc_9 = load_i32(memory_at_0, loc_0 + 12)
				if loc_2 == loc_9 then
					break
				end
				if loc_2 == loc_5 then
					desired = 1
					break
				end
				loc_2 = 0
				while true do
					loc_2 = add_i32(loc_2, 1)
					loc_3 = band_i32(loc_6, add_i32(loc_3, loc_2))
					loc_4 = add_i32(shl_i32(loc_3, 3), loc_8)
					loc_7 = load_i32(memory_at_0, loc_4)
					if loc_9 == loc_7 then
						desired = 2
						break
					end
					if loc_5 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_4, loc_5)
			store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = add_i32(loc_4, 4)
		break
	end
	return reg_0
end
FUNC_LIST[6] = --[[ Luau::detail::DenseHashTable<Luau::AstName, std::__2::pair<Luau::AstName, Luau::Compile::Global>, std::__2::pair<Luau::AstName const, Luau::Compile::Global>, Luau::detail::ItemInterfaceMap<Luau::AstName, Luau::Compile::Global>, std::__2::hash<Luau::AstName>, std::__2::equal_to<Luau::AstName>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		loc_11 = load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_10 = load_i32(memory_at_0, loc_0 + 4)
			loc_6 = (if loc_10 ~= 0 then shl_i32(loc_10, 1) else 16)
			if loc_6 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = band_i32(loc_6, 2)
			reg_0 = FUNC_LIST[606](shl_i32(loc_6, 3))
			loc_7 = reg_0
			loc_3 = load_i32(memory_at_0, loc_0 + 12)
			if loc_6 >= 4 then
				while true do
					loc_9 = band_i32(loc_6, 4294967292)
					while true do
						loc_1 = add_i32(shl_i32(loc_2, 3), loc_7)
						store_i32(memory_at_0, loc_1 + 4, 0)
						store_i32(memory_at_0, loc_1, loc_3)
						store_i32(memory_at_0, loc_1 + 8, loc_3)
						store_i32(memory_at_0, loc_1 + 12, 0)
						store_i32(memory_at_0, loc_1 + 20, 0)
						store_i32(memory_at_0, loc_1 + 16, loc_3)
						store_i32(memory_at_0, loc_1 + 28, 0)
						store_i32(memory_at_0, loc_1 + 24, loc_3)
						loc_2 = add_i32(loc_2, 4)
						loc_5 = add_i32(loc_5, 4)
						if loc_9 ~= loc_5 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 ~= 0 then
				while true do
					while true do
						loc_1 = add_i32(shl_i32(loc_2, 3), loc_7)
						store_i32(memory_at_0, loc_1 + 4, 0)
						store_i32(memory_at_0, loc_1, loc_3)
						loc_2 = add_i32(loc_2, 1)
						loc_4 = add_i32(loc_4, 1)
						if loc_8 ~= loc_4 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_10 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		if loc_10 ~= 0 then
			while true do
				loc_8 = sub_i32(loc_6, 1)
				loc_9 = 0
				while true do
					loc_12 = add_i32(load_i32(memory_at_0, loc_0), shl_i32(loc_9, 3))
					loc_4 = load_i32(memory_at_0, loc_12)
					if loc_4 ~= load_i32(memory_at_0, loc_0 + 12) then
						while true do
							while true do
								while true do
									loc_1 = band_i32(loc_8, bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9)))
									loc_5 = add_i32(shl_i32(loc_1, 3), loc_7)
									loc_3 = load_i32(memory_at_0, loc_5)
									if loc_11 == loc_3 then
										break
									end
									loc_2 = 0
									if loc_3 == loc_4 then
										desired = 4
										break
									end
									while true do
										loc_2 = add_i32(loc_2, 1)
										loc_1 = band_i32(loc_8, add_i32(loc_1, loc_2))
										loc_5 = add_i32(shl_i32(loc_1, 3), loc_7)
										loc_3 = load_i32(memory_at_0, loc_5)
										if loc_11 == loc_3 then
											desired = 5
											break
										end
										if loc_3 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
								store_i32(memory_at_0, loc_5, loc_4)
								break
							end
							if desired then
								break
							end
							store_i32(memory_at_0, loc_5, loc_4)
							store_i32(memory_at_0, loc_5 + 4, load_i32(memory_at_0, loc_12 + 4))
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_9 = add_i32(loc_9, 1)
					if loc_10 ~= loc_9 then
						continue
					end
					break
				end
				break
			end
		end
		store_i32(memory_at_0, loc_0 + 4, loc_6)
		loc_1 = load_i32(memory_at_0, loc_0)
		store_i32(memory_at_0, loc_0, loc_7)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[7] = --[[ Luau::Compile::trackValues(Luau::DenseHashMap<Luau::AstName, Luau::Compile::Global, std::__2::hash<Luau::AstName>, std::__2::equal_to<Luau::AstName>>&, Luau::DenseHashMap<Luau::AstLocal*, Luau::Compile::Variable, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>&, Luau::AstNode*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, loc_3 + 12, loc_1)
		store_i32(memory_at_0, loc_3 + 8, loc_0)
		store_i32(memory_at_0, loc_3 + 4, 7776)
		TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, add_i32(loc_3, 4))
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[8] = --[[ Luau::Compile::ValueVisitor::~ValueVisitor() ]] function(loc_0)
	while true do
		FUNC_LIST[609](loc_0)
		break
	end
end
FUNC_LIST[9] = --[[ Luau::Compile::ValueVisitor::visit(Luau::AstStatLocal*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = load_i32(memory_at_0, loc_1 + 32)
			if loc_3 == 0 then
				break
			end
			while true do
				if load_i32(memory_at_0, loc_1 + 40) == 0 then
					break
				end
				while true do
					loc_3 = shl_i32(loc_2, 2)
					loc_4 = load_i32(memory_at_0, add_i32(loc_3, load_i32(memory_at_0, loc_1 + 36)))
					reg_0 = FUNC_LIST[10](load_i32(memory_at_0, loc_0 + 8), add_i32(loc_3, load_i32(memory_at_0, loc_1 + 28)))
					store_i32(memory_at_0, reg_0, loc_4)
					loc_2 = add_i32(loc_2, 1)
					loc_3 = load_i32(memory_at_0, loc_1 + 32)
					if loc_2 >= loc_3 then
						desired = 2
						break
					end
					if load_i32(memory_at_0, loc_1 + 40) > loc_2 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = load_i32(memory_at_0, loc_1 + 40)
			if loc_3 <= loc_2 then
				break
			end
			while true do
				reg_0 = FUNC_LIST[10](load_i32(memory_at_0, loc_0 + 8), add_i32(load_i32(memory_at_0, loc_1 + 28), shl_i32(loc_2, 2)))
				store_i32(memory_at_0, reg_0, 0)
				loc_2 = add_i32(loc_2, 1)
				if loc_2 < load_i32(memory_at_0, loc_1 + 32) then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[10] = --[[ Luau::DenseHashMap<Luau::AstLocal*, Luau::Compile::Variable, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>::operator[](Luau::AstLocal* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			loc_6 = load_i32(memory_at_0, loc_0 + 4)
			if loc_3 < shr_u32(mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_3 == 0 then
					break
				end
				loc_4 = load_i32(memory_at_0, loc_1)
				loc_8 = load_i32(memory_at_0, loc_0 + 12)
				if loc_4 == loc_8 then
					break
				end
				loc_2 = bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9))
				loc_7 = sub_i32(loc_6, 1)
				loc_9 = load_i32(memory_at_0, loc_0)
				loc_3 = 0
				while true do
					loc_5 = band_i32(loc_2, loc_7)
					loc_2 = load_i32(memory_at_0, add_i32(mul_i32(loc_5, 12), loc_9))
					if loc_4 == loc_2 then
						desired = 1
						break
					end
					if loc_2 == loc_8 then
						desired = 2
						break
					end
					loc_3 = add_i32(loc_3, 1)
					loc_2 = add_i32(loc_5, loc_3)
					if loc_3 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[15](loc_0)
			loc_6 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_8 = load_i32(memory_at_0, loc_0)
				loc_6 = sub_i32(loc_6, 1)
				loc_5 = load_i32(memory_at_0, loc_1)
				loc_3 = band_i32(loc_6, bxor_i32(shr_u32(loc_5, 4), shr_u32(loc_5, 9)))
				loc_4 = add_i32(loc_8, mul_i32(loc_3, 12))
				loc_2 = load_i32(memory_at_0, loc_4)
				loc_9 = load_i32(memory_at_0, loc_0 + 12)
				if loc_2 == loc_9 then
					break
				end
				if loc_2 == loc_5 then
					desired = 1
					break
				end
				loc_2 = 0
				while true do
					loc_2 = add_i32(loc_2, 1)
					loc_3 = band_i32(loc_6, add_i32(loc_3, loc_2))
					loc_4 = add_i32(mul_i32(loc_3, 12), loc_8)
					loc_7 = load_i32(memory_at_0, loc_4)
					if loc_9 == loc_7 then
						desired = 2
						break
					end
					if loc_5 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_4, loc_5)
			store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = add_i32(loc_4, 4)
		break
	end
	return reg_0
end
FUNC_LIST[11] = --[[ Luau::Compile::ValueVisitor::visit(Luau::AstStatAssign*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		if load_i32(memory_at_0, loc_1 + 32) ~= 0 then
			while true do
				while true do
					loc_2 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 28), shl_i32(loc_3, 2)))
					loc_4 = load_i32(memory_at_0, loc_2 + 4)
					while true do
						while true do
							if loc_2 == 0 then
								break
							end
							if load_i32(memory_at_0, 47220) ~= loc_4 then
								break
							end
							reg_0 = FUNC_LIST[10](load_i32(memory_at_0, loc_0 + 8), add_i32(loc_2, 24))
							store_i32_n8(memory_at_0, reg_0 + 4, 1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if load_i32(memory_at_0, 47228) ~= loc_4 then
								break
							end
							reg_0 = FUNC_LIST[5](load_i32(memory_at_0, loc_0 + 4), add_i32(loc_2, 24))
							store_i32(memory_at_0, reg_0, 2)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_0)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_3 = add_i32(loc_3, 1)
					if loc_3 < load_i32(memory_at_0, loc_1 + 32) then
						continue
					end
					break
				end
				break
			end
		end
		if load_i32(memory_at_0, loc_1 + 40) ~= 0 then
			while true do
				loc_2 = 0
				while true do
					loc_3 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 36), shl_i32(loc_2, 2)))
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_0)
					loc_2 = add_i32(loc_2, 1)
					if loc_2 < load_i32(memory_at_0, loc_1 + 40) then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[12] = --[[ Luau::Compile::ValueVisitor::visit(Luau::AstStatCompoundAssign*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = load_i32(memory_at_0, loc_1 + 32)
		loc_3 = load_i32(memory_at_0, loc_2 + 4)
		while true do
			while true do
				if loc_2 == 0 then
					break
				end
				if load_i32(memory_at_0, 47220) ~= loc_3 then
					break
				end
				reg_0 = FUNC_LIST[10](load_i32(memory_at_0, loc_0 + 8), add_i32(loc_2, 24))
				store_i32_n8(memory_at_0, reg_0 + 4, 1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_2 == 0 then
					break
				end
				if load_i32(memory_at_0, 47228) ~= loc_3 then
					break
				end
				reg_0 = FUNC_LIST[5](load_i32(memory_at_0, loc_0 + 4), add_i32(loc_2, 24))
				store_i32(memory_at_0, reg_0, 2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_0)
			break
		end
		loc_2 = load_i32(memory_at_0, loc_1 + 36)
		TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[13] = --[[ Luau::Compile::ValueVisitor::visit(Luau::AstStatFunction*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = load_i32(memory_at_0, loc_1 + 28)
		loc_3 = load_i32(memory_at_0, loc_2 + 4)
		while true do
			while true do
				if loc_2 == 0 then
					break
				end
				if load_i32(memory_at_0, 47220) ~= loc_3 then
					break
				end
				reg_0 = FUNC_LIST[10](load_i32(memory_at_0, loc_0 + 8), add_i32(loc_2, 24))
				store_i32_n8(memory_at_0, reg_0 + 4, 1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_2 == 0 then
					break
				end
				if load_i32(memory_at_0, 47228) ~= loc_3 then
					break
				end
				reg_0 = FUNC_LIST[5](load_i32(memory_at_0, loc_0 + 4), add_i32(loc_2, 24))
				store_i32(memory_at_0, reg_0, 2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_0)
			break
		end
		loc_2 = load_i32(memory_at_0, loc_1 + 32)
		TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[14] = --[[ Luau::Compile::ValueVisitor::visit(Luau::AstStatLocalFunction*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = load_i32(memory_at_0, loc_1 + 32)
		reg_0 = FUNC_LIST[10](load_i32(memory_at_0, loc_0 + 8), add_i32(loc_1, 28))
		store_i32(memory_at_0, reg_0, loc_2)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[15] = --[[ Luau::detail::DenseHashTable<Luau::AstLocal*, std::__2::pair<Luau::AstLocal*, Luau::Compile::Variable>, std::__2::pair<Luau::AstLocal* const, Luau::Compile::Variable>, Luau::detail::ItemInterfaceMap<Luau::AstLocal*, Luau::Compile::Variable>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_10 = load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_1 = load_i32(memory_at_0, loc_0 + 4)
			loc_6 = (if loc_1 ~= 0 then shl_i32(loc_1, 1) else 16)
			if loc_6 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = band_i32(loc_6, 2)
			reg_0 = FUNC_LIST[606](mul_i32(loc_6, 12))
			loc_4 = reg_0
			loc_5 = load_i32(memory_at_0, loc_0 + 12)
			loc_1 = 0
			if loc_6 >= 4 then
				while true do
					loc_9 = band_i32(loc_6, 4294967292)
					while true do
						loc_2 = add_i32(mul_i32(loc_1, 12), loc_4)
						store_i64(memory_at_0, loc_2 + 4, i64_ZERO)
						store_i32(memory_at_0, loc_2, loc_5)
						loc_2 = add_i32(mul_i32(bor_i32(loc_1, 1), 12), loc_4)
						store_i64(memory_at_0, loc_2 + 4, i64_ZERO)
						store_i32(memory_at_0, loc_2, loc_5)
						loc_2 = add_i32(mul_i32(bor_i32(loc_1, 2), 12), loc_4)
						store_i64(memory_at_0, loc_2 + 4, i64_ZERO)
						store_i32(memory_at_0, loc_2, loc_5)
						loc_2 = add_i32(mul_i32(bor_i32(loc_1, 3), 12), loc_4)
						store_i64(memory_at_0, loc_2 + 4, i64_ZERO)
						store_i32(memory_at_0, loc_2, loc_5)
						loc_1 = add_i32(loc_1, 4)
						loc_3 = add_i32(loc_3, 4)
						if loc_9 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 ~= 0 then
				while true do
					while true do
						loc_3 = add_i32(mul_i32(loc_1, 12), loc_4)
						store_i64(memory_at_0, loc_3 + 4, i64_ZERO)
						store_i32(memory_at_0, loc_3, loc_5)
						loc_1 = add_i32(loc_1, 1)
						loc_7 = add_i32(loc_7, 1)
						if loc_8 ~= loc_7 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		if loc_1 ~= 0 then
			while true do
				loc_8 = sub_i32(loc_6, 1)
				loc_9 = 0
				while true do
					loc_11 = add_i32(load_i32(memory_at_0, loc_0), mul_i32(loc_9, 12))
					loc_3 = load_i32(memory_at_0, loc_11)
					if loc_3 ~= load_i32(memory_at_0, loc_0 + 12) then
						while true do
							while true do
								while true do
									loc_1 = band_i32(loc_8, bxor_i32(shr_u32(loc_3, 4), shr_u32(loc_3, 9)))
									loc_2 = add_i32(mul_i32(loc_1, 12), loc_4)
									loc_7 = load_i32(memory_at_0, loc_2)
									if loc_10 == loc_7 then
										break
									end
									loc_5 = 0
									if loc_3 == loc_7 then
										desired = 4
										break
									end
									while true do
										loc_5 = add_i32(loc_5, 1)
										loc_1 = band_i32(loc_8, add_i32(loc_1, loc_5))
										loc_2 = add_i32(mul_i32(loc_1, 12), loc_4)
										loc_7 = load_i32(memory_at_0, loc_2)
										if loc_10 == loc_7 then
											desired = 5
											break
										end
										if loc_3 ~= loc_7 then
											continue
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
								store_i32(memory_at_0, loc_2, loc_3)
								break
							end
							if desired then
								break
							end
							store_i32(memory_at_0, loc_2, loc_3)
							store_i32_n16(memory_at_0, loc_2 + 8, load_i32_u16(memory_at_0, loc_11 + 8))
							store_i32(memory_at_0, loc_2 + 4, load_i32(memory_at_0, loc_11 + 4))
							reg_0 = load_i32(memory_at_0, loc_0 + 4)
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					else
						while true do
							reg_0 = loc_1
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_1 = reg_0
					loc_9 = add_i32(loc_9, 1)
					if loc_1 > loc_9 then
						continue
					end
					break
				end
				break
			end
		end
		store_i32(memory_at_0, loc_0 + 4, loc_6)
		loc_1 = load_i32(memory_at_0, loc_0)
		store_i32(memory_at_0, loc_0, loc_4)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[16] = --[[ Luau::Compile::getBuiltin(Luau::AstExpr*, Luau::DenseHashMap<Luau::AstName, Luau::Compile::Global, std::__2::hash<Luau::AstName>, std::__2::equal_to<Luau::AstName>> const&, Luau::DenseHashMap<Luau::AstLocal*, Luau::Compile::Variable, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>> const&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local desired
	while true do
		loc_5 = sub_i32(load_i32(memory_at_0, loc_3 + 4), 1)
		loc_9 = load_i32(memory_at_0, loc_3)
		loc_6 = load_i32(memory_at_0, loc_3 + 12)
		loc_11 = load_i32(memory_at_0, loc_3 + 8)
		loc_10 = load_i32(memory_at_0, 47220)
		while true do
			while true do
				while true do
					loc_3 = load_i32(memory_at_0, loc_1 + 4)
					if loc_1 == 0 then
						desired = 2
						break
					end
					if loc_3 ~= loc_10 then
						desired = 2
						break
					end
					while true do
						if loc_11 == 0 then
							break
						end
						loc_4 = load_i32(memory_at_0, loc_1 + 24)
						if loc_6 == loc_4 then
							break
						end
						loc_3 = bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9))
						loc_1 = 0
						while true do
							loc_7 = band_i32(loc_3, loc_5)
							loc_8 = add_i32(mul_i32(loc_7, 12), loc_9)
							loc_3 = load_i32(memory_at_0, loc_8)
							if loc_3 ~= loc_4 then
								while true do
									if loc_3 == loc_6 then
										desired = 4
										break
									end
									loc_1 = add_i32(loc_1, 1)
									loc_3 = add_i32(loc_7, loc_1)
									if loc_1 <= loc_5 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if load_i32_u8(memory_at_0, loc_8 + 8) ~= 0 then
							break
						end
						loc_1 = load_i32(memory_at_0, loc_8 + 4)
						if loc_1 ~= 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_1 == 0 then
					break
				end
				if load_i32(memory_at_0, 47252) ~= loc_3 then
					break
				end
				while true do
					loc_3 = load_i32(memory_at_0, loc_1 + 24)
					if loc_3 == 0 then
						break
					end
					if load_i32(memory_at_0, loc_3 + 4) ~= load_i32(memory_at_0, 47228) then
						break
					end
					loc_6 = load_i32(memory_at_0, loc_3 + 24)
					while true do
						while true do
							if load_i32(memory_at_0, loc_2 + 8) == 0 then
								break
							end
							loc_9 = load_i32(memory_at_0, loc_2 + 12)
							if loc_6 == loc_9 then
								break
							end
							loc_5 = bxor_i32(shr_u32(loc_6, 4), shr_u32(loc_6, 9))
							loc_7 = sub_i32(load_i32(memory_at_0, loc_2 + 4), 1)
							loc_8 = load_i32(memory_at_0, loc_2)
							loc_3 = 0
							while true do
								loc_4 = band_i32(loc_5, loc_7)
								loc_10 = add_i32(shl_i32(loc_4, 3), loc_8)
								loc_5 = load_i32(memory_at_0, loc_10)
								if loc_5 ~= loc_6 then
									while true do
										if loc_5 == loc_9 then
											desired = 5
											break
										end
										loc_3 = add_i32(loc_3, 1)
										loc_5 = add_i32(loc_4, loc_3)
										if loc_3 <= loc_7 then
											desired = 6
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if load_i32(memory_at_0, loc_10 + 4) ~= 0 then
								desired = 4
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32(memory_at_0, loc_0, loc_6)
						store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, loc_1 + 28))
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_1 == 0 then
					break
				end
				if load_i32(memory_at_0, 47228) ~= loc_3 then
					break
				end
				loc_4 = load_i32(memory_at_0, loc_1 + 24)
				while true do
					while true do
						if load_i32(memory_at_0, loc_2 + 8) == 0 then
							break
						end
						loc_6 = load_i32(memory_at_0, loc_2 + 12)
						if loc_4 == loc_6 then
							break
						end
						loc_3 = bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9))
						loc_5 = sub_i32(load_i32(memory_at_0, loc_2 + 4), 1)
						loc_9 = load_i32(memory_at_0, loc_2)
						loc_1 = 0
						while true do
							loc_7 = band_i32(loc_3, loc_5)
							loc_8 = add_i32(shl_i32(loc_7, 3), loc_9)
							loc_3 = load_i32(memory_at_0, loc_8)
							if loc_3 ~= loc_4 then
								while true do
									if loc_3 == loc_6 then
										desired = 4
										break
									end
									loc_1 = add_i32(loc_1, 1)
									loc_3 = add_i32(loc_7, loc_1)
									if loc_1 <= loc_5 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if load_i32(memory_at_0, loc_8 + 4) ~= 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_0 + 4, loc_4)
					store_i32(memory_at_0, loc_0, 0)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_0, i64_ZERO)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, loc_0, i64_ZERO)
		break
	end
end
FUNC_LIST[17] = --[[ Luau::Compile::analyzeBuiltins(Luau::DenseHashMap<Luau::AstExprCall*, int, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprCall*>>&, Luau::DenseHashMap<Luau::AstName, Luau::Compile::Global, std::__2::hash<Luau::AstName>, std::__2::equal_to<Luau::AstName>> const&, Luau::DenseHashMap<Luau::AstLocal*, Luau::Compile::Variable, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>> const&, Luau::CompileOptions const&, Luau::AstNode*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		store_i32(memory_at_0, loc_5 + 28, loc_3)
		store_i32(memory_at_0, loc_5 + 24, loc_2)
		store_i32(memory_at_0, loc_5 + 20, loc_1)
		store_i32(memory_at_0, loc_5 + 16, loc_0)
		store_i32(memory_at_0, loc_5 + 12, 8060)
		TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_4))](loc_4, add_i32(loc_5, 12))
		GLOBAL_LIST[0].value = add_i32(loc_5, 32)
		break
	end
end
FUNC_LIST[18] = --[[ Luau::Compile::getBuiltinInfo(int) ]] function(loc_0, loc_1)
	while true do
		loc_1 = shl_i32(loc_1, 2)
		store_i32(memory_at_0, loc_0 + 8, load_i32(memory_at_0, add_i32(loc_1, 8960)))
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, add_i32(loc_1, 8648)))
		store_i32(memory_at_0, loc_0, load_i32(memory_at_0, add_i32(loc_1, 8336)))
		break
	end
end
FUNC_LIST[19] = --[[ Luau::Compile::BuiltinVisitor::visit(Luau::AstExprCall*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		store_i32(memory_at_0, loc_5 + 12, loc_1)
		while true do
			if load_i32_u8(memory_at_0, loc_1 + 36) ~= 0 then
				while true do
					reg_0 = loc_2
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					FUNC_LIST[16](add_i32(loc_5, 4), load_i32(memory_at_0, loc_1 + 24), load_i32(memory_at_0, loc_0 + 8), load_i32(memory_at_0, loc_0 + 12))
					loc_4 = load_i32(memory_at_0, loc_5 + 4)
					reg_0 = load_i32(memory_at_0, loc_5 + 8)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = reg_0
			if bor_i32(loc_2, loc_4) == 0 then
				break
			end
			loc_6 = load_i32(memory_at_0, loc_0 + 16)
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												if loc_4 == 0 then
													while true do
														if loc_2 == 0 then
															desired = 3
															break
														end
														reg_0 = FUNC_LIST[544](loc_2, 1411)
														if reg_0 == 0 then
															while true do
																loc_3 = 1
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[544](loc_2, 4124)
														if reg_0 == 0 then
															while true do
																loc_3 = 40
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[544](loc_2, 3913)
														if reg_0 == 0 then
															while true do
																loc_3 = 44
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[544](loc_2, 1776)
														if reg_0 == 0 then
															while true do
																loc_3 = 49
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[544](loc_2, 1839)
														if reg_0 == 0 then
															while true do
																loc_3 = 50
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[544](loc_2, 3581)
														if reg_0 == 0 then
															while true do
																loc_3 = 51
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[544](loc_2, 3476)
														if reg_0 == 0 then
															while true do
																loc_3 = 58
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[544](loc_2, 3616)
														if reg_0 == 0 then
															while true do
																loc_3 = 53
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[544](loc_2, 1876)
														if reg_0 == 0 then
															desired = 10
															break
														end
														reg_0 = FUNC_LIST[544](loc_2, 4784)
														if reg_0 == 0 then
															while true do
																loc_3 = 60
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[544](loc_2, 4771)
														if reg_0 == 0 then
															while true do
																loc_3 = 61
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[544](loc_2, 3015)
														if reg_0 == 0 then
															while true do
																loc_3 = 62
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[544](loc_2, 3700)
														if reg_0 ~= 0 then
															desired = 3
															break
														end
														loc_3 = 63
														desired = 2
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												while true do
													while true do
														while true do
															reg_0 = FUNC_LIST[544](loc_4, 3676)
															if reg_0 == 0 then
																while true do
																	if loc_2 == 0 then
																		desired = 3
																		break
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 2426)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 2
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 2127)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 3
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 3462)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 4
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 6577)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 5
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 3488)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 6
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 3576)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 7
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 3681)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 8
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 2128)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 9
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 3909)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 10
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 3054)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 11
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 2845)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 12
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 5000)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 13
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 3046)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 14
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 3052)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 15
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 6696)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 16
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 3696)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 17
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 1121)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 18
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 3467)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 19
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 3936)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 20
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 1177)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 21
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 5257)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 22
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 3686)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 23
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 3463)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 24
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 1399)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 25
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 3691)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 26
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 3489)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 27
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 3157)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 46
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 3471)
																	if reg_0 == 0 then
																		while true do
																			loc_3 = 47
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[544](loc_2, 5005)
																	if reg_0 ~= 0 then
																		desired = 13
																		break
																	end
																	loc_3 = 48
																	desired = 2
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															reg_0 = FUNC_LIST[544](loc_4, 6600)
															if reg_0 ~= 0 then
																desired = 9
																break
															end
															if loc_2 ~= 0 then
																desired = 12
																break
															end
															desired = 9
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														reg_0 = FUNC_LIST[544](loc_4, 6600)
														if reg_0 ~= 0 then
															desired = 11
															break
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													reg_0 = FUNC_LIST[544](loc_2, 1761)
													if reg_0 == 0 then
														while true do
															loc_3 = 28
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[544](loc_2, 5015)
													if reg_0 == 0 then
														while true do
															loc_3 = 29
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[544](loc_2, 1455)
													if reg_0 == 0 then
														while true do
															loc_3 = 30
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[544](loc_2, 2855)
													if reg_0 == 0 then
														while true do
															loc_3 = 31
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[544](loc_2, 2833)
													if reg_0 == 0 then
														while true do
															loc_3 = 32
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[544](loc_2, 1393)
													if reg_0 == 0 then
														while true do
															loc_3 = 33
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[544](loc_2, 1883)
													if reg_0 == 0 then
														while true do
															loc_3 = 34
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[544](loc_2, 3986)
													if reg_0 == 0 then
														while true do
															loc_3 = 35
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[544](loc_2, 1769)
													if reg_0 == 0 then
														while true do
															loc_3 = 36
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[544](loc_2, 4992)
													if reg_0 == 0 then
														while true do
															loc_3 = 37
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[544](loc_2, 3978)
													if reg_0 == 0 then
														while true do
															loc_3 = 38
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[544](loc_2, 1762)
													if reg_0 == 0 then
														while true do
															loc_3 = 39
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[544](loc_2, 1046)
													if reg_0 == 0 then
														while true do
															loc_3 = 55
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[544](loc_2, 1038)
													if reg_0 == 0 then
														while true do
															loc_3 = 56
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[544](loc_2, 3163)
													if reg_0 ~= 0 then
														desired = 9
														break
													end
													loc_3 = 64
													desired = 2
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												reg_0 = FUNC_LIST[544](loc_4, 3843)
												if reg_0 == 0 then
													desired = 8
													break
												end
												desired = 7
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if load_i32(memory_at_0, loc_1 + 32) ~= 2 then
												desired = 1
												break
											end
											loc_3 = 57
											if load_i32(memory_at_0, load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 28) + 4) + 4) ~= load_i32(memory_at_0, 47236) then
												desired = 1
												break
											end
											desired = 2
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										reg_0 = FUNC_LIST[544](loc_4, 3843)
										if reg_0 ~= 0 then
											desired = 7
											break
										end
										if loc_2 == 0 then
											desired = 3
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = FUNC_LIST[544](loc_2, 3967)
									if reg_0 == 0 then
										while true do
											loc_3 = 41
											desired = 2
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									reg_0 = FUNC_LIST[544](loc_2, 3041)
									if reg_0 == 0 then
										while true do
											loc_3 = 42
											desired = 2
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									reg_0 = FUNC_LIST[544](loc_2, 3479)
									if reg_0 == 0 then
										while true do
											loc_3 = 43
											desired = 2
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									reg_0 = FUNC_LIST[544](loc_2, 5790)
									if reg_0 ~= 0 then
										desired = 6
										break
									end
									loc_3 = 45
									desired = 2
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[544](loc_4, 4791)
								if reg_0 ~= 0 then
									desired = 4
									break
								end
								if loc_2 ~= 0 then
									desired = 5
									break
								end
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[544](loc_4, 4791)
							if reg_0 ~= 0 then
								desired = 4
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[544](loc_2, 1418)
						if reg_0 == 0 then
							while true do
								loc_3 = 52
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_0 = FUNC_LIST[544](loc_2, 3616)
						if reg_0 ~= 0 then
							break
						end
						loc_3 = 53
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[544](loc_4, 3008)
					if reg_0 ~= 0 then
						break
					end
					if loc_2 == 0 then
						break
					end
					reg_0 = FUNC_LIST[544](loc_2, 6519)
					if reg_0 == 0 then
						while true do
							loc_3 = 65
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[544](loc_2, 6504)
					if reg_0 == 0 then
						while true do
							loc_3 = 66
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = 67
					reg_0 = FUNC_LIST[544](loc_2, 6511)
					if reg_0 == 0 then
						desired = 2
						break
					end
					reg_0 = FUNC_LIST[544](loc_2, 6496)
					if reg_0 == 0 then
						desired = 2
						break
					end
					reg_0 = FUNC_LIST[544](loc_2, 6552)
					if reg_0 == 0 then
						while true do
							loc_3 = 68
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[544](loc_2, 6535)
					if reg_0 == 0 then
						while true do
							loc_3 = 69
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = 70
					reg_0 = FUNC_LIST[544](loc_2, 6543)
					if reg_0 == 0 then
						desired = 2
						break
					end
					reg_0 = FUNC_LIST[544](loc_2, 6526)
					if reg_0 == 0 then
						desired = 2
						break
					end
					reg_0 = FUNC_LIST[544](loc_2, 6615)
					if reg_0 == 0 then
						while true do
							loc_3 = 71
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[544](loc_2, 6592)
					if reg_0 == 0 then
						while true do
							loc_3 = 72
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = 73
					reg_0 = FUNC_LIST[544](loc_2, 6606)
					if reg_0 == 0 then
						desired = 2
						break
					end
					reg_0 = FUNC_LIST[544](loc_2, 6583)
					if reg_0 == 0 then
						desired = 2
						break
					end
					reg_0 = FUNC_LIST[544](loc_2, 6632)
					if reg_0 == 0 then
						while true do
							loc_3 = 74
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[544](loc_2, 6623)
					if reg_0 == 0 then
						while true do
							loc_3 = 75
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[544](loc_2, 6569)
					if reg_0 == 0 then
						while true do
							loc_3 = 76
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[544](loc_2, 6560)
					if reg_0 ~= 0 then
						break
					end
					loc_3 = 77
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = load_i32(memory_at_0, loc_6 + 16)
				if loc_1 == 0 then
					desired = 1
					break
				end
				loc_6 = load_i32(memory_at_0, loc_6 + 12)
				if loc_6 ~= 0 then
					while true do
						if loc_4 == 0 then
							desired = 1
							break
						end
						reg_0 = FUNC_LIST[544](loc_4, loc_6)
						if reg_0 ~= 0 then
							desired = 1
							break
						end
						if loc_2 == 0 then
							desired = 1
							break
						end
						reg_0 = FUNC_LIST[544](loc_2, loc_1)
						if reg_0 ~= 0 then
							desired = 1
							break
						end
						loc_3 = 54
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_4 ~= 0 then
					desired = 1
					break
				end
				if loc_2 == 0 then
					desired = 1
					break
				end
				reg_0 = FUNC_LIST[544](loc_2, loc_1)
				if reg_0 ~= 0 then
					desired = 1
					break
				end
				loc_3 = 54
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[20](load_i32(memory_at_0, loc_0 + 4), add_i32(loc_5, 12))
			store_i32(memory_at_0, reg_0, loc_3)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_5, 16)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[20] = --[[ Luau::DenseHashMap<Luau::AstExprCall*, int, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprCall*>>::operator[](Luau::AstExprCall* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			loc_6 = load_i32(memory_at_0, loc_0 + 4)
			if loc_3 < shr_u32(mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_3 == 0 then
					break
				end
				loc_4 = load_i32(memory_at_0, loc_1)
				loc_8 = load_i32(memory_at_0, loc_0 + 12)
				if loc_4 == loc_8 then
					break
				end
				loc_2 = bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9))
				loc_7 = sub_i32(loc_6, 1)
				loc_9 = load_i32(memory_at_0, loc_0)
				loc_3 = 0
				while true do
					loc_5 = band_i32(loc_2, loc_7)
					loc_2 = load_i32(memory_at_0, add_i32(shl_i32(loc_5, 3), loc_9))
					if loc_4 == loc_2 then
						desired = 1
						break
					end
					if loc_2 == loc_8 then
						desired = 2
						break
					end
					loc_3 = add_i32(loc_3, 1)
					loc_2 = add_i32(loc_5, loc_3)
					if loc_3 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[21](loc_0)
			loc_6 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_8 = load_i32(memory_at_0, loc_0)
				loc_6 = sub_i32(loc_6, 1)
				loc_5 = load_i32(memory_at_0, loc_1)
				loc_3 = band_i32(loc_6, bxor_i32(shr_u32(loc_5, 4), shr_u32(loc_5, 9)))
				loc_4 = add_i32(loc_8, shl_i32(loc_3, 3))
				loc_2 = load_i32(memory_at_0, loc_4)
				loc_9 = load_i32(memory_at_0, loc_0 + 12)
				if loc_2 == loc_9 then
					break
				end
				if loc_2 == loc_5 then
					desired = 1
					break
				end
				loc_2 = 0
				while true do
					loc_2 = add_i32(loc_2, 1)
					loc_3 = band_i32(loc_6, add_i32(loc_3, loc_2))
					loc_4 = add_i32(shl_i32(loc_3, 3), loc_8)
					loc_7 = load_i32(memory_at_0, loc_4)
					if loc_9 == loc_7 then
						desired = 2
						break
					end
					if loc_5 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_4, loc_5)
			store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = add_i32(loc_4, 4)
		break
	end
	return reg_0
end
FUNC_LIST[21] = --[[ Luau::detail::DenseHashTable<Luau::AstExprCall*, std::__2::pair<Luau::AstExprCall*, int>, std::__2::pair<Luau::AstExprCall* const, int>, Luau::detail::ItemInterfaceMap<Luau::AstExprCall*, int>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprCall*>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local desired
	while true do
		loc_12 = load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_11 = load_i32(memory_at_0, loc_0 + 4)
			loc_6 = (if loc_11 ~= 0 then shl_i32(loc_11, 1) else 16)
			if loc_6 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = band_i32(loc_6, 2)
			reg_0 = FUNC_LIST[606](shl_i32(loc_6, 3))
			loc_7 = reg_0
			loc_3 = load_i32(memory_at_0, loc_0 + 12)
			if loc_6 >= 4 then
				while true do
					loc_9 = band_i32(loc_6, 4294967292)
					while true do
						loc_1 = add_i32(shl_i32(loc_2, 3), loc_7)
						store_i32(memory_at_0, loc_1 + 4, 0)
						store_i32(memory_at_0, loc_1, loc_3)
						store_i32(memory_at_0, loc_1 + 8, loc_3)
						store_i32(memory_at_0, loc_1 + 12, 0)
						store_i32(memory_at_0, loc_1 + 20, 0)
						store_i32(memory_at_0, loc_1 + 16, loc_3)
						store_i32(memory_at_0, loc_1 + 28, 0)
						store_i32(memory_at_0, loc_1 + 24, loc_3)
						loc_2 = add_i32(loc_2, 4)
						loc_5 = add_i32(loc_5, 4)
						if loc_9 ~= loc_5 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 ~= 0 then
				while true do
					while true do
						loc_1 = add_i32(shl_i32(loc_2, 3), loc_7)
						store_i32(memory_at_0, loc_1 + 4, 0)
						store_i32(memory_at_0, loc_1, loc_3)
						loc_2 = add_i32(loc_2, 1)
						loc_4 = add_i32(loc_4, 1)
						if loc_8 ~= loc_4 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_11 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		loc_10 = load_i32(memory_at_0, loc_0)
		if loc_11 ~= 0 then
			while true do
				loc_8 = sub_i32(loc_6, 1)
				loc_9 = 0
				while true do
					loc_13 = add_i32(shl_i32(loc_9, 3), loc_10)
					loc_4 = load_i32(memory_at_0, loc_13)
					if loc_4 ~= load_i32(memory_at_0, loc_0 + 12) then
						while true do
							while true do
								while true do
									loc_1 = band_i32(loc_8, bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9)))
									loc_5 = add_i32(shl_i32(loc_1, 3), loc_7)
									loc_3 = load_i32(memory_at_0, loc_5)
									if loc_12 == loc_3 then
										break
									end
									loc_2 = 0
									if loc_3 == loc_4 then
										desired = 4
										break
									end
									while true do
										loc_2 = add_i32(loc_2, 1)
										loc_1 = band_i32(loc_8, add_i32(loc_1, loc_2))
										loc_5 = add_i32(shl_i32(loc_1, 3), loc_7)
										loc_3 = load_i32(memory_at_0, loc_5)
										if loc_12 == loc_3 then
											desired = 5
											break
										end
										if loc_3 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
								store_i32(memory_at_0, loc_5, loc_4)
								break
							end
							if desired then
								break
							end
							store_i32(memory_at_0, loc_5, loc_4)
							store_i32(memory_at_0, loc_5 + 4, load_i32(memory_at_0, loc_13 + 4))
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_9 = add_i32(loc_9, 1)
					if loc_11 ~= loc_9 then
						continue
					end
					break
				end
				reg_0 = load_i32(memory_at_0, loc_0)
				break
			end
		else
			while true do
				reg_0 = loc_10
				break
			end
		end
		loc_10 = reg_0
		store_i32(memory_at_0, loc_0 + 4, loc_6)
		store_i32(memory_at_0, loc_0, loc_7)
		if loc_10 ~= 0 then
			while true do
				FUNC_LIST[609](loc_10)
				break
			end
		end
		break
	end
end
FUNC_LIST[22] = --[[ Luau::Compile::foldBuiltin(int, Luau::Compile::Constant const*, unsigned long) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									while true do
																										while true do
																											while true do
																												while true do
																													while true do
																														while true do
																															while true do
																																while true do
																																	while true do
																																		while true do
																																			while true do
																																				while true do
																																					while true do
																																						while true do
																																							while true do
																																								while true do
																																									while true do
																																										while true do
																																											while true do
																																												while true do
																																													while true do
																																														while true do
																																															while true do
																																																while true do
																																																	while true do
																																																		while true do
																																																			while true do
																																																				while true do
																																																					while true do
																																																						if not br_map[1] then
																																																							br_map[1] = (function()
																																																								return { [0] = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 44, 12, 13, 14, 15, 16, 44, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 44, 38, 39, 44, 40, 41, 42, 44, 44, 44, 44, 44, 43, }
																																																							end)()
																																																						end
																																																						temp = br_map[1][sub_i32(loc_1, 2)] or 44
																																																						if temp < 22 then
																																																							if temp < 11 then
																																																								if temp < 5 then
																																																									if temp < 2 then
																																																										if temp < 1 then
																																																											break
																																																										else
																																																											desired = 51
																																																											break
																																																										end
																																																									elseif temp > 2 then
																																																										if temp < 4 then
																																																											desired = 49
																																																											break
																																																										else
																																																											desired = 48
																																																											break
																																																										end
																																																									else
																																																										desired = 50
																																																										break
																																																									end
																																																								elseif temp > 5 then
																																																									if temp < 8 then
																																																										if temp < 7 then
																																																											desired = 46
																																																											break
																																																										else
																																																											desired = 45
																																																											break
																																																										end
																																																									elseif temp > 8 then
																																																										if temp < 10 then
																																																											desired = 43
																																																											break
																																																										else
																																																											desired = 42
																																																											break
																																																										end
																																																									else
																																																										desired = 44
																																																										break
																																																									end
																																																								else
																																																									desired = 47
																																																									break
																																																								end
																																																							elseif temp > 11 then
																																																								if temp < 17 then
																																																									if temp < 14 then
																																																										if temp < 13 then
																																																											desired = 40
																																																											break
																																																										else
																																																											desired = 39
																																																											break
																																																										end
																																																									elseif temp > 14 then
																																																										if temp < 16 then
																																																											desired = 37
																																																											break
																																																										else
																																																											desired = 36
																																																											break
																																																										end
																																																									else
																																																										desired = 38
																																																										break
																																																									end
																																																								elseif temp > 17 then
																																																									if temp < 20 then
																																																										if temp < 19 then
																																																											desired = 34
																																																											break
																																																										else
																																																											desired = 33
																																																											break
																																																										end
																																																									elseif temp > 20 then
																																																										desired = 31
																																																										break
																																																									else
																																																										desired = 32
																																																										break
																																																									end
																																																								else
																																																									desired = 35
																																																									break
																																																								end
																																																							else
																																																								desired = 41
																																																								break
																																																							end
																																																						elseif temp > 22 then
																																																							if temp < 34 then
																																																								if temp < 28 then
																																																									if temp < 25 then
																																																										if temp < 24 then
																																																											desired = 29
																																																											break
																																																										else
																																																											desired = 28
																																																											break
																																																										end
																																																									elseif temp > 25 then
																																																										if temp < 27 then
																																																											desired = 26
																																																											break
																																																										else
																																																											desired = 25
																																																											break
																																																										end
																																																									else
																																																										desired = 27
																																																										break
																																																									end
																																																								elseif temp > 28 then
																																																									if temp < 31 then
																																																										if temp < 30 then
																																																											desired = 23
																																																											break
																																																										else
																																																											desired = 22
																																																											break
																																																										end
																																																									elseif temp > 31 then
																																																										if temp < 33 then
																																																											desired = 20
																																																											break
																																																										else
																																																											desired = 19
																																																											break
																																																										end
																																																									else
																																																										desired = 21
																																																										break
																																																									end
																																																								else
																																																									desired = 24
																																																									break
																																																								end
																																																							elseif temp > 34 then
																																																								if temp < 40 then
																																																									if temp < 37 then
																																																										if temp < 36 then
																																																											desired = 17
																																																											break
																																																										else
																																																											desired = 16
																																																											break
																																																										end
																																																									elseif temp > 37 then
																																																										if temp < 39 then
																																																											desired = 14
																																																											break
																																																										else
																																																											desired = 13
																																																											break
																																																										end
																																																									else
																																																										desired = 15
																																																										break
																																																									end
																																																								elseif temp > 40 then
																																																									if temp < 43 then
																																																										if temp < 42 then
																																																											desired = 11
																																																											break
																																																										else
																																																											desired = 10
																																																											break
																																																										end
																																																									elseif temp > 43 then
																																																										desired = 8
																																																										break
																																																									else
																																																										desired = 9
																																																										break
																																																									end
																																																								else
																																																									desired = 12
																																																									break
																																																								end
																																																							else
																																																								desired = 18
																																																								break
																																																							end
																																																						else
																																																							desired = 30
																																																							break
																																																						end
																																																					end
																																																					if desired then
																																																						if desired == 51 then
																																																							desired = nil
																																																						end
																																																						break
																																																					end
																																																					if loc_3 ~= 1 then
																																																						desired = 8
																																																						break
																																																					end
																																																					if load_i32(memory_at_0, loc_2) ~= 3 then
																																																						desired = 8
																																																						break
																																																					end
																																																					loc_4 = load_f64(memory_at_0, loc_2 + 8)
																																																					store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																																																					store_f64(memory_at_0, loc_0 + 8, abs_f64(loc_4))
																																																					desired = 0
																																																					break
																																																				end
																																																				if desired then
																																																					if desired == 50 then
																																																						desired = nil
																																																					end
																																																					break
																																																				end
																																																				if loc_3 ~= 1 then
																																																					desired = 8
																																																					break
																																																				end
																																																				if load_i32(memory_at_0, loc_2) ~= 3 then
																																																					desired = 8
																																																					break
																																																				end
																																																				reg_1 = FUNC_LIST[545](load_f64(memory_at_0, loc_2 + 8))
																																																				store_f64(memory_at_0, loc_0 + 8, reg_1)
																																																				desired = 6
																																																				break
																																																			end
																																																			if desired then
																																																				if desired == 49 then
																																																					desired = nil
																																																				end
																																																				break
																																																			end
																																																			if loc_3 ~= 1 then
																																																				desired = 8
																																																				break
																																																			end
																																																			if load_i32(memory_at_0, loc_2) ~= 3 then
																																																				desired = 8
																																																				break
																																																			end
																																																			reg_1 = FUNC_LIST[548](load_f64(memory_at_0, loc_2 + 8))
																																																			store_f64(memory_at_0, loc_0 + 8, reg_1)
																																																			desired = 6
																																																			break
																																																		end
																																																		if desired then
																																																			if desired == 48 then
																																																				desired = nil
																																																			end
																																																			break
																																																		end
																																																		if loc_3 ~= 2 then
																																																			desired = 8
																																																			break
																																																		end
																																																		if load_i32(memory_at_0, loc_2) ~= 3 then
																																																			desired = 8
																																																			break
																																																		end
																																																		if load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																																																			desired = 8
																																																			break
																																																		end
																																																		reg_1 = FUNC_LIST[551](load_f64(memory_at_0, loc_2 + 8), load_f64(memory_at_0, loc_2 + 32))
																																																		store_f64(memory_at_0, loc_0 + 8, reg_1)
																																																		desired = 6
																																																		break
																																																	end
																																																	if desired then
																																																		if desired == 47 then
																																																			desired = nil
																																																		end
																																																		break
																																																	end
																																																	if loc_3 ~= 1 then
																																																		desired = 8
																																																		break
																																																	end
																																																	if load_i32(memory_at_0, loc_2) ~= 3 then
																																																		desired = 8
																																																		break
																																																	end
																																																	reg_1 = FUNC_LIST[550](load_f64(memory_at_0, loc_2 + 8))
																																																	store_f64(memory_at_0, loc_0 + 8, reg_1)
																																																	desired = 6
																																																	break
																																																end
																																																if desired then
																																																	if desired == 46 then
																																																		desired = nil
																																																	end
																																																	break
																																																end
																																																if loc_3 ~= 1 then
																																																	desired = 8
																																																	break
																																																end
																																																if load_i32(memory_at_0, loc_2) ~= 3 then
																																																	desired = 8
																																																	break
																																																end
																																																loc_4 = load_f64(memory_at_0, loc_2 + 8)
																																																store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																																																store_f64(memory_at_0, loc_0 + 8, ceil_f64(loc_4))
																																																desired = 0
																																																break
																																															end
																																															if desired then
																																																if desired == 45 then
																																																	desired = nil
																																																end
																																																break
																																															end
																																															if loc_3 ~= 1 then
																																																desired = 8
																																																break
																																															end
																																															if load_i32(memory_at_0, loc_2) ~= 3 then
																																																desired = 8
																																																break
																																															end
																																															reg_1 = FUNC_LIST[560](load_f64(memory_at_0, loc_2 + 8))
																																															store_f64(memory_at_0, loc_0 + 8, reg_1)
																																															desired = 6
																																															break
																																														end
																																														if desired then
																																															if desired == 44 then
																																																desired = nil
																																															end
																																															break
																																														end
																																														if loc_3 ~= 1 then
																																															desired = 8
																																															break
																																														end
																																														if load_i32(memory_at_0, loc_2) ~= 3 then
																																															desired = 8
																																															break
																																														end
																																														loc_4 = load_f64(memory_at_0, loc_2 + 8)
																																														store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																																														reg_1 = FUNC_LIST[554](loc_4)
																																														store_f64(memory_at_0, loc_0 + 8, reg_1)
																																														desired = 0
																																														break
																																													end
																																													if desired then
																																														if desired == 43 then
																																															desired = nil
																																														end
																																														break
																																													end
																																													if loc_3 ~= 1 then
																																														desired = 8
																																														break
																																													end
																																													if load_i32(memory_at_0, loc_2) ~= 3 then
																																														desired = 8
																																														break
																																													end
																																													loc_4 = load_f64(memory_at_0, loc_2 + 8)
																																													store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																																													store_f64(memory_at_0, loc_0 + 8, (loc_4 / 1.7453292519943295e-2))
																																													desired = 0
																																													break
																																												end
																																												if desired then
																																													if desired == 42 then
																																														desired = nil
																																													end
																																													break
																																												end
																																												if loc_3 ~= 1 then
																																													desired = 8
																																													break
																																												end
																																												if load_i32(memory_at_0, loc_2) ~= 3 then
																																													desired = 8
																																													break
																																												end
																																												loc_4 = load_f64(memory_at_0, loc_2 + 8)
																																												store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																																												reg_1 = FUNC_LIST[482](loc_4)
																																												store_f64(memory_at_0, loc_0 + 8, reg_1)
																																												desired = 0
																																												break
																																											end
																																											if desired then
																																												if desired == 41 then
																																													desired = nil
																																												end
																																												break
																																											end
																																											if loc_3 ~= 1 then
																																												desired = 8
																																												break
																																											end
																																											if load_i32(memory_at_0, loc_2) ~= 3 then
																																												desired = 8
																																												break
																																											end
																																											loc_4 = load_f64(memory_at_0, loc_2 + 8)
																																											store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																																											store_f64(memory_at_0, loc_0 + 8, floor_f64(loc_4))
																																											desired = 0
																																											break
																																										end
																																										if desired then
																																											if desired == 40 then
																																												desired = nil
																																											end
																																											break
																																										end
																																										if loc_3 ~= 2 then
																																											desired = 8
																																											break
																																										end
																																										if load_i32(memory_at_0, loc_2) ~= 3 then
																																											desired = 8
																																											break
																																										end
																																										if load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																																											desired = 8
																																											break
																																										end
																																										loc_4 = load_f64(memory_at_0, loc_2 + 32)
																																										loc_5 = load_f64(memory_at_0, loc_2 + 8)
																																										store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																																										reg_1 = FUNC_LIST[487](loc_5, loc_4)
																																										store_f64(memory_at_0, loc_0 + 8, reg_1)
																																										desired = 0
																																										break
																																									end
																																									if desired then
																																										if desired == 39 then
																																											desired = nil
																																										end
																																										break
																																									end
																																									if loc_3 ~= 2 then
																																										desired = 8
																																										break
																																									end
																																									if load_i32(memory_at_0, loc_2) ~= 3 then
																																										desired = 8
																																										break
																																									end
																																									if load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																																										desired = 8
																																										break
																																									end
																																									loc_5 = load_f64(memory_at_0, loc_2 + 8)
																																									loc_4 = load_f64(memory_at_0, loc_2 + 32)
																																									store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																																									reg_0 = loc_0
																																									reg_1 = loc_5
																																									while true do
																																										if abs_f64(loc_4) < 2.147483648e9 then
																																											while true do
																																												reg_2 = truncate_i32_f64(loc_4)
																																												desired = 40
																																												break
																																											end
																																											if desired then
																																												if desired == 40 then
																																													desired = nil
																																												end
																																												break
																																											end
																																										end
																																										reg_2 = 2147483648
																																										break
																																									end
																																									if desired then
																																										if desired == 39 then
																																											desired = nil
																																										end
																																										break
																																									end
																																									loc_3 = reg_2
																																									reg_1 = FUNC_LIST[489](reg_1, loc_3)
																																									store_f64(memory_at_0, reg_0 + 8, reg_1)
																																									desired = 0
																																									break
																																								end
																																								if desired then
																																									if desired == 38 then
																																										desired = nil
																																									end
																																									break
																																								end
																																								if loc_3 ~= 1 then
																																									desired = 8
																																									break
																																								end
																																								if load_i32(memory_at_0, loc_2) ~= 3 then
																																									desired = 8
																																									break
																																								end
																																								loc_4 = load_f64(memory_at_0, loc_2 + 8)
																																								store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																																								reg_1 = FUNC_LIST[495](loc_4)
																																								store_f64(memory_at_0, loc_0 + 8, reg_1)
																																								desired = 0
																																								break
																																							end
																																							if desired then
																																								if desired == 37 then
																																									desired = nil
																																								end
																																								break
																																							end
																																							while true do
																																								while true do
																																									if not br_map[2] then
																																										br_map[2] = (function()
																																											return { [0] = 0, 1, }
																																										end)()
																																									end
																																									temp = br_map[2][sub_i32(loc_3, 1)] or 31
																																									if temp < 1 then
																																										break
																																									elseif temp > 1 then
																																										desired = 8
																																										break
																																									else
																																										desired = 38
																																										break
																																									end
																																								end
																																								if desired then
																																									if desired == 38 then
																																										desired = nil
																																									end
																																									break
																																								end
																																								if load_i32(memory_at_0, loc_2) ~= 3 then
																																									desired = 8
																																									break
																																								end
																																								loc_4 = load_f64(memory_at_0, loc_2 + 8)
																																								store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																																								reg_1 = FUNC_LIST[493](loc_4)
																																								store_f64(memory_at_0, loc_0 + 8, reg_1)
																																								desired = 0
																																								break
																																							end
																																							if desired then
																																								if desired == 37 then
																																									desired = nil
																																								end
																																								break
																																							end
																																							if load_i32(memory_at_0, loc_2) ~= 3 then
																																								desired = 8
																																								break
																																							end
																																							if load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																																								desired = 8
																																								break
																																							end
																																							loc_4 = load_f64(memory_at_0, loc_2 + 32)
																																							if loc_4 == 2e0 then
																																								while true do
																																									loc_4 = load_f64(memory_at_0, loc_2 + 8)
																																									store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																																									reg_1 = FUNC_LIST[496](loc_4)
																																									store_f64(memory_at_0, loc_0 + 8, reg_1)
																																									desired = 0
																																									break
																																								end
																																								if desired then
																																									if desired == 37 then
																																										desired = nil
																																									end
																																									break
																																								end
																																							end
																																							loc_5 = load_f64(memory_at_0, loc_2 + 8)
																																							if loc_4 == 1e1 then
																																								while true do
																																									store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																																									reg_1 = FUNC_LIST[495](loc_5)
																																									store_f64(memory_at_0, loc_0 + 8, reg_1)
																																									desired = 0
																																									break
																																								end
																																								if desired then
																																									if desired == 37 then
																																										desired = nil
																																									end
																																									break
																																								end
																																							end
																																							store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																																							reg_1 = FUNC_LIST[493](loc_5)
																																							reg_2 = FUNC_LIST[493](loc_4)
																																							store_f64(memory_at_0, loc_0 + 8, (reg_1 / reg_2))
																																							desired = 0
																																							break
																																						end
																																						if desired then
																																							if desired == 36 then
																																								desired = nil
																																							end
																																							break
																																						end
																																						if loc_3 == 0 then
																																							desired = 8
																																							break
																																						end
																																						if load_i32(memory_at_0, loc_2) ~= 3 then
																																							desired = 8
																																							break
																																						end
																																						loc_1 = 1
																																						loc_4 = load_f64(memory_at_0, loc_2 + 8)
																																						if loc_3 ~= 1 then
																																							while true do
																																								while true do
																																									loc_8 = add_i32(mul_i32(loc_1, 24), loc_2)
																																									if load_i32(memory_at_0, loc_8) ~= 3 then
																																										while true do
																																											desired = 5
																																											break
																																										end
																																										if desired then
																																											if desired == 38 then
																																												desired = nil
																																												continue
																																											end
																																											break
																																										end
																																									end
																																									loc_5 = load_f64(memory_at_0, loc_8 + 8)
																																									loc_4 = (if loc_4 < loc_5 then loc_5 else loc_4)
																																									loc_1 = add_i32(loc_1, 1)
																																									if loc_3 ~= loc_1 then
																																										continue
																																									end
																																									break
																																								end
																																								if desired then
																																									break
																																								end
																																								break
																																							end
																																							if desired then
																																								if desired == 36 then
																																									desired = nil
																																								end
																																								break
																																							end
																																						end
																																						desired = 7
																																						break
																																					end
																																					if desired then
																																						if desired == 35 then
																																							desired = nil
																																						end
																																						break
																																					end
																																					if loc_3 == 0 then
																																						desired = 8
																																						break
																																					end
																																					if load_i32(memory_at_0, loc_2) ~= 3 then
																																						desired = 8
																																						break
																																					end
																																					loc_1 = 1
																																					loc_4 = load_f64(memory_at_0, loc_2 + 8)
																																					if loc_3 ~= 1 then
																																						while true do
																																							while true do
																																								loc_8 = add_i32(mul_i32(loc_1, 24), loc_2)
																																								if load_i32(memory_at_0, loc_8) ~= 3 then
																																									while true do
																																										desired = 5
																																										break
																																									end
																																									if desired then
																																										if desired == 37 then
																																											desired = nil
																																											continue
																																										end
																																										break
																																									end
																																								end
																																								loc_5 = load_f64(memory_at_0, loc_8 + 8)
																																								loc_4 = (if loc_4 > loc_5 then loc_5 else loc_4)
																																								loc_1 = add_i32(loc_1, 1)
																																								if loc_3 ~= loc_1 then
																																									continue
																																								end
																																								break
																																							end
																																							if desired then
																																								break
																																							end
																																							break
																																						end
																																						if desired then
																																							if desired == 35 then
																																								desired = nil
																																							end
																																							break
																																						end
																																					end
																																					desired = 7
																																					break
																																				end
																																				if desired then
																																					if desired == 34 then
																																						desired = nil
																																					end
																																					break
																																				end
																																				if loc_3 ~= 2 then
																																					desired = 8
																																					break
																																				end
																																				if load_i32(memory_at_0, loc_2) ~= 3 then
																																					desired = 8
																																					break
																																				end
																																				if load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																																					desired = 8
																																					break
																																				end
																																				loc_4 = load_f64(memory_at_0, loc_2 + 32)
																																				loc_5 = load_f64(memory_at_0, loc_2 + 8)
																																				store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																																				reg_1 = FUNC_LIST[497](loc_5, loc_4)
																																				store_f64(memory_at_0, loc_0 + 8, reg_1)
																																				desired = 0
																																				break
																																			end
																																			if desired then
																																				if desired == 33 then
																																					desired = nil
																																				end
																																				break
																																			end
																																			if loc_3 ~= 1 then
																																				desired = 8
																																				break
																																			end
																																			if load_i32(memory_at_0, loc_2) ~= 3 then
																																				desired = 8
																																				break
																																			end
																																			loc_4 = load_f64(memory_at_0, loc_2 + 8)
																																			store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																																			store_f64(memory_at_0, loc_0 + 8, (loc_4 * 1.7453292519943295e-2))
																																			desired = 0
																																			break
																																		end
																																		if desired then
																																			if desired == 32 then
																																				desired = nil
																																			end
																																			break
																																		end
																																		if loc_3 ~= 1 then
																																			desired = 8
																																			break
																																		end
																																		if load_i32(memory_at_0, loc_2) ~= 3 then
																																			desired = 8
																																			break
																																		end
																																		reg_1 = FUNC_LIST[567](load_f64(memory_at_0, loc_2 + 8))
																																		store_f64(memory_at_0, loc_0 + 8, reg_1)
																																		desired = 6
																																		break
																																	end
																																	if desired then
																																		if desired == 31 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	if loc_3 ~= 1 then
																																		desired = 8
																																		break
																																	end
																																	if load_i32(memory_at_0, loc_2) ~= 3 then
																																		desired = 8
																																		break
																																	end
																																	loc_4 = load_f64(memory_at_0, loc_2 + 8)
																																	store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																																	reg_1 = FUNC_LIST[566](loc_4)
																																	store_f64(memory_at_0, loc_0 + 8, reg_1)
																																	desired = 0
																																	break
																																end
																																if desired then
																																	if desired == 30 then
																																		desired = nil
																																	end
																																	break
																																end
																																if loc_3 ~= 1 then
																																	desired = 8
																																	break
																																end
																																if load_i32(memory_at_0, loc_2) ~= 3 then
																																	desired = 8
																																	break
																																end
																																loc_4 = load_f64(memory_at_0, loc_2 + 8)
																																store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																																store_f64(memory_at_0, loc_0 + 8, sqrt_f64(loc_4))
																																desired = 0
																																break
																															end
																															if desired then
																																if desired == 29 then
																																	desired = nil
																																end
																																break
																															end
																															if loc_3 ~= 1 then
																																desired = 8
																																break
																															end
																															if load_i32(memory_at_0, loc_2) ~= 3 then
																																desired = 8
																																break
																															end
																															reg_1 = FUNC_LIST[589](load_f64(memory_at_0, loc_2 + 8))
																															store_f64(memory_at_0, loc_0 + 8, reg_1)
																															desired = 6
																															break
																														end
																														if desired then
																															if desired == 28 then
																																desired = nil
																															end
																															break
																														end
																														if loc_3 ~= 1 then
																															desired = 8
																															break
																														end
																														if load_i32(memory_at_0, loc_2) ~= 3 then
																															desired = 8
																															break
																														end
																														reg_1 = FUNC_LIST[587](load_f64(memory_at_0, loc_2 + 8))
																														store_f64(memory_at_0, loc_0 + 8, reg_1)
																														desired = 6
																														break
																													end
																													if desired then
																														if desired == 27 then
																															desired = nil
																														end
																														break
																													end
																													if loc_3 ~= 2 then
																														desired = 8
																														break
																													end
																													if load_i32(memory_at_0, loc_2) ~= 3 then
																														desired = 8
																														break
																													end
																													if load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																														desired = 8
																														break
																													end
																													while true do
																														loc_4 = load_f64(memory_at_0, loc_2 + 32)
																														if abs_f64(loc_4) < 2.147483648e9 then
																															while true do
																																reg_0 = truncate_i32_f64(loc_4)
																																desired = 28
																																break
																															end
																															if desired then
																																if desired == 28 then
																																	desired = nil
																																end
																																break
																															end
																														end
																														reg_0 = 2147483648
																														break
																													end
																													if desired then
																														if desired == 27 then
																															desired = nil
																														end
																														break
																													end
																													loc_3 = reg_0
																													if loc_3 > 31 then
																														desired = 8
																														break
																													end
																													loc_4 = load_f64(memory_at_0, loc_2 + 8)
																													store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																													reg_0 = loc_0
																													while true do
																														if abs_f64(loc_4) < 9.223372036854776e18 then
																															while true do
																																reg_1 = truncate_i64_f64(loc_4)
																																desired = 28
																																break
																															end
																															if desired then
																																if desired == 28 then
																																	desired = nil
																																end
																																break
																															end
																														end
																														reg_1 = i64_from_u32(0, 2147483648)
																														break
																													end
																													if desired then
																														if desired == 27 then
																															desired = nil
																														end
																														break
																													end
																													store_f64(memory_at_0, reg_0 + 8, convert_f64_u32(shr_i32(wrap_i32_i64(reg_1), loc_3)))
																													desired = 0
																													break
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																													end
																													break
																												end
																												if loc_3 == 0 then
																													desired = 8
																													break
																												end
																												if load_i32(memory_at_0, loc_2) ~= 3 then
																													desired = 8
																													break
																												end
																												loc_1 = 1
																												loc_9 = (if loc_3 == 1 then 1 else 0)
																												while true do
																													loc_4 = load_f64(memory_at_0, loc_2 + 8)
																													if abs_f64(loc_4) < 9.223372036854776e18 then
																														while true do
																															reg_0 = truncate_i64_f64(loc_4)
																															desired = 27
																															break
																														end
																														if desired then
																															if desired == 27 then
																																desired = nil
																															end
																															break
																														end
																													end
																													reg_0 = i64_from_u32(0, 2147483648)
																													break
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																													end
																													break
																												end
																												loc_8 = wrap_i32_i64(reg_0)
																												if loc_9 == 0 then
																													while true do
																														while true do
																															loc_9 = add_i32(mul_i32(loc_1, 24), loc_2)
																															if load_i32(memory_at_0, loc_9) ~= 3 then
																																while true do
																																	desired = 5
																																	break
																																end
																																if desired then
																																	if desired == 28 then
																																		desired = nil
																																		continue
																																	end
																																	break
																																end
																															end
																															while true do
																																loc_4 = load_f64(memory_at_0, loc_9 + 8)
																																if abs_f64(loc_4) < 9.223372036854776e18 then
																																	while true do
																																		reg_0 = truncate_i64_f64(loc_4)
																																		desired = 29
																																		break
																																	end
																																	if desired then
																																		if desired == 29 then
																																			desired = nil
																																		end
																																		break
																																	end
																																end
																																reg_0 = i64_from_u32(0, 2147483648)
																																break
																															end
																															if desired then
																																if desired == 28 then
																																	desired = nil
																																	continue
																																end
																																break
																															end
																															loc_8 = band_i32(wrap_i32_i64(reg_0), loc_8)
																															loc_1 = add_i32(loc_1, 1)
																															if loc_3 ~= loc_1 then
																																continue
																															end
																															break
																														end
																														if desired then
																															break
																														end
																														break
																													end
																													if desired then
																														if desired == 26 then
																															desired = nil
																														end
																														break
																													end
																												end
																												desired = 4
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											if loc_3 ~= 1 then
																												desired = 8
																												break
																											end
																											if load_i32(memory_at_0, loc_2) ~= 3 then
																												desired = 8
																												break
																											end
																											loc_4 = load_f64(memory_at_0, loc_2 + 8)
																											store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																											reg_0 = loc_0
																											while true do
																												if abs_f64(loc_4) < 9.223372036854776e18 then
																													while true do
																														reg_1 = truncate_i64_f64(loc_4)
																														desired = 26
																														break
																													end
																													if desired then
																														if desired == 26 then
																															desired = nil
																														end
																														break
																													end
																												end
																												reg_1 = i64_from_u32(0, 2147483648)
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											store_f64(memory_at_0, reg_0 + 8, convert_f64_u32(bxor_i32(wrap_i32_i64(reg_1), 4294967295)))
																											desired = 0
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										if loc_3 == 0 then
																											desired = 8
																											break
																										end
																										if load_i32(memory_at_0, loc_2) ~= 3 then
																											desired = 8
																											break
																										end
																										loc_1 = 1
																										loc_9 = (if loc_3 == 1 then 1 else 0)
																										while true do
																											loc_4 = load_f64(memory_at_0, loc_2 + 8)
																											if abs_f64(loc_4) < 9.223372036854776e18 then
																												while true do
																													reg_0 = truncate_i64_f64(loc_4)
																													desired = 25
																													break
																												end
																												if desired then
																													if desired == 25 then
																														desired = nil
																													end
																													break
																												end
																											end
																											reg_0 = i64_from_u32(0, 2147483648)
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										loc_8 = wrap_i32_i64(reg_0)
																										if loc_9 == 0 then
																											while true do
																												while true do
																													loc_9 = add_i32(mul_i32(loc_1, 24), loc_2)
																													if load_i32(memory_at_0, loc_9) ~= 3 then
																														while true do
																															desired = 5
																															break
																														end
																														if desired then
																															if desired == 26 then
																																desired = nil
																																continue
																															end
																															break
																														end
																													end
																													while true do
																														loc_4 = load_f64(memory_at_0, loc_9 + 8)
																														if abs_f64(loc_4) < 9.223372036854776e18 then
																															while true do
																																reg_0 = truncate_i64_f64(loc_4)
																																desired = 27
																																break
																															end
																															if desired then
																																if desired == 27 then
																																	desired = nil
																																end
																																break
																															end
																														end
																														reg_0 = i64_from_u32(0, 2147483648)
																														break
																													end
																													if desired then
																														if desired == 26 then
																															desired = nil
																															continue
																														end
																														break
																													end
																													loc_8 = bor_i32(wrap_i32_i64(reg_0), loc_8)
																													loc_1 = add_i32(loc_1, 1)
																													if loc_3 ~= loc_1 then
																														continue
																													end
																													break
																												end
																												if desired then
																													break
																												end
																												break
																											end
																											if desired then
																												if desired == 24 then
																													desired = nil
																												end
																												break
																											end
																										end
																										desired = 4
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									if loc_3 == 0 then
																										desired = 8
																										break
																									end
																									if load_i32(memory_at_0, loc_2) ~= 3 then
																										desired = 8
																										break
																									end
																									loc_1 = 1
																									loc_9 = (if loc_3 == 1 then 1 else 0)
																									while true do
																										loc_4 = load_f64(memory_at_0, loc_2 + 8)
																										if abs_f64(loc_4) < 9.223372036854776e18 then
																											while true do
																												reg_0 = truncate_i64_f64(loc_4)
																												desired = 24
																												break
																											end
																											if desired then
																												if desired == 24 then
																													desired = nil
																												end
																												break
																											end
																										end
																										reg_0 = i64_from_u32(0, 2147483648)
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									loc_8 = wrap_i32_i64(reg_0)
																									if loc_9 == 0 then
																										while true do
																											while true do
																												loc_9 = add_i32(mul_i32(loc_1, 24), loc_2)
																												if load_i32(memory_at_0, loc_9) ~= 3 then
																													while true do
																														desired = 5
																														break
																													end
																													if desired then
																														if desired == 25 then
																															desired = nil
																															continue
																														end
																														break
																													end
																												end
																												while true do
																													loc_4 = load_f64(memory_at_0, loc_9 + 8)
																													if abs_f64(loc_4) < 9.223372036854776e18 then
																														while true do
																															reg_0 = truncate_i64_f64(loc_4)
																															desired = 26
																															break
																														end
																														if desired then
																															if desired == 26 then
																																desired = nil
																															end
																															break
																														end
																													end
																													reg_0 = i64_from_u32(0, 2147483648)
																													break
																												end
																												if desired then
																													if desired == 25 then
																														desired = nil
																														continue
																													end
																													break
																												end
																												loc_8 = bxor_i32(wrap_i32_i64(reg_0), loc_8)
																												loc_1 = add_i32(loc_1, 1)
																												if loc_3 ~= loc_1 then
																													continue
																												end
																												break
																											end
																											if desired then
																												break
																											end
																											break
																										end
																										if desired then
																											if desired == 23 then
																												desired = nil
																											end
																											break
																										end
																									end
																									desired = 4
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								if loc_3 == 0 then
																									desired = 8
																									break
																								end
																								if load_i32(memory_at_0, loc_2) ~= 3 then
																									desired = 8
																									break
																								end
																								loc_1 = 1
																								loc_9 = (if loc_3 == 1 then 1 else 0)
																								while true do
																									loc_4 = load_f64(memory_at_0, loc_2 + 8)
																									if abs_f64(loc_4) < 9.223372036854776e18 then
																										while true do
																											reg_0 = truncate_i64_f64(loc_4)
																											desired = 23
																											break
																										end
																										if desired then
																											if desired == 23 then
																												desired = nil
																											end
																											break
																										end
																									end
																									reg_0 = i64_from_u32(0, 2147483648)
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								loc_8 = wrap_i32_i64(reg_0)
																								if loc_9 == 0 then
																									while true do
																										while true do
																											loc_9 = add_i32(mul_i32(loc_1, 24), loc_2)
																											if load_i32(memory_at_0, loc_9) ~= 3 then
																												while true do
																													desired = 5
																													break
																												end
																												if desired then
																													if desired == 24 then
																														desired = nil
																														continue
																													end
																													break
																												end
																											end
																											while true do
																												loc_4 = load_f64(memory_at_0, loc_9 + 8)
																												if abs_f64(loc_4) < 9.223372036854776e18 then
																													while true do
																														reg_0 = truncate_i64_f64(loc_4)
																														desired = 25
																														break
																													end
																													if desired then
																														if desired == 25 then
																															desired = nil
																														end
																														break
																													end
																												end
																												reg_0 = i64_from_u32(0, 2147483648)
																												break
																											end
																											if desired then
																												if desired == 24 then
																													desired = nil
																													continue
																												end
																												break
																											end
																											loc_8 = band_i32(wrap_i32_i64(reg_0), loc_8)
																											loc_1 = add_i32(loc_1, 1)
																											if loc_3 ~= loc_1 then
																												continue
																											end
																											break
																										end
																										if desired then
																											break
																										end
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								end
																								store_i32(memory_at_0, loc_0 + 8, 0)
																								store_i64(memory_at_0, loc_0, i64_from_u32(2, 0))
																								store_i32_n8(memory_at_0, loc_0 + 8, (if loc_8 ~= 0 then 1 else 0))
																								desired = 0
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							if loc_3 < 2 then
																								desired = 8
																								break
																							end
																							if load_i32(memory_at_0, loc_2) ~= 3 then
																								desired = 8
																								break
																							end
																							if load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																								desired = 8
																								break
																							end
																							while true do
																								loc_1 = 1
																								reg_0 = loc_1
																								if loc_3 == 2 then
																									break
																								end
																								if load_i32(memory_at_0, loc_2 + 48) ~= 3 then
																									desired = 8
																									break
																								end
																								loc_4 = load_f64(memory_at_0, loc_2 + 56)
																								if abs_f64(loc_4) < 2.147483648e9 then
																									while true do
																										reg_0 = truncate_i32_f64(loc_4)
																										desired = 22
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								end
																								reg_0 = 2147483648
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							loc_1 = reg_0
																							while true do
																								loc_4 = load_f64(memory_at_0, loc_2 + 32)
																								if abs_f64(loc_4) < 2.147483648e9 then
																									while true do
																										reg_0 = truncate_i32_f64(loc_4)
																										desired = 22
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								end
																								reg_0 = 2147483648
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							loc_3 = reg_0
																							if lt_i32(loc_3, 0) then
																								desired = 8
																								break
																							end
																							if le_i32(loc_1, 0) then
																								desired = 8
																								break
																							end
																							if gt_i32(add_i32(loc_1, loc_3), 32) then
																								desired = 8
																								break
																							end
																							loc_4 = load_f64(memory_at_0, loc_2 + 8)
																							store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																							loc_2 = bxor_i32(shl_i32(4294967294, sub_i32(loc_1, 1)), 4294967295)
																							reg_0 = loc_0
																							reg_1 = loc_2
																							while true do
																								if abs_f64(loc_4) < 9.223372036854776e18 then
																									while true do
																										reg_2 = truncate_i64_f64(loc_4)
																										desired = 22
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								end
																								reg_2 = i64_from_u32(0, 2147483648)
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							store_f64(memory_at_0, reg_0 + 8, convert_f64_u32(band_i32(reg_1, shr_u32(wrap_i32_i64(reg_2), loc_3))))
																							desired = 0
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						if loc_3 ~= 2 then
																							desired = 8
																							break
																						end
																						if load_i32(memory_at_0, loc_2) ~= 3 then
																							desired = 8
																							break
																						end
																						if load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																							desired = 8
																							break
																						end
																						loc_4 = load_f64(memory_at_0, loc_2 + 8)
																						loc_5 = load_f64(memory_at_0, loc_2 + 32)
																						store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																						while true do
																							if abs_f64(loc_5) < 2.147483648e9 then
																								while true do
																									reg_0 = truncate_i32_f64(loc_5)
																									desired = 21
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																							end
																							reg_0 = 2147483648
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						loc_3 = reg_0
																						reg_0 = loc_0
																						while true do
																							if abs_f64(loc_4) < 9.223372036854776e18 then
																								while true do
																									reg_1 = truncate_i64_f64(loc_4)
																									desired = 21
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																							end
																							reg_1 = i64_from_u32(0, 2147483648)
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						store_f64(memory_at_0, reg_0 + 8, convert_f64_u32(rotl_i32(wrap_i32_i64(reg_1), loc_3)))
																						desired = 0
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					if loc_3 ~= 2 then
																						desired = 8
																						break
																					end
																					if load_i32(memory_at_0, loc_2) ~= 3 then
																						desired = 8
																						break
																					end
																					if load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																						desired = 8
																						break
																					end
																					while true do
																						loc_4 = load_f64(memory_at_0, loc_2 + 32)
																						if abs_f64(loc_4) < 2.147483648e9 then
																							while true do
																								reg_0 = truncate_i32_f64(loc_4)
																								desired = 20
																								break
																							end
																							if desired then
																								if desired == 20 then
																									desired = nil
																								end
																								break
																							end
																						end
																						reg_0 = 2147483648
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					loc_3 = reg_0
																					if loc_3 > 31 then
																						desired = 8
																						break
																					end
																					loc_4 = load_f64(memory_at_0, loc_2 + 8)
																					store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																					reg_0 = loc_0
																					while true do
																						if abs_f64(loc_4) < 9.223372036854776e18 then
																							while true do
																								reg_1 = truncate_i64_f64(loc_4)
																								desired = 20
																								break
																							end
																							if desired then
																								if desired == 20 then
																									desired = nil
																								end
																								break
																							end
																						end
																						reg_1 = i64_from_u32(0, 2147483648)
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					store_f64(memory_at_0, reg_0 + 8, convert_f64_u32(shl_i32(wrap_i32_i64(reg_1), loc_3)))
																					desired = 0
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				if loc_3 < 3 then
																					desired = 8
																					break
																				end
																				if load_i32(memory_at_0, loc_2) ~= 3 then
																					desired = 8
																					break
																				end
																				if load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																					desired = 8
																					break
																				end
																				if load_i32(memory_at_0, loc_2 + 48) ~= 3 then
																					desired = 8
																					break
																				end
																				while true do
																					loc_1 = 1
																					reg_0 = loc_1
																					if loc_3 == 3 then
																						break
																					end
																					if load_i32(memory_at_0, loc_2 + 72) ~= 3 then
																						desired = 8
																						break
																					end
																					loc_4 = load_f64(memory_at_0, loc_2 + 80)
																					if abs_f64(loc_4) < 2.147483648e9 then
																						while true do
																							reg_0 = truncate_i32_f64(loc_4)
																							desired = 19
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					reg_0 = 2147483648
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				loc_1 = reg_0
																				while true do
																					loc_4 = load_f64(memory_at_0, loc_2 + 56)
																					if abs_f64(loc_4) < 2.147483648e9 then
																						while true do
																							reg_0 = truncate_i32_f64(loc_4)
																							desired = 19
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					reg_0 = 2147483648
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				loc_3 = reg_0
																				if lt_i32(loc_3, 0) then
																					desired = 8
																					break
																				end
																				if le_i32(loc_1, 0) then
																					desired = 8
																					break
																				end
																				if gt_i32(add_i32(loc_1, loc_3), 32) then
																					desired = 8
																					break
																				end
																				loc_4 = load_f64(memory_at_0, loc_2 + 8)
																				loc_5 = load_f64(memory_at_0, loc_2 + 32)
																				store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																				loc_2 = bxor_i32(shl_i32(4294967294, sub_i32(loc_1, 1)), 4294967295)
																				reg_0 = loc_0
																				reg_1 = loc_2
																				while true do
																					if abs_f64(loc_5) < 9.223372036854776e18 then
																						while true do
																							reg_2 = truncate_i64_f64(loc_5)
																							desired = 19
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					reg_2 = i64_from_u32(0, 2147483648)
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				loc_1 = shl_i32(band_i32(reg_1, wrap_i32_i64(reg_2)), loc_3)
																				loc_3 = bxor_i32(shl_i32(loc_2, loc_3), 4294967295)
																				reg_1 = loc_1
																				reg_2 = loc_3
																				while true do
																					if abs_f64(loc_4) < 9.223372036854776e18 then
																						while true do
																							reg_3 = truncate_i64_f64(loc_4)
																							desired = 19
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					reg_3 = i64_from_u32(0, 2147483648)
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				store_f64(memory_at_0, reg_0 + 8, convert_f64_u32(bor_i32(reg_1, band_i32(reg_2, wrap_i32_i64(reg_3)))))
																				desired = 0
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			if loc_3 ~= 2 then
																				desired = 8
																				break
																			end
																			if load_i32(memory_at_0, loc_2) ~= 3 then
																				desired = 8
																				break
																			end
																			if load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																				desired = 8
																				break
																			end
																			loc_4 = load_f64(memory_at_0, loc_2 + 8)
																			loc_5 = load_f64(memory_at_0, loc_2 + 32)
																			store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																			while true do
																				if abs_f64(loc_5) < 2.147483648e9 then
																					while true do
																						reg_0 = truncate_i32_f64(loc_5)
																						desired = 18
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																				end
																				reg_0 = 2147483648
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			loc_3 = reg_0
																			reg_0 = loc_0
																			while true do
																				if abs_f64(loc_4) < 9.223372036854776e18 then
																					while true do
																						reg_1 = truncate_i64_f64(loc_4)
																						desired = 18
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																				end
																				reg_1 = i64_from_u32(0, 2147483648)
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			store_f64(memory_at_0, reg_0 + 8, convert_f64_u32(rotr_i32(wrap_i32_i64(reg_1), loc_3)))
																			desired = 0
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		if loc_3 ~= 2 then
																			desired = 8
																			break
																		end
																		if load_i32(memory_at_0, loc_2) ~= 3 then
																			desired = 8
																			break
																		end
																		if load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																			desired = 8
																			break
																		end
																		while true do
																			loc_4 = load_f64(memory_at_0, loc_2 + 32)
																			if abs_f64(loc_4) < 2.147483648e9 then
																				while true do
																					reg_0 = truncate_i32_f64(loc_4)
																					desired = 17
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																					end
																					break
																				end
																			end
																			reg_0 = 2147483648
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		loc_3 = reg_0
																		if loc_3 > 31 then
																			desired = 8
																			break
																		end
																		loc_4 = load_f64(memory_at_0, loc_2 + 8)
																		store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
																		reg_0 = loc_0
																		while true do
																			if abs_f64(loc_4) < 9.223372036854776e18 then
																				while true do
																					reg_1 = truncate_i64_f64(loc_4)
																					desired = 17
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																					end
																					break
																				end
																			end
																			reg_1 = i64_from_u32(0, 2147483648)
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		store_f64(memory_at_0, reg_0 + 8, convert_f64_u32(shr_u32(wrap_i32_i64(reg_1), loc_3)))
																		desired = 0
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	if loc_3 ~= 1 then
																		desired = 8
																		break
																	end
																	if load_i32(memory_at_0, loc_2) == 0 then
																		desired = 8
																		break
																	end
																	FUNC_LIST[23](loc_0, loc_2)
																	desired = 0
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																while true do
																	while true do
																		if not br_map[3] then
																			br_map[3] = (function()
																				return { [0] = 0, 1, }
																			end)()
																		end
																		temp = br_map[3][sub_i32(loc_3, 1)] or 8
																		if temp < 1 then
																			break
																		elseif temp > 1 then
																			desired = 8
																			break
																		else
																			desired = 15
																			break
																		end
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	if load_i32(memory_at_0, loc_2) ~= 5 then
																		desired = 8
																		break
																	end
																	if load_i32(memory_at_0, loc_2 + 4) == 0 then
																		desired = 8
																		break
																	end
																	loc_3 = load_i32_u8(memory_at_0, load_i32(memory_at_0, loc_2 + 8))
																	desired = 3
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																if load_i32(memory_at_0, loc_2) ~= 5 then
																	desired = 8
																	break
																end
																if load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																	desired = 8
																	break
																end
																while true do
																	loc_4 = load_f64(memory_at_0, loc_2 + 32)
																	if abs_f64(loc_4) < 2.147483648e9 then
																		while true do
																			reg_0 = truncate_i32_f64(loc_4)
																			desired = 15
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																	end
																	reg_0 = 2147483648
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																loc_3 = reg_0
																if le_i32(loc_3, 0) then
																	desired = 8
																	break
																end
																if loc_3 > load_i32(memory_at_0, loc_2 + 4) then
																	desired = 8
																	break
																end
																loc_3 = load_i32_u8(memory_at_0, sub_i32(add_i32(loc_3, load_i32(memory_at_0, loc_2 + 8)), 1))
																desired = 3
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															if loc_3 ~= 1 then
																desired = 8
																break
															end
															if load_i32(memory_at_0, loc_2) ~= 5 then
																desired = 8
																break
															end
															loc_3 = load_i32(memory_at_0, loc_2 + 4)
															desired = 3
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														if loc_3 ~= 1 then
															desired = 8
															break
														end
														if load_i32(memory_at_0, loc_2) == 0 then
															desired = 8
															break
														end
														FUNC_LIST[23](loc_0, loc_2)
														desired = 0
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													if loc_3 ~= 3 then
														desired = 8
														break
													end
													if load_i32(memory_at_0, loc_2) ~= 3 then
														desired = 8
														break
													end
													if load_i32(memory_at_0, loc_2 + 24) ~= 3 then
														desired = 8
														break
													end
													if load_i32(memory_at_0, loc_2 + 48) ~= 3 then
														desired = 8
														break
													end
													loc_4 = load_f64(memory_at_0, loc_2 + 32)
													loc_5 = load_f64(memory_at_0, loc_2 + 56)
													if (if loc_4 <= loc_5 then 1 else 0) == 0 then
														desired = 8
														break
													end
													loc_6 = load_f64(memory_at_0, loc_2 + 8)
													store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
													loc_4 = (if loc_4 > loc_6 then loc_4 else loc_6)
													store_f64(memory_at_0, loc_0 + 8, (if loc_4 > loc_5 then loc_5 else loc_4))
													desired = 0
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												if loc_3 ~= 1 then
													desired = 8
													break
												end
												if load_i32(memory_at_0, loc_2) ~= 3 then
													desired = 8
													break
												end
												loc_4 = load_f64(memory_at_0, loc_2 + 8)
												store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
												store_f64(memory_at_0, loc_0 + 8, (if loc_4 > 0e0 then 1e0 else (if loc_4 < 0e0 then -1e0 else 0e0)))
												desired = 0
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if loc_3 ~= 1 then
												desired = 8
												break
											end
											if load_i32(memory_at_0, loc_2) ~= 3 then
												desired = 8
												break
											end
											loc_4 = load_f64(memory_at_0, loc_2 + 8)
											store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
											reg_1 = FUNC_LIST[565](loc_4)
											store_f64(memory_at_0, loc_0 + 8, reg_1)
											desired = 0
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if loc_3 < 3 then
											break
										end
										if load_i32(memory_at_0, loc_2) ~= 3 then
											break
										end
										if load_i32(memory_at_0, loc_2 + 24) ~= 3 then
											break
										end
										if load_i32(memory_at_0, loc_2 + 48) ~= 3 then
											break
										end
										while true do
											while true do
												if not br_map[4] then
													br_map[4] = (function()
														return { [0] = 0, 1, }
													end)()
												end
												temp = br_map[4][sub_i32(loc_3, 3)] or 2
												if temp < 1 then
													break
												elseif temp > 1 then
													desired = 8
													break
												else
													desired = 9
													break
												end
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_4 = load_f64(memory_at_0, loc_2 + 8)
											loc_5 = load_f64(memory_at_0, loc_2 + 32)
											loc_6 = load_f64(memory_at_0, loc_2 + 56)
											store_i32(memory_at_0, loc_0 + 20, 0)
											store_i64(memory_at_0, loc_0, i64_from_u32(4, 0))
											desired = 2
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if load_i32(memory_at_0, loc_2 + 72) ~= 3 then
											break
										end
										loc_4 = load_f64(memory_at_0, loc_2 + 8)
										loc_5 = load_f64(memory_at_0, loc_2 + 32)
										loc_6 = load_f64(memory_at_0, loc_2 + 56)
										loc_7 = load_f64(memory_at_0, loc_2 + 80)
										store_i64(memory_at_0, loc_0, i64_from_u32(4, 0))
										store_f32(memory_at_0, loc_0 + 20, demote_f32_f64(loc_7))
										desired = 2
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								store_f64(memory_at_0, loc_0 + 8, loc_4)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
					store_f64(memory_at_0, loc_0 + 8, convert_f64_u32(loc_8))
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
				store_f64(memory_at_0, loc_0 + 8, convert_f64_u32(loc_3))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_f32(memory_at_0, loc_0 + 16, demote_f32_f64(loc_6))
			store_f32(memory_at_0, loc_0 + 12, demote_f32_f64(loc_5))
			store_f32(memory_at_0, loc_0 + 8, demote_f32_f64(loc_4))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, loc_0, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 16, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
		break
	end
end
FUNC_LIST[23] = --[[ Luau::Compile::ctype(Luau::Compile::Constant const&) ]] function(loc_0, loc_1)
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 0, 1, 2, 3, 4, }
										end)()
									end
									temp = br_map[1][sub_i32(load_i32(memory_at_0, loc_1), 1)] or 5
									if temp < 3 then
										if temp < 1 then
											break
										elseif temp > 1 then
											desired = 5
											break
										else
											desired = 6
											break
										end
									elseif temp > 3 then
										if temp < 5 then
											desired = 3
											break
										else
											desired = 2
											break
										end
									else
										desired = 4
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								store_i32(memory_at_0, loc_0 + 8, 3572)
								store_i64(memory_at_0, loc_0, i64_from_u32(5, 3))
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i32(memory_at_0, loc_0 + 8, 3497)
							store_i64(memory_at_0, loc_0, i64_from_u32(5, 7))
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32(memory_at_0, loc_0 + 8, 3034)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_0 + 8, 2838)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 8, 3843)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_0, i64_ZERO)
			store_i64(memory_at_0, loc_0 + 16, i64_ZERO)
			store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, loc_0, i64_from_u32(5, 6))
		break
	end
end
FUNC_LIST[24] = --[[ Luau::Compile::foldBuiltinMath(Luau::AstName) ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if loc_1 == 0 then
				break
			end
			reg_0 = FUNC_LIST[544](loc_1, 3629)
			if reg_0 == 0 then
				while true do
					store_i64(memory_at_0, loc_0 + 8, i64_from_u32(1413754136, 1074340347))
					store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[544](loc_1, 4839)
			if reg_0 ~= 0 then
				break
			end
			store_i64(memory_at_0, loc_0 + 8, i64_from_u32(0, 2146435072))
			store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, loc_0, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 16, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
		break
	end
end
FUNC_LIST[25] = --[[ Luau::Compile::foldConstants(Luau::DenseHashMap<Luau::AstExpr*, Luau::Compile::Constant, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExpr*>>&, Luau::DenseHashMap<Luau::AstLocal*, Luau::Compile::Variable, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>&, Luau::DenseHashMap<Luau::AstLocal*, Luau::Compile::Constant, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>&, Luau::DenseHashMap<Luau::AstExprCall*, int, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprCall*>> const*, bool, Luau::AstNode*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	while true do
		loc_6 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_6
		store_i32(memory_at_0, loc_6 + 44, 0)
		store_i64(memory_at_0, loc_6 + 36, i64_ZERO)
		store_i32_n8(memory_at_0, loc_6 + 32, loc_4)
		store_i32(memory_at_0, loc_6 + 28, loc_3)
		store_i32(memory_at_0, loc_6 + 20, loc_1)
		loc_4 = 9280
		store_i32(memory_at_0, loc_6 + 12, loc_4)
		store_i32(memory_at_0, loc_6 + 16, loc_0)
		store_i32(memory_at_0, loc_6 + 24, loc_2)
		store_i32_n8(memory_at_0, loc_6 + 33, (if bor_i32(load_i32(memory_at_0, loc_0 + 8), load_i32(memory_at_0, loc_2 + 8)) == 0 then 1 else 0))
		TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_5))](loc_5, add_i32(loc_6, 12))
		store_i32(memory_at_0, loc_6 + 12, 9280)
		loc_0 = load_i32(memory_at_0, loc_6 + 36)
		if loc_0 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_6 + 40, loc_0)
				FUNC_LIST[609](loc_0)
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_6, 48)
		break
	end
end
FUNC_LIST[26] = --[[ Luau::Compile::ConstantVisitor::~ConstantVisitor() ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0, 9280)
		loc_1 = load_i32(memory_at_0, loc_0 + 24)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 28, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[27] = --[[ Luau::Compile::ConstantVisitor::~ConstantVisitor().1 ]] function(loc_0)
	local loc_1 = 0
	while true do
		store_i32(memory_at_0, loc_0, 9280)
		loc_1 = load_i32(memory_at_0, loc_0 + 24)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 28, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		FUNC_LIST[609](loc_0)
		break
	end
end
FUNC_LIST[28] = --[[ Luau::Compile::ConstantVisitor::visit(Luau::AstExpr*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_2
		FUNC_LIST[29](add_i32(loc_2, 8), loc_0, loc_1)
		GLOBAL_LIST[0].value = add_i32(loc_2, 32)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[29] = --[[ Luau::Compile::ConstantVisitor::analyze(Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_4
		store_i64(memory_at_0, loc_0, i64_ZERO)
		store_i32(memory_at_0, loc_0 + 8, 0)
		loc_3 = load_i32(memory_at_0, loc_2 + 4)
		while true do
			while true do
				while true do
					while true do
						while true do
							if loc_2 == 0 then
								break
							end
							if load_i32(memory_at_0, 47180) ~= loc_3 then
								break
							end
							FUNC_LIST[29](loc_0, loc_1, load_i32(memory_at_0, loc_2 + 24))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_3 == load_i32(memory_at_0, 47188) then
							while true do
								store_i32(memory_at_0, loc_0, 1)
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if load_i32(memory_at_0, 47196) ~= loc_3 then
								break
							end
							store_i32(memory_at_0, loc_0, 2)
							store_i32_n8(memory_at_0, loc_0 + 8, load_i32_u8(memory_at_0, loc_2 + 24))
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if load_i32(memory_at_0, 47204) ~= loc_3 then
								break
							end
							store_i32(memory_at_0, loc_0, 3)
							store_f64(memory_at_0, loc_0 + 8, load_f64(memory_at_0, loc_2 + 24))
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if load_i32(memory_at_0, 47212) ~= loc_3 then
								break
							end
							store_i32(memory_at_0, loc_0, 5)
							store_i32(memory_at_0, loc_0 + 8, load_i32(memory_at_0, loc_2 + 24))
							store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, loc_2 + 28))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if load_i32(memory_at_0, 47220) ~= loc_3 then
								break
							end
							reg_0 = FUNC_LIST[32](load_i32(memory_at_0, loc_1 + 12), add_i32(loc_2, 24))
							loc_3 = reg_0
							if loc_3 == 0 then
								desired = 4
								break
							end
							store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_3))
							store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_3 + 16))
							store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_3 + 8))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if load_i32(memory_at_0, 47228) == loc_3 then
							break
						end
						if load_i32(memory_at_0, 47236) == loc_3 then
							break
						end
						loc_5 = (if load_i32(memory_at_0, 47244) == loc_3 then loc_2 else 0)
						store_i32(memory_at_0, loc_4 + 76, loc_5)
						if loc_5 ~= 0 then
							while true do
								FUNC_LIST[29](add_i32(loc_4, 48), loc_1, load_i32(memory_at_0, loc_5 + 24))
								while true do
									loc_3 = load_i32(memory_at_0, loc_1 + 16)
									if loc_3 ~= 0 then
										while true do
											reg_0 = FUNC_LIST[33](loc_3, add_i32(loc_4, 76))
											loc_9 = reg_0
											if loc_9 ~= 0 then
												desired = 6
												break
											end
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									loc_5 = load_i32(memory_at_0, loc_4 + 76)
									if load_i32(memory_at_0, loc_5 + 32) == 0 then
										desired = 4
										break
									end
									loc_3 = 0
									while true do
										FUNC_LIST[29](add_i32(loc_4, 48), loc_1, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_5 + 28), shl_i32(loc_3, 2))))
										loc_3 = add_i32(loc_3, 1)
										loc_5 = load_i32(memory_at_0, loc_4 + 76)
										if loc_3 < load_i32(memory_at_0, loc_5 + 32) then
											continue
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									desired = 4
									break
								end
								if desired then
									break
								end
								loc_7 = add_i32(loc_1, 24)
								loc_10 = sub_i32(load_i32(memory_at_0, loc_1 + 28), load_i32(memory_at_0, loc_1 + 24))
								loc_11 = div_i32(loc_10, 24)
								FUNC_LIST[34](loc_7, add_i32(loc_11, load_i32(memory_at_0, load_i32(memory_at_0, loc_4 + 76) + 32)))
								loc_3 = 0
								while true do
									while true do
										loc_5 = load_i32(memory_at_0, loc_4 + 76)
										if load_i32(memory_at_0, loc_5 + 32) == 0 then
											while true do
												desired = 7
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										loc_8 = 1
										while true do
											FUNC_LIST[29](add_i32(loc_4, 48), loc_1, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_5 + 28), shl_i32(loc_3, 2))))
											while true do
												if load_i32(memory_at_0, loc_4 + 48) == 0 then
													while true do
														loc_8 = 0
														desired = 9
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												end
												FUNC_LIST[35](loc_7, add_i32(loc_4, 48))
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
											loc_3 = add_i32(loc_3, 1)
											loc_5 = load_i32(memory_at_0, loc_4 + 76)
											loc_6 = load_i32(memory_at_0, loc_5 + 32)
											if loc_3 < loc_6 then
												continue
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										if band_i32(loc_8, 1) == 0 then
											desired = 6
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									FUNC_LIST[22](loc_0, load_i32(memory_at_0, loc_9), add_i32(loc_10, load_i32(memory_at_0, loc_7)), loc_6)
									break
								end
								if desired then
									break
								end
								FUNC_LIST[36](loc_7, loc_11)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if load_i32(memory_at_0, 47252) ~= loc_3 then
								break
							end
							FUNC_LIST[29](add_i32(loc_4, 48), loc_1, load_i32(memory_at_0, loc_2 + 24))
							if load_i32_u8(memory_at_0, loc_1 + 20) == 0 then
								desired = 4
								break
							end
							loc_3 = load_i32(memory_at_0, loc_2 + 24)
							if loc_3 == 0 then
								desired = 4
								break
							end
							if load_i32(memory_at_0, loc_3 + 4) ~= load_i32(memory_at_0, 47228) then
								desired = 4
								break
							end
							loc_3 = load_i32(memory_at_0, loc_3 + 24)
							if loc_3 == 0 then
								desired = 4
								break
							end
							reg_0 = FUNC_LIST[544](loc_3, 3676)
							if reg_0 ~= 0 then
								desired = 4
								break
							end
							FUNC_LIST[24](loc_0, load_i32(memory_at_0, loc_2 + 28))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if load_i32(memory_at_0, 47260) ~= loc_3 then
								break
							end
							FUNC_LIST[29](add_i32(loc_4, 48), loc_1, load_i32(memory_at_0, loc_2 + 24))
							FUNC_LIST[29](add_i32(loc_4, 48), loc_1, load_i32(memory_at_0, loc_2 + 28))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if load_i32(memory_at_0, 47268) ~= loc_3 then
								break
							end
							loc_3 = load_i32(memory_at_0, loc_2 + 92)
							TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if load_i32(memory_at_0, 47276) ~= loc_3 then
								break
							end
							if loc_2 == 0 then
								break
							end
							if load_i32(memory_at_0, loc_2 + 28) == 0 then
								desired = 4
								break
							end
							loc_3 = 0
							while true do
								loc_5 = add_i32(load_i32(memory_at_0, loc_2 + 24), mul_i32(loc_3, 12))
								loc_6 = load_i32(memory_at_0, loc_5 + 4)
								if loc_6 ~= 0 then
									while true do
										FUNC_LIST[29](add_i32(loc_4, 48), loc_1, loc_6)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								FUNC_LIST[29](add_i32(loc_4, 48), loc_1, load_i32(memory_at_0, loc_5 + 8))
								loc_3 = add_i32(loc_3, 1)
								if loc_3 < load_i32(memory_at_0, loc_2 + 28) then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if load_i32(memory_at_0, 47284) ~= loc_3 then
								break
							end
							FUNC_LIST[29](add_i32(loc_4, 48), loc_1, load_i32(memory_at_0, loc_2 + 28))
							if load_i32(memory_at_0, loc_4 + 48) == 0 then
								desired = 4
								break
							end
							FUNC_LIST[37](loc_0, load_i32(memory_at_0, loc_2 + 24), add_i32(loc_4, 48))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if load_i32(memory_at_0, 47292) ~= loc_3 then
								break
							end
							FUNC_LIST[29](add_i32(loc_4, 48), loc_1, load_i32(memory_at_0, loc_2 + 28))
							FUNC_LIST[29](add_i32(loc_4, 24), loc_1, load_i32(memory_at_0, loc_2 + 32))
							if load_i32(memory_at_0, loc_4 + 48) == 0 then
								desired = 4
								break
							end
							FUNC_LIST[38](loc_0, load_i32(memory_at_0, loc_2 + 24), add_i32(loc_4, 48), add_i32(loc_4, 24))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if load_i32(memory_at_0, 47300) ~= loc_3 then
								break
							end
							FUNC_LIST[29](loc_0, loc_1, load_i32(memory_at_0, loc_2 + 24))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if load_i32(memory_at_0, 47308) ~= loc_3 then
								break
							end
							FUNC_LIST[29](add_i32(loc_4, 48), loc_1, load_i32(memory_at_0, loc_2 + 24))
							FUNC_LIST[29](add_i32(loc_4, 24), loc_1, load_i32(memory_at_0, loc_2 + 32))
							FUNC_LIST[29](loc_4, loc_1, load_i32(memory_at_0, loc_2 + 40))
							while true do
								while true do
									while true do
										loc_3 = loc_4
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 4, 2, 0, }
											end)()
										end
										temp = br_map[1][load_i32(memory_at_0, loc_3 + 48)] or 1
										if temp < 2 then
											if temp < 1 then
												break
											else
												desired = 7
												break
											end
										elseif temp > 2 then
											desired = 4
											break
										else
											desired = 6
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if load_i32_u8(memory_at_0, loc_4 + 56) == 0 then
										desired = 6
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_3 = add_i32(loc_4, 24)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_3))
							store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_3 + 16))
							store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_3 + 8))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_2 == 0 then
							break
						end
						if load_i32(memory_at_0, 47316) ~= loc_3 then
							break
						end
						loc_5 = load_i32(memory_at_0, loc_2 + 36)
						if loc_5 == 0 then
							break
						end
						loc_3 = load_i32(memory_at_0, loc_2 + 32)
						loc_5 = add_i32(loc_3, shl_i32(loc_5, 2))
						while true do
							FUNC_LIST[29](add_i32(loc_4, 48), loc_1, load_i32(memory_at_0, loc_3))
							loc_3 = add_i32(loc_3, 4)
							if loc_5 ~= loc_3 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = load_i32(memory_at_0, loc_1 + 4)
					loc_5 = load_i32(memory_at_0, loc_0)
					store_i32(memory_at_0, loc_4 + 48, loc_2)
					if loc_5 ~= 0 then
						desired = 2
						break
					end
					if load_i32_u8(memory_at_0, loc_1 + 21) ~= 0 then
						desired = 1
						break
					end
					if load_i32(memory_at_0, loc_3 + 8) == 0 then
						desired = 1
						break
					end
					loc_6 = load_i32(memory_at_0, loc_3 + 12)
					if loc_2 == loc_6 then
						desired = 1
						break
					end
					loc_1 = bxor_i32(shr_u32(loc_2, 4), shr_u32(loc_2, 9))
					loc_5 = sub_i32(load_i32(memory_at_0, loc_3 + 4), 1)
					loc_7 = load_i32(memory_at_0, loc_3)
					loc_0 = 0
					while true do
						loc_3 = band_i32(loc_1, loc_5)
						loc_8 = add_i32(shl_i32(loc_3, 5), loc_7)
						loc_1 = load_i32(memory_at_0, loc_8)
						if loc_1 ~= loc_2 then
							while true do
								if loc_1 == loc_6 then
									desired = 1
									break
								end
								loc_0 = add_i32(loc_0, 1)
								loc_1 = add_i32(loc_3, loc_0)
								if loc_0 <= loc_5 then
									desired = 4
									break
								end
								desired = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_8 + 8, 0)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = load_i32(memory_at_0, loc_1 + 4)
				store_i32(memory_at_0, loc_4 + 48, loc_2)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[39](loc_3, add_i32(loc_4, 48))
			loc_2 = reg_0
			store_i64(memory_at_0, loc_2 + 16, load_i64(memory_at_0, loc_0 + 16))
			store_i64(memory_at_0, loc_2 + 8, load_i64(memory_at_0, loc_0 + 8))
			store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_0))
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 80)
		break
	end
end
FUNC_LIST[30] = --[[ Luau::Compile::ConstantVisitor::visit(Luau::AstStatLocal*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_2 = load_i32(memory_at_0, loc_1 + 40)
		while true do
			while true do
				while true do
					loc_5 = load_i32(memory_at_0, loc_1 + 32)
					if loc_5 == 0 then
						while true do
							loc_5 = 0
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						if loc_2 == 0 then
							break
						end
						while true do
							loc_2 = shl_i32(loc_3, 2)
							FUNC_LIST[29](add_i32(loc_4, 8), loc_0, load_i32(memory_at_0, add_i32(loc_2, load_i32(memory_at_0, loc_1 + 36))))
							FUNC_LIST[31](loc_0, load_i32(memory_at_0, add_i32(loc_2, load_i32(memory_at_0, loc_1 + 28))), add_i32(loc_4, 8))
							loc_2 = load_i32(memory_at_0, loc_1 + 40)
							loc_3 = add_i32(loc_3, 1)
							loc_5 = load_i32(memory_at_0, loc_1 + 32)
							if loc_3 >= loc_5 then
								desired = 4
								break
							end
							if loc_2 > loc_3 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_2 < loc_5 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_2 <= loc_5 then
					desired = 1
					break
				end
				while true do
					FUNC_LIST[29](add_i32(loc_4, 8), loc_0, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 36), shl_i32(loc_5, 2))))
					loc_5 = add_i32(loc_5, 1)
					if loc_5 < load_i32(memory_at_0, loc_1 + 40) then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_2 == 0 then
					break
				end
				loc_3 = load_i32(memory_at_0, sub_i32(add_i32(load_i32(memory_at_0, loc_1 + 36), shl_i32(loc_2, 2)), 4))
				if loc_3 == 0 then
					break
				end
				loc_3 = load_i32(memory_at_0, loc_3 + 4)
				if loc_3 == load_i32(memory_at_0, 47244) then
					desired = 1
					break
				end
				if load_i32(memory_at_0, 47236) == loc_3 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				store_i32(memory_at_0, loc_4 + 16, 0)
				store_i64(memory_at_0, loc_4 + 8, i64_ONE)
				FUNC_LIST[31](loc_0, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 28), shl_i32(loc_2, 2))), add_i32(loc_4, 8))
				loc_2 = add_i32(loc_2, 1)
				if loc_2 < load_i32(memory_at_0, loc_1 + 32) then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[31] = --[[ Luau::Compile::ConstantVisitor::recordValue(Luau::AstLocal*, Luau::Compile::Constant const&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local desired
	while true do
		loc_7 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_7
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			if load_i32(memory_at_0, loc_3 + 8) == 0 then
				break
			end
			loc_8 = load_i32(memory_at_0, loc_3 + 12)
			if loc_1 == loc_8 then
				break
			end
			loc_5 = bxor_i32(shr_u32(loc_1, 4), shr_u32(loc_1, 9))
			loc_6 = sub_i32(load_i32(memory_at_0, loc_3 + 4), 1)
			loc_9 = load_i32(memory_at_0, loc_3)
			loc_3 = 0
			while true do
				loc_10 = band_i32(loc_5, loc_6)
				loc_4 = add_i32(mul_i32(loc_10, 12), loc_9)
				loc_5 = load_i32(memory_at_0, loc_4)
				if loc_1 == loc_5 then
					desired = 1
					break
				end
				loc_4 = 0
				if loc_5 == loc_8 then
					desired = 1
					break
				end
				loc_3 = add_i32(loc_3, 1)
				loc_5 = add_i32(loc_10, loc_3)
				if loc_3 <= loc_6 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		while true do
			loc_3 = (if loc_4 ~= 0 then add_i32(loc_4, 4) else 0)
			if load_i32_u8(memory_at_0, loc_3 + 4) ~= 0 then
				break
			end
			loc_4 = load_i32(memory_at_0, loc_2)
			store_i32_n8(memory_at_0, loc_3 + 5, (if loc_4 ~= 0 then 1 else 0))
			loc_3 = load_i32(memory_at_0, loc_0 + 12)
			store_i32(memory_at_0, loc_7 + 12, loc_1)
			if loc_4 ~= 0 then
				while true do
					reg_0 = FUNC_LIST[39](loc_3, add_i32(loc_7, 12))
					loc_3 = reg_0
					store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_2 + 16))
					store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_2 + 8))
					store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if load_i32_u8(memory_at_0, loc_0 + 21) ~= 0 then
				break
			end
			if load_i32(memory_at_0, loc_3 + 8) == 0 then
				break
			end
			loc_10 = load_i32(memory_at_0, loc_3 + 12)
			if loc_1 == loc_10 then
				break
			end
			loc_4 = bxor_i32(shr_u32(loc_1, 4), shr_u32(loc_1, 9))
			loc_5 = sub_i32(load_i32(memory_at_0, loc_3 + 4), 1)
			loc_8 = load_i32(memory_at_0, loc_3)
			loc_3 = 0
			while true do
				loc_6 = band_i32(loc_4, loc_5)
				loc_9 = add_i32(shl_i32(loc_6, 5), loc_8)
				loc_4 = load_i32(memory_at_0, loc_9)
				if loc_4 ~= loc_1 then
					while true do
						if loc_4 == loc_10 then
							desired = 1
							break
						end
						loc_3 = add_i32(loc_3, 1)
						loc_4 = add_i32(loc_6, loc_3)
						if loc_3 <= loc_5 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_9 + 8, 0)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_7, 16)
		break
	end
end
FUNC_LIST[32] = --[[ Luau::DenseHashMap<Luau::AstLocal*, Luau::Compile::Constant, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>::find(Luau::AstLocal* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		while true do
			if load_i32(memory_at_0, loc_0 + 8) == 0 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_1)
			loc_5 = load_i32(memory_at_0, loc_0 + 12)
			if loc_3 == loc_5 then
				break
			end
			loc_1 = bxor_i32(shr_u32(loc_3, 4), shr_u32(loc_3, 9))
			loc_4 = sub_i32(load_i32(memory_at_0, loc_0 + 4), 1)
			loc_6 = load_i32(memory_at_0, loc_0)
			loc_0 = 0
			while true do
				loc_7 = band_i32(loc_1, loc_4)
				loc_2 = add_i32(shl_i32(loc_7, 5), loc_6)
				loc_1 = load_i32(memory_at_0, loc_2)
				if loc_3 == loc_1 then
					desired = 1
					break
				end
				loc_2 = 0
				if loc_1 == loc_5 then
					desired = 1
					break
				end
				loc_0 = add_i32(loc_0, 1)
				loc_1 = add_i32(loc_7, loc_0)
				if loc_0 <= loc_4 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = (if loc_2 ~= 0 then add_i32(loc_2, 8) else 0)
		break
	end
	return reg_0
end
FUNC_LIST[33] = --[[ Luau::DenseHashMap<Luau::AstExprCall*, int, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprCall*>>::find(Luau::AstExprCall* const&) const ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		while true do
			if load_i32(memory_at_0, loc_0 + 8) == 0 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_1)
			loc_5 = load_i32(memory_at_0, loc_0 + 12)
			if loc_3 == loc_5 then
				break
			end
			loc_1 = bxor_i32(shr_u32(loc_3, 4), shr_u32(loc_3, 9))
			loc_4 = sub_i32(load_i32(memory_at_0, loc_0 + 4), 1)
			loc_6 = load_i32(memory_at_0, loc_0)
			loc_0 = 0
			while true do
				loc_7 = band_i32(loc_1, loc_4)
				loc_2 = add_i32(shl_i32(loc_7, 3), loc_6)
				loc_1 = load_i32(memory_at_0, loc_2)
				if loc_3 == loc_1 then
					desired = 1
					break
				end
				loc_2 = 0
				if loc_1 == loc_5 then
					desired = 1
					break
				end
				loc_0 = add_i32(loc_0, 1)
				loc_1 = add_i32(loc_7, loc_0)
				if loc_0 <= loc_4 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = (if loc_2 ~= 0 then add_i32(loc_2, 4) else 0)
		break
	end
	return reg_0
end
FUNC_LIST[34] = --[[ std::__2::vector<Luau::Compile::Constant, std::__2::allocator<Luau::Compile::Constant>>::reserve(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				loc_3 = load_i32(memory_at_0, loc_0)
				if loc_1 <= div_i32(sub_i32(load_i32(memory_at_0, loc_0 + 8), loc_3), 24) then
					break
				end
				if loc_1 >= 178956971 then
					desired = 1
					break
				end
				loc_2 = load_i32(memory_at_0, loc_0 + 4)
				loc_1 = mul_i32(loc_1, 24)
				reg_0 = FUNC_LIST[606](loc_1)
				loc_4 = reg_0
				loc_5 = add_i32(loc_4, loc_1)
				loc_4 = add_i32(sub_i32(loc_2, loc_3), loc_4)
				loc_1 = loc_4
				if loc_2 ~= loc_3 then
					while true do
						while true do
							loc_1 = sub_i32(loc_1, 24)
							loc_2 = sub_i32(loc_2, 24)
							store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_2))
							store_i64(memory_at_0, loc_1 + 16, load_i64(memory_at_0, loc_2 + 16))
							store_i64(memory_at_0, loc_1 + 8, load_i64(memory_at_0, loc_2 + 8))
							if loc_2 ~= loc_3 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				store_i32(memory_at_0, loc_0 + 8, loc_5)
				store_i32(memory_at_0, loc_0 + 4, loc_4)
				store_i32(memory_at_0, loc_0, loc_1)
				if loc_3 == 0 then
					break
				end
				FUNC_LIST[609](loc_3)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[40](loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[35] = --[[ std::__2::vector<Luau::Compile::Constant, std::__2::allocator<Luau::Compile::Constant>>::push_back[abi:ue170004](Luau::Compile::Constant const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_2 = load_i32(memory_at_0, loc_0 + 4)
		if loc_2 ~= load_i32(memory_at_0, loc_0 + 8) then
			while true do
				store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_1))
				store_i64(memory_at_0, loc_2 + 16, load_i64(memory_at_0, loc_1 + 16))
				store_i64(memory_at_0, loc_2 + 8, load_i64(memory_at_0, loc_1 + 8))
				store_i32(memory_at_0, loc_0 + 4, add_i32(loc_2, 24))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_6 = load_i32(memory_at_0, loc_0)
			loc_3 = div_i32(sub_i32(loc_2, loc_6), 24)
			loc_4 = add_i32(loc_3, 1)
			if loc_4 < 178956971 then
				while true do
					loc_5 = shl_i32(loc_3, 1)
					loc_4 = (if loc_3 >= 89478485 then 178956970 else (if loc_4 < loc_5 then loc_5 else loc_4))
					if loc_4 ~= 0 then
						while true do
							if loc_4 >= 178956971 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](mul_i32(loc_4, 24))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							break
						end
					end
					loc_5 = reg_0
					loc_3 = add_i32(loc_5, mul_i32(loc_3, 24))
					store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_1))
					store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_1 + 16))
					store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_1 + 8))
					loc_1 = add_i32(mul_i32(loc_4, 24), loc_5)
					loc_4 = add_i32(loc_3, 24)
					if loc_2 ~= loc_6 then
						while true do
							while true do
								loc_3 = sub_i32(loc_3, 24)
								loc_2 = sub_i32(loc_2, 24)
								store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2))
								store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_2 + 16))
								store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_2 + 8))
								if loc_2 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = load_i32(memory_at_0, loc_0)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
						if desired then
							break
						end
					end
					loc_2 = reg_0
					store_i32(memory_at_0, loc_0 + 8, loc_1)
					store_i32(memory_at_0, loc_0 + 4, loc_4)
					store_i32(memory_at_0, loc_0, loc_3)
					if loc_2 ~= 0 then
						while true do
							FUNC_LIST[609](loc_2)
							break
						end
						if desired then
							break
						end
					end
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[40](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[36] = --[[ std::__2::vector<Luau::Compile::Constant, std::__2::allocator<Luau::Compile::Constant>>::resize(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local desired
	while true do
		loc_3 = load_i32(memory_at_0, loc_0)
		loc_2 = div_i32(sub_i32(load_i32(memory_at_0, loc_0 + 4), loc_3), 24)
		if loc_1 > loc_2 then
			while true do
				FUNC_LIST[41](loc_0, sub_i32(loc_1, loc_2))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_1 < loc_2 then
			while true do
				store_i32(memory_at_0, loc_0 + 4, add_i32(mul_i32(loc_1, 24), loc_3))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		break
	end
end
FUNC_LIST[37] = --[[ Luau::Compile::foldUnary(Luau::Compile::Constant&, Luau::AstExprUnary::Op, Luau::Compile::Constant const&) ]] function(loc_0, loc_1, loc_2)
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 0, 1, 2, }
							end)()
						end
						temp = br_map[1][loc_1] or 3
						if temp < 2 then
							if temp < 1 then
								break
							else
								desired = 3
								break
							end
						elseif temp > 2 then
							desired = 1
							break
						else
							desired = 2
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if load_i32(memory_at_0, loc_2) == 0 then
						desired = 1
						break
					end
					store_i32(memory_at_0, loc_0, 2)
					loc_1 = 1
					while true do
						while true do
							while true do
								if not br_map[2] then
									br_map[2] = (function()
										return { [0] = 2, 0, }
									end)()
								end
								temp = br_map[2][sub_i32(load_i32(memory_at_0, loc_2), 1)] or 1
								if temp < 1 then
									break
								elseif temp > 1 then
									desired = 4
									break
								else
									desired = 5
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i32_n8(memory_at_0, loc_0 + 8, (if load_i32_u8(memory_at_0, loc_2 + 8) == 0 then 1 else 0))
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_1 = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32_n8(memory_at_0, loc_0 + 8, loc_1)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if load_i32(memory_at_0, loc_2) ~= 3 then
					desired = 1
					break
				end
				store_i32(memory_at_0, loc_0, 3)
				store_f64(memory_at_0, loc_0 + 8, neg_f64(load_f64(memory_at_0, loc_2 + 8)))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if load_i32(memory_at_0, loc_2) ~= 5 then
				break
			end
			store_i32(memory_at_0, loc_0, 3)
			store_f64(memory_at_0, loc_0 + 8, convert_f64_u32(load_i32(memory_at_0, loc_2 + 4)))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[38] = --[[ Luau::Compile::foldBinary(Luau::Compile::Constant&, Luau::AstExprBinary::Op, Luau::Compile::Constant const&, Luau::Compile::Constant const&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0.0
	local loc_5 = 0.0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		if not br_map[1] then
																			br_map[1] = (function()
																				return { [0] = 0, 1, 2, 3, 4, 5, 6, 15, 7, 8, 9, 10, 11, 12, 13, 14, }
																			end)()
																		end
																		temp = br_map[1][loc_1] or 15
																		if temp < 8 then
																			if temp < 4 then
																				if temp < 2 then
																					if temp < 1 then
																						break
																					else
																						desired = 15
																						break
																					end
																				elseif temp > 2 then
																					desired = 13
																					break
																				else
																					desired = 14
																					break
																				end
																			elseif temp > 4 then
																				if temp < 6 then
																					desired = 11
																					break
																				elseif temp > 6 then
																					desired = 9
																					break
																				else
																					desired = 10
																					break
																				end
																			else
																				desired = 12
																				break
																			end
																		elseif temp > 8 then
																			if temp < 12 then
																				if temp < 10 then
																					desired = 7
																					break
																				elseif temp > 10 then
																					desired = 5
																					break
																				else
																					desired = 6
																					break
																				end
																			elseif temp > 12 then
																				if temp < 14 then
																					desired = 3
																					break
																				elseif temp > 14 then
																					desired = 1
																					break
																				else
																					desired = 2
																					break
																				end
																			else
																				desired = 4
																				break
																			end
																		else
																			desired = 8
																			break
																		end
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	if load_i32(memory_at_0, loc_2) ~= 3 then
																		desired = 1
																		break
																	end
																	if load_i32(memory_at_0, loc_3) ~= 3 then
																		desired = 1
																		break
																	end
																	store_i32(memory_at_0, loc_0, 3)
																	store_f64(memory_at_0, loc_0 + 8, (load_f64(memory_at_0, loc_2 + 8) + load_f64(memory_at_0, loc_3 + 8)))
																	desired = 0
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																if load_i32(memory_at_0, loc_2) ~= 3 then
																	desired = 1
																	break
																end
																if load_i32(memory_at_0, loc_3) ~= 3 then
																	desired = 1
																	break
																end
																store_i32(memory_at_0, loc_0, 3)
																store_f64(memory_at_0, loc_0 + 8, (load_f64(memory_at_0, loc_2 + 8) - load_f64(memory_at_0, loc_3 + 8)))
																desired = 0
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															if load_i32(memory_at_0, loc_2) ~= 3 then
																desired = 1
																break
															end
															if load_i32(memory_at_0, loc_3) ~= 3 then
																desired = 1
																break
															end
															store_i32(memory_at_0, loc_0, 3)
															store_f64(memory_at_0, loc_0 + 8, (load_f64(memory_at_0, loc_2 + 8) * load_f64(memory_at_0, loc_3 + 8)))
															desired = 0
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														if load_i32(memory_at_0, loc_2) ~= 3 then
															desired = 1
															break
														end
														if load_i32(memory_at_0, loc_3) ~= 3 then
															desired = 1
															break
														end
														store_i32(memory_at_0, loc_0, 3)
														store_f64(memory_at_0, loc_0 + 8, (load_f64(memory_at_0, loc_2 + 8) / load_f64(memory_at_0, loc_3 + 8)))
														desired = 0
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													if load_i32(memory_at_0, loc_2) ~= 3 then
														desired = 1
														break
													end
													if load_i32(memory_at_0, loc_3) ~= 3 then
														desired = 1
														break
													end
													store_i32(memory_at_0, loc_0, 3)
													store_f64(memory_at_0, loc_0 + 8, floor_f64((load_f64(memory_at_0, loc_2 + 8) / load_f64(memory_at_0, loc_3 + 8))))
													desired = 0
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												if load_i32(memory_at_0, loc_2) ~= 3 then
													desired = 1
													break
												end
												if load_i32(memory_at_0, loc_3) ~= 3 then
													desired = 1
													break
												end
												store_i32(memory_at_0, loc_0, 3)
												loc_4 = load_f64(memory_at_0, loc_2 + 8)
												loc_5 = load_f64(memory_at_0, loc_3 + 8)
												store_f64(memory_at_0, loc_0 + 8, (loc_4 - (floor_f64((loc_4 / loc_5)) * loc_5)))
												desired = 0
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if load_i32(memory_at_0, loc_2) ~= 3 then
												desired = 1
												break
											end
											if load_i32(memory_at_0, loc_3) ~= 3 then
												desired = 1
												break
											end
											store_i32(memory_at_0, loc_0, 3)
											reg_1 = FUNC_LIST[497](load_f64(memory_at_0, loc_2 + 8), load_f64(memory_at_0, loc_3 + 8))
											store_f64(memory_at_0, loc_0 + 8, reg_1)
											desired = 0
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if load_i32(memory_at_0, loc_2) == 0 then
											desired = 1
											break
										end
										if load_i32(memory_at_0, loc_3) == 0 then
											desired = 1
											break
										end
										store_i32(memory_at_0, loc_0, 2)
										reg_1 = FUNC_LIST[42](loc_2, loc_3)
										store_i32_n8(memory_at_0, loc_0 + 8, bxor_i32(reg_1, 1))
										desired = 0
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if load_i32(memory_at_0, loc_2) == 0 then
										desired = 1
										break
									end
									if load_i32(memory_at_0, loc_3) == 0 then
										desired = 1
										break
									end
									store_i32(memory_at_0, loc_0, 2)
									reg_1 = FUNC_LIST[42](loc_2, loc_3)
									store_i32_n8(memory_at_0, loc_0 + 8, reg_1)
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if load_i32(memory_at_0, loc_2) ~= 3 then
									desired = 1
									break
								end
								if load_i32(memory_at_0, loc_3) ~= 3 then
									desired = 1
									break
								end
								store_i32(memory_at_0, loc_0, 2)
								store_i32_n8(memory_at_0, loc_0 + 8, (if load_f64(memory_at_0, loc_2 + 8) < load_f64(memory_at_0, loc_3 + 8) then 1 else 0))
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if load_i32(memory_at_0, loc_2) ~= 3 then
								desired = 1
								break
							end
							if load_i32(memory_at_0, loc_3) ~= 3 then
								desired = 1
								break
							end
							store_i32(memory_at_0, loc_0, 2)
							store_i32_n8(memory_at_0, loc_0 + 8, (if load_f64(memory_at_0, loc_2 + 8) <= load_f64(memory_at_0, loc_3 + 8) then 1 else 0))
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if load_i32(memory_at_0, loc_2) ~= 3 then
							desired = 1
							break
						end
						if load_i32(memory_at_0, loc_3) ~= 3 then
							desired = 1
							break
						end
						store_i32(memory_at_0, loc_0, 2)
						store_i32_n8(memory_at_0, loc_0 + 8, (if load_f64(memory_at_0, loc_2 + 8) > load_f64(memory_at_0, loc_3 + 8) then 1 else 0))
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if load_i32(memory_at_0, loc_2) ~= 3 then
						desired = 1
						break
					end
					if load_i32(memory_at_0, loc_3) ~= 3 then
						desired = 1
						break
					end
					store_i32(memory_at_0, loc_0, 2)
					store_i32_n8(memory_at_0, loc_0 + 8, (if load_f64(memory_at_0, loc_2 + 8) >= load_f64(memory_at_0, loc_3 + 8) then 1 else 0))
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					while true do
						while true do
							if not br_map[2] then
								br_map[2] = (function()
									return { [0] = 4, 2, 0, }
								end)()
							end
							temp = br_map[2][load_i32(memory_at_0, loc_2)] or 1
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								desired = 1
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if load_i32_u8(memory_at_0, loc_2 + 8) == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = loc_3
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_2))
				store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_2 + 16))
				store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_2 + 8))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					while true do
						if not br_map[3] then
							br_map[3] = (function()
								return { [0] = 3, 2, 0, }
							end)()
						end
						temp = br_map[3][load_i32(memory_at_0, loc_2)] or 1
						if temp < 2 then
							if temp < 1 then
								break
							else
								desired = 3
								break
							end
						elseif temp > 2 then
							desired = 1
							break
						else
							desired = 2
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if load_i32_u8(memory_at_0, loc_2 + 8) == 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = loc_2
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_3))
			store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_3 + 16))
			store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_3 + 8))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[39] = --[[ Luau::DenseHashMap<Luau::AstExpr*, Luau::Compile::Constant, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExpr*>>::operator[](Luau::AstExpr* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			loc_6 = load_i32(memory_at_0, loc_0 + 4)
			if loc_3 < shr_u32(mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_3 == 0 then
					break
				end
				loc_4 = load_i32(memory_at_0, loc_1)
				loc_8 = load_i32(memory_at_0, loc_0 + 12)
				if loc_4 == loc_8 then
					break
				end
				loc_2 = bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9))
				loc_7 = sub_i32(loc_6, 1)
				loc_9 = load_i32(memory_at_0, loc_0)
				loc_3 = 0
				while true do
					loc_5 = band_i32(loc_2, loc_7)
					loc_2 = load_i32(memory_at_0, add_i32(shl_i32(loc_5, 5), loc_9))
					if loc_4 == loc_2 then
						desired = 1
						break
					end
					if loc_2 == loc_8 then
						desired = 2
						break
					end
					loc_3 = add_i32(loc_3, 1)
					loc_2 = add_i32(loc_5, loc_3)
					if loc_3 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[43](loc_0)
			loc_6 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_8 = load_i32(memory_at_0, loc_0)
				loc_6 = sub_i32(loc_6, 1)
				loc_5 = load_i32(memory_at_0, loc_1)
				loc_3 = band_i32(loc_6, bxor_i32(shr_u32(loc_5, 4), shr_u32(loc_5, 9)))
				loc_4 = add_i32(loc_8, shl_i32(loc_3, 5))
				loc_2 = load_i32(memory_at_0, loc_4)
				loc_9 = load_i32(memory_at_0, loc_0 + 12)
				if loc_2 == loc_9 then
					break
				end
				if loc_2 == loc_5 then
					desired = 1
					break
				end
				loc_2 = 0
				while true do
					loc_2 = add_i32(loc_2, 1)
					loc_3 = band_i32(loc_6, add_i32(loc_3, loc_2))
					loc_4 = add_i32(shl_i32(loc_3, 5), loc_8)
					loc_7 = load_i32(memory_at_0, loc_4)
					if loc_9 == loc_7 then
						desired = 2
						break
					end
					if loc_5 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_4, loc_5)
			store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = add_i32(loc_4, 8)
		break
	end
	return reg_0
end
FUNC_LIST[40] = --[[ std::__2::vector<Luau::Compile::Constant, std::__2::allocator<Luau::Compile::Constant>>::__throw_length_error[abi:ue170004]() const ]] function(loc_0)
	while true do
		FUNC_LIST[243](2838)
		error("out of code bounds")
	end
end
FUNC_LIST[41] = --[[ std::__2::vector<Luau::Compile::Constant, std::__2::allocator<Luau::Compile::Constant>>::__append(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = load_i32(memory_at_0, loc_0 + 8)
		loc_2 = load_i32(memory_at_0, loc_0 + 4)
		if div_i32(sub_i32(loc_3, loc_2), 24) >= loc_1 then
			while true do
				reg_0 = loc_0
				if loc_1 ~= 0 then
					while true do
						loc_3 = sub_i32(mul_i32(loc_1, 24), 24)
						loc_3 = add_i32(sub_i32(loc_3, (loc_3 % 24)), 24)
						reg_1 = FUNC_LIST[479](loc_2, 0, loc_3)
						reg_1 = add_i32(reg_1, loc_3)
						break
					end
					if desired then
						break
					end
				else
					while true do
						reg_1 = loc_2
						break
					end
					if desired then
						break
					end
				end
				loc_2 = reg_1
				store_i32(memory_at_0, reg_0 + 4, loc_2)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_6 = load_i32(memory_at_0, loc_0)
			loc_7 = div_i32(sub_i32(loc_2, loc_6), 24)
			loc_4 = add_i32(loc_1, loc_7)
			if loc_4 < 178956971 then
				while true do
					loc_3 = div_i32(sub_i32(loc_3, loc_6), 24)
					loc_8 = shl_i32(loc_3, 1)
					loc_4 = (if loc_3 >= 89478485 then 178956970 else (if loc_4 < loc_8 then loc_8 else loc_4))
					if loc_4 ~= 0 then
						while true do
							if loc_4 >= 178956971 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](mul_i32(loc_4, 24))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_5
							break
						end
						if desired then
							break
						end
					end
					loc_5 = reg_0
					loc_3 = add_i32(loc_5, mul_i32(loc_7, 24))
					loc_1 = sub_i32(mul_i32(loc_1, 24), 24)
					loc_1 = add_i32(sub_i32(loc_1, (loc_1 % 24)), 24)
					reg_0 = FUNC_LIST[479](loc_3, 0, loc_1)
					loc_1 = add_i32(reg_0, loc_1)
					loc_5 = add_i32(mul_i32(loc_4, 24), loc_5)
					if loc_2 ~= loc_6 then
						while true do
							while true do
								loc_3 = sub_i32(loc_3, 24)
								loc_2 = sub_i32(loc_2, 24)
								store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2))
								store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_2 + 16))
								store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_2 + 8))
								if loc_2 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = load_i32(memory_at_0, loc_0)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
						if desired then
							break
						end
					end
					loc_2 = reg_0
					store_i32(memory_at_0, loc_0 + 8, loc_5)
					store_i32(memory_at_0, loc_0 + 4, loc_1)
					store_i32(memory_at_0, loc_0, loc_3)
					if loc_2 ~= 0 then
						while true do
							FUNC_LIST[609](loc_2)
							break
						end
						if desired then
							break
						end
					end
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[40](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[42] = --[[ Luau::Compile::constantsEqual(Luau::Compile::Constant const&, Luau::Compile::Constant const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 0, 1, 2, 3, 4, }
									end)()
								end
								temp = br_map[1][sub_i32(load_i32(memory_at_0, loc_0), 1)] or 5
								if temp < 3 then
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 4
										break
									else
										desired = 5
										break
									end
								elseif temp > 3 then
									if temp < 5 then
										desired = 2
										break
									else
										desired = 1
										break
									end
								else
									desired = 3
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = (if load_i32(memory_at_0, loc_1) == 1 then 1 else 0)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = band_i32((if load_i32(memory_at_0, loc_1) == 2 then 1 else 0), (if load_i32_u8(memory_at_0, loc_0 + 8) == load_i32_u8(memory_at_0, loc_1 + 8) then 1 else 0))
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = band_i32((if load_i32(memory_at_0, loc_1) == 3 then 1 else 0), (if load_f64(memory_at_0, loc_0 + 8) == load_f64(memory_at_0, loc_1 + 8) then 1 else 0))
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if load_i32(memory_at_0, loc_1) ~= 4 then
					desired = 1
					break
				end
				if load_f32(memory_at_0, loc_0 + 8) ~= load_f32(memory_at_0, loc_1 + 8) then
					desired = 1
					break
				end
				if load_f32(memory_at_0, loc_0 + 12) ~= load_f32(memory_at_0, loc_1 + 12) then
					desired = 1
					break
				end
				if load_f32(memory_at_0, loc_0 + 16) ~= load_f32(memory_at_0, loc_1 + 16) then
					desired = 1
					break
				end
				reg_0 = (if load_f32(memory_at_0, loc_0 + 20) == load_f32(memory_at_0, loc_1 + 20) then 1 else 0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if load_i32(memory_at_0, loc_1) ~= 5 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_0 + 4)
			if loc_3 ~= load_i32(memory_at_0, loc_1 + 4) then
				break
			end
			reg_0 = FUNC_LIST[535](load_i32(memory_at_0, loc_0 + 8), load_i32(memory_at_0, loc_1 + 8), loc_3)
			loc_2 = (if reg_0 == 0 then 1 else 0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[43] = --[[ Luau::detail::DenseHashTable<Luau::AstExpr*, std::__2::pair<Luau::AstExpr*, Luau::Compile::Constant>, std::__2::pair<Luau::AstExpr* const, Luau::Compile::Constant>, Luau::detail::ItemInterfaceMap<Luau::AstExpr*, Luau::Compile::Constant>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExpr*>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_11 = load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_1 = load_i32(memory_at_0, loc_0 + 4)
			loc_6 = (if loc_1 ~= 0 then shl_i32(loc_1, 1) else 16)
			if loc_6 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = band_i32(loc_6, 2)
			reg_0 = FUNC_LIST[606](shl_i32(loc_6, 5))
			loc_7 = reg_0
			loc_3 = load_i32(memory_at_0, loc_0 + 12)
			if loc_6 >= 4 then
				while true do
					loc_9 = band_i32(loc_6, 4294967292)
					while true do
						loc_1 = add_i32(shl_i32(loc_2, 5), loc_7)
						store_i64(memory_at_0, loc_1 + 8, i64_ZERO)
						store_i32(memory_at_0, loc_1, loc_3)
						store_i64(memory_at_0, loc_1 + 16, i64_ZERO)
						store_i64(memory_at_0, loc_1 + 24, i64_ZERO)
						store_i32(memory_at_0, loc_1 + 32, loc_3)
						store_i64(memory_at_0, loc_1 + 40, i64_ZERO)
						store_i64(memory_at_0, loc_1 + 56, i64_ZERO)
						store_i64(memory_at_0, loc_1 + 48, i64_ZERO)
						store_i64(memory_at_0, loc_1 + 72, i64_ZERO)
						store_i64(memory_at_0, loc_1 + 80, i64_ZERO)
						store_i64(memory_at_0, loc_1 + 88, i64_ZERO)
						store_i32(memory_at_0, sub_i32(loc_1, 4294967232), loc_3)
						store_i64(memory_at_0, loc_1 + 104, i64_ZERO)
						store_i64(memory_at_0, loc_1 + 112, i64_ZERO)
						store_i64(memory_at_0, loc_1 + 120, i64_ZERO)
						store_i32(memory_at_0, loc_1 + 96, loc_3)
						loc_2 = add_i32(loc_2, 4)
						loc_5 = add_i32(loc_5, 4)
						if loc_9 ~= loc_5 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 ~= 0 then
				while true do
					while true do
						loc_1 = add_i32(shl_i32(loc_2, 5), loc_7)
						store_i64(memory_at_0, loc_1 + 8, i64_ZERO)
						store_i32(memory_at_0, loc_1, loc_3)
						store_i64(memory_at_0, loc_1 + 16, i64_ZERO)
						store_i64(memory_at_0, loc_1 + 24, i64_ZERO)
						loc_2 = add_i32(loc_2, 1)
						loc_4 = add_i32(loc_4, 1)
						if loc_8 ~= loc_4 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		if loc_1 ~= 0 then
			while true do
				loc_8 = sub_i32(loc_6, 1)
				loc_9 = 0
				while true do
					loc_10 = add_i32(load_i32(memory_at_0, loc_0), shl_i32(loc_9, 5))
					loc_4 = load_i32(memory_at_0, loc_10)
					if loc_4 ~= load_i32(memory_at_0, loc_0 + 12) then
						while true do
							while true do
								while true do
									loc_1 = band_i32(loc_8, bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9)))
									loc_5 = add_i32(shl_i32(loc_1, 5), loc_7)
									loc_3 = load_i32(memory_at_0, loc_5)
									if loc_11 == loc_3 then
										break
									end
									loc_2 = 0
									if loc_3 == loc_4 then
										desired = 4
										break
									end
									while true do
										loc_2 = add_i32(loc_2, 1)
										loc_1 = band_i32(loc_8, add_i32(loc_1, loc_2))
										loc_5 = add_i32(shl_i32(loc_1, 5), loc_7)
										loc_3 = load_i32(memory_at_0, loc_5)
										if loc_11 == loc_3 then
											desired = 5
											break
										end
										if loc_3 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
								store_i32(memory_at_0, loc_5, loc_4)
								break
							end
							if desired then
								break
							end
							store_i32(memory_at_0, loc_5, loc_4)
							store_i64(memory_at_0, loc_5 + 24, load_i64(memory_at_0, loc_10 + 24))
							store_i64(memory_at_0, loc_5 + 16, load_i64(memory_at_0, loc_10 + 16))
							store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_10 + 8))
							reg_0 = load_i32(memory_at_0, loc_0 + 4)
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					else
						while true do
							reg_0 = loc_1
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_1 = reg_0
					loc_9 = add_i32(loc_9, 1)
					if loc_1 > loc_9 then
						continue
					end
					break
				end
				break
			end
		end
		store_i32(memory_at_0, loc_0 + 4, loc_6)
		loc_1 = load_i32(memory_at_0, loc_0)
		store_i32(memory_at_0, loc_0, loc_7)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[44] = --[[ Luau::Compile::predictTableShapes(Luau::DenseHashMap<Luau::AstExprTable*, Luau::Compile::TableShape, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprTable*>>&, Luau::AstNode*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_2
		store_i64(memory_at_0, loc_2 + 24, i64_ZERO)
		store_i64(memory_at_0, loc_2 + 44, i64_ZERO)
		store_i32(memory_at_0, loc_2 + 52, 0)
		store_i64(memory_at_0, loc_2 + 68, i64_ZERO)
		store_i64(memory_at_0, loc_2 + 16, i64_ZERO)
		store_i32(memory_at_0, loc_2 + 12, loc_0)
		store_i64(memory_at_0, loc_2 + 36, i64_ZERO)
		store_i64(memory_at_0, loc_2 + 60, i64_ZERO)
		loc_0 = 9568
		store_i32(memory_at_0, loc_2 + 8, loc_0)
		TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1))](loc_1, add_i32(loc_2, 8))
		store_i32(memory_at_0, loc_2 + 8, 9568)
		loc_1 = load_i32(memory_at_0, loc_2 + 60)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_2 + 60, i64_ZERO)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_2 + 36)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_2 + 36, i64_ZERO)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_2 + 16)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 80)
		break
	end
end
FUNC_LIST[45] = --[[ Luau::Compile::ShapeVisitor::~ShapeVisitor() ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0, 9568)
		loc_1 = load_i32(memory_at_0, loc_0 + 52)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_0 + 52, i64_ZERO)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 28)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_0 + 28, i64_ZERO)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 8)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[46] = --[[ Luau::Compile::ShapeVisitor::~ShapeVisitor().1 ]] function(loc_0)
	local loc_1 = 0
	while true do
		store_i32(memory_at_0, loc_0, 9568)
		loc_1 = load_i32(memory_at_0, loc_0 + 52)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_0 + 52, i64_ZERO)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 28)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_0 + 28, i64_ZERO)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 8)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				break
			end
		end
		FUNC_LIST[609](loc_0)
		break
	end
end
FUNC_LIST[47] = --[[ Luau::Compile::ShapeVisitor::visit(Luau::AstStatLocal*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		while true do
			if load_i32(memory_at_0, loc_1 + 32) ~= 1 then
				break
			end
			if load_i32(memory_at_0, loc_1 + 40) ~= 1 then
				break
			end
			loc_2 = load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 36))
			loc_3 = load_i32(memory_at_0, loc_2 + 4)
			loc_4 = load_i32(memory_at_0, 47276)
			if (if loc_4 == loc_3 then loc_2 else 0) == 0 then
				while true do
					if load_i32(memory_at_0, 47244) ~= loc_3 then
						desired = 1
						break
					end
					if load_i32_u8(memory_at_0, loc_2 + 36) ~= 0 then
						desired = 1
						break
					end
					if load_i32(memory_at_0, loc_2 + 32) ~= 2 then
						desired = 1
						break
					end
					loc_3 = load_i32(memory_at_0, loc_2 + 24)
					if loc_3 == 0 then
						desired = 1
						break
					end
					if load_i32(memory_at_0, loc_3 + 4) ~= load_i32(memory_at_0, 47228) then
						desired = 1
						break
					end
					loc_3 = load_i32(memory_at_0, loc_3 + 24)
					if loc_3 == 0 then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[544](loc_3, 4771)
					if reg_0 ~= 0 then
						desired = 1
						break
					end
					loc_2 = load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 28))
					loc_2 = (if loc_4 == load_i32(memory_at_0, loc_2 + 4) then loc_2 else 0)
					if loc_2 == 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if load_i32(memory_at_0, loc_2 + 28) ~= 0 then
				break
			end
			reg_0 = FUNC_LIST[20](add_i32(loc_0, 8), load_i32(memory_at_0, loc_1 + 28))
			store_i32(memory_at_0, reg_0, loc_2)
			break
		end
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[48] = --[[ Luau::Compile::ShapeVisitor::visit(Luau::AstStatFor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		while true do
			loc_2 = load_i32(memory_at_0, loc_1 + 32)
			reg_0 = loc_2
			reg_2 = load_i32(memory_at_0, loc_2 + 4)
			loc_2 = load_i32(memory_at_0, 47204)
			loc_3 = (if reg_2 == loc_2 then reg_0 else 0)
			if loc_3 == 0 then
				break
			end
			loc_4 = load_i32(memory_at_0, loc_1 + 36)
			loc_2 = (if loc_2 == load_i32(memory_at_0, loc_4 + 4) then loc_4 else 0)
			if loc_2 == 0 then
				break
			end
			if load_f64(memory_at_0, loc_3 + 24) ~= 1e0 then
				break
			end
			loc_5 = load_f64(memory_at_0, loc_2 + 24)
			if (if loc_5 >= 1e0 then 1 else 0) == 0 then
				break
			end
			if (if loc_5 <= 1.6e1 then 1 else 0) == 0 then
				break
			end
			if load_i32(memory_at_0, loc_1 + 40) ~= 0 then
				break
			end
			loc_1 = add_i32(loc_1, 28)
			loc_2 = add_i32(loc_0, 52)
			while true do
				if band_i32((if loc_5 < 4.294967296e9 then 1 else 0), (if loc_5 >= 0e0 then 1 else 0)) ~= 0 then
					while true do
						reg_0 = truncate_u32_f64(loc_5)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_0
			reg_0 = FUNC_LIST[20](loc_2, loc_1)
			store_i32(memory_at_0, reg_0, loc_3)
			break
		end
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[49] = --[[ Luau::Compile::ShapeVisitor::visit(Luau::AstStatAssign*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		if load_i32(memory_at_0, loc_1 + 32) ~= 0 then
			while true do
				while true do
					loc_2 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 28), shl_i32(loc_3, 2)))
					loc_4 = load_i32(memory_at_0, loc_2 + 4)
					while true do
						while true do
							if loc_2 == 0 then
								break
							end
							if load_i32(memory_at_0, 47252) ~= loc_4 then
								break
							end
							FUNC_LIST[50](loc_0, load_i32(memory_at_0, loc_2 + 24), load_i32(memory_at_0, loc_2 + 28))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						if loc_2 == 0 then
							break
						end
						if load_i32(memory_at_0, 47260) ~= loc_4 then
							break
						end
						FUNC_LIST[51](loc_0, load_i32(memory_at_0, loc_2 + 24), load_i32(memory_at_0, loc_2 + 28))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_3 = add_i32(loc_3, 1)
					if loc_3 < load_i32(memory_at_0, loc_1 + 32) then
						continue
					end
					break
				end
				break
			end
		end
		if load_i32(memory_at_0, loc_1 + 40) ~= 0 then
			while true do
				loc_2 = 0
				while true do
					loc_3 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 36), shl_i32(loc_2, 2)))
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_0)
					loc_2 = add_i32(loc_2, 1)
					if loc_2 < load_i32(memory_at_0, loc_1 + 40) then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[50] = --[[ Luau::Compile::ShapeVisitor::assignField(Luau::AstExpr*, Luau::AstName) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		loc_8 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_8
		while true do
			if loc_1 == 0 then
				break
			end
			if load_i32(memory_at_0, loc_1 + 4) ~= load_i32(memory_at_0, 47220) then
				break
			end
			if load_i32(memory_at_0, loc_0 + 16) == 0 then
				break
			end
			loc_5 = load_i32(memory_at_0, loc_1 + 24)
			loc_4 = load_i32(memory_at_0, loc_0 + 20)
			if loc_5 == loc_4 then
				break
			end
			loc_3 = bxor_i32(shr_u32(loc_5, 4), shr_u32(loc_5, 9))
			loc_6 = sub_i32(load_i32(memory_at_0, loc_0 + 12), 1)
			loc_9 = load_i32(memory_at_0, loc_0 + 8)
			loc_1 = 0
			while true do
				loc_7 = band_i32(loc_3, loc_6)
				loc_10 = add_i32(shl_i32(loc_7, 3), loc_9)
				loc_3 = load_i32(memory_at_0, loc_10)
				if loc_3 ~= loc_5 then
					while true do
						if loc_3 == loc_4 then
							desired = 1
							break
						end
						loc_1 = add_i32(loc_1, 1)
						loc_3 = add_i32(loc_7, loc_1)
						if loc_1 <= loc_6 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = load_i32(memory_at_0, loc_10 + 4)
			store_i32(memory_at_0, loc_8 + 12, loc_2)
			store_i32(memory_at_0, loc_8 + 8, loc_4)
			while true do
				if load_i32(memory_at_0, loc_0 + 36) == 0 then
					break
				end
				loc_9 = load_i32(memory_at_0, loc_0 + 40)
				loc_11 = load_i32(memory_at_0, loc_0 + 44)
				if band_i32((if loc_4 == loc_9 then 1 else 0), (if loc_2 == loc_11 then 1 else 0)) ~= 0 then
					break
				end
				loc_1 = bxor_i32(loc_2, loc_4)
				loc_3 = bxor_i32(shr_u32(loc_1, 4), shr_u32(loc_1, 9))
				loc_6 = sub_i32(load_i32(memory_at_0, loc_0 + 32), 1)
				loc_12 = load_i32(memory_at_0, loc_0 + 28)
				loc_1 = 0
				while true do
					loc_5 = band_i32(loc_3, loc_6)
					loc_7 = add_i32(shl_i32(loc_5, 3), loc_12)
					loc_3 = load_i32(memory_at_0, loc_7 + 4)
					loc_7 = load_i32(memory_at_0, loc_7)
					if band_i32((if loc_7 == loc_4 then 1 else 0), (if loc_2 == loc_3 then 1 else 0)) ~= 0 then
						desired = 1
						break
					end
					if band_i32((if loc_7 == loc_9 then 1 else 0), (if loc_3 == loc_11 then 1 else 0)) ~= 0 then
						desired = 2
						break
					end
					loc_1 = add_i32(loc_1, 1)
					loc_3 = add_i32(loc_5, loc_1)
					if loc_1 <= loc_6 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[53](add_i32(loc_0, 28), add_i32(loc_8, 8))
			reg_0 = FUNC_LIST[174](load_i32(memory_at_0, loc_0 + 4), add_i32(loc_10, 4))
			loc_1 = reg_0
			store_i32(memory_at_0, loc_1 + 4, add_i32(load_i32(memory_at_0, loc_1 + 4), 1))
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_8, 16)
		break
	end
end
FUNC_LIST[51] = --[[ Luau::Compile::ShapeVisitor::assignField(Luau::AstExpr*, Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local desired
	while true do
		while true do
			if loc_1 == 0 then
				break
			end
			loc_10 = load_i32(memory_at_0, loc_1 + 4)
			if loc_10 ~= load_i32(memory_at_0, 47220) then
				break
			end
			if load_i32(memory_at_0, loc_0 + 16) == 0 then
				break
			end
			loc_4 = load_i32(memory_at_0, loc_1 + 24)
			loc_5 = load_i32(memory_at_0, loc_0 + 20)
			if loc_4 == loc_5 then
				break
			end
			loc_3 = bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9))
			loc_6 = sub_i32(load_i32(memory_at_0, loc_0 + 12), 1)
			loc_7 = load_i32(memory_at_0, loc_0 + 8)
			loc_1 = 0
			while true do
				loc_8 = band_i32(loc_3, loc_6)
				loc_9 = add_i32(shl_i32(loc_8, 3), loc_7)
				loc_3 = load_i32(memory_at_0, loc_9)
				if loc_3 ~= loc_4 then
					while true do
						if loc_3 == loc_5 then
							desired = 1
							break
						end
						loc_1 = add_i32(loc_1, 1)
						loc_3 = add_i32(loc_8, loc_1)
						if loc_1 <= loc_6 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = add_i32(loc_9, 4)
			loc_1 = load_i32(memory_at_0, loc_2 + 4)
			while true do
				if loc_2 == 0 then
					break
				end
				if load_i32(memory_at_0, 47204) ~= loc_1 then
					break
				end
				reg_0 = FUNC_LIST[174](load_i32(memory_at_0, loc_0 + 4), loc_4)
				loc_1 = reg_0
				loc_3 = add_i32(load_i32(memory_at_0, loc_1), 1)
				if load_f64(memory_at_0, loc_2 + 24) ~= convert_f64_u32(loc_3) then
					desired = 1
					break
				end
				store_i32(memory_at_0, loc_1, loc_3)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_2 == 0 then
				break
			end
			if loc_1 ~= loc_10 then
				break
			end
			if load_i32(memory_at_0, loc_0 + 60) == 0 then
				break
			end
			loc_5 = load_i32(memory_at_0, loc_2 + 24)
			loc_7 = load_i32(memory_at_0, loc_0 + 64)
			if loc_5 == loc_7 then
				break
			end
			loc_3 = bxor_i32(shr_u32(loc_5, 4), shr_u32(loc_5, 9))
			loc_6 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
			loc_9 = load_i32(memory_at_0, loc_0 + 52)
			loc_1 = 0
			while true do
				loc_8 = band_i32(loc_3, loc_6)
				loc_2 = add_i32(shl_i32(loc_8, 3), loc_9)
				loc_3 = load_i32(memory_at_0, loc_2)
				if loc_3 ~= loc_5 then
					while true do
						if loc_3 == loc_7 then
							desired = 1
							break
						end
						loc_1 = add_i32(loc_1, 1)
						loc_3 = add_i32(loc_8, loc_1)
						if loc_1 <= loc_6 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[174](load_i32(memory_at_0, loc_0 + 4), loc_4)
			loc_1 = reg_0
			if load_i32(memory_at_0, loc_1) ~= 0 then
				break
			end
			store_i32(memory_at_0, loc_1, load_i32(memory_at_0, loc_2 + 4))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[52] = --[[ Luau::Compile::ShapeVisitor::visit(Luau::AstStatFunction*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = load_i32(memory_at_0, loc_1 + 28)
		loc_3 = load_i32(memory_at_0, loc_2 + 4)
		while true do
			while true do
				if loc_2 == 0 then
					break
				end
				if load_i32(memory_at_0, 47252) ~= loc_3 then
					break
				end
				FUNC_LIST[50](loc_0, load_i32(memory_at_0, loc_2 + 24), load_i32(memory_at_0, loc_2 + 28))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_2 == 0 then
				break
			end
			if load_i32(memory_at_0, 47260) ~= loc_3 then
				break
			end
			FUNC_LIST[51](loc_0, load_i32(memory_at_0, loc_2 + 24), load_i32(memory_at_0, loc_2 + 28))
			break
		end
		loc_2 = load_i32(memory_at_0, loc_1 + 32)
		TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[53] = --[[ Luau::DenseHashSet<std::__2::pair<Luau::AstExprTable*, Luau::AstName>, Luau::Compile::ShapeVisitor::Hasher, std::__2::equal_to<std::__2::pair<Luau::AstExprTable*, Luau::AstName>>>::insert(std::__2::pair<Luau::AstExprTable*, Luau::AstName> const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_2 = load_i32(memory_at_0, loc_0 + 8)
			loc_6 = load_i32(memory_at_0, loc_0 + 4)
			if loc_2 < shr_u32(mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_2 == 0 then
					break
				end
				loc_5 = load_i32(memory_at_0, loc_1)
				loc_11 = load_i32(memory_at_0, loc_0 + 12)
				loc_9 = load_i32(memory_at_0, loc_0 + 16)
				loc_10 = load_i32(memory_at_0, loc_1 + 4)
				if band_i32((if loc_5 == loc_11 then 1 else 0), (if loc_9 == loc_10 then 1 else 0)) ~= 0 then
					break
				end
				loc_2 = bxor_i32(loc_5, loc_10)
				loc_4 = bxor_i32(shr_u32(loc_2, 4), shr_u32(loc_2, 9))
				loc_7 = sub_i32(loc_6, 1)
				loc_12 = load_i32(memory_at_0, loc_0)
				loc_2 = 0
				while true do
					loc_8 = band_i32(loc_4, loc_7)
					loc_3 = add_i32(shl_i32(loc_8, 3), loc_12)
					loc_4 = load_i32(memory_at_0, loc_3 + 4)
					loc_3 = load_i32(memory_at_0, loc_3)
					if band_i32((if loc_3 == loc_5 then 1 else 0), (if loc_4 == loc_10 then 1 else 0)) ~= 0 then
						desired = 1
						break
					end
					if band_i32((if loc_3 == loc_11 then 1 else 0), (if loc_4 == loc_9 then 1 else 0)) ~= 0 then
						desired = 2
						break
					end
					loc_2 = add_i32(loc_2, 1)
					loc_4 = add_i32(loc_8, loc_2)
					if loc_2 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[54](loc_0)
			loc_6 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		loc_11 = load_i32(memory_at_0, loc_0)
		loc_6 = sub_i32(loc_6, 1)
		loc_5 = load_i32(memory_at_0, loc_1)
		loc_9 = load_i32(memory_at_0, loc_1 + 4)
		loc_2 = bxor_i32(loc_5, loc_9)
		loc_4 = band_i32(loc_6, bxor_i32(shr_u32(loc_2, 4), shr_u32(loc_2, 9)))
		loc_2 = add_i32(loc_11, shl_i32(loc_4, 3))
		loc_3 = load_i32(memory_at_0, loc_2 + 4)
		while true do
			while true do
				loc_8 = load_i32(memory_at_0, loc_2)
				loc_12 = load_i32(memory_at_0, loc_0 + 12)
				loc_10 = load_i32(memory_at_0, loc_0 + 16)
				if band_i32((if loc_8 == loc_12 then 1 else 0), (if loc_10 == loc_3 then 1 else 0)) ~= 0 then
					break
				end
				loc_7 = 0
				if band_i32((if loc_5 == loc_8 then 1 else 0), (if loc_3 == loc_9 then 1 else 0)) ~= 0 then
					desired = 1
					break
				end
				while true do
					loc_7 = add_i32(loc_7, 1)
					loc_4 = band_i32(loc_6, add_i32(loc_4, loc_7))
					loc_2 = add_i32(shl_i32(loc_4, 3), loc_11)
					loc_3 = load_i32(memory_at_0, loc_2 + 4)
					loc_8 = load_i32(memory_at_0, loc_2)
					if band_i32((if loc_8 == loc_12 then 1 else 0), (if loc_3 == loc_10 then 1 else 0)) ~= 0 then
						desired = 2
						break
					end
					if loc_5 ~= loc_8 then
						continue
					end
					if loc_3 ~= loc_9 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_2, loc_5)
			store_i32(memory_at_0, loc_2 + 4, load_i32(memory_at_0, loc_1 + 4))
			store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[54] = --[[ Luau::detail::DenseHashTable<std::__2::pair<Luau::AstExprTable*, Luau::AstName>, std::__2::pair<Luau::AstExprTable*, Luau::AstName>, std::__2::pair<Luau::AstExprTable*, Luau::AstName>, Luau::detail::ItemInterfaceSet<std::__2::pair<Luau::AstExprTable*, Luau::AstName>>, Luau::Compile::ShapeVisitor::Hasher, std::__2::equal_to<std::__2::pair<Luau::AstExprTable*, Luau::AstName>>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_13 = load_i32(memory_at_0, loc_0 + 16)
		loc_14 = load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_10 = load_i32(memory_at_0, loc_0 + 4)
			loc_4 = (if loc_10 ~= 0 then shl_i32(loc_10, 1) else 16)
			if loc_4 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = band_i32(loc_4, 6)
			reg_0 = FUNC_LIST[606](shl_i32(loc_4, 3))
			loc_5 = reg_0
			loc_16 = load_i64(memory_at_0, loc_0 + 12)
			if loc_4 >= 8 then
				while true do
					loc_7 = band_i32(loc_4, 4294967288)
					while true do
						loc_1 = add_i32(shl_i32(loc_2, 3), loc_5)
						store_i64(memory_at_0, loc_1, loc_16)
						store_i64(memory_at_0, loc_1 + 8, loc_16)
						store_i64(memory_at_0, loc_1 + 16, loc_16)
						store_i64(memory_at_0, loc_1 + 24, loc_16)
						store_i64(memory_at_0, loc_1 + 32, loc_16)
						store_i64(memory_at_0, loc_1 + 40, loc_16)
						store_i64(memory_at_0, loc_1 + 48, loc_16)
						store_i64(memory_at_0, loc_1 + 56, loc_16)
						loc_2 = add_i32(loc_2, 8)
						loc_8 = add_i32(loc_8, 8)
						if loc_7 ~= loc_8 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_3 ~= 0 then
				while true do
					while true do
						store_i64(memory_at_0, add_i32(shl_i32(loc_2, 3), loc_5), loc_16)
						loc_2 = add_i32(loc_2, 1)
						loc_6 = add_i32(loc_6, 1)
						if loc_3 ~= loc_6 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_10 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		if loc_10 ~= 0 then
			while true do
				loc_15 = sub_i32(loc_4, 1)
				while true do
					loc_12 = add_i32(load_i32(memory_at_0, loc_0), shl_i32(loc_11, 3))
					loc_9 = load_i32(memory_at_0, loc_12 + 4)
					while true do
						loc_2 = load_i32(memory_at_0, loc_12)
						if loc_2 == load_i32(memory_at_0, loc_0 + 12) then
							while true do
								if load_i32(memory_at_0, loc_0 + 16) == loc_9 then
									desired = 3
									break
								end
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_1 = bxor_i32(loc_2, loc_9)
						loc_6 = band_i32(loc_15, bxor_i32(shr_u32(loc_1, 4), shr_u32(loc_1, 9)))
						loc_1 = add_i32(shl_i32(loc_6, 3), loc_5)
						loc_3 = load_i32(memory_at_0, loc_1 + 4)
						while true do
							while true do
								loc_7 = load_i32(memory_at_0, loc_1)
								if band_i32((if loc_7 == loc_14 then 1 else 0), (if loc_3 == loc_13 then 1 else 0)) ~= 0 then
									break
								end
								loc_8 = 0
								if band_i32((if loc_2 == loc_7 then 1 else 0), (if loc_3 == loc_9 then 1 else 0)) ~= 0 then
									desired = 4
									break
								end
								while true do
									loc_8 = add_i32(loc_8, 1)
									loc_6 = band_i32(loc_15, add_i32(loc_6, loc_8))
									loc_1 = add_i32(shl_i32(loc_6, 3), loc_5)
									loc_3 = load_i32(memory_at_0, loc_1 + 4)
									loc_7 = load_i32(memory_at_0, loc_1)
									if band_i32((if loc_7 == loc_14 then 1 else 0), (if loc_3 == loc_13 then 1 else 0)) ~= 0 then
										desired = 5
										break
									end
									if loc_2 ~= loc_7 then
										continue
									end
									if loc_3 ~= loc_9 then
										continue
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							store_i32(memory_at_0, loc_1 + 4, loc_9)
							store_i32(memory_at_0, loc_1, loc_2)
							loc_2 = load_i32(memory_at_0, loc_12)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						store_i32(memory_at_0, loc_1, loc_2)
						store_i32(memory_at_0, loc_1 + 4, load_i32(memory_at_0, loc_12 + 4))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_11 = add_i32(loc_11, 1)
					if loc_10 ~= loc_11 then
						continue
					end
					break
				end
				break
			end
		end
		store_i32(memory_at_0, loc_0 + 4, loc_4)
		loc_1 = load_i32(memory_at_0, loc_0)
		store_i32(memory_at_0, loc_0, loc_5)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[55] = --[[ Luau::buildTypeMap(Luau::DenseHashMap<Luau::AstExprFunction*, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprFunction*>>&, Luau::AstNode*, char const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		store_i64(memory_at_0, loc_3 + 24, i64_ZERO)
		store_i32(memory_at_0, loc_3 + 44, 0)
		store_i64(memory_at_0, loc_3 + 36, i64_ZERO)
		store_i32(memory_at_0, loc_3 + 12, loc_2)
		store_i32(memory_at_0, loc_3 + 8, loc_0)
		store_i64(memory_at_0, loc_3 + 16, i64_ZERO)
		loc_2 = 9852
		store_i32(memory_at_0, loc_3 + 4, loc_2)
		TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1))](loc_1, add_i32(loc_3, 4))
		store_i32(memory_at_0, loc_3 + 4, 9852)
		loc_1 = load_i32(memory_at_0, loc_3 + 36)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_3 + 40, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_3 + 16)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 48)
		break
	end
end
FUNC_LIST[56] = --[[ Luau::TypeMapVisitor::~TypeMapVisitor() ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0, 9852)
		loc_1 = load_i32(memory_at_0, loc_0 + 32)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 36, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 12)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_0 + 12, i64_ZERO)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[57] = --[[ Luau::TypeMapVisitor::~TypeMapVisitor().1 ]] function(loc_0)
	local loc_1 = 0
	while true do
		store_i32(memory_at_0, loc_0, 9852)
		loc_1 = load_i32(memory_at_0, loc_0 + 32)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 36, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 12)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				break
			end
		end
		FUNC_LIST[609](loc_0)
		break
	end
end
FUNC_LIST[58] = --[[ Luau::TypeMapVisitor::visit(Luau::AstExprFunction*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_2
		store_i32(memory_at_0, loc_2 + 12, loc_1)
		loc_6 = load_i32(memory_at_0, loc_0 + 8)
		loc_3 = load_i32(memory_at_0, loc_1 + 40)
		store_i32(memory_at_0, loc_2 + 24, 0)
		store_i64(memory_at_0, loc_2 + 16, i64_ZERO)
		FUNC_LIST[673](add_i32(loc_2, 16), add_i32(load_i32(memory_at_0, loc_1 + 48), (if loc_3 ~= 0 then 3 else 2)))
		FUNC_LIST[680](add_i32(loc_2, 16), 5)
		FUNC_LIST[680](add_i32(loc_2, 16), extend_i32_n8(add_i32(load_i32(memory_at_0, loc_1 + 48), (if loc_3 ~= 0 then 1 else 0))))
		if loc_3 ~= 0 then
			while true do
				FUNC_LIST[680](add_i32(loc_2, 16), 4)
				break
			end
		end
		while true do
			while true do
				loc_4 = load_i32(memory_at_0, loc_1 + 48)
				if loc_4 ~= 0 then
					while true do
						loc_7 = add_i32(loc_0, 12)
						loc_3 = load_i32(memory_at_0, loc_1 + 44)
						loc_5 = add_i32(loc_3, shl_i32(loc_4, 2))
						loc_8 = add_i32(loc_1, 24)
						loc_4 = 0
						while true do
							while true do
								loc_1 = load_i32(memory_at_0, load_i32(memory_at_0, loc_3) + 32)
								if loc_1 == 0 then
									while true do
										loc_1 = 15
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								reg_1 = FUNC_LIST[59](loc_1, loc_8, loc_7, 1, loc_6)
								loc_1 = reg_1
								loc_4 = bor_i32(loc_4, (if loc_1 ~= 15 then 1 else 0))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							FUNC_LIST[680](add_i32(loc_2, 16), extend_i32_n8(loc_1))
							loc_3 = add_i32(loc_3, 4)
							if loc_5 ~= loc_3 then
								continue
							end
							break
						end
						if desired then
							break
						end
						if band_i32(loc_4, 1) ~= 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if ge_i32(load_i32_i8(memory_at_0, loc_2 + 27), 0) then
					desired = 1
					break
				end
				FUNC_LIST[609](load_i32(memory_at_0, loc_2 + 16))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n16(memory_at_0, loc_2 + 8, load_i32_u16(memory_at_0, loc_2 + 24))
			store_i32_n8(memory_at_0, loc_2 + 10, load_i32_u8(memory_at_0, loc_2 + 26))
			loc_4 = load_i32(memory_at_0, loc_2 + 16)
			loc_5 = load_i32(memory_at_0, loc_2 + 20)
			loc_1 = extend_i32_n8(load_i32_u8(memory_at_0, loc_2 + 27))
			if (if lt_i32(loc_1, 0) then loc_5 else loc_1) ~= 0 then
				while true do
					reg_0 = FUNC_LIST[60](load_i32(memory_at_0, loc_0 + 4), add_i32(loc_2, 12))
					loc_3 = reg_0
					if lt_i32(load_i32_i8(memory_at_0, loc_3 + 11), 0) then
						while true do
							FUNC_LIST[609](load_i32(memory_at_0, loc_3))
							break
						end
						if desired then
							break
						end
					end
					store_i32(memory_at_0, loc_3 + 4, loc_5)
					store_i32(memory_at_0, loc_3, loc_4)
					store_i32_n16(memory_at_0, loc_3 + 8, load_i32_u16(memory_at_0, loc_2 + 8))
					store_i32_n8(memory_at_0, loc_3 + 10, load_i32_u8(memory_at_0, loc_2 + 10))
					store_i32_n8(memory_at_0, loc_3 + 11, loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if ge_i32(loc_1, 0) then
				break
			end
			FUNC_LIST[609](loc_4)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 32)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[59] = --[[ Luau::getType(Luau::AstType*, Luau::AstArray<Luau::AstGenericType> const&, Luau::DenseHashMap<Luau::AstName, Luau::AstStatTypeAlias*, std::__2::hash<Luau::AstName>, std::__2::equal_to<Luau::AstName>> const&, bool, char const*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_5 = load_i32(memory_at_0, loc_0 + 4)
		while true do
			while true do
				while true do
					while true do
						if loc_0 == 0 then
							while true do
								loc_7 = loc_1
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_12 = load_i32(memory_at_0, 47476)
						if loc_5 ~= loc_12 then
							while true do
								loc_7 = loc_1
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_9 = sub_i32(load_i32(memory_at_0, loc_2 + 4), 1)
						loc_13 = load_i32(memory_at_0, loc_2)
						loc_11 = load_i32(memory_at_0, loc_2 + 12)
						loc_14 = load_i32(memory_at_0, loc_2 + 8)
						loc_7 = loc_1
						while true do
							loc_8 = 15
							if load_i32_u8(memory_at_0, loc_0 + 32) ~= 0 then
								desired = 1
								break
							end
							loc_5 = load_i32(memory_at_0, loc_0 + 56)
							if loc_14 == 0 then
								while true do
									loc_7 = loc_1
									desired = 2
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							if loc_5 == loc_11 then
								while true do
									loc_5 = loc_11
									desired = 2
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_6 = bxor_i32(shr_u32(loc_5, 4), shr_u32(loc_5, 9))
							loc_0 = 0
							while true do
								loc_10 = band_i32(loc_6, loc_9)
								loc_15 = add_i32(shl_i32(loc_10, 3), loc_13)
								loc_6 = load_i32(memory_at_0, loc_15)
								if loc_6 ~= loc_5 then
									while true do
										if loc_6 == loc_11 then
											desired = 2
											break
										end
										loc_0 = add_i32(loc_0, 1)
										loc_6 = add_i32(loc_10, loc_0)
										if loc_0 <= loc_9 then
											desired = 6
											break
										end
										desired = 2
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							loc_0 = load_i32(memory_at_0, loc_15 + 4)
							if band_i32(bor_i32((if loc_0 == 0 then 1 else 0), bxor_i32(loc_3, 4294967295)), 1) ~= 0 then
								desired = 3
								break
							end
							loc_7 = add_i32(loc_0, 48)
							loc_0 = load_i32(memory_at_0, loc_0 + 64)
							loc_5 = load_i32(memory_at_0, loc_0 + 4)
							loc_3 = 0
							if loc_0 == 0 then
								desired = 4
								break
							end
							if loc_5 == loc_12 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_8 = 4
					if load_i32(memory_at_0, 47484) == loc_5 then
						desired = 1
						break
					end
					loc_8 = 5
					if load_i32(memory_at_0, 47492) == loc_5 then
						desired = 1
						break
					end
					loc_8 = 15
					if load_i32(memory_at_0, 47508) ~= loc_5 then
						desired = 1
						break
					end
					loc_5 = load_i32(memory_at_0, loc_0 + 28)
					if loc_5 == 0 then
						desired = 1
						break
					end
					loc_0 = load_i32(memory_at_0, loc_0 + 24)
					loc_9 = add_i32(loc_0, shl_i32(loc_5, 2))
					loc_6 = 256
					loc_10 = 0
					while true do
						while true do
							reg_0 = FUNC_LIST[59](load_i32(memory_at_0, loc_0), loc_7, loc_2, loc_3, loc_4)
							loc_5 = reg_0
							if loc_5 == 0 then
								while true do
									loc_10 = 1
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_6 == 256 then
								while true do
									loc_6 = loc_5
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_5 ~= loc_6 then
								desired = 1
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_0 = add_i32(loc_0, 4)
						if loc_9 ~= loc_0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_6 == 256 then
						desired = 1
						break
					end
					loc_8 = bor_i32(loc_6, (if band_i32(loc_10, 1) ~= 0 then shl_i32((if loc_6 ~= 15 then 1 else 0), 7) else 0))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_0 ~= 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = load_i32(memory_at_0, loc_7 + 4)
			if loc_6 ~= 0 then
				while true do
					loc_0 = load_i32(memory_at_0, loc_7)
					loc_6 = add_i32(loc_0, mul_i32(loc_6, 24))
					while true do
						if loc_5 == load_i32(memory_at_0, loc_0) then
							desired = 1
							break
						end
						loc_0 = add_i32(loc_0, 24)
						if loc_6 ~= loc_0 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				if loc_4 ~= 0 then
					while true do
						if loc_5 == 0 then
							while true do
								reg_0 = 7
								desired = 0
								break
							end
							if desired then
								break
							end
						end
						reg_0 = FUNC_LIST[544](loc_5, loc_4)
						if reg_0 ~= 0 then
							desired = 2
							break
						end
						reg_0 = 8
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_5 ~= 0 then
					break
				end
				reg_0 = 7
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[544](loc_5, 3572)
			if reg_0 == 0 then
				while true do
					reg_0 = 0
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[544](loc_5, 3497)
			if reg_0 == 0 then
				while true do
					reg_0 = 1
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[544](loc_5, 3034)
			if reg_0 == 0 then
				while true do
					reg_0 = 2
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[544](loc_5, 3843)
			if reg_0 == 0 then
				while true do
					reg_0 = 3
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[544](loc_5, 5399)
			if reg_0 == 0 then
				while true do
					reg_0 = 6
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[544](loc_5, 3008)
			if reg_0 == 0 then
				while true do
					reg_0 = 9
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[544](loc_5, 1063)
			if reg_0 == 0 then
				break
			end
			reg_2 = FUNC_LIST[544](loc_5, 3175)
			reg_0 = (if reg_2 ~= 0 then 7 else 15)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_8
		break
	end
	return reg_0
end
FUNC_LIST[60] = --[[ Luau::DenseHashMap<Luau::AstExprFunction*, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprFunction*>>::operator[](Luau::AstExprFunction* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			loc_6 = load_i32(memory_at_0, loc_0 + 4)
			if loc_3 < shr_u32(mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_3 == 0 then
					break
				end
				loc_4 = load_i32(memory_at_0, loc_1)
				loc_8 = load_i32(memory_at_0, loc_0 + 12)
				if loc_4 == loc_8 then
					break
				end
				loc_2 = bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9))
				loc_7 = sub_i32(loc_6, 1)
				loc_9 = load_i32(memory_at_0, loc_0)
				loc_3 = 0
				while true do
					loc_5 = band_i32(loc_2, loc_7)
					loc_2 = load_i32(memory_at_0, add_i32(shl_i32(loc_5, 4), loc_9))
					if loc_4 == loc_2 then
						desired = 1
						break
					end
					if loc_2 == loc_8 then
						desired = 2
						break
					end
					loc_3 = add_i32(loc_3, 1)
					loc_2 = add_i32(loc_5, loc_3)
					if loc_3 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[64](loc_0)
			loc_6 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_8 = load_i32(memory_at_0, loc_0)
				loc_6 = sub_i32(loc_6, 1)
				loc_5 = load_i32(memory_at_0, loc_1)
				loc_3 = band_i32(loc_6, bxor_i32(shr_u32(loc_5, 4), shr_u32(loc_5, 9)))
				loc_4 = add_i32(loc_8, shl_i32(loc_3, 4))
				loc_2 = load_i32(memory_at_0, loc_4)
				loc_9 = load_i32(memory_at_0, loc_0 + 12)
				if loc_2 == loc_9 then
					break
				end
				if loc_2 == loc_5 then
					desired = 1
					break
				end
				loc_2 = 0
				while true do
					loc_2 = add_i32(loc_2, 1)
					loc_3 = band_i32(loc_6, add_i32(loc_3, loc_2))
					loc_4 = add_i32(shl_i32(loc_3, 4), loc_8)
					loc_7 = load_i32(memory_at_0, loc_4)
					if loc_9 == loc_7 then
						desired = 2
						break
					end
					if loc_5 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_4, loc_5)
			store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = add_i32(loc_4, 4)
		break
	end
	return reg_0
end
FUNC_LIST[61] = --[[ Luau::TypeMapVisitor::visit(Luau::AstStatBlock*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[62](loc_0, loc_1)
		loc_5 = reg_0
		while true do
			loc_4 = load_i32(memory_at_0, loc_1 + 32)
			if loc_4 == 0 then
				break
			end
			loc_6 = load_i32(memory_at_0, loc_1 + 28)
			loc_1 = loc_6
			loc_7 = band_i32(loc_4, 3)
			if loc_7 ~= 0 then
				while true do
					while true do
						loc_3 = load_i32(memory_at_0, loc_1)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_0)
						loc_1 = add_i32(loc_1, 4)
						loc_2 = add_i32(loc_2, 1)
						if loc_7 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if band_i32(sub_i32(loc_4, 1), 1073741823) <= 2 then
				break
			end
			loc_3 = add_i32(shl_i32(loc_4, 2), loc_6)
			while true do
				loc_2 = load_i32(memory_at_0, loc_1)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_0)
				loc_2 = load_i32(memory_at_0, loc_1 + 4)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_0)
				loc_2 = load_i32(memory_at_0, loc_1 + 8)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_0)
				loc_2 = load_i32(memory_at_0, loc_1 + 12)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_0)
				loc_1 = add_i32(loc_1, 16)
				if loc_3 ~= loc_1 then
					continue
				end
				break
			end
			break
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 36)
		if shr_i32(sub_i32(loc_1, load_i32(memory_at_0, loc_0 + 32)), 3) > loc_5 then
			while true do
				loc_3 = add_i32(loc_0, 12)
				while true do
					loc_2 = load_i32(memory_at_0, sub_i32(loc_1, 4))
					reg_0 = FUNC_LIST[5](loc_3, sub_i32(loc_1, 8))
					store_i32(memory_at_0, reg_0, loc_2)
					loc_1 = sub_i32(load_i32(memory_at_0, loc_0 + 36), 8)
					store_i32(memory_at_0, loc_0 + 36, loc_1)
					if loc_5 < shr_i32(sub_i32(loc_1, load_i32(memory_at_0, loc_0 + 32)), 3) then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[62] = --[[ Luau::TypeMapVisitor::pushTypeAliases(Luau::AstStatBlock*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local reg_0
	local desired
	while true do
		loc_11 = load_i32(memory_at_0, loc_0 + 32)
		loc_12 = load_i32(memory_at_0, loc_0 + 36)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_1 + 32)
				if loc_2 ~= 0 then
					while true do
						loc_7 = add_i32(loc_0, 32)
						loc_8 = load_i32(memory_at_0, loc_1 + 28)
						loc_13 = add_i32(loc_8, shl_i32(loc_2, 2))
						loc_14 = add_i32(loc_0, 12)
						while true do
							while true do
								loc_4 = load_i32(memory_at_0, loc_8)
								if loc_4 == 0 then
									break
								end
								if load_i32(memory_at_0, loc_4 + 4) ~= load_i32(memory_at_0, 47444) then
									break
								end
								reg_0 = FUNC_LIST[5](loc_14, add_i32(loc_4, 28))
								loc_15 = reg_0
								loc_5 = load_i32(memory_at_0, loc_15)
								loc_6 = load_i32(memory_at_0, loc_4 + 28)
								while true do
									loc_1 = load_i32(memory_at_0, loc_0 + 36)
									loc_2 = load_i32(memory_at_0, loc_0 + 40)
									if loc_1 < loc_2 then
										while true do
											store_i32(memory_at_0, loc_1 + 4, loc_5)
											store_i32(memory_at_0, loc_1, loc_6)
											store_i32(memory_at_0, loc_0 + 36, add_i32(loc_1, 8))
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									loc_9 = load_i32(memory_at_0, loc_7)
									loc_16 = shr_i32(sub_i32(loc_1, loc_9), 3)
									loc_3 = add_i32(loc_16, 1)
									if loc_3 >= 536870912 then
										desired = 2
										break
									end
									loc_2 = sub_i32(loc_2, loc_9)
									loc_10 = shr_i32(loc_2, 2)
									loc_3 = (if loc_2 >= 2147483640 then 536870911 else (if loc_3 < loc_10 then loc_10 else loc_3))
									if loc_3 ~= 0 then
										while true do
											if loc_3 >= 536870912 then
												desired = 1
												break
											end
											reg_0 = FUNC_LIST[606](shl_i32(loc_3, 3))
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									else
										while true do
											reg_0 = 0
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									loc_10 = reg_0
									loc_2 = add_i32(loc_10, shl_i32(loc_16, 3))
									store_i32(memory_at_0, loc_2 + 4, loc_5)
									store_i32(memory_at_0, loc_2, loc_6)
									loc_5 = add_i32(shl_i32(loc_3, 3), loc_10)
									loc_6 = add_i32(loc_2, 8)
									if loc_1 ~= loc_9 then
										while true do
											while true do
												loc_2 = sub_i32(loc_2, 8)
												loc_1 = sub_i32(loc_1, 8)
												store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_1))
												if loc_1 ~= loc_9 then
													continue
												end
												break
											end
											if desired then
												break
											end
											reg_0 = load_i32(memory_at_0, loc_7)
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									else
										while true do
											reg_0 = loc_1
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									loc_1 = reg_0
									store_i32(memory_at_0, loc_0 + 40, loc_5)
									store_i32(memory_at_0, loc_0 + 36, loc_6)
									store_i32(memory_at_0, loc_0 + 32, loc_2)
									if loc_1 == 0 then
										break
									end
									FUNC_LIST[609](loc_1)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								store_i32(memory_at_0, loc_15, loc_4)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							loc_8 = add_i32(loc_8, 4)
							if loc_13 ~= loc_8 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = shr_i32(sub_i32(loc_12, loc_11), 3)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_7)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[63] = --[[ Luau::TypeMapVisitor::visit(Luau::AstStatRepeat*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[62](loc_0, load_i32(memory_at_0, loc_1 + 32))
		loc_6 = reg_0
		while true do
			loc_2 = load_i32(memory_at_0, loc_1 + 32)
			loc_5 = load_i32(memory_at_0, loc_2 + 32)
			if loc_5 == 0 then
				break
			end
			loc_7 = load_i32(memory_at_0, loc_2 + 28)
			loc_2 = loc_7
			loc_8 = band_i32(loc_5, 3)
			if loc_8 ~= 0 then
				while true do
					while true do
						loc_4 = load_i32(memory_at_0, loc_2)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_4))](loc_4, loc_0)
						loc_2 = add_i32(loc_2, 4)
						loc_3 = add_i32(loc_3, 1)
						if loc_8 ~= loc_3 then
							continue
						end
						break
					end
					break
				end
			end
			if band_i32(sub_i32(loc_5, 1), 1073741823) <= 2 then
				break
			end
			loc_4 = add_i32(shl_i32(loc_5, 2), loc_7)
			while true do
				loc_3 = load_i32(memory_at_0, loc_2)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_0)
				loc_3 = load_i32(memory_at_0, loc_2 + 4)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_0)
				loc_3 = load_i32(memory_at_0, loc_2 + 8)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_0)
				loc_3 = load_i32(memory_at_0, loc_2 + 12)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_0)
				loc_2 = add_i32(loc_2, 16)
				if loc_4 ~= loc_2 then
					continue
				end
				break
			end
			break
		end
		loc_2 = load_i32(memory_at_0, loc_1 + 28)
		TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		loc_2 = load_i32(memory_at_0, loc_0 + 36)
		if shr_i32(sub_i32(loc_2, load_i32(memory_at_0, loc_0 + 32)), 3) > loc_6 then
			while true do
				loc_4 = add_i32(loc_0, 12)
				while true do
					loc_3 = load_i32(memory_at_0, sub_i32(loc_2, 4))
					reg_0 = FUNC_LIST[5](loc_4, sub_i32(loc_2, 8))
					store_i32(memory_at_0, reg_0, loc_3)
					loc_2 = sub_i32(load_i32(memory_at_0, loc_0 + 36), 8)
					store_i32(memory_at_0, loc_0 + 36, loc_2)
					if loc_6 < shr_i32(sub_i32(loc_2, load_i32(memory_at_0, loc_0 + 32)), 3) then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[64] = --[[ Luau::detail::DenseHashTable<Luau::AstExprFunction*, std::__2::pair<Luau::AstExprFunction*, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>>, std::__2::pair<Luau::AstExprFunction* const, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>>, Luau::detail::ItemInterfaceMap<Luau::AstExprFunction*, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprFunction*>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_11 = load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_1 = load_i32(memory_at_0, loc_0 + 4)
			loc_6 = (if loc_1 ~= 0 then shl_i32(loc_1, 1) else 16)
			if loc_6 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_9 = band_i32(loc_6, 2)
			reg_0 = FUNC_LIST[606](shl_i32(loc_6, 4))
			loc_7 = reg_0
			loc_4 = load_i32(memory_at_0, loc_0 + 12)
			if loc_6 >= 4 then
				while true do
					loc_8 = band_i32(loc_6, 4294967292)
					while true do
						loc_1 = add_i32(shl_i32(loc_3, 4), loc_7)
						store_i64(memory_at_0, loc_1 + 4, i64_ZERO)
						store_i32(memory_at_0, loc_1, loc_4)
						store_i32(memory_at_0, loc_1 + 12, 0)
						store_i32(memory_at_0, loc_1 + 16, loc_4)
						store_i64(memory_at_0, loc_1 + 20, i64_ZERO)
						store_i32(memory_at_0, loc_1 + 28, 0)
						store_i32(memory_at_0, loc_1 + 32, loc_4)
						store_i32(memory_at_0, loc_1 + 44, 0)
						store_i64(memory_at_0, loc_1 + 36, i64_ZERO)
						store_i32(memory_at_0, loc_1 + 48, loc_4)
						store_i32(memory_at_0, loc_1 + 60, 0)
						store_i64(memory_at_0, loc_1 + 52, i64_ZERO)
						loc_3 = add_i32(loc_3, 4)
						loc_5 = add_i32(loc_5, 4)
						if loc_8 ~= loc_5 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_9 ~= 0 then
				while true do
					while true do
						loc_1 = add_i32(shl_i32(loc_3, 4), loc_7)
						store_i64(memory_at_0, loc_1 + 4, i64_ZERO)
						store_i32(memory_at_0, loc_1, loc_4)
						store_i32(memory_at_0, loc_1 + 12, 0)
						loc_3 = add_i32(loc_3, 1)
						loc_2 = add_i32(loc_2, 1)
						if loc_9 ~= loc_2 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				if loc_1 ~= 0 then
					while true do
						loc_9 = sub_i32(loc_6, 1)
						while true do
							loc_8 = add_i32(load_i32(memory_at_0, loc_0), shl_i32(loc_10, 4))
							loc_2 = load_i32(memory_at_0, loc_8)
							if loc_2 ~= load_i32(memory_at_0, loc_0 + 12) then
								while true do
									while true do
										while true do
											loc_1 = band_i32(loc_9, bxor_i32(shr_u32(loc_2, 4), shr_u32(loc_2, 9)))
											loc_5 = add_i32(shl_i32(loc_1, 4), loc_7)
											loc_4 = load_i32(memory_at_0, loc_5)
											if loc_11 == loc_4 then
												break
											end
											loc_3 = 0
											if loc_2 == loc_4 then
												desired = 6
												break
											end
											while true do
												loc_3 = add_i32(loc_3, 1)
												loc_1 = band_i32(loc_9, add_i32(loc_1, loc_3))
												loc_5 = add_i32(shl_i32(loc_1, 4), loc_7)
												loc_4 = load_i32(memory_at_0, loc_5)
												if loc_11 == loc_4 then
													desired = 7
													break
												end
												if loc_2 ~= loc_4 then
													continue
												end
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
										store_i32(memory_at_0, loc_5, loc_2)
										break
									end
									if desired then
										break
									end
									store_i32(memory_at_0, loc_5, loc_2)
									loc_1 = add_i32(loc_5, 4)
									if lt_i32(load_i32_i8(memory_at_0, loc_5 + 15), 0) then
										while true do
											FUNC_LIST[609](load_i32(memory_at_0, loc_1))
											break
										end
										if desired then
											break
										end
									end
									store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_8 + 4))
									store_i32(memory_at_0, loc_1 + 8, load_i32(memory_at_0, loc_8 + 12))
									store_i32_n8(memory_at_0, loc_8 + 15, 0)
									store_i32_n8(memory_at_0, loc_8 + 4, 0)
									reg_0 = load_i32(memory_at_0, loc_0 + 4)
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							else
								while true do
									reg_0 = loc_1
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_1 = reg_0
							loc_10 = add_i32(loc_10, 1)
							if loc_1 > loc_10 then
								continue
							end
							break
						end
						if desired then
							break
						end
						store_i32(memory_at_0, loc_0 + 4, loc_6)
						loc_2 = load_i32(memory_at_0, loc_0)
						store_i32(memory_at_0, loc_0, loc_7)
						if loc_2 == 0 then
							desired = 1
							break
						end
						if loc_1 == 0 then
							desired = 2
							break
						end
						loc_3 = 0
						while true do
							loc_4 = add_i32(shl_i32(loc_3, 4), loc_2)
							if lt_i32(load_i32_i8(memory_at_0, loc_4 + 15), 0) then
								while true do
									FUNC_LIST[609](load_i32(memory_at_0, loc_4 + 4))
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_3 = add_i32(loc_3, 1)
							if loc_3 ~= loc_1 then
								continue
							end
							break
						end
						if desired then
							break
						end
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				store_i32(memory_at_0, loc_0 + 4, loc_6)
				loc_2 = load_i32(memory_at_0, loc_0)
				store_i32(memory_at_0, loc_0, loc_7)
				if loc_2 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[609](loc_2)
			break
		end
		break
	end
end
FUNC_LIST[65] = --[[ Luau::BytecodeBuilder::BytecodeBuilder(Luau::BytecodeEncoder*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	while true do
		store_i32(memory_at_0, loc_0 + 120, 0)
		store_i32(memory_at_0, loc_0 + 112, 0)
		store_i64(memory_at_0, loc_0 + 104, i64_ZERO)
		store_i32(memory_at_0, loc_0 + 16, 4294967295)
		store_i64(memory_at_0, loc_0 + 8, i64_from_u32(0, 4294967295))
		store_i64(memory_at_0, loc_0, i64_ZERO)
		reg_0 = FUNC_LIST[479](add_i32(loc_0, 20), 0, 77)
		store_i64(memory_at_0, loc_0 + 136, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 128, i64_from_u32(4294967295, 4294967295))
		reg_0 = FUNC_LIST[479](add_i32(loc_0, 152), 0, 144)
		store_i64(memory_at_0, loc_0 + 320, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 308, i64_from_u32(0, 4294967295))
		store_i64(memory_at_0, loc_0 + 300, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 328, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 336, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 344, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 352, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 360, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 372, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 380, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 388, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 396, i64_ZERO)
		store_i32(memory_at_0, loc_0 + 404, 0)
		store_i64(memory_at_0, loc_0 + 412, i64_ZERO)
		store_i32(memory_at_0, loc_0 + 408, loc_1)
		store_i64(memory_at_0, loc_0 + 420, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 428, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 436, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 444, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 452, i64_ZERO)
		reg_1 = FUNC_LIST[606](128)
		loc_1 = reg_1
		store_i32(memory_at_0, loc_0 + 28, loc_1)
		store_i32(memory_at_0, loc_0 + 24, loc_1)
		store_i32(memory_at_0, loc_0 + 32, add_i32(loc_1, 128))
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 36)
			if sub_i32(load_i32(memory_at_0, loc_0 + 44), loc_3) > 127 then
				break
			end
			loc_1 = load_i32(memory_at_0, loc_0 + 40)
			reg_0 = FUNC_LIST[606](128)
			loc_2 = reg_0
			loc_5 = add_i32(loc_2, 128)
			loc_4 = add_i32(sub_i32(loc_1, loc_3), loc_2)
			loc_2 = loc_4
			if loc_1 ~= loc_3 then
				while true do
					while true do
						loc_2 = sub_i32(loc_2, 4)
						loc_1 = sub_i32(loc_1, 4)
						store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_1))
						if loc_1 ~= loc_3 then
							continue
						end
						break
					end
					break
				end
			end
			store_i32(memory_at_0, loc_0 + 44, loc_5)
			store_i32(memory_at_0, loc_0 + 40, loc_4)
			store_i32(memory_at_0, loc_0 + 36, loc_2)
			if loc_3 == 0 then
				break
			end
			FUNC_LIST[609](loc_3)
			break
		end
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 48)
			if div_i32(sub_i32(load_i32(memory_at_0, loc_0 + 56), loc_3), 24) > 15 then
				break
			end
			loc_1 = load_i32(memory_at_0, loc_0 + 52)
			reg_0 = FUNC_LIST[606](384)
			loc_2 = reg_0
			loc_5 = add_i32(loc_2, 384)
			loc_4 = add_i32(sub_i32(loc_1, loc_3), loc_2)
			loc_2 = loc_4
			if loc_1 ~= loc_3 then
				while true do
					while true do
						loc_2 = sub_i32(loc_2, 24)
						loc_1 = sub_i32(loc_1, 24)
						store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_1))
						store_i64(memory_at_0, loc_2 + 16, load_i64(memory_at_0, loc_1 + 16))
						store_i64(memory_at_0, loc_2 + 8, load_i64(memory_at_0, loc_1 + 8))
						if loc_1 ~= loc_3 then
							continue
						end
						break
					end
					break
				end
			end
			store_i32(memory_at_0, loc_0 + 56, loc_5)
			store_i32(memory_at_0, loc_0 + 52, loc_4)
			store_i32(memory_at_0, loc_0 + 48, loc_2)
			if loc_3 == 0 then
				break
			end
			FUNC_LIST[609](loc_3)
			break
		end
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 60)
			if sub_i32(load_i32(memory_at_0, loc_0 + 68), loc_3) > 63 then
				break
			end
			loc_1 = load_i32(memory_at_0, loc_0 + 64)
			reg_0 = FUNC_LIST[606](64)
			loc_2 = reg_0
			loc_5 = sub_i32(loc_2, 4294967232)
			loc_4 = add_i32(sub_i32(loc_1, loc_3), loc_2)
			loc_2 = loc_4
			if loc_1 ~= loc_3 then
				while true do
					while true do
						loc_2 = sub_i32(loc_2, 4)
						loc_1 = sub_i32(loc_1, 4)
						store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_1))
						if loc_1 ~= loc_3 then
							continue
						end
						break
					end
					break
				end
			end
			store_i32(memory_at_0, loc_0 + 68, loc_5)
			store_i32(memory_at_0, loc_0 + 64, loc_4)
			store_i32(memory_at_0, loc_0 + 60, loc_2)
			if loc_3 == 0 then
				break
			end
			FUNC_LIST[609](loc_3)
			break
		end
		FUNC_LIST[66](loc_0, 8)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[66] = --[[ std::__2::vector<Luau::BytecodeBuilder::Function, std::__2::allocator<Luau::BytecodeBuilder::Function>>::reserve(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_4 = load_i32(memory_at_0, loc_0)
			if loc_1 <= div_i32(sub_i32(load_i32(memory_at_0, loc_0 + 8), loc_4), 72) then
				break
			end
			while true do
				while true do
					if loc_1 < 59652324 then
						while true do
							loc_2 = load_i32(memory_at_0, loc_0 + 4)
							loc_1 = mul_i32(loc_1, 72)
							reg_0 = FUNC_LIST[606](loc_1)
							loc_6 = reg_0
							loc_8 = add_i32(loc_6, loc_1)
							loc_7 = add_i32(sub_i32(loc_2, loc_4), loc_6)
							if loc_2 == loc_4 then
								desired = 3
								break
							end
							loc_1 = loc_7
							while true do
								loc_9 = sub_i32(loc_1, 72)
								loc_6 = sub_i32(loc_2, 72)
								store_i64(memory_at_0, loc_9, load_i64(memory_at_0, loc_6))
								loc_3 = add_i32(loc_6, 8)
								store_i32(memory_at_0, loc_9 + 8, load_i32(memory_at_0, loc_3))
								store_i64(memory_at_0, loc_6, i64_ZERO)
								store_i32(memory_at_0, loc_6 + 8, 0)
								loc_3 = sub_i32(loc_1, 60)
								loc_5 = sub_i32(loc_2, 60)
								store_i32(memory_at_0, loc_3 + 8, load_i32(memory_at_0, loc_5 + 8))
								store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_5))
								loc_5 = sub_i32(loc_1, 48)
								loc_3 = sub_i32(loc_2, 48)
								loc_10 = loc_3
								store_i32(memory_at_0, loc_5 + 8, load_i32(memory_at_0, add_i32(loc_10, 8)))
								store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_3))
								store_i64(memory_at_0, loc_3, i64_ZERO)
								store_i32(memory_at_0, loc_10 + 8, 0)
								loc_5 = sub_i32(loc_1, 36)
								loc_3 = sub_i32(loc_2, 36)
								loc_11 = loc_3
								store_i32(memory_at_0, loc_5 + 8, load_i32(memory_at_0, add_i32(loc_11, 8)))
								store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_3))
								store_i64(memory_at_0, loc_3, i64_ZERO)
								store_i32(memory_at_0, loc_11 + 8, 0)
								loc_3 = sub_i32(loc_2, 24)
								store_i32(memory_at_0, sub_i32(loc_1, 24), load_i32(memory_at_0, loc_3))
								store_i32(memory_at_0, sub_i32(loc_1, 20), load_i32(memory_at_0, sub_i32(loc_2, 20)))
								loc_5 = sub_i32(loc_2, 16)
								store_i32(memory_at_0, sub_i32(loc_1, 16), load_i32(memory_at_0, loc_5))
								store_i32(memory_at_0, loc_5, 0)
								store_i64(memory_at_0, loc_3, i64_ZERO)
								loc_1 = sub_i32(loc_1, 12)
								loc_2 = sub_i32(loc_2, 12)
								loc_12 = loc_2
								loc_3 = add_i32(loc_12, 8)
								store_i32(memory_at_0, loc_1 + 8, load_i32(memory_at_0, loc_3))
								store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_2))
								store_i64(memory_at_0, loc_2, i64_ZERO)
								store_i32(memory_at_0, loc_12 + 8, 0)
								loc_1 = loc_9
								loc_2 = loc_6
								if loc_4 ~= loc_2 then
									continue
								end
								break
							end
							if desired then
								break
							end
							store_i32(memory_at_0, loc_0 + 8, loc_8)
							loc_2 = load_i32(memory_at_0, loc_0 + 4)
							store_i32(memory_at_0, loc_0 + 4, loc_7)
							loc_4 = load_i32(memory_at_0, loc_0)
							store_i32(memory_at_0, loc_0, loc_1)
							if loc_2 == loc_4 then
								desired = 2
								break
							end
							loc_13 = add_i32(loc_0, 8)
							while true do
								loc_2 = sub_i32(loc_2, 72)
								FUNC_LIST[162](loc_13, loc_2)
								if loc_2 ~= loc_4 then
									continue
								end
								break
							end
							if desired then
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[40](loc_0)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 8, loc_8)
				store_i32(memory_at_0, loc_0 + 4, loc_7)
				store_i32(memory_at_0, loc_0, loc_7)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_4 == 0 then
				break
			end
			FUNC_LIST[609](loc_4)
			break
		end
		break
	end
end
FUNC_LIST[67] = --[[ Luau::BytecodeBuilder::beginFunction(unsigned char, bool) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_3
		loc_5 = load_i32(memory_at_0, loc_0)
		loc_4 = load_i32(memory_at_0, loc_0 + 4)
		reg_0 = FUNC_LIST[479](add_i32(loc_3, 8), 0, 72)
		store_i32_n8(memory_at_0, loc_3 + 23, loc_2)
		store_i32_n8(memory_at_0, loc_3 + 21, loc_1)
		loc_2 = div_i32(sub_i32(loc_4, loc_5), 72)
		while true do
			if loc_4 ~= load_i32(memory_at_0, loc_0 + 8) then
				while true do
					reg_1 = FUNC_LIST[68](loc_4, add_i32(loc_3, 8))
					store_i32(memory_at_0, loc_0 + 4, add_i32(reg_1, 72))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[69](loc_0, add_i32(loc_3, 8))
			break
		end
		store_i32(memory_at_0, loc_0 + 320, 0)
		store_i32_n8(memory_at_0, loc_0 + 96, 0)
		store_i32(memory_at_0, loc_0 + 12, loc_2)
		if lt_i32(load_i32_i8(memory_at_0, loc_3 + 79), 0) then
			while true do
				FUNC_LIST[609](load_i32(memory_at_0, loc_3 + 68))
				break
			end
		end
		loc_0 = load_i32(memory_at_0, loc_3 + 56)
		if loc_0 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_3 + 60, loc_0)
				FUNC_LIST[609](loc_0)
				break
			end
		end
		if lt_i32(load_i32_i8(memory_at_0, loc_3 + 55), 0) then
			while true do
				FUNC_LIST[609](load_i32(memory_at_0, loc_3 + 44))
				break
			end
		end
		if lt_i32(load_i32_i8(memory_at_0, loc_3 + 43), 0) then
			while true do
				FUNC_LIST[609](load_i32(memory_at_0, loc_3 + 32))
				break
			end
		end
		if lt_i32(load_i32_i8(memory_at_0, loc_3 + 19), 0) then
			while true do
				FUNC_LIST[609](load_i32(memory_at_0, loc_3 + 8))
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 80)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[68] = --[[ Luau::BytecodeBuilder::Function::Function(Luau::BytecodeBuilder::Function const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			if ge_i32(load_i32_i8(memory_at_0, loc_1 + 11), 0) then
				while true do
					store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_1))
					store_i32(memory_at_0, loc_0 + 8, load_i32(memory_at_0, loc_1 + 8))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[671](loc_0, load_i32(memory_at_0, loc_1), load_i32(memory_at_0, loc_1 + 4))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, loc_0 + 12, load_i64(memory_at_0, loc_1 + 12))
		store_i32(memory_at_0, loc_0 + 20, load_i32(memory_at_0, loc_1 + 20))
		loc_2 = add_i32(loc_0, 24)
		while true do
			if ge_i32(load_i32_i8(memory_at_0, loc_1 + 35), 0) then
				while true do
					loc_3 = add_i32(loc_1, 24)
					store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_3))
					store_i32(memory_at_0, loc_2 + 8, load_i32(memory_at_0, loc_3 + 8))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[671](loc_2, load_i32(memory_at_0, loc_1 + 24), load_i32(memory_at_0, loc_1 + 28))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_2 = add_i32(loc_0, 36)
		while true do
			if ge_i32(load_i32_i8(memory_at_0, loc_1 + 47), 0) then
				while true do
					loc_3 = add_i32(loc_1, 36)
					store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_3))
					store_i32(memory_at_0, loc_2 + 8, load_i32(memory_at_0, loc_3 + 8))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[671](loc_2, load_i32(memory_at_0, loc_1 + 36), load_i32(memory_at_0, loc_1 + 40))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32(memory_at_0, loc_0 + 56, 0)
		store_i64(memory_at_0, loc_0 + 48, i64_ZERO)
		while true do
			loc_2 = load_i32(memory_at_0, loc_1 + 52)
			loc_4 = load_i32(memory_at_0, loc_1 + 48)
			if loc_2 ~= loc_4 then
				while true do
					loc_2 = sub_i32(loc_2, loc_4)
					if lt_i32(loc_2, 0) then
						desired = 1
						break
					end
					reg_1 = FUNC_LIST[606](loc_2)
					loc_3 = reg_1
					store_i32(memory_at_0, loc_0 + 52, loc_3)
					store_i32(memory_at_0, loc_0 + 48, loc_3)
					loc_5 = add_i32(loc_2, loc_3)
					store_i32(memory_at_0, loc_0 + 56, loc_5)
					reg_0 = FUNC_LIST[477](loc_3, loc_4, loc_2)
					store_i32(memory_at_0, loc_0 + 52, loc_5)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = add_i32(loc_0, 60)
			if ge_i32(load_i32_i8(memory_at_0, loc_1 + 71), 0) then
				while true do
					loc_1 = add_i32(loc_1, 60)
					store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_1))
					store_i32(memory_at_0, loc_2 + 8, load_i32(memory_at_0, loc_1 + 8))
					reg_0 = loc_0
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[671](loc_2, load_i32(memory_at_0, loc_1 + 60), load_i32(memory_at_0, loc_1 + 64))
			reg_0 = loc_0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[40](add_i32(loc_0, 48))
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[69] = --[[ void std::__2::vector<Luau::BytecodeBuilder::Function, std::__2::allocator<Luau::BytecodeBuilder::Function>>::__push_back_slow_path<Luau::BytecodeBuilder::Function const&>(Luau::BytecodeBuilder::Function const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_2 = load_i32(memory_at_0, loc_0)
					loc_6 = div_i32(sub_i32(load_i32(memory_at_0, loc_0 + 4), loc_2), 72)
					loc_3 = add_i32(loc_6, 1)
					if loc_3 < 59652324 then
						while true do
							loc_10 = add_i32(loc_0, 8)
							loc_2 = div_i32(sub_i32(load_i32(memory_at_0, loc_10), loc_2), 72)
							loc_4 = shl_i32(loc_2, 1)
							loc_3 = (if loc_2 >= 29826161 then 59652323 else (if loc_3 < loc_4 then loc_4 else loc_3))
							if loc_3 ~= 0 then
								while true do
									if loc_3 >= 59652324 then
										desired = 3
										break
									end
									reg_0 = FUNC_LIST[606](mul_i32(loc_3, 72))
									break
								end
								if desired then
									break
								end
							else
								while true do
									reg_0 = 0
									break
								end
								if desired then
									break
								end
							end
							loc_2 = reg_0
							loc_8 = add_i32(loc_2, mul_i32(loc_3, 72))
							reg_0 = FUNC_LIST[68](add_i32(mul_i32(loc_6, 72), loc_2), loc_1)
							loc_2 = reg_0
							loc_9 = add_i32(loc_2, 72)
							loc_3 = load_i32(memory_at_0, loc_0 + 4)
							loc_11 = load_i32(memory_at_0, loc_0)
							if loc_3 == loc_11 then
								desired = 2
								break
							end
							while true do
								loc_6 = sub_i32(loc_2, 72)
								loc_1 = sub_i32(loc_3, 72)
								store_i64(memory_at_0, loc_6, load_i64(memory_at_0, loc_1))
								loc_4 = add_i32(loc_1, 8)
								store_i32(memory_at_0, loc_6 + 8, load_i32(memory_at_0, loc_4))
								store_i64(memory_at_0, loc_1, i64_ZERO)
								store_i32(memory_at_0, loc_1 + 8, 0)
								loc_4 = sub_i32(loc_2, 60)
								loc_5 = sub_i32(loc_3, 60)
								store_i32(memory_at_0, loc_4 + 8, load_i32(memory_at_0, loc_5 + 8))
								store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_5))
								loc_5 = sub_i32(loc_2, 48)
								loc_4 = sub_i32(loc_3, 48)
								loc_12 = loc_4
								loc_7 = add_i32(loc_12, 8)
								store_i32(memory_at_0, loc_5 + 8, load_i32(memory_at_0, loc_7))
								store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_4))
								store_i64(memory_at_0, loc_4, i64_ZERO)
								store_i32(memory_at_0, loc_12 + 8, 0)
								loc_5 = sub_i32(loc_2, 36)
								loc_4 = sub_i32(loc_3, 36)
								loc_13 = loc_4
								loc_7 = add_i32(loc_13, 8)
								store_i32(memory_at_0, loc_5 + 8, load_i32(memory_at_0, loc_7))
								store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_4))
								store_i64(memory_at_0, loc_4, i64_ZERO)
								store_i32(memory_at_0, loc_13 + 8, 0)
								loc_4 = sub_i32(loc_2, 16)
								store_i32(memory_at_0, loc_4, 0)
								loc_5 = sub_i32(loc_2, 24)
								store_i64(memory_at_0, loc_5, i64_ZERO)
								loc_7 = sub_i32(loc_3, 24)
								store_i32(memory_at_0, loc_5, load_i32(memory_at_0, loc_7))
								store_i32(memory_at_0, sub_i32(loc_2, 20), load_i32(memory_at_0, sub_i32(loc_3, 20)))
								loc_5 = sub_i32(loc_3, 16)
								store_i32(memory_at_0, loc_4, load_i32(memory_at_0, loc_5))
								store_i32(memory_at_0, loc_5, 0)
								store_i64(memory_at_0, loc_7, i64_ZERO)
								loc_2 = sub_i32(loc_2, 12)
								loc_3 = sub_i32(loc_3, 12)
								loc_14 = loc_3
								loc_4 = add_i32(loc_14, 8)
								store_i32(memory_at_0, loc_2 + 8, load_i32(memory_at_0, loc_4))
								store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_3))
								store_i64(memory_at_0, loc_3, i64_ZERO)
								store_i32(memory_at_0, loc_14 + 8, 0)
								loc_2 = loc_6
								loc_3 = loc_1
								if loc_3 ~= loc_11 then
									continue
								end
								break
							end
							if desired then
								break
							end
							store_i32(memory_at_0, loc_0 + 8, loc_8)
							loc_2 = load_i32(memory_at_0, loc_0 + 4)
							store_i32(memory_at_0, loc_0 + 4, loc_9)
							loc_3 = load_i32(memory_at_0, loc_0)
							store_i32(memory_at_0, loc_0, loc_6)
							if loc_2 == loc_3 then
								desired = 1
								break
							end
							while true do
								loc_2 = sub_i32(loc_2, 72)
								FUNC_LIST[162](loc_10, loc_2)
								if loc_2 ~= loc_3 then
									continue
								end
								break
							end
							if desired then
								break
							end
							desired = 1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[40](loc_0)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[163]()
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_0 + 8, loc_8)
			store_i32(memory_at_0, loc_0 + 4, loc_9)
			store_i32(memory_at_0, loc_0, loc_2)
			break
		end
		if loc_3 ~= 0 then
			while true do
				FUNC_LIST[609](loc_3)
				break
			end
		end
		break
	end
end
FUNC_LIST[70] = --[[ Luau::BytecodeBuilder::endFunction(unsigned char, unsigned char, unsigned char) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = i64_ZERO
	local loc_15 = i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local desired
	while true do
		loc_8 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_8
		loc_4 = add_i32(load_i32(memory_at_0, loc_0), mul_i32(load_i32(memory_at_0, loc_0 + 12), 72))
		store_i32_n8(memory_at_0, loc_4 + 14, loc_2)
		store_i32_n8(memory_at_0, loc_4 + 12, loc_1)
		loc_1 = load_i32(memory_at_0, loc_0 + 456)
		loc_5 = band_i32(loc_1, 1)
		loc_2 = load_i32(memory_at_0, loc_0 + 452)
		if bor_i32(loc_5, loc_2) ~= 0 then
			while true do
				loc_13 = add_i32(loc_4, 48)
				loc_1 = add_i32(shr_i32(loc_1, 1), loc_0)
				reg_0 = add_i32(loc_8, 4)
				reg_1 = loc_1
				reg_2 = loc_13
				if loc_5 ~= 0 then
					while true do
						reg_3 = load_i32(memory_at_0, add_i32(loc_2, load_i32(memory_at_0, loc_1)))
						break
					end
				else
					while true do
						reg_3 = loc_2
						break
					end
				end
				loc_2 = reg_3
				TABLE_LIST[0].data[loc_2](reg_0, reg_1, reg_2)
				loc_10 = loc_4
				loc_2 = add_i32(loc_10, 24)
				if lt_i32(load_i32_i8(memory_at_0, loc_4 + 35), 0) then
					while true do
						FUNC_LIST[609](load_i32(memory_at_0, loc_4 + 24))
						break
					end
				end
				store_i64(memory_at_0, loc_10 + 24, load_i64(memory_at_0, loc_8 + 4))
				store_i32(memory_at_0, loc_10 + 32, load_i32(memory_at_0, loc_8 + 12))
				break
			end
		end
		FUNC_LIST[673](loc_4, add_i32(mul_i32(shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 28), load_i32(memory_at_0, loc_0 + 24)), 2), 7), 32))
		loc_2 = load_i32(memory_at_0, loc_0 + 408)
		if loc_2 ~= 0 then
			while true do
				loc_1 = load_i32(memory_at_0, loc_0 + 24)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2) + 8)](loc_2, loc_1, shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 28), loc_1), 2))
				break
			end
		end
		FUNC_LIST[71](loc_0, loc_4, load_i32(memory_at_0, loc_0 + 12), loc_3)
		store_i32(memory_at_0, loc_0 + 12, 4294967295)
		loc_4 = load_i32(memory_at_0, loc_0 + 28)
		loc_2 = load_i32(memory_at_0, loc_0 + 24)
		store_i32(memory_at_0, loc_0 + 28, loc_2)
		store_i32(memory_at_0, loc_0 + 40, load_i32(memory_at_0, loc_0 + 36))
		store_i32(memory_at_0, loc_0 + 52, load_i32(memory_at_0, loc_0 + 48))
		store_i32(memory_at_0, loc_0 + 64, load_i32(memory_at_0, loc_0 + 60))
		store_i32(memory_at_0, loc_0 + 76, load_i32(memory_at_0, loc_0 + 72))
		store_i32(memory_at_0, loc_0 + 88, load_i32(memory_at_0, loc_0 + 84))
		store_i32(memory_at_0, loc_0 + 328, load_i32(memory_at_0, loc_0 + 324))
		store_i32(memory_at_0, loc_0 + 20, add_i32(load_i32(memory_at_0, loc_0 + 20), shr_i32(sub_i32(loc_4, loc_2), 2)))
		store_i32(memory_at_0, loc_0 + 340, load_i32(memory_at_0, loc_0 + 336))
		if load_i32(memory_at_0, loc_0 + 112) ~= 0 then
			while true do
				loc_6 = load_i32(memory_at_0, loc_0 + 104)
				while true do
					loc_4 = load_i32(memory_at_0, loc_0 + 108)
					if loc_4 >= 33 then
						while true do
							FUNC_LIST[609](loc_6)
							store_i64(memory_at_0, loc_0 + 104, i64_ZERO)
							desired = 2
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					if loc_4 == 0 then
						break
					end
					loc_2 = add_i32(loc_0, 120)
					loc_11 = band_i32(loc_4, 3)
					loc_1 = 0
					if loc_4 >= 4 then
						while true do
							loc_12 = band_i32(loc_4, 60)
							while true do
								loc_4 = add_i32(shl_i32(loc_1, 5), loc_6)
								store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_2))
								loc_3 = add_i32(loc_2, 8)
								loc_14 = load_i64(memory_at_0, loc_3)
								loc_5 = add_i32(loc_2, 16)
								loc_15 = load_i64(memory_at_0, loc_5)
								store_i32(memory_at_0, loc_4 + 24, 0)
								store_i64(memory_at_0, loc_4 + 16, loc_15)
								store_i64(memory_at_0, loc_4 + 8, loc_14)
								store_i64(memory_at_0, loc_4 + 32, load_i64(memory_at_0, loc_2))
								store_i64(memory_at_0, loc_4 + 40, load_i64(memory_at_0, loc_2 + 8))
								store_i64(memory_at_0, loc_4 + 48, load_i64(memory_at_0, loc_2 + 16))
								store_i32(memory_at_0, loc_4 + 56, 0)
								store_i64(memory_at_0, sub_i32(loc_4, 4294967232), load_i64(memory_at_0, loc_2))
								store_i64(memory_at_0, loc_4 + 72, load_i64(memory_at_0, loc_2 + 8))
								store_i64(memory_at_0, loc_4 + 80, load_i64(memory_at_0, loc_2 + 16))
								store_i32(memory_at_0, loc_4 + 88, 0)
								store_i64(memory_at_0, loc_4 + 96, load_i64(memory_at_0, loc_2))
								store_i64(memory_at_0, loc_4 + 104, load_i64(memory_at_0, loc_2 + 8))
								store_i64(memory_at_0, loc_4 + 112, load_i64(memory_at_0, loc_2 + 16))
								store_i32(memory_at_0, loc_4 + 120, 0)
								loc_1 = add_i32(loc_1, 4)
								loc_9 = add_i32(loc_9, 4)
								if loc_12 ~= loc_9 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					if loc_11 == 0 then
						break
					end
					while true do
						loc_4 = add_i32(shl_i32(loc_1, 5), loc_6)
						store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_2))
						loc_14 = load_i64(memory_at_0, loc_2 + 8)
						loc_15 = load_i64(memory_at_0, loc_2 + 16)
						store_i32(memory_at_0, loc_4 + 24, 0)
						store_i64(memory_at_0, loc_4 + 16, loc_15)
						store_i64(memory_at_0, loc_4 + 8, loc_14)
						loc_1 = add_i32(loc_1, 1)
						loc_7 = add_i32(loc_7, 1)
						if loc_11 ~= loc_7 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 112, 0)
				break
			end
		end
		if load_i32(memory_at_0, loc_0 + 160) ~= 0 then
			while true do
				loc_2 = load_i32(memory_at_0, loc_0 + 152)
				while true do
					loc_5 = load_i32(memory_at_0, loc_0 + 156)
					if loc_5 >= 33 then
						while true do
							FUNC_LIST[609](loc_2)
							store_i64(memory_at_0, loc_0 + 152, i64_ZERO)
							desired = 2
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					if loc_5 == 0 then
						break
					end
					loc_1 = add_i32(loc_0, 164)
					loc_7 = band_i32(loc_5, 3)
					loc_3 = 0
					loc_4 = 0
					if loc_5 >= 4 then
						while true do
							loc_6 = band_i32(loc_5, 60)
							loc_5 = 0
							while true do
								reg_0 = FUNC_LIST[477](add_i32(mul_i32(loc_4, 136), loc_2), loc_1, 132)
								store_i32(memory_at_0, reg_0 + 132, 0)
								reg_0 = FUNC_LIST[477](add_i32(mul_i32(bor_i32(loc_4, 1), 136), loc_2), loc_1, 132)
								store_i32(memory_at_0, reg_0 + 132, 0)
								reg_0 = FUNC_LIST[477](add_i32(mul_i32(bor_i32(loc_4, 2), 136), loc_2), loc_1, 132)
								store_i32(memory_at_0, reg_0 + 132, 0)
								reg_0 = FUNC_LIST[477](add_i32(mul_i32(bor_i32(loc_4, 3), 136), loc_2), loc_1, 132)
								store_i32(memory_at_0, reg_0 + 132, 0)
								loc_4 = add_i32(loc_4, 4)
								loc_5 = add_i32(loc_5, 4)
								if loc_6 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					if loc_7 == 0 then
						break
					end
					while true do
						reg_0 = FUNC_LIST[477](add_i32(mul_i32(loc_4, 136), loc_2), loc_1, 132)
						store_i32(memory_at_0, reg_0 + 132, 0)
						loc_4 = add_i32(loc_4, 1)
						loc_3 = add_i32(loc_3, 1)
						if loc_7 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 160, 0)
				break
			end
		end
		if load_i32(memory_at_0, loc_0 + 308) ~= 0 then
			while true do
				loc_5 = load_i32(memory_at_0, loc_0 + 300)
				while true do
					loc_4 = load_i32(memory_at_0, loc_0 + 304)
					if loc_4 >= 33 then
						while true do
							FUNC_LIST[609](loc_5)
							store_i64(memory_at_0, loc_0 + 300, i64_ZERO)
							desired = 2
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					if loc_4 == 0 then
						break
					end
					loc_6 = band_i32(loc_4, 3)
					loc_1 = load_i32(memory_at_0, loc_0 + 312)
					loc_3 = 0
					loc_2 = 0
					if loc_4 >= 4 then
						while true do
							loc_9 = band_i32(loc_4, 60)
							loc_7 = 0
							while true do
								loc_4 = add_i32(shl_i32(loc_2, 3), loc_5)
								store_i32_n16(memory_at_0, loc_4 + 4, 0)
								store_i32(memory_at_0, loc_4, loc_1)
								store_i32(memory_at_0, loc_4 + 8, loc_1)
								store_i32_n16(memory_at_0, loc_4 + 12, 0)
								store_i32_n16(memory_at_0, loc_4 + 20, 0)
								store_i32(memory_at_0, loc_4 + 16, loc_1)
								store_i32_n16(memory_at_0, loc_4 + 28, 0)
								store_i32(memory_at_0, loc_4 + 24, loc_1)
								loc_2 = add_i32(loc_2, 4)
								loc_7 = add_i32(loc_7, 4)
								if loc_9 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					if loc_6 == 0 then
						break
					end
					while true do
						loc_4 = add_i32(shl_i32(loc_2, 3), loc_5)
						store_i32_n16(memory_at_0, loc_4 + 4, 0)
						store_i32(memory_at_0, loc_4, loc_1)
						loc_2 = add_i32(loc_2, 1)
						loc_3 = add_i32(loc_3, 1)
						if loc_6 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 308, 0)
				break
			end
		end
		store_i32(memory_at_0, loc_0 + 388, load_i32(memory_at_0, loc_0 + 384))
		while true do
			if lt_i32(load_i32_i8(memory_at_0, loc_0 + 407), 0) then
				while true do
					store_i32_n8(memory_at_0, load_i32(memory_at_0, loc_0 + 396), 0)
					store_i32(memory_at_0, loc_0 + 400, 0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			store_i32_n8(memory_at_0, loc_0 + 407, 0)
			store_i32_n8(memory_at_0, loc_0 + 396, 0)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_8, 16)
		break
	end
end
FUNC_LIST[71] = --[[ Luau::BytecodeBuilder::writeFunction(std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>&, unsigned int, unsigned char) const ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_7 = add_i32(load_i32(memory_at_0, loc_0), mul_i32(loc_2, 72))
		store_i32_n8(memory_at_0, loc_4 + 8, load_i32_u8(memory_at_0, loc_7 + 12))
		reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
		store_i32_n8(memory_at_0, loc_4 + 8, load_i32_u8(memory_at_0, loc_7 + 13))
		reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
		store_i32_n8(memory_at_0, loc_4 + 8, load_i32_u8(memory_at_0, loc_7 + 14))
		reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
		store_i32_n8(memory_at_0, loc_4 + 8, load_i32_u8(memory_at_0, loc_7 + 15))
		reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
		store_i32_n8(memory_at_0, loc_4 + 8, loc_3)
		reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
		loc_2 = load_i32_i8(memory_at_0, loc_7 + 71)
		loc_2 = (if lt_i32(loc_2, 0) then load_i32(memory_at_0, loc_7 + 64) else loc_2)
		while true do
			loc_3 = (if loc_2 > 127 then 1 else 0)
			store_i32_n8(memory_at_0, loc_4 + 8, bor_i32(band_i32(loc_2, 127), shl_i32(loc_3, 7)))
			reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
			loc_2 = shr_u32(loc_2, 7)
			if loc_3 ~= 0 then
				continue
			end
			break
		end
		loc_2 = load_i32_i8(memory_at_0, loc_7 + 71)
		loc_3 = (if lt_i32(loc_2, 0) then 1 else 0)
		reg_0 = FUNC_LIST[675](loc_1, (if loc_3 ~= 0 then load_i32(memory_at_0, loc_7 + 60) else add_i32(loc_7, 60)), (if loc_3 ~= 0 then load_i32(memory_at_0, loc_7 + 64) else loc_2))
		loc_2 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 28), load_i32(memory_at_0, loc_0 + 24)), 2)
		while true do
			loc_3 = (if loc_2 > 127 then 1 else 0)
			store_i32_n8(memory_at_0, loc_4 + 8, bor_i32(band_i32(loc_2, 127), shl_i32(loc_3, 7)))
			reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
			loc_2 = shr_u32(loc_2, 7)
			if loc_3 ~= 0 then
				continue
			end
			break
		end
		loc_2 = load_i32(memory_at_0, loc_0 + 24)
		loc_3 = load_i32(memory_at_0, loc_0 + 28)
		if loc_2 ~= loc_3 then
			while true do
				while true do
					store_i32(memory_at_0, loc_4 + 8, load_i32(memory_at_0, loc_2))
					reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 4)
					loc_2 = add_i32(loc_2, 4)
					if loc_3 ~= loc_2 then
						continue
					end
					break
				end
				break
			end
		end
		loc_2 = div_i32(sub_i32(load_i32(memory_at_0, loc_0 + 52), load_i32(memory_at_0, loc_0 + 48)), 24)
		while true do
			loc_3 = (if loc_2 > 127 then 1 else 0)
			store_i32_n8(memory_at_0, loc_4 + 8, bor_i32(band_i32(loc_2, 127), shl_i32(loc_3, 7)))
			reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
			loc_2 = shr_u32(loc_2, 7)
			if loc_3 ~= 0 then
				continue
			end
			break
		end
		loc_6 = load_i32(memory_at_0, loc_0 + 48)
		loc_9 = load_i32(memory_at_0, loc_0 + 52)
		if loc_6 ~= loc_9 then
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														if not br_map[1] then
															br_map[1] = (function()
																return { [0] = 0, 1, 2, 3, 4, 5, 6, 7, }
															end)()
														end
														temp = br_map[1][load_i32(memory_at_0, loc_6)] or 8
														if temp < 4 then
															if temp < 2 then
																if temp < 1 then
																	break
																else
																	desired = 10
																	break
																end
															elseif temp > 2 then
																desired = 8
																break
															else
																desired = 9
																break
															end
														elseif temp > 4 then
															if temp < 7 then
																if temp < 6 then
																	desired = 6
																	break
																else
																	desired = 5
																	break
																end
															elseif temp > 7 then
																desired = 3
																break
															else
																desired = 4
																break
															end
														else
															desired = 7
															break
														end
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													store_i32_n8(memory_at_0, loc_4 + 8, 0)
													reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
													desired = 3
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
												store_i32_n8(memory_at_0, loc_4 + 8, 1)
												reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
												store_i32_n8(memory_at_0, loc_4 + 8, load_i32_u8(memory_at_0, loc_6 + 8))
												reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
												desired = 3
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											store_i32_n8(memory_at_0, loc_4 + 8, 2)
											reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
											store_f64(memory_at_0, loc_4 + 8, load_f64(memory_at_0, loc_6 + 8))
											reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 8)
											desired = 3
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										store_i32_n8(memory_at_0, loc_4 + 8, 7)
										reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
										store_f32(memory_at_0, loc_4 + 8, load_f32(memory_at_0, loc_6 + 8))
										reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 4)
										store_f32(memory_at_0, loc_4 + 8, load_f32(memory_at_0, loc_6 + 12))
										reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 4)
										store_f32(memory_at_0, loc_4 + 8, load_f32(memory_at_0, loc_6 + 16))
										reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 4)
										store_f32(memory_at_0, loc_4 + 8, load_f32(memory_at_0, loc_6 + 20))
										reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 4)
										desired = 3
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									store_i32_n8(memory_at_0, loc_4 + 8, 3)
									reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
									loc_2 = load_i32(memory_at_0, loc_6 + 8)
									while true do
										store_i32_n8(memory_at_0, loc_4 + 8, bor_i32(band_i32(loc_2, 127), shl_i32((if loc_2 > 127 then 1 else 0), 7)))
										reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
										loc_3 = (if loc_2 < 128 then 1 else 0)
										loc_2 = shr_u32(loc_2, 7)
										if loc_3 == 0 then
											continue
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								store_i32_n8(memory_at_0, loc_4 + 8, 4)
								reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
								store_i32(memory_at_0, loc_4 + 8, load_i32(memory_at_0, loc_6 + 8))
								reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 4)
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_2 = load_i32(memory_at_0, loc_0 + 84)
							loc_3 = load_i32(memory_at_0, loc_6 + 8)
							store_i32_n8(memory_at_0, loc_4 + 8, 5)
							reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
							loc_8 = add_i32(mul_i32(loc_3, 132), loc_2)
							loc_2 = load_i32(memory_at_0, loc_8 + 128)
							while true do
								loc_3 = (if loc_2 > 127 then 1 else 0)
								store_i32_n8(memory_at_0, loc_4 + 8, bor_i32(band_i32(loc_2, 127), shl_i32(loc_3, 7)))
								reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
								loc_2 = shr_u32(loc_2, 7)
								if loc_3 ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_5 = 0
							if load_i32(memory_at_0, loc_8 + 128) == 0 then
								desired = 3
								break
							end
							while true do
								loc_2 = load_i32(memory_at_0, add_i32(shl_i32(loc_5, 2), loc_8))
								while true do
									loc_3 = (if loc_2 > 127 then 1 else 0)
									store_i32_n8(memory_at_0, loc_4 + 8, bor_i32(band_i32(loc_2, 127), shl_i32(loc_3, 7)))
									reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
									loc_2 = shr_u32(loc_2, 7)
									if loc_3 ~= 0 then
										continue
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
								loc_5 = add_i32(loc_5, 1)
								if loc_5 < load_i32(memory_at_0, loc_8 + 128) then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						store_i32_n8(memory_at_0, loc_4 + 8, 6)
						reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
						loc_2 = load_i32(memory_at_0, loc_6 + 8)
						while true do
							loc_3 = (if loc_2 > 127 then 1 else 0)
							store_i32_n8(memory_at_0, loc_4 + 8, bor_i32(band_i32(loc_2, 127), shl_i32(loc_3, 7)))
							reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
							loc_2 = shr_u32(loc_2, 7)
							if loc_3 ~= 0 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_6 = add_i32(loc_6, 24)
					if loc_9 ~= loc_6 then
						continue
					end
					break
				end
				break
			end
		end
		loc_2 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 64), load_i32(memory_at_0, loc_0 + 60)), 2)
		while true do
			loc_3 = (if loc_2 > 127 then 1 else 0)
			store_i32_n8(memory_at_0, loc_4 + 8, bor_i32(band_i32(loc_2, 127), shl_i32(loc_3, 7)))
			reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
			loc_2 = shr_u32(loc_2, 7)
			if loc_3 ~= 0 then
				continue
			end
			break
		end
		loc_5 = load_i32(memory_at_0, loc_0 + 60)
		loc_8 = load_i32(memory_at_0, loc_0 + 64)
		if loc_5 ~= loc_8 then
			while true do
				while true do
					loc_2 = load_i32(memory_at_0, loc_5)
					while true do
						loc_3 = (if loc_2 > 127 then 1 else 0)
						store_i32_n8(memory_at_0, loc_4 + 8, bor_i32(band_i32(loc_2, 127), shl_i32(loc_3, 7)))
						reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
						loc_2 = shr_u32(loc_2, 7)
						if loc_3 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_5 = add_i32(loc_5, 4)
					if loc_8 ~= loc_5 then
						continue
					end
					break
				end
				break
			end
		end
		loc_2 = load_i32(memory_at_0, loc_7 + 20)
		while true do
			loc_3 = (if loc_2 > 127 then 1 else 0)
			store_i32_n8(memory_at_0, loc_4 + 8, bor_i32(band_i32(loc_2, 127), shl_i32(loc_3, 7)))
			reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
			loc_2 = shr_u32(loc_2, 7)
			if loc_3 ~= 0 then
				continue
			end
			break
		end
		loc_2 = load_i32(memory_at_0, loc_7 + 16)
		while true do
			loc_3 = (if loc_2 > 127 then 1 else 0)
			store_i32_n8(memory_at_0, loc_4 + 8, bor_i32(band_i32(loc_2, 127), shl_i32(loc_3, 7)))
			reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
			loc_2 = shr_u32(loc_2, 7)
			if loc_3 ~= 0 then
				continue
			end
			break
		end
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_0 + 36)
				loc_3 = load_i32(memory_at_0, loc_0 + 40)
				if loc_2 == loc_3 then
					break
				end
				while true do
					if load_i32(memory_at_0, loc_2) ~= 0 then
						while true do
							loc_2 = add_i32(loc_2, 4)
							if loc_2 ~= loc_3 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32_n8(memory_at_0, loc_4 + 8, 0)
				reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_4 + 8, 1)
			reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
			FUNC_LIST[72](loc_0, loc_1)
			break
		end
		while true do
			while true do
				if load_i32(memory_at_0, loc_0 + 324) == load_i32(memory_at_0, loc_0 + 328) then
					while true do
						if load_i32(memory_at_0, loc_0 + 336) == load_i32(memory_at_0, loc_0 + 340) then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				store_i32_n8(memory_at_0, loc_4 + 8, 1)
				reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
				loc_2 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 328), load_i32(memory_at_0, loc_0 + 324)), 4)
				while true do
					loc_3 = (if loc_2 > 127 then 1 else 0)
					store_i32_n8(memory_at_0, loc_4 + 8, bor_i32(band_i32(loc_2, 127), shl_i32(loc_3, 7)))
					reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
					loc_2 = shr_u32(loc_2, 7)
					if loc_3 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = load_i32(memory_at_0, loc_0 + 324)
				loc_8 = load_i32(memory_at_0, loc_0 + 328)
				if loc_5 ~= loc_8 then
					while true do
						while true do
							loc_2 = load_i32(memory_at_0, loc_5)
							while true do
								loc_3 = (if loc_2 > 127 then 1 else 0)
								store_i32_n8(memory_at_0, loc_4 + 8, bor_i32(band_i32(loc_2, 127), shl_i32(loc_3, 7)))
								reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
								loc_2 = shr_u32(loc_2, 7)
								if loc_3 ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							loc_2 = load_i32(memory_at_0, loc_5 + 8)
							while true do
								loc_3 = (if loc_2 > 127 then 1 else 0)
								store_i32_n8(memory_at_0, loc_4 + 8, bor_i32(band_i32(loc_2, 127), shl_i32(loc_3, 7)))
								reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
								loc_2 = shr_u32(loc_2, 7)
								if loc_3 ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							loc_2 = load_i32(memory_at_0, loc_5 + 12)
							while true do
								loc_3 = (if loc_2 > 127 then 1 else 0)
								store_i32_n8(memory_at_0, loc_4 + 8, bor_i32(band_i32(loc_2, 127), shl_i32(loc_3, 7)))
								reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
								loc_2 = shr_u32(loc_2, 7)
								if loc_3 ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							store_i32_n8(memory_at_0, loc_4 + 8, load_i32_u8(memory_at_0, loc_5 + 4))
							reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
							loc_5 = add_i32(loc_5, 16)
							if loc_8 ~= loc_5 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 340), load_i32(memory_at_0, loc_0 + 336)), 2)
				while true do
					loc_3 = (if loc_2 > 127 then 1 else 0)
					store_i32_n8(memory_at_0, loc_4 + 8, bor_i32(band_i32(loc_2, 127), shl_i32(loc_3, 7)))
					reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
					loc_2 = shr_u32(loc_2, 7)
					if loc_3 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = load_i32(memory_at_0, loc_0 + 336)
				loc_8 = load_i32(memory_at_0, loc_0 + 340)
				if loc_5 == loc_8 then
					desired = 1
					break
				end
				while true do
					loc_2 = load_i32(memory_at_0, loc_5)
					while true do
						loc_3 = (if loc_2 > 127 then 1 else 0)
						store_i32_n8(memory_at_0, loc_4 + 8, bor_i32(band_i32(loc_2, 127), shl_i32(loc_3, 7)))
						reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
						loc_2 = shr_u32(loc_2, 7)
						if loc_3 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_5 = add_i32(loc_5, 4)
					if loc_8 ~= loc_5 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_4 + 8, 0)
			reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_4, 8), 1)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[72] = --[[ Luau::BytecodeBuilder::writeLineInfo(std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>&) const ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local reg_0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		loc_10 = load_i32(memory_at_0, loc_0 + 40)
		loc_6 = load_i32(memory_at_0, loc_0 + 36)
		loc_8 = shr_i32(sub_i32(loc_10, loc_6), 2)
		loc_9 = 16777216
		if loc_6 ~= loc_10 then
			while true do
				while true do
					while true do
						while true do
							loc_12 = loc_7
							loc_2 = loc_12
							loc_7 = add_i32(loc_9, loc_2)
							if loc_7 <= loc_2 then
								break
							end
							loc_4 = load_i32(memory_at_0, add_i32(shl_i32(loc_2, 2), loc_6))
							loc_11 = loc_4
							while true do
								loc_3 = load_i32(memory_at_0, add_i32(shl_i32(loc_2, 2), loc_6))
								loc_4 = (if lt_i32(loc_3, loc_4) then loc_4 else loc_3)
								loc_11 = (if lt_i32(loc_3, loc_11) then loc_3 else loc_11)
								if gt_i32(sub_i32(loc_4, loc_11), 255) then
									desired = 4
									break
								end
								loc_2 = add_i32(loc_2, 1)
								loc_3 = (if loc_8 <= loc_2 then 1 else 0)
								if band_i32((if loc_3 == 0 then 1 else 0), (if loc_2 < loc_7 then 1 else 0)) ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							if loc_3 ~= 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_3 = 0
						loc_4 = sub_i32(loc_2, loc_12)
						if loc_9 <= loc_4 then
							break
						end
						while true do
							loc_2 = loc_3
							loc_3 = add_i32(loc_2, 1)
							if ge_i32(loc_4, shl_i32(2, loc_2)) then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_9 = shl_i32(1, loc_2)
						loc_7 = add_i32(loc_12, loc_9)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					if loc_7 < loc_8 then
						continue
					end
					break
				end
				break
			end
		end
		store_i32(memory_at_0, loc_5 + 24, 0)
		store_i32(memory_at_0, loc_5 + 20, 0)
		store_i64(memory_at_0, loc_5 + 12, i64_ZERO)
		loc_13 = add_i32(loc_5, 24)
		loc_17 = add_i32(div_u32(sub_i32(loc_8, 1), loc_9), 1)
		if loc_17 > 1 then
			while true do
				FUNC_LIST[112](add_i32(loc_5, 12), loc_17)
				loc_13 = load_i32(memory_at_0, loc_5 + 12)
				loc_10 = load_i32(memory_at_0, loc_0 + 40)
				loc_6 = load_i32(memory_at_0, loc_0 + 36)
				reg_0 = shr_i32(sub_i32(loc_10, loc_6), 2)
				break
			end
		else
			while true do
				reg_0 = loc_8
				break
			end
		end
		loc_8 = reg_0
		if loc_6 ~= loc_10 then
			while true do
				while true do
					loc_15 = loc_14
					loc_2 = load_i32(memory_at_0, add_i32(shl_i32(loc_15, 2), loc_6))
					while true do
						loc_14 = add_i32(loc_9, loc_15)
						loc_10 = (if loc_8 < loc_14 then loc_8 else loc_14)
						if loc_10 <= loc_15 then
							break
						end
						loc_4 = 0
						loc_3 = loc_15
						loc_12 = mul_i32(loc_9, loc_16)
						loc_7 = band_i32(sub_i32(loc_10, loc_12), 3)
						if loc_7 ~= 0 then
							while true do
								while true do
									loc_11 = load_i32(memory_at_0, add_i32(shl_i32(loc_3, 2), loc_6))
									loc_2 = (if gt_i32(loc_2, loc_11) then loc_11 else loc_2)
									loc_3 = add_i32(loc_3, 1)
									loc_4 = add_i32(loc_4, 1)
									if loc_7 ~= loc_4 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if sub_i32(loc_12, loc_10) > 4294967292 then
							break
						end
						while true do
							loc_4 = add_i32(shl_i32(loc_3, 2), loc_6)
							loc_11 = load_i32(memory_at_0, loc_4 + 12)
							loc_7 = load_i32(memory_at_0, loc_4 + 8)
							loc_12 = load_i32(memory_at_0, loc_4 + 4)
							loc_4 = load_i32(memory_at_0, loc_4)
							loc_2 = (if gt_i32(loc_2, loc_4) then loc_4 else loc_2)
							loc_2 = (if gt_i32(loc_2, loc_12) then loc_12 else loc_2)
							loc_2 = (if gt_i32(loc_2, loc_7) then loc_7 else loc_2)
							loc_2 = (if gt_i32(loc_2, loc_11) then loc_11 else loc_2)
							loc_3 = add_i32(loc_3, 4)
							if loc_10 > loc_3 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					store_i32(memory_at_0, add_i32(shl_i32(div_u32(loc_15, loc_9), 2), loc_13), loc_2)
					loc_16 = add_i32(loc_16, 1)
					if loc_8 > loc_14 then
						continue
					end
					break
				end
				break
			end
		end
		loc_3 = 0
		while true do
			loc_2 = loc_3
			loc_3 = add_i32(loc_2, 1)
			if ge_i32(loc_9, shl_i32(2, loc_2)) then
				continue
			end
			break
		end
		store_i32_n8(memory_at_0, loc_5 + 28, loc_2)
		reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_5, 28), 1)
		loc_4 = load_i32(memory_at_0, loc_0 + 36)
		if loc_4 ~= load_i32(memory_at_0, loc_0 + 40) then
			while true do
				loc_3 = 0
				loc_6 = 0
				while true do
					loc_4 = sub_i32(load_i32(memory_at_0, add_i32(shl_i32(loc_3, 2), loc_4)), load_i32(memory_at_0, add_i32(shl_i32(shr_u32(loc_3, loc_2), 2), loc_13)))
					store_i32_n8(memory_at_0, loc_5 + 28, sub_i32(loc_4, loc_6))
					reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_5, 28), 1)
					loc_6 = loc_4
					loc_3 = add_i32(loc_3, 1)
					loc_4 = load_i32(memory_at_0, loc_0 + 36)
					if loc_3 < shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 40), loc_4), 2) then
						continue
					end
					break
				end
				break
			end
		end
		if loc_17 ~= 0 then
			while true do
				loc_2 = 0
				loc_3 = 0
				while true do
					loc_4 = add_i32(shl_i32(loc_2, 2), loc_13)
					store_i32(memory_at_0, loc_5 + 28, sub_i32(load_i32(memory_at_0, loc_4), loc_3))
					reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_5, 28), 4)
					loc_3 = load_i32(memory_at_0, loc_4)
					loc_2 = add_i32(loc_2, 1)
					if loc_17 > loc_2 then
						continue
					end
					break
				end
				break
			end
		end
		loc_2 = load_i32(memory_at_0, loc_5 + 12)
		if loc_2 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_5 + 16, loc_2)
				FUNC_LIST[609](loc_2)
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_5, 32)
		break
	end
end
FUNC_LIST[73] = --[[ Luau::BytecodeBuilder::setMainFunction(unsigned int) ]] function(loc_0, loc_1)
	while true do
		store_i32(memory_at_0, loc_0 + 16, loc_1)
		break
	end
end
FUNC_LIST[74] = --[[ Luau::BytecodeBuilder::addConstant(Luau::BytecodeBuilder::ConstantKey const&, Luau::BytecodeBuilder::Constant const&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_5 = add_i32(loc_0, 104)
		reg_0 = FUNC_LIST[75](loc_5, loc_1)
		loc_3 = reg_0
		if loc_3 ~= 0 then
			while true do
				reg_0 = load_i32(memory_at_0, loc_3 + 24)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = 4294967295
		while true do
			while true do
				loc_7 = div_i32(sub_i32(load_i32(memory_at_0, loc_0 + 52), load_i32(memory_at_0, loc_0 + 48)), 24)
				if loc_7 <= 8388607 then
					while true do
						while true do
							if load_i32(memory_at_0, loc_0 + 112) < shr_u32(mul_i32(load_i32(memory_at_0, loc_0 + 108), 3), 2) then
								break
							end
							reg_0 = FUNC_LIST[75](loc_5, loc_1)
							if reg_0 ~= 0 then
								break
							end
							FUNC_LIST[76](loc_5)
							break
						end
						if desired then
							break
						end
						reg_0 = FUNC_LIST[77](loc_5, loc_1)
						store_i32(memory_at_0, reg_0 + 24, loc_7)
						while true do
							loc_1 = load_i32(memory_at_0, loc_0 + 52)
							if loc_1 ~= load_i32(memory_at_0, loc_0 + 56) then
								while true do
									store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_2))
									store_i64(memory_at_0, loc_1 + 16, load_i64(memory_at_0, loc_2 + 16))
									store_i64(memory_at_0, loc_1 + 8, load_i64(memory_at_0, loc_2 + 8))
									store_i32(memory_at_0, loc_0 + 52, add_i32(loc_1, 24))
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_8 = add_i32(loc_0, 48)
							loc_5 = load_i32(memory_at_0, loc_8)
							loc_3 = div_i32(sub_i32(loc_1, loc_5), 24)
							loc_4 = add_i32(loc_3, 1)
							if loc_4 >= 178956971 then
								desired = 2
								break
							end
							loc_6 = shl_i32(loc_3, 1)
							loc_4 = (if loc_3 >= 89478485 then 178956970 else (if loc_4 < loc_6 then loc_6 else loc_4))
							if loc_4 ~= 0 then
								while true do
									if loc_4 >= 178956971 then
										desired = 1
										break
									end
									reg_0 = FUNC_LIST[606](mul_i32(loc_4, 24))
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = 0
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_6 = reg_0
							loc_3 = add_i32(loc_6, mul_i32(loc_3, 24))
							store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2))
							store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_2 + 16))
							store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_2 + 8))
							loc_2 = add_i32(mul_i32(loc_4, 24), loc_6)
							loc_4 = add_i32(loc_3, 24)
							if loc_1 ~= loc_5 then
								while true do
									while true do
										loc_3 = sub_i32(loc_3, 24)
										loc_1 = sub_i32(loc_1, 24)
										store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_1))
										store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_1 + 16))
										store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_1 + 8))
										if loc_1 ~= loc_5 then
											continue
										end
										break
									end
									if desired then
										break
									end
									reg_0 = load_i32(memory_at_0, loc_8)
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = loc_1
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_1 = reg_0
							store_i32(memory_at_0, loc_0 + 56, loc_2)
							store_i32(memory_at_0, loc_0 + 52, loc_4)
							store_i32(memory_at_0, loc_0 + 48, loc_3)
							if loc_1 == 0 then
								break
							end
							FUNC_LIST[609](loc_1)
							break
						end
						if desired then
							break
						end
						reg_0 = loc_7
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_3
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_3 = reg_0
				reg_0 = loc_3
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_8)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[75] = --[[ Luau::detail::DenseHashTable<Luau::BytecodeBuilder::ConstantKey, std::__2::pair<Luau::BytecodeBuilder::ConstantKey, int>, std::__2::pair<Luau::BytecodeBuilder::ConstantKey const, int>, Luau::detail::ItemInterfaceMap<Luau::BytecodeBuilder::ConstantKey, int>, Luau::BytecodeBuilder::ConstantKeyHash, std::__2::equal_to<Luau::BytecodeBuilder::ConstantKey>>::find(Luau::BytecodeBuilder::ConstantKey const&) const ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local loc_9 = i64_ZERO
	local loc_10 = i64_ZERO
	local loc_11 = i64_ZERO
	local reg_0
	local desired
	while true do
		while true do
			if load_i32(memory_at_0, loc_0 + 8) == 0 then
				break
			end
			while true do
				loc_4 = load_i32(memory_at_0, loc_1)
				loc_6 = load_i32(memory_at_0, loc_0 + 16)
				if loc_4 ~= loc_6 then
					break
				end
				if ne_i64(load_i64(memory_at_0, loc_1 + 8), load_i64(memory_at_0, loc_0 + 24)) then
					break
				end
				if eq_i64(load_i64(memory_at_0, loc_1 + 16), load_i64(memory_at_0, loc_0 + 32)) then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = load_i32(memory_at_0, loc_0 + 4)
			while true do
				if loc_4 == 3 then
					while true do
						loc_8 = load_i64(memory_at_0, loc_1 + 8)
						loc_2 = load_i32(memory_at_0, loc_1 + 12)
						reg_0 = mul_i32(bxor_i32(shr_u32(loc_2, 17), loc_2), 19349663)
						loc_2 = load_i32(memory_at_0, loc_1 + 8)
						reg_0 = bxor_i32(reg_0, mul_i32(bxor_i32(shr_u32(loc_2, 17), loc_2), 73856093))
						loc_2 = load_i32(memory_at_0, loc_1 + 16)
						reg_0 = bxor_i32(reg_0, mul_i32(bxor_i32(shr_u32(loc_2, 17), loc_2), 83492791))
						loc_2 = load_i32(memory_at_0, loc_1 + 20)
						reg_0 = bxor_i32(reg_0, mul_i32(bxor_i32(shr_u32(loc_2, 17), loc_2), 39916801))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_8 = load_i64(memory_at_0, loc_1 + 8)
				loc_2 = bxor_i32(wrap_i32_i64(shr_u64(loc_8, i64_from_u32(32, 0))), mul_i32(loc_4, 1540483477))
				loc_5 = mul_i32(bxor_i32(shr_u32(loc_2, 18), wrap_i32_i64(loc_8)), 1540483477)
				loc_2 = mul_i32(bxor_i32(shr_u32(loc_5, 22), loc_2), 1540483477)
				reg_0 = mul_i32(bxor_i32(shr_u32(mul_i32(bxor_i32(shr_u32(loc_2, 17), loc_5), 1540483477), 19), loc_2), 1540483477)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = reg_0
			loc_3 = sub_i32(loc_3, 1)
			loc_9 = load_i64(memory_at_0, loc_0 + 32)
			loc_10 = load_i64(memory_at_0, loc_0 + 24)
			loc_11 = load_i64(memory_at_0, loc_1 + 16)
			loc_7 = load_i32(memory_at_0, loc_0)
			loc_0 = 0
			while true do
				while true do
					loc_5 = band_i32(loc_2, loc_3)
					loc_2 = add_i32(shl_i32(loc_5, 5), loc_7)
					loc_1 = load_i32(memory_at_0, loc_2)
					if loc_4 ~= loc_1 then
						break
					end
					if ne_i64(loc_8, load_i64(memory_at_0, loc_2 + 8)) then
						break
					end
					if eq_i64(loc_11, load_i64(memory_at_0, loc_2 + 16)) then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				while true do
					while true do
						if loc_1 ~= loc_6 then
							break
						end
						if ne_i64(loc_10, load_i64(memory_at_0, loc_2 + 8)) then
							break
						end
						if eq_i64(loc_9, load_i64(memory_at_0, loc_2 + 16)) then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_0 = add_i32(loc_0, 1)
					loc_2 = add_i32(loc_5, loc_0)
					if loc_0 <= loc_3 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = 0
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[76] = --[[ Luau::detail::DenseHashTable<Luau::BytecodeBuilder::ConstantKey, std::__2::pair<Luau::BytecodeBuilder::ConstantKey, int>, std::__2::pair<Luau::BytecodeBuilder::ConstantKey const, int>, Luau::detail::ItemInterfaceMap<Luau::BytecodeBuilder::ConstantKey, int>, Luau::BytecodeBuilder::ConstantKeyHash, std::__2::equal_to<Luau::BytecodeBuilder::ConstantKey>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = i64_ZERO
	local loc_14 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		loc_2 = load_i32(memory_at_0, loc_0 + 4)
		store_i32(memory_at_0, loc_3 + 8, 0)
		store_i64(memory_at_0, loc_3, i64_ZERO)
		store_i64(memory_at_0, loc_3 + 24, load_i64(memory_at_0, loc_0 + 24))
		store_i64(memory_at_0, loc_3 + 32, load_i64(memory_at_0, loc_0 + 32))
		store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_0 + 16))
		loc_5 = (if loc_2 ~= 0 then shl_i32(loc_2, 1) else 16)
		if loc_5 ~= 0 then
			while true do
				loc_2 = add_i32(loc_0, 16)
				reg_0 = FUNC_LIST[606](shl_i32(loc_5, 5))
				loc_6 = reg_0
				store_i32(memory_at_0, loc_3 + 4, loc_5)
				store_i32(memory_at_0, loc_3, loc_6)
				if loc_5 >= 4 then
					while true do
						loc_11 = band_i32(loc_5, 4294967292)
						while true do
							loc_1 = add_i32(shl_i32(loc_4, 5), loc_6)
							store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_2))
							loc_10 = add_i32(loc_2, 8)
							loc_13 = load_i64(memory_at_0, loc_10)
							loc_14 = load_i64(memory_at_0, add_i32(loc_2, 16))
							store_i32(memory_at_0, loc_1 + 24, 0)
							store_i64(memory_at_0, loc_1 + 16, loc_14)
							store_i64(memory_at_0, loc_1 + 8, loc_13)
							store_i64(memory_at_0, loc_1 + 32, load_i64(memory_at_0, loc_2))
							store_i64(memory_at_0, loc_1 + 40, load_i64(memory_at_0, loc_2 + 8))
							store_i64(memory_at_0, loc_1 + 48, load_i64(memory_at_0, loc_2 + 16))
							store_i32(memory_at_0, loc_1 + 56, 0)
							store_i64(memory_at_0, sub_i32(loc_1, 4294967232), load_i64(memory_at_0, loc_2))
							store_i64(memory_at_0, loc_1 + 72, load_i64(memory_at_0, loc_2 + 8))
							store_i64(memory_at_0, loc_1 + 80, load_i64(memory_at_0, loc_2 + 16))
							store_i32(memory_at_0, loc_1 + 88, 0)
							store_i64(memory_at_0, loc_1 + 96, load_i64(memory_at_0, loc_2))
							store_i64(memory_at_0, loc_1 + 104, load_i64(memory_at_0, loc_2 + 8))
							store_i64(memory_at_0, loc_1 + 112, load_i64(memory_at_0, loc_2 + 16))
							store_i32(memory_at_0, loc_1 + 120, 0)
							loc_4 = add_i32(loc_4, 4)
							loc_9 = add_i32(loc_9, 4)
							if loc_11 ~= loc_9 then
								continue
							end
							break
						end
						break
					end
				end
				loc_12 = band_i32(loc_5, 2)
				if loc_12 ~= 0 then
					while true do
						while true do
							loc_1 = add_i32(shl_i32(loc_4, 5), loc_6)
							store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_2))
							loc_13 = load_i64(memory_at_0, loc_2 + 8)
							loc_14 = load_i64(memory_at_0, loc_2 + 16)
							store_i32(memory_at_0, loc_1 + 24, 0)
							store_i64(memory_at_0, loc_1 + 16, loc_14)
							store_i64(memory_at_0, loc_1 + 8, loc_13)
							loc_4 = add_i32(loc_4, 1)
							loc_8 = add_i32(loc_8, 1)
							if loc_12 ~= loc_8 then
								continue
							end
							break
						end
						break
					end
				end
				reg_0 = load_i32(memory_at_0, loc_0 + 4)
				break
			end
		else
			while true do
				reg_0 = loc_2
				break
			end
		end
		loc_2 = reg_0
		if loc_2 ~= 0 then
			while true do
				loc_4 = 0
				while true do
					while true do
						while true do
							loc_10 = shl_i32(loc_4, 5)
							loc_1 = add_i32(loc_10, load_i32(memory_at_0, loc_0))
							if load_i32(memory_at_0, loc_1) ~= load_i32(memory_at_0, loc_0 + 16) then
								break
							end
							if ne_i64(load_i64(memory_at_0, loc_1 + 8), load_i64(memory_at_0, loc_0 + 24)) then
								break
							end
							if eq_i64(load_i64(memory_at_0, loc_1 + 16), load_i64(memory_at_0, loc_0 + 32)) then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[77](loc_3, loc_1)
						loc_1 = reg_0
						loc_2 = add_i32(loc_10, load_i32(memory_at_0, loc_0))
						store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_2))
						store_i64(memory_at_0, loc_1 + 16, load_i64(memory_at_0, loc_2 + 16))
						store_i64(memory_at_0, loc_1 + 8, load_i64(memory_at_0, loc_2 + 8))
						store_i32(memory_at_0, loc_1 + 24, load_i32(memory_at_0, loc_2 + 24))
						loc_2 = load_i32(memory_at_0, loc_0 + 4)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_4 = add_i32(loc_4, 1)
					if loc_2 > loc_4 then
						continue
					end
					break
				end
				loc_6 = load_i32(memory_at_0, loc_3)
				loc_7 = loc_2
				reg_0 = load_i32(memory_at_0, loc_3 + 4)
				break
			end
		else
			while true do
				reg_0 = loc_5
				break
			end
		end
		loc_5 = reg_0
		loc_1 = load_i32(memory_at_0, loc_0)
		store_i32(memory_at_0, loc_0, loc_6)
		store_i32(memory_at_0, loc_3, loc_1)
		store_i32(memory_at_0, loc_0 + 4, loc_5)
		store_i32(memory_at_0, loc_3 + 4, loc_7)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 48)
		break
	end
end
FUNC_LIST[77] = --[[ Luau::detail::DenseHashTable<Luau::BytecodeBuilder::ConstantKey, std::__2::pair<Luau::BytecodeBuilder::ConstantKey, int>, std::__2::pair<Luau::BytecodeBuilder::ConstantKey const, int>, Luau::detail::ItemInterfaceMap<Luau::BytecodeBuilder::ConstantKey, int>, Luau::BytecodeBuilder::ConstantKeyHash, std::__2::equal_to<Luau::BytecodeBuilder::ConstantKey>>::insert_unsafe(Luau::BytecodeBuilder::ConstantKey const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = i64_ZERO
	local loc_11 = i64_ZERO
	local loc_12 = i64_ZERO
	local loc_13 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_3 = load_i32(memory_at_0, loc_0 + 4)
		while true do
			loc_5 = load_i32(memory_at_0, loc_1)
			if loc_5 == 3 then
				while true do
					loc_10 = load_i64(memory_at_0, loc_1 + 8)
					loc_2 = load_i32(memory_at_0, loc_1 + 12)
					reg_0 = mul_i32(bxor_i32(shr_u32(loc_2, 17), loc_2), 19349663)
					loc_2 = load_i32(memory_at_0, loc_1 + 8)
					reg_0 = bxor_i32(reg_0, mul_i32(bxor_i32(shr_u32(loc_2, 17), loc_2), 73856093))
					loc_2 = load_i32(memory_at_0, loc_1 + 16)
					reg_0 = bxor_i32(reg_0, mul_i32(bxor_i32(shr_u32(loc_2, 17), loc_2), 83492791))
					loc_2 = load_i32(memory_at_0, loc_1 + 20)
					reg_0 = bxor_i32(reg_0, mul_i32(bxor_i32(shr_u32(loc_2, 17), loc_2), 39916801))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_10 = load_i64(memory_at_0, loc_1 + 8)
			loc_2 = bxor_i32(wrap_i32_i64(shr_u64(loc_10, i64_from_u32(32, 0))), mul_i32(loc_5, 1540483477))
			loc_4 = mul_i32(bxor_i32(shr_u32(loc_2, 18), wrap_i32_i64(loc_10)), 1540483477)
			loc_2 = mul_i32(bxor_i32(shr_u32(loc_4, 22), loc_2), 1540483477)
			reg_0 = mul_i32(bxor_i32(shr_u32(mul_i32(bxor_i32(shr_u32(loc_2, 17), loc_4), 1540483477), 19), loc_2), 1540483477)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_2 = reg_0
		loc_4 = sub_i32(loc_3, 1)
		loc_11 = load_i64(memory_at_0, loc_1 + 16)
		loc_12 = load_i64(memory_at_0, loc_0 + 32)
		loc_13 = load_i64(memory_at_0, loc_0 + 24)
		loc_6 = load_i32(memory_at_0, loc_0 + 16)
		loc_7 = load_i32(memory_at_0, loc_0)
		loc_3 = 0
		while true do
			while true do
				while true do
					loc_8 = band_i32(loc_2, loc_4)
					loc_2 = add_i32(shl_i32(loc_8, 5), loc_7)
					loc_9 = load_i32(memory_at_0, loc_2)
					if loc_6 ~= loc_9 then
						break
					end
					if ne_i64(loc_13, load_i64(memory_at_0, loc_2 + 8)) then
						break
					end
					if ne_i64(loc_12, load_i64(memory_at_0, loc_2 + 16)) then
						break
					end
					store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_1))
					store_i64(memory_at_0, loc_2 + 16, load_i64(memory_at_0, loc_1 + 16))
					store_i64(memory_at_0, loc_2 + 8, load_i64(memory_at_0, loc_1 + 8))
					store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
					reg_0 = loc_2
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				while true do
					if loc_5 ~= loc_9 then
						break
					end
					if ne_i64(loc_10, load_i64(memory_at_0, loc_2 + 8)) then
						break
					end
					if eq_i64(loc_11, load_i64(memory_at_0, loc_2 + 16)) then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_3 = add_i32(loc_3, 1)
				loc_2 = add_i32(loc_8, loc_3)
				if loc_3 <= loc_4 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[78] = --[[ Luau::BytecodeBuilder::addStringTableEntry(Luau::BytecodeBuilder::StringRef) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		loc_2 = add_i32(loc_0, 348)
		while true do
			if load_i32(memory_at_0, loc_0 + 356) < shr_u32(mul_i32(load_i32(memory_at_0, loc_0 + 352), 3), 2) then
				break
			end
			reg_0 = FUNC_LIST[79](loc_2, loc_1)
			if reg_0 ~= 0 then
				break
			end
			FUNC_LIST[80](loc_2)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			while true do
				while true do
					reg_0 = FUNC_LIST[81](loc_2, loc_1)
					loc_5 = reg_0
					if load_i32(memory_at_0, loc_5 + 8) ~= 0 then
						break
					end
					store_i32(memory_at_0, loc_5 + 8, load_i32(memory_at_0, loc_0 + 356))
					if band_i32(load_i32_u8(memory_at_0, loc_0 + 424), 1) == 0 then
						break
					end
					loc_2 = load_i32(memory_at_0, loc_0 + 376)
					if loc_2 ~= load_i32(memory_at_0, loc_0 + 380) then
						while true do
							store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_1))
							store_i32(memory_at_0, loc_0 + 376, add_i32(loc_2, 8))
							reg_0 = load_i32(memory_at_0, loc_5 + 8)
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = add_i32(loc_0, 372)
					loc_8 = load_i32(memory_at_0, loc_7)
					loc_4 = sub_i32(loc_2, loc_8)
					loc_9 = shr_i32(loc_4, 3)
					loc_3 = add_i32(loc_9, 1)
					if loc_3 >= 536870912 then
						desired = 2
						break
					end
					loc_6 = shr_i32(loc_4, 2)
					loc_3 = (if loc_4 >= 2147483640 then 536870911 else (if loc_3 < loc_6 then loc_6 else loc_3))
					if loc_3 ~= 0 then
						while true do
							if loc_3 >= 536870912 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](shl_i32(loc_3, 3))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = reg_0
					loc_4 = add_i32(loc_6, shl_i32(loc_9, 3))
					store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_1))
					loc_1 = add_i32(shl_i32(loc_3, 3), loc_6)
					loc_3 = add_i32(loc_4, 8)
					if loc_2 ~= loc_8 then
						while true do
							while true do
								loc_4 = sub_i32(loc_4, 8)
								loc_2 = sub_i32(loc_2, 8)
								store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_2))
								if loc_2 ~= loc_8 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = load_i32(memory_at_0, loc_7)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = reg_0
					store_i32(memory_at_0, loc_0 + 380, loc_1)
					store_i32(memory_at_0, loc_0 + 376, loc_3)
					store_i32(memory_at_0, loc_0 + 372, loc_4)
					if loc_2 == 0 then
						break
					end
					FUNC_LIST[609](loc_2)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = load_i32(memory_at_0, loc_5 + 8)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_7)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[79] = --[[ Luau::detail::DenseHashTable<Luau::BytecodeBuilder::StringRef, std::__2::pair<Luau::BytecodeBuilder::StringRef, unsigned int>, std::__2::pair<Luau::BytecodeBuilder::StringRef const, unsigned int>, Luau::detail::ItemInterfaceMap<Luau::BytecodeBuilder::StringRef, unsigned int>, Luau::BytecodeBuilder::StringRefHash, std::__2::equal_to<Luau::BytecodeBuilder::StringRef>>::find(Luau::BytecodeBuilder::StringRef const&) const ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			if load_i32(memory_at_0, loc_0 + 8) == 0 then
				break
			end
			loc_2 = load_i32(memory_at_0, loc_0 + 12)
			while true do
				while true do
					loc_3 = load_i32(memory_at_0, loc_1)
					if loc_3 == 0 then
						break
					end
					if loc_2 == 0 then
						break
					end
					loc_4 = load_i32(memory_at_0, loc_1 + 4)
					if loc_4 ~= load_i32(memory_at_0, loc_0 + 16) then
						desired = 2
						break
					end
					reg_0 = FUNC_LIST[535](loc_3, loc_2, loc_4)
					if reg_0 ~= 0 then
						desired = 2
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_2 == loc_3 then
					desired = 1
					break
				end
				loc_4 = load_i32(memory_at_0, loc_1 + 4)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = sub_i32(load_i32(memory_at_0, loc_0 + 4), 1)
			reg_0 = FUNC_LIST[475](loc_3, loc_4)
			loc_2 = reg_0
			loc_7 = load_i32(memory_at_0, loc_0 + 16)
			loc_4 = load_i32(memory_at_0, loc_0 + 12)
			loc_8 = load_i32(memory_at_0, loc_1 + 4)
			loc_3 = load_i32(memory_at_0, loc_1)
			loc_9 = load_i32(memory_at_0, loc_0)
			loc_0 = 0
			while true do
				while true do
					while true do
						loc_1 = band_i32(loc_2, loc_6)
						loc_5 = add_i32(mul_i32(loc_1, 12), loc_9)
						loc_2 = load_i32(memory_at_0, loc_5)
						if loc_2 == 0 then
							break
						end
						if loc_3 == 0 then
							break
						end
						if loc_8 ~= load_i32(memory_at_0, loc_5 + 4) then
							desired = 3
							break
						end
						reg_0 = FUNC_LIST[535](loc_2, loc_3, loc_8)
						if reg_0 ~= 0 then
							desired = 3
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_2 == loc_3 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				while true do
					while true do
						while true do
							if loc_2 == 0 then
								break
							end
							if loc_4 == 0 then
								break
							end
							if loc_7 ~= load_i32(memory_at_0, loc_5 + 4) then
								desired = 4
								break
							end
							reg_0 = FUNC_LIST[535](loc_2, loc_4, loc_7)
							if reg_0 ~= 0 then
								desired = 4
								break
							end
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_2 == loc_4 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_0 = add_i32(loc_0, 1)
					loc_2 = add_i32(loc_1, loc_0)
					if loc_0 <= loc_6 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = 0
			break
		end
		reg_0 = loc_5
		break
	end
	return reg_0
end
FUNC_LIST[80] = --[[ Luau::detail::DenseHashTable<Luau::BytecodeBuilder::StringRef, std::__2::pair<Luau::BytecodeBuilder::StringRef, unsigned int>, std::__2::pair<Luau::BytecodeBuilder::StringRef const, unsigned int>, Luau::detail::ItemInterfaceMap<Luau::BytecodeBuilder::StringRef, unsigned int>, Luau::BytecodeBuilder::StringRefHash, std::__2::equal_to<Luau::BytecodeBuilder::StringRef>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_3 = load_i32(memory_at_0, loc_0 + 4)
		store_i32(memory_at_0, loc_4 + 16, 0)
		store_i64(memory_at_0, loc_4 + 8, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 20, load_i64(memory_at_0, loc_0 + 12))
		loc_6 = (if loc_3 ~= 0 then shl_i32(loc_3, 1) else 16)
		if loc_6 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[606](mul_i32(loc_6, 12))
				loc_2 = reg_0
				store_i32(memory_at_0, loc_4 + 12, loc_6)
				store_i32(memory_at_0, loc_4 + 8, loc_2)
				loc_8 = band_i32(loc_6, 2)
				loc_11 = load_i64(memory_at_0, loc_0 + 12)
				if loc_6 >= 4 then
					while true do
						loc_9 = band_i32(loc_6, 4294967292)
						loc_3 = 0
						while true do
							loc_5 = add_i32(mul_i32(loc_1, 12), loc_2)
							store_i32(memory_at_0, loc_5 + 8, 0)
							store_i64(memory_at_0, loc_5, loc_11)
							loc_5 = add_i32(mul_i32(bor_i32(loc_1, 1), 12), loc_2)
							store_i32(memory_at_0, loc_5 + 8, 0)
							store_i64(memory_at_0, loc_5, loc_11)
							loc_5 = add_i32(mul_i32(bor_i32(loc_1, 2), 12), loc_2)
							store_i32(memory_at_0, loc_5 + 8, 0)
							store_i64(memory_at_0, loc_5, loc_11)
							loc_5 = add_i32(mul_i32(bor_i32(loc_1, 3), 12), loc_2)
							store_i32(memory_at_0, loc_5 + 8, 0)
							store_i64(memory_at_0, loc_5, loc_11)
							loc_1 = add_i32(loc_1, 4)
							loc_3 = add_i32(loc_3, 4)
							if loc_9 ~= loc_3 then
								continue
							end
							break
						end
						break
					end
				end
				if loc_8 ~= 0 then
					while true do
						while true do
							loc_3 = add_i32(mul_i32(loc_1, 12), loc_2)
							store_i32(memory_at_0, loc_3 + 8, 0)
							store_i64(memory_at_0, loc_3, loc_11)
							loc_1 = add_i32(loc_1, 1)
							loc_7 = add_i32(loc_7, 1)
							if loc_8 ~= loc_7 then
								continue
							end
							break
						end
						break
					end
				end
				reg_0 = load_i32(memory_at_0, loc_0 + 4)
				break
			end
		else
			while true do
				reg_0 = loc_3
				break
			end
		end
		loc_3 = reg_0
		if loc_3 ~= 0 then
			while true do
				loc_1 = 0
				while true do
					loc_2 = load_i32(memory_at_0, loc_0 + 12)
					while true do
						while true do
							while true do
								loc_8 = mul_i32(loc_1, 12)
								loc_7 = add_i32(loc_8, load_i32(memory_at_0, loc_0))
								loc_5 = load_i32(memory_at_0, loc_7)
								if loc_5 == 0 then
									break
								end
								if loc_2 == 0 then
									break
								end
								loc_9 = load_i32(memory_at_0, loc_7 + 4)
								if loc_9 ~= load_i32(memory_at_0, loc_0 + 16) then
									desired = 4
									break
								end
								reg_0 = FUNC_LIST[535](loc_5, loc_2, loc_9)
								if reg_0 ~= 0 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							if loc_2 == loc_5 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[81](add_i32(loc_4, 8), loc_7)
						loc_2 = reg_0
						loc_7 = add_i32(loc_8, load_i32(memory_at_0, loc_0))
						store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_7))
						store_i32(memory_at_0, loc_2 + 8, load_i32(memory_at_0, loc_7 + 8))
						loc_3 = load_i32(memory_at_0, loc_0 + 4)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_1 = add_i32(loc_1, 1)
					if loc_3 > loc_1 then
						continue
					end
					break
				end
				loc_6 = load_i32(memory_at_0, loc_4 + 12)
				loc_10 = loc_3
				reg_0 = load_i32(memory_at_0, loc_4 + 8)
				break
			end
		else
			while true do
				reg_0 = loc_2
				break
			end
		end
		loc_2 = reg_0
		loc_1 = load_i32(memory_at_0, loc_0)
		store_i32(memory_at_0, loc_0, loc_2)
		store_i32(memory_at_0, loc_4 + 8, loc_1)
		store_i32(memory_at_0, loc_0 + 4, loc_6)
		store_i32(memory_at_0, loc_4 + 12, loc_10)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[81] = --[[ Luau::detail::DenseHashTable<Luau::BytecodeBuilder::StringRef, std::__2::pair<Luau::BytecodeBuilder::StringRef, unsigned int>, std::__2::pair<Luau::BytecodeBuilder::StringRef const, unsigned int>, Luau::detail::ItemInterfaceMap<Luau::BytecodeBuilder::StringRef, unsigned int>, Luau::BytecodeBuilder::StringRefHash, std::__2::equal_to<Luau::BytecodeBuilder::StringRef>>::insert_unsafe(Luau::BytecodeBuilder::StringRef const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_7 = sub_i32(load_i32(memory_at_0, loc_0 + 4), 1)
		reg_0 = FUNC_LIST[475](load_i32(memory_at_0, loc_1), load_i32(memory_at_0, loc_1 + 4))
		loc_2 = reg_0
		loc_8 = load_i32(memory_at_0, loc_1 + 4)
		loc_4 = load_i32(memory_at_0, loc_1)
		loc_9 = load_i32(memory_at_0, loc_0 + 16)
		loc_5 = load_i32(memory_at_0, loc_0 + 12)
		loc_10 = load_i32(memory_at_0, loc_0)
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_11 = band_i32(loc_2, loc_7)
							loc_3 = add_i32(mul_i32(loc_11, 12), loc_10)
							loc_2 = load_i32(memory_at_0, loc_3)
							if loc_2 == 0 then
								break
							end
							if loc_5 == 0 then
								break
							end
							if loc_9 ~= load_i32(memory_at_0, loc_3 + 4) then
								desired = 4
								break
							end
							reg_0 = FUNC_LIST[535](loc_2, loc_5, loc_9)
							if reg_0 ~= 0 then
								desired = 4
								break
							end
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_2 == loc_5 then
							desired = 1
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					while true do
						while true do
							if loc_2 == 0 then
								break
							end
							if loc_4 == 0 then
								break
							end
							if loc_8 ~= load_i32(memory_at_0, loc_3 + 4) then
								desired = 4
								break
							end
							reg_0 = FUNC_LIST[535](loc_2, loc_4, loc_8)
							if reg_0 == 0 then
								desired = 2
								break
							end
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_2 == loc_4 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_6 = add_i32(loc_6, 1)
					loc_2 = add_i32(loc_11, loc_6)
					if loc_6 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = loc_3
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_1))
		store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[82] = --[[ Luau::BytecodeBuilder::addConstantNil() ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_1
		store_i32_n8(memory_at_0, loc_1 + 32, 0)
		store_i32(memory_at_0, loc_1 + 24, 0)
		store_i64(memory_at_0, loc_1 + 16, i64_ZERO)
		store_i64(memory_at_0, loc_1 + 8, i64_ZERO)
		store_i32(memory_at_0, loc_1, 0)
		reg_0 = FUNC_LIST[74](loc_0, loc_1, add_i32(loc_1, 24))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_1, 48)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[83] = --[[ Luau::BytecodeBuilder::addConstantBoolean(bool) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		store_i32(memory_at_0, loc_2 + 24, 1)
		store_i32_n8(memory_at_0, loc_2 + 32, loc_1)
		store_i64(memory_at_0, loc_2 + 16, i64_ZERO)
		store_i64(memory_at_0, loc_2 + 8, extend_i64_u32(loc_1))
		store_i32(memory_at_0, loc_2, 1)
		reg_0 = FUNC_LIST[74](loc_0, loc_2, add_i32(loc_2, 24))
		loc_1 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 48)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[84] = --[[ Luau::BytecodeBuilder::addConstantNumber(double) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		store_f64(memory_at_0, loc_2 + 32, loc_1)
		store_i32(memory_at_0, loc_2 + 24, 2)
		store_i64(memory_at_0, loc_2 + 16, i64_ZERO)
		store_i32(memory_at_0, loc_2, 2)
		store_f64(memory_at_0, loc_2 + 8, loc_1)
		reg_0 = FUNC_LIST[74](loc_0, loc_2, add_i32(loc_2, 24))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 48)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[85] = --[[ Luau::BytecodeBuilder::addConstantVector(float, float, float, float) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local reg_0
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_5
		store_f32(memory_at_0, loc_5 + 44, loc_4)
		store_f32(memory_at_0, loc_5 + 40, loc_3)
		store_f32(memory_at_0, loc_5 + 36, loc_2)
		store_f32(memory_at_0, loc_5 + 32, loc_1)
		store_i32(memory_at_0, loc_5 + 24, 3)
		store_f32(memory_at_0, loc_5 + 20, loc_4)
		store_f32(memory_at_0, loc_5 + 16, loc_3)
		store_f32(memory_at_0, loc_5 + 12, loc_2)
		store_f32(memory_at_0, loc_5 + 8, loc_1)
		store_i32(memory_at_0, loc_5, 3)
		reg_0 = FUNC_LIST[74](loc_0, loc_5, add_i32(loc_5, 24))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_5, 48)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[86] = --[[ Luau::BytecodeBuilder::addConstantString(Luau::BytecodeBuilder::StringRef) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = i64_ZERO
	local reg_0
	local reg_1
	while true do
		loc_2 = add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = load_i64(memory_at_0, loc_1)
		store_i64(memory_at_0, loc_2, loc_3)
		store_i64(memory_at_0, loc_2 + 56, loc_3)
		reg_1 = FUNC_LIST[78](loc_0, loc_2)
		loc_1 = reg_1
		store_i32(memory_at_0, loc_2 + 40, loc_1)
		store_i32(memory_at_0, loc_2 + 32, 4)
		store_i64(memory_at_0, loc_2 + 24, i64_ZERO)
		store_i64(memory_at_0, loc_2 + 16, extend_i64_u32(loc_1))
		store_i32(memory_at_0, loc_2 + 8, 4)
		reg_0 = FUNC_LIST[74](loc_0, add_i32(loc_2, 8), add_i32(loc_2, 32))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = sub_i32(loc_2, 4294967232)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[87] = --[[ Luau::BytecodeBuilder::addImport(unsigned int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		store_i32(memory_at_0, loc_2 + 24, 5)
		store_i32(memory_at_0, loc_2 + 32, loc_1)
		store_i64(memory_at_0, loc_2 + 16, i64_ZERO)
		store_i64(memory_at_0, loc_2 + 8, extend_i64_u32(loc_1))
		store_i32(memory_at_0, loc_2, 5)
		reg_0 = FUNC_LIST[74](loc_0, loc_2, add_i32(loc_2, 24))
		loc_1 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 48)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[88] = --[[ Luau::BytecodeBuilder::addConstantTable(Luau::BytecodeBuilder::TableShape const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = add_i32(loc_0, 152)
		reg_0 = FUNC_LIST[89](loc_3, loc_1)
		loc_2 = reg_0
		if loc_2 ~= 0 then
			while true do
				reg_0 = load_i32(memory_at_0, loc_2 + 132)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = 4294967295
		while true do
			while true do
				while true do
					loc_8 = div_i32(sub_i32(load_i32(memory_at_0, loc_0 + 52), load_i32(memory_at_0, loc_0 + 48)), 24)
					if loc_8 <= 8388607 then
						while true do
							loc_7 = div_i32(sub_i32(load_i32(memory_at_0, loc_0 + 88), load_i32(memory_at_0, loc_0 + 84)), 132)
							while true do
								if load_i32(memory_at_0, loc_0 + 160) < shr_u32(mul_i32(load_i32(memory_at_0, loc_0 + 156), 3), 2) then
									break
								end
								reg_0 = FUNC_LIST[89](loc_3, loc_1)
								if reg_0 ~= 0 then
									break
								end
								FUNC_LIST[90](loc_3)
								break
							end
							if desired then
								break
							end
							reg_0 = FUNC_LIST[91](loc_3, loc_1)
							store_i32(memory_at_0, reg_0 + 132, loc_8)
							while true do
								loc_2 = load_i32(memory_at_0, loc_0 + 88)
								if loc_2 ~= load_i32(memory_at_0, loc_0 + 92) then
									while true do
										reg_1 = FUNC_LIST[477](loc_2, loc_1, 132)
										store_i32(memory_at_0, loc_0 + 88, add_i32(reg_1, 132))
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_9 = add_i32(loc_0, 84)
								loc_5 = load_i32(memory_at_0, loc_9)
								loc_3 = div_i32(sub_i32(loc_2, loc_5), 132)
								loc_4 = add_i32(loc_3, 1)
								if loc_4 >= 32537632 then
									desired = 3
									break
								end
								loc_6 = shl_i32(loc_3, 1)
								loc_4 = (if loc_3 >= 16268815 then 32537631 else (if loc_4 < loc_6 then loc_6 else loc_4))
								if loc_4 ~= 0 then
									while true do
										if loc_4 >= 32537632 then
											desired = 2
											break
										end
										reg_0 = FUNC_LIST[606](mul_i32(loc_4, 132))
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = 0
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_6 = reg_0
								loc_4 = add_i32(loc_6, mul_i32(loc_4, 132))
								loc_3 = add_i32(mul_i32(loc_3, 132), loc_6)
								reg_0 = FUNC_LIST[477](loc_3, loc_1, 132)
								loc_1 = add_i32(reg_0, 132)
								if loc_2 ~= loc_5 then
									while true do
										while true do
											loc_3 = sub_i32(loc_3, 132)
											loc_2 = sub_i32(loc_2, 132)
											reg_0 = FUNC_LIST[477](loc_3, loc_2, 132)
											if loc_2 ~= loc_5 then
												continue
											end
											break
										end
										if desired then
											break
										end
										reg_0 = load_i32(memory_at_0, loc_9)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = loc_2
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_2 = reg_0
								store_i32(memory_at_0, loc_0 + 92, loc_4)
								store_i32(memory_at_0, loc_0 + 88, loc_1)
								store_i32(memory_at_0, loc_0 + 84, loc_3)
								if loc_2 == 0 then
									break
								end
								FUNC_LIST[609](loc_2)
								break
							end
							if desired then
								break
							end
							while true do
								loc_2 = load_i32(memory_at_0, loc_0 + 52)
								if loc_2 ~= load_i32(memory_at_0, loc_0 + 56) then
									while true do
										store_i32(memory_at_0, loc_2 + 8, loc_7)
										store_i32(memory_at_0, loc_2, 6)
										store_i32(memory_at_0, loc_0 + 52, add_i32(loc_2, 24))
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_6 = add_i32(loc_0, 48)
								loc_1 = load_i32(memory_at_0, loc_6)
								loc_3 = div_i32(sub_i32(loc_2, loc_1), 24)
								loc_5 = add_i32(loc_3, 1)
								if loc_5 >= 178956971 then
									desired = 1
									break
								end
								loc_4 = shl_i32(loc_3, 1)
								loc_5 = (if loc_3 >= 89478485 then 178956970 else (if loc_4 > loc_5 then loc_4 else loc_5))
								if loc_5 ~= 0 then
									while true do
										if loc_5 >= 178956971 then
											desired = 2
											break
										end
										reg_0 = FUNC_LIST[606](mul_i32(loc_5, 24))
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = 0
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_4 = reg_0
								loc_3 = add_i32(loc_4, mul_i32(loc_3, 24))
								store_i32(memory_at_0, loc_3 + 8, loc_7)
								store_i32(memory_at_0, loc_3, 6)
								loc_5 = add_i32(mul_i32(loc_5, 24), loc_4)
								loc_7 = add_i32(loc_3, 24)
								if loc_1 ~= loc_2 then
									while true do
										while true do
											loc_3 = sub_i32(loc_3, 24)
											loc_2 = sub_i32(loc_2, 24)
											store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2))
											store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_2 + 16))
											store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_2 + 8))
											if loc_1 ~= loc_2 then
												continue
											end
											break
										end
										if desired then
											break
										end
										reg_0 = load_i32(memory_at_0, loc_6)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = loc_2
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_2 = reg_0
								store_i32(memory_at_0, loc_0 + 56, loc_5)
								store_i32(memory_at_0, loc_0 + 52, loc_7)
								store_i32(memory_at_0, loc_0 + 48, loc_3)
								if loc_2 == 0 then
									break
								end
								FUNC_LIST[609](loc_2)
								break
							end
							if desired then
								break
							end
							reg_0 = loc_8
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = reg_0
					reg_0 = loc_2
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[40](loc_9)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[163]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[40](loc_6)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[89] = --[[ Luau::detail::DenseHashTable<Luau::BytecodeBuilder::TableShape, std::__2::pair<Luau::BytecodeBuilder::TableShape, int>, std::__2::pair<Luau::BytecodeBuilder::TableShape const, int>, Luau::detail::ItemInterfaceMap<Luau::BytecodeBuilder::TableShape, int>, Luau::BytecodeBuilder::TableShapeHash, std::__2::equal_to<Luau::BytecodeBuilder::TableShape>>::find(Luau::BytecodeBuilder::TableShape const&) const ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		while true do
			if load_i32(memory_at_0, loc_0 + 8) == 0 then
				break
			end
			loc_11 = add_i32(loc_0, 12)
			loc_4 = load_i32(memory_at_0, loc_1 + 128)
			loc_12 = load_i32(memory_at_0, loc_0 + 140)
			if loc_4 == loc_12 then
				while true do
					reg_0 = FUNC_LIST[535](loc_1, loc_11, shl_i32(loc_4, 2))
					if reg_0 == 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_9 = load_i32(memory_at_0, loc_0 + 4)
			while true do
				if loc_4 == 0 then
					while true do
						loc_2 = 2166136261
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_6 = band_i32(loc_4, 3)
				while true do
					if loc_4 < 4 then
						while true do
							loc_2 = 2166136261
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_10 = band_i32(loc_4, 4294967292)
					loc_2 = 2166136261
					while true do
						loc_5 = add_i32(shl_i32(loc_3, 2), loc_1)
						loc_2 = mul_i32(bxor_i32(load_i32(memory_at_0, loc_5 + 12), mul_i32(bxor_i32(load_i32(memory_at_0, loc_5 + 8), mul_i32(bxor_i32(load_i32(memory_at_0, loc_5 + 4), mul_i32(bxor_i32(loc_2, load_i32(memory_at_0, loc_5)), 16777619)), 16777619)), 16777619)), 16777619)
						loc_3 = add_i32(loc_3, 4)
						loc_8 = add_i32(loc_8, 4)
						if loc_10 ~= loc_8 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_6 == 0 then
					break
				end
				while true do
					loc_2 = mul_i32(bxor_i32(loc_2, load_i32(memory_at_0, add_i32(shl_i32(loc_3, 2), loc_1))), 16777619)
					loc_3 = add_i32(loc_3, 1)
					loc_7 = add_i32(loc_7, 1)
					if loc_6 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = sub_i32(loc_9, 1)
			loc_9 = shl_i32(loc_12, 2)
			loc_10 = shl_i32(loc_4, 2)
			loc_6 = load_i32(memory_at_0, loc_0)
			loc_3 = 0
			while true do
				loc_8 = band_i32(loc_2, loc_5)
				loc_2 = add_i32(mul_i32(loc_8, 136), loc_6)
				loc_7 = load_i32(memory_at_0, loc_2 + 128)
				if loc_7 == loc_4 then
					while true do
						reg_0 = FUNC_LIST[535](loc_2, loc_1, loc_10)
						if reg_0 == 0 then
							desired = 1
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				while true do
					if loc_7 == loc_12 then
						while true do
							reg_0 = FUNC_LIST[535](loc_2, loc_11, loc_9)
							if reg_0 == 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = add_i32(loc_3, 1)
					loc_2 = add_i32(loc_8, loc_3)
					if loc_3 <= loc_5 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = 0
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[90] = --[[ Luau::detail::DenseHashTable<Luau::BytecodeBuilder::TableShape, std::__2::pair<Luau::BytecodeBuilder::TableShape, int>, std::__2::pair<Luau::BytecodeBuilder::TableShape const, int>, Luau::detail::ItemInterfaceMap<Luau::BytecodeBuilder::TableShape, int>, Luau::BytecodeBuilder::TableShapeHash, std::__2::equal_to<Luau::BytecodeBuilder::TableShape>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 160)
		GLOBAL_LIST[0].value = loc_3
		loc_4 = load_i32(memory_at_0, loc_0 + 4)
		store_i32(memory_at_0, loc_3 + 20, 0)
		store_i64(memory_at_0, loc_3 + 12, i64_ZERO)
		loc_6 = add_i32(loc_0, 12)
		reg_0 = FUNC_LIST[477](add_i32(loc_3, 24), loc_6, 132)
		loc_5 = (if loc_4 ~= 0 then shl_i32(loc_4, 1) else 16)
		if loc_5 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[606](mul_i32(loc_5, 136))
				loc_2 = reg_0
				store_i32(memory_at_0, loc_3 + 16, loc_5)
				store_i32(memory_at_0, loc_3 + 12, loc_2)
				loc_7 = band_i32(loc_5, 2)
				loc_4 = 0
				if loc_5 >= 4 then
					while true do
						loc_10 = band_i32(loc_5, 4294967292)
						while true do
							reg_0 = FUNC_LIST[477](add_i32(mul_i32(loc_1, 136), loc_2), loc_6, 132)
							store_i32(memory_at_0, reg_0 + 132, 0)
							reg_0 = FUNC_LIST[477](add_i32(mul_i32(bor_i32(loc_1, 1), 136), loc_2), loc_6, 132)
							store_i32(memory_at_0, reg_0 + 132, 0)
							reg_0 = FUNC_LIST[477](add_i32(mul_i32(bor_i32(loc_1, 2), 136), loc_2), loc_6, 132)
							store_i32(memory_at_0, reg_0 + 132, 0)
							reg_0 = FUNC_LIST[477](add_i32(mul_i32(bor_i32(loc_1, 3), 136), loc_2), loc_6, 132)
							store_i32(memory_at_0, reg_0 + 132, 0)
							loc_1 = add_i32(loc_1, 4)
							loc_8 = add_i32(loc_8, 4)
							if loc_10 ~= loc_8 then
								continue
							end
							break
						end
						break
					end
				end
				if loc_7 ~= 0 then
					while true do
						while true do
							reg_0 = FUNC_LIST[477](add_i32(mul_i32(loc_1, 136), loc_2), loc_6, 132)
							store_i32(memory_at_0, reg_0 + 132, 0)
							loc_1 = add_i32(loc_1, 1)
							loc_4 = add_i32(loc_4, 1)
							if loc_7 ~= loc_4 then
								continue
							end
							break
						end
						break
					end
				end
				reg_0 = load_i32(memory_at_0, loc_0 + 4)
				break
			end
		else
			while true do
				reg_0 = loc_4
				break
			end
		end
		loc_4 = reg_0
		if loc_4 ~= 0 then
			while true do
				loc_1 = 0
				while true do
					while true do
						loc_8 = mul_i32(loc_1, 136)
						loc_2 = add_i32(loc_8, load_i32(memory_at_0, loc_0))
						loc_7 = load_i32(memory_at_0, loc_2 + 128)
						if loc_7 == load_i32(memory_at_0, loc_0 + 140) then
							while true do
								reg_0 = FUNC_LIST[535](loc_2, loc_6, shl_i32(loc_7, 2))
								if reg_0 == 0 then
									desired = 3
									break
								end
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						reg_0 = FUNC_LIST[91](add_i32(loc_3, 12), loc_2)
						loc_2 = add_i32(loc_8, load_i32(memory_at_0, loc_0))
						reg_0 = FUNC_LIST[477](reg_0, loc_2, 132)
						store_i32(memory_at_0, reg_0 + 132, load_i32(memory_at_0, loc_2 + 132))
						loc_4 = load_i32(memory_at_0, loc_0 + 4)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_1 = add_i32(loc_1, 1)
					if loc_4 > loc_1 then
						continue
					end
					break
				end
				loc_5 = load_i32(memory_at_0, loc_3 + 16)
				loc_9 = loc_4
				reg_0 = load_i32(memory_at_0, loc_3 + 12)
				break
			end
		else
			while true do
				reg_0 = loc_2
				break
			end
		end
		loc_2 = reg_0
		loc_1 = load_i32(memory_at_0, loc_0)
		store_i32(memory_at_0, loc_0, loc_2)
		store_i32(memory_at_0, loc_3 + 12, loc_1)
		store_i32(memory_at_0, loc_0 + 4, loc_5)
		store_i32(memory_at_0, loc_3 + 16, loc_9)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 160)
		break
	end
end
FUNC_LIST[91] = --[[ Luau::detail::DenseHashTable<Luau::BytecodeBuilder::TableShape, std::__2::pair<Luau::BytecodeBuilder::TableShape, int>, std::__2::pair<Luau::BytecodeBuilder::TableShape const, int>, Luau::detail::ItemInterfaceMap<Luau::BytecodeBuilder::TableShape, int>, Luau::BytecodeBuilder::TableShapeHash, std::__2::equal_to<Luau::BytecodeBuilder::TableShape>>::insert_unsafe(Luau::BytecodeBuilder::TableShape const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		loc_9 = load_i32(memory_at_0, loc_0 + 4)
		while true do
			loc_5 = load_i32(memory_at_0, loc_1 + 128)
			if loc_5 == 0 then
				while true do
					loc_2 = 2166136261
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_6 = band_i32(loc_5, 3)
			while true do
				if loc_5 < 4 then
					while true do
						loc_2 = 2166136261
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_10 = band_i32(loc_5, 4294967292)
				loc_2 = 2166136261
				while true do
					loc_4 = add_i32(shl_i32(loc_3, 2), loc_1)
					loc_2 = mul_i32(bxor_i32(load_i32(memory_at_0, loc_4 + 12), mul_i32(bxor_i32(load_i32(memory_at_0, loc_4 + 8), mul_i32(bxor_i32(load_i32(memory_at_0, loc_4 + 4), mul_i32(bxor_i32(loc_2, load_i32(memory_at_0, loc_4)), 16777619)), 16777619)), 16777619)), 16777619)
					loc_3 = add_i32(loc_3, 4)
					loc_8 = add_i32(loc_8, 4)
					if loc_10 ~= loc_8 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_6 == 0 then
				break
			end
			while true do
				loc_2 = mul_i32(bxor_i32(loc_2, load_i32(memory_at_0, add_i32(shl_i32(loc_3, 2), loc_1))), 16777619)
				loc_3 = add_i32(loc_3, 1)
				loc_7 = add_i32(loc_7, 1)
				if loc_6 ~= loc_7 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_4 = sub_i32(loc_9, 1)
		loc_11 = shl_i32(loc_5, 2)
		loc_9 = add_i32(loc_0, 12)
		loc_6 = load_i32(memory_at_0, loc_0 + 140)
		loc_12 = shl_i32(loc_6, 2)
		loc_10 = load_i32(memory_at_0, loc_0)
		loc_3 = 0
		while true do
			while true do
				while true do
					loc_8 = band_i32(loc_2, loc_4)
					loc_2 = add_i32(mul_i32(loc_8, 136), loc_10)
					loc_7 = load_i32(memory_at_0, loc_2 + 128)
					if loc_6 ~= loc_7 then
						break
					end
					reg_0 = FUNC_LIST[535](loc_2, loc_9, loc_12)
					if reg_0 ~= 0 then
						break
					end
					reg_0 = FUNC_LIST[477](loc_2, loc_1, 132)
					loc_2 = reg_0
					store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
					reg_0 = loc_2
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				if loc_5 == loc_7 then
					while true do
						reg_0 = FUNC_LIST[535](loc_2, loc_1, loc_11)
						if reg_0 == 0 then
							desired = 1
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				loc_3 = add_i32(loc_3, 1)
				loc_2 = add_i32(loc_8, loc_3)
				if loc_3 <= loc_4 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[92] = --[[ Luau::BytecodeBuilder::addConstantClosure(unsigned int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		store_i32(memory_at_0, loc_2 + 24, 7)
		store_i32(memory_at_0, loc_2 + 32, loc_1)
		store_i64(memory_at_0, loc_2 + 16, i64_ZERO)
		store_i64(memory_at_0, loc_2 + 8, extend_i64_u32(loc_1))
		store_i32(memory_at_0, loc_2, 7)
		reg_0 = FUNC_LIST[74](loc_0, loc_2, add_i32(loc_2, 24))
		loc_1 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 48)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[93] = --[[ Luau::BytecodeBuilder::addChildFunction(unsigned int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		loc_6 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		store_i32(memory_at_0, loc_6 + 12, loc_1)
		while true do
			while true do
				while true do
					while true do
						while true do
							if load_i32(memory_at_0, loc_0 + 308) == 0 then
								break
							end
							loc_4 = load_i32(memory_at_0, loc_0 + 312)
							if loc_1 == loc_4 then
								break
							end
							loc_3 = sub_i32(load_i32(memory_at_0, loc_0 + 304), 1)
							loc_8 = load_i32(memory_at_0, loc_0 + 300)
							loc_5 = loc_1
							while true do
								loc_7 = band_i32(loc_3, loc_5)
								loc_9 = add_i32(shl_i32(loc_7, 3), loc_8)
								loc_5 = load_i32(memory_at_0, loc_9)
								if loc_1 == loc_5 then
									desired = 4
									break
								end
								if loc_4 == loc_5 then
									desired = 5
									break
								end
								loc_2 = add_i32(loc_2, 1)
								loc_5 = add_i32(loc_7, loc_2)
								if loc_2 <= loc_3 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = 65535
						loc_7 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 64), load_i32(memory_at_0, loc_0 + 60)), 2)
						if loc_7 > 32767 then
							desired = 1
							break
						end
						reg_0 = FUNC_LIST[94](add_i32(loc_0, 300), add_i32(loc_6, 12))
						store_i32_n16(memory_at_0, reg_0, loc_7)
						while true do
							loc_2 = load_i32(memory_at_0, loc_0 + 64)
							if loc_2 ~= load_i32(memory_at_0, loc_0 + 68) then
								while true do
									store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_6 + 12))
									store_i32(memory_at_0, loc_0 + 64, add_i32(loc_2, 4))
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_4 = add_i32(loc_0, 60)
							loc_5 = load_i32(memory_at_0, loc_4)
							loc_3 = sub_i32(loc_2, loc_5)
							loc_8 = shr_i32(loc_3, 2)
							loc_1 = add_i32(loc_8, 1)
							if loc_1 >= 1073741824 then
								desired = 3
								break
							end
							loc_4 = shr_i32(loc_3, 1)
							loc_1 = (if loc_3 >= 2147483644 then 1073741823 else (if loc_1 < loc_4 then loc_4 else loc_1))
							if loc_1 ~= 0 then
								while true do
									if loc_1 >= 1073741824 then
										desired = 2
										break
									end
									reg_0 = FUNC_LIST[606](shl_i32(loc_1, 2))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = 0
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_4 = reg_0
							loc_3 = add_i32(loc_4, shl_i32(loc_8, 2))
							store_i32(memory_at_0, loc_3, load_i32(memory_at_0, loc_6 + 12))
							loc_1 = add_i32(shl_i32(loc_1, 2), loc_4)
							loc_4 = add_i32(loc_3, 4)
							if loc_2 ~= loc_5 then
								while true do
									while true do
										loc_3 = sub_i32(loc_3, 4)
										loc_2 = sub_i32(loc_2, 4)
										store_i32(memory_at_0, loc_3, load_i32(memory_at_0, loc_2))
										if loc_2 ~= loc_5 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							store_i32(memory_at_0, loc_0 + 68, loc_1)
							store_i32(memory_at_0, loc_0 + 64, loc_4)
							store_i32(memory_at_0, loc_0 + 60, loc_3)
							if loc_5 == 0 then
								break
							end
							FUNC_LIST[609](loc_5)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = loc_7
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = load_i32_u16(memory_at_0, loc_9 + 4)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[40](loc_4)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[163]()
			error("out of code bounds")
		end
		GLOBAL_LIST[0].value = add_i32(loc_6, 16)
		reg_0 = extend_i32_n16(loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[94] = --[[ Luau::DenseHashMap<unsigned int, short, std::__2::hash<unsigned int>, std::__2::equal_to<unsigned int>>::operator[](unsigned int const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_2 = load_i32(memory_at_0, loc_0 + 8)
			loc_5 = load_i32(memory_at_0, loc_0 + 4)
			if loc_2 < shr_u32(mul_i32(loc_5, 3), 2) then
				break
			end
			while true do
				if loc_2 == 0 then
					break
				end
				loc_7 = load_i32(memory_at_0, loc_1)
				loc_8 = load_i32(memory_at_0, loc_0 + 12)
				if loc_7 == loc_8 then
					break
				end
				loc_3 = sub_i32(loc_5, 1)
				loc_9 = load_i32(memory_at_0, loc_0)
				loc_2 = 0
				loc_4 = loc_7
				while true do
					loc_6 = band_i32(loc_3, loc_4)
					loc_4 = load_i32(memory_at_0, add_i32(shl_i32(loc_6, 3), loc_9))
					if loc_7 == loc_4 then
						desired = 1
						break
					end
					if loc_4 == loc_8 then
						desired = 2
						break
					end
					loc_2 = add_i32(loc_2, 1)
					loc_4 = add_i32(loc_6, loc_2)
					if loc_2 <= loc_3 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[95](loc_0)
			loc_5 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_7 = load_i32(memory_at_0, loc_0)
				loc_1 = load_i32(memory_at_0, loc_1)
				loc_5 = sub_i32(loc_5, 1)
				loc_2 = band_i32(loc_1, loc_5)
				loc_6 = add_i32(loc_7, shl_i32(loc_2, 3))
				loc_3 = load_i32(memory_at_0, loc_6)
				loc_8 = load_i32(memory_at_0, loc_0 + 12)
				if loc_3 == loc_8 then
					break
				end
				if loc_1 == loc_3 then
					desired = 1
					break
				end
				loc_3 = 0
				while true do
					loc_3 = add_i32(loc_3, 1)
					loc_2 = band_i32(loc_5, add_i32(loc_2, loc_3))
					loc_6 = add_i32(shl_i32(loc_2, 3), loc_7)
					loc_4 = load_i32(memory_at_0, loc_6)
					if loc_8 == loc_4 then
						desired = 2
						break
					end
					if loc_1 ~= loc_4 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_6, loc_1)
			store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = add_i32(loc_6, 4)
		break
	end
	return reg_0
end
FUNC_LIST[95] = --[[ Luau::detail::DenseHashTable<unsigned int, std::__2::pair<unsigned int, short>, std::__2::pair<unsigned int const, short>, Luau::detail::ItemInterfaceMap<unsigned int, short>, std::__2::hash<unsigned int>, std::__2::equal_to<unsigned int>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local desired
	while true do
		loc_12 = load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_9 = load_i32(memory_at_0, loc_0 + 4)
			loc_4 = (if loc_9 ~= 0 then shl_i32(loc_9, 1) else 16)
			if loc_4 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = band_i32(loc_4, 2)
			reg_0 = FUNC_LIST[606](shl_i32(loc_4, 3))
			loc_5 = reg_0
			loc_3 = load_i32(memory_at_0, loc_0 + 12)
			if loc_4 >= 4 then
				while true do
					loc_10 = band_i32(loc_4, 4294967292)
					while true do
						loc_2 = add_i32(shl_i32(loc_1, 3), loc_5)
						store_i32_n16(memory_at_0, loc_2 + 4, 0)
						store_i32(memory_at_0, loc_2, loc_3)
						store_i32(memory_at_0, loc_2 + 8, loc_3)
						store_i32_n16(memory_at_0, loc_2 + 12, 0)
						store_i32_n16(memory_at_0, loc_2 + 20, 0)
						store_i32(memory_at_0, loc_2 + 16, loc_3)
						store_i32_n16(memory_at_0, loc_2 + 28, 0)
						store_i32(memory_at_0, loc_2 + 24, loc_3)
						loc_1 = add_i32(loc_1, 4)
						loc_6 = add_i32(loc_6, 4)
						if loc_10 ~= loc_6 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 ~= 0 then
				while true do
					while true do
						loc_2 = add_i32(shl_i32(loc_1, 3), loc_5)
						store_i32_n16(memory_at_0, loc_2 + 4, 0)
						store_i32(memory_at_0, loc_2, loc_3)
						loc_1 = add_i32(loc_1, 1)
						loc_8 = add_i32(loc_8, 1)
						if loc_7 ~= loc_8 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_9 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		loc_11 = load_i32(memory_at_0, loc_0)
		while true do
			while true do
				if loc_9 ~= 0 then
					while true do
						loc_10 = sub_i32(loc_4, 1)
						loc_7 = 0
						while true do
							loc_13 = add_i32(shl_i32(loc_7, 3), loc_11)
							loc_1 = load_i32(memory_at_0, loc_13)
							if loc_1 ~= load_i32(memory_at_0, loc_0 + 12) then
								while true do
									while true do
										while true do
											loc_2 = band_i32(loc_1, loc_10)
											loc_6 = add_i32(shl_i32(loc_2, 3), loc_5)
											loc_8 = load_i32(memory_at_0, loc_6)
											if loc_12 == loc_8 then
												break
											end
											loc_3 = 0
											if loc_1 == loc_8 then
												desired = 6
												break
											end
											while true do
												loc_3 = add_i32(loc_3, 1)
												loc_2 = band_i32(loc_10, add_i32(loc_2, loc_3))
												loc_6 = add_i32(shl_i32(loc_2, 3), loc_5)
												loc_8 = load_i32(memory_at_0, loc_6)
												if loc_12 == loc_8 then
													desired = 7
													break
												end
												if loc_1 ~= loc_8 then
													continue
												end
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
										store_i32(memory_at_0, loc_6, loc_1)
										break
									end
									if desired then
										break
									end
									store_i32(memory_at_0, loc_6, loc_1)
									store_i32_n16(memory_at_0, loc_6 + 4, load_i32_u16(memory_at_0, loc_13 + 4))
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_7 = add_i32(loc_7, 1)
							if loc_9 ~= loc_7 then
								continue
							end
							break
						end
						if desired then
							break
						end
						store_i32(memory_at_0, loc_0 + 4, loc_4)
						store_i32(memory_at_0, loc_0, loc_5)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				store_i32(memory_at_0, loc_0 + 4, loc_4)
				store_i32(memory_at_0, loc_0, loc_5)
				if loc_11 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[609](loc_11)
			break
		end
		break
	end
end
FUNC_LIST[96] = --[[ Luau::BytecodeBuilder::emitABC(LuauOpcode, unsigned char, unsigned char, unsigned char) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_4 = bor_i32(bor_i32(bor_i32(loc_1, shl_i32(loc_2, 8)), shl_i32(loc_3, 16)), shl_i32(loc_4, 24))
		while true do
			while true do
				while true do
					while true do
						loc_3 = load_i32(memory_at_0, loc_0 + 28)
						if loc_3 ~= load_i32(memory_at_0, loc_0 + 32) then
							while true do
								store_i32(memory_at_0, loc_3, loc_4)
								store_i32(memory_at_0, loc_0 + 28, add_i32(loc_3, 4))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = add_i32(loc_0, 24)
						loc_1 = load_i32(memory_at_0, loc_6)
						loc_2 = sub_i32(loc_3, loc_1)
						loc_7 = shr_i32(loc_2, 2)
						loc_5 = add_i32(loc_7, 1)
						if loc_5 >= 1073741824 then
							desired = 3
							break
						end
						loc_6 = shr_i32(loc_2, 1)
						loc_5 = (if loc_2 >= 2147483644 then 1073741823 else (if loc_5 < loc_6 then loc_6 else loc_5))
						if loc_5 ~= 0 then
							while true do
								if loc_5 >= 1073741824 then
									desired = 2
									break
								end
								reg_0 = FUNC_LIST[606](shl_i32(loc_5, 2))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = 0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = reg_0
						loc_2 = add_i32(loc_6, shl_i32(loc_7, 2))
						store_i32(memory_at_0, loc_2, loc_4)
						loc_4 = add_i32(shl_i32(loc_5, 2), loc_6)
						loc_5 = add_i32(loc_2, 4)
						if loc_1 ~= loc_3 then
							while true do
								while true do
									loc_2 = sub_i32(loc_2, 4)
									loc_3 = sub_i32(loc_3, 4)
									store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_3))
									if loc_1 ~= loc_3 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						store_i32(memory_at_0, loc_0 + 32, loc_4)
						store_i32(memory_at_0, loc_0 + 28, loc_5)
						store_i32(memory_at_0, loc_0 + 24, loc_2)
						if loc_1 == 0 then
							break
						end
						FUNC_LIST[609](loc_1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = load_i32(memory_at_0, loc_0 + 40)
					if loc_3 ~= load_i32(memory_at_0, loc_0 + 44) then
						while true do
							store_i32(memory_at_0, loc_3, load_i32(memory_at_0, loc_0 + 320))
							store_i32(memory_at_0, loc_0 + 40, add_i32(loc_3, 4))
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = add_i32(loc_0, 36)
					loc_1 = load_i32(memory_at_0, loc_5)
					loc_2 = sub_i32(loc_3, loc_1)
					loc_6 = shr_i32(loc_2, 2)
					loc_4 = add_i32(loc_6, 1)
					if loc_4 >= 1073741824 then
						desired = 1
						break
					end
					loc_5 = shr_i32(loc_2, 1)
					loc_4 = (if loc_2 >= 2147483644 then 1073741823 else (if loc_4 < loc_5 then loc_5 else loc_4))
					if loc_4 ~= 0 then
						while true do
							if loc_4 >= 1073741824 then
								desired = 2
								break
							end
							reg_0 = FUNC_LIST[606](shl_i32(loc_4, 2))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = reg_0
					loc_2 = add_i32(loc_5, shl_i32(loc_6, 2))
					store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_0 + 320))
					loc_4 = add_i32(shl_i32(loc_4, 2), loc_5)
					loc_5 = add_i32(loc_2, 4)
					if loc_1 ~= loc_3 then
						while true do
							while true do
								loc_2 = sub_i32(loc_2, 4)
								loc_3 = sub_i32(loc_3, 4)
								store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_3))
								if loc_1 ~= loc_3 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					store_i32(memory_at_0, loc_0 + 44, loc_4)
					store_i32(memory_at_0, loc_0 + 40, loc_5)
					store_i32(memory_at_0, loc_0 + 36, loc_2)
					if loc_1 ~= 0 then
						while true do
							FUNC_LIST[609](loc_1)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[40](loc_6)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[163]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[40](loc_5)
		error("out of code bounds")
	end
end
FUNC_LIST[97] = --[[ Luau::BytecodeBuilder::emitAD(LuauOpcode, unsigned char, short) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_5 = bor_i32(bor_i32(loc_1, shl_i32(loc_2, 8)), shl_i32(loc_3, 16))
		while true do
			while true do
				while true do
					while true do
						loc_3 = load_i32(memory_at_0, loc_0 + 28)
						if loc_3 ~= load_i32(memory_at_0, loc_0 + 32) then
							while true do
								store_i32(memory_at_0, loc_3, loc_5)
								store_i32(memory_at_0, loc_0 + 28, add_i32(loc_3, 4))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = add_i32(loc_0, 24)
						loc_1 = load_i32(memory_at_0, loc_6)
						loc_2 = sub_i32(loc_3, loc_1)
						loc_7 = shr_i32(loc_2, 2)
						loc_4 = add_i32(loc_7, 1)
						if loc_4 >= 1073741824 then
							desired = 3
							break
						end
						loc_6 = shr_i32(loc_2, 1)
						loc_4 = (if loc_2 >= 2147483644 then 1073741823 else (if loc_4 < loc_6 then loc_6 else loc_4))
						if loc_4 ~= 0 then
							while true do
								if loc_4 >= 1073741824 then
									desired = 2
									break
								end
								reg_0 = FUNC_LIST[606](shl_i32(loc_4, 2))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = 0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = reg_0
						loc_2 = add_i32(loc_6, shl_i32(loc_7, 2))
						store_i32(memory_at_0, loc_2, loc_5)
						loc_5 = add_i32(shl_i32(loc_4, 2), loc_6)
						loc_4 = add_i32(loc_2, 4)
						if loc_1 ~= loc_3 then
							while true do
								while true do
									loc_2 = sub_i32(loc_2, 4)
									loc_3 = sub_i32(loc_3, 4)
									store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_3))
									if loc_1 ~= loc_3 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						store_i32(memory_at_0, loc_0 + 32, loc_5)
						store_i32(memory_at_0, loc_0 + 28, loc_4)
						store_i32(memory_at_0, loc_0 + 24, loc_2)
						if loc_1 == 0 then
							break
						end
						FUNC_LIST[609](loc_1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = load_i32(memory_at_0, loc_0 + 40)
					if loc_3 ~= load_i32(memory_at_0, loc_0 + 44) then
						while true do
							store_i32(memory_at_0, loc_3, load_i32(memory_at_0, loc_0 + 320))
							store_i32(memory_at_0, loc_0 + 40, add_i32(loc_3, 4))
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_4 = add_i32(loc_0, 36)
					loc_1 = load_i32(memory_at_0, loc_4)
					loc_2 = sub_i32(loc_3, loc_1)
					loc_6 = shr_i32(loc_2, 2)
					loc_5 = add_i32(loc_6, 1)
					if loc_5 >= 1073741824 then
						desired = 1
						break
					end
					loc_4 = shr_i32(loc_2, 1)
					loc_5 = (if loc_2 >= 2147483644 then 1073741823 else (if loc_4 > loc_5 then loc_4 else loc_5))
					if loc_5 ~= 0 then
						while true do
							if loc_5 >= 1073741824 then
								desired = 2
								break
							end
							reg_0 = FUNC_LIST[606](shl_i32(loc_5, 2))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_4 = reg_0
					loc_2 = add_i32(loc_4, shl_i32(loc_6, 2))
					store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_0 + 320))
					loc_5 = add_i32(shl_i32(loc_5, 2), loc_4)
					loc_4 = add_i32(loc_2, 4)
					if loc_1 ~= loc_3 then
						while true do
							while true do
								loc_2 = sub_i32(loc_2, 4)
								loc_3 = sub_i32(loc_3, 4)
								store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_3))
								if loc_1 ~= loc_3 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					store_i32(memory_at_0, loc_0 + 44, loc_5)
					store_i32(memory_at_0, loc_0 + 40, loc_4)
					store_i32(memory_at_0, loc_0 + 36, loc_2)
					if loc_1 ~= 0 then
						while true do
							FUNC_LIST[609](loc_1)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[40](loc_6)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[163]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[40](loc_4)
		error("out of code bounds")
	end
end
FUNC_LIST[98] = --[[ Luau::BytecodeBuilder::emitAux(unsigned int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					while true do
						loc_3 = load_i32(memory_at_0, loc_0 + 28)
						if loc_3 ~= load_i32(memory_at_0, loc_0 + 32) then
							while true do
								store_i32(memory_at_0, loc_3, loc_1)
								store_i32(memory_at_0, loc_0 + 28, add_i32(loc_3, 4))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = add_i32(loc_0, 24)
						loc_5 = load_i32(memory_at_0, loc_6)
						loc_4 = sub_i32(loc_3, loc_5)
						loc_7 = shr_i32(loc_4, 2)
						loc_2 = add_i32(loc_7, 1)
						if loc_2 >= 1073741824 then
							desired = 3
							break
						end
						loc_6 = shr_i32(loc_4, 1)
						loc_2 = (if loc_4 >= 2147483644 then 1073741823 else (if loc_2 < loc_6 then loc_6 else loc_2))
						if loc_2 ~= 0 then
							while true do
								if loc_2 >= 1073741824 then
									desired = 2
									break
								end
								reg_0 = FUNC_LIST[606](shl_i32(loc_2, 2))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = 0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = reg_0
						loc_4 = add_i32(loc_6, shl_i32(loc_7, 2))
						store_i32(memory_at_0, loc_4, loc_1)
						loc_1 = add_i32(shl_i32(loc_2, 2), loc_6)
						loc_2 = add_i32(loc_4, 4)
						if loc_3 ~= loc_5 then
							while true do
								while true do
									loc_4 = sub_i32(loc_4, 4)
									loc_3 = sub_i32(loc_3, 4)
									store_i32(memory_at_0, loc_4, load_i32(memory_at_0, loc_3))
									if loc_3 ~= loc_5 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						store_i32(memory_at_0, loc_0 + 32, loc_1)
						store_i32(memory_at_0, loc_0 + 28, loc_2)
						store_i32(memory_at_0, loc_0 + 24, loc_4)
						if loc_5 == 0 then
							break
						end
						FUNC_LIST[609](loc_5)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = load_i32(memory_at_0, loc_0 + 40)
					if loc_3 ~= load_i32(memory_at_0, loc_0 + 44) then
						while true do
							store_i32(memory_at_0, loc_3, load_i32(memory_at_0, loc_0 + 320))
							store_i32(memory_at_0, loc_0 + 40, add_i32(loc_3, 4))
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = add_i32(loc_0, 36)
					loc_5 = load_i32(memory_at_0, loc_2)
					loc_4 = sub_i32(loc_3, loc_5)
					loc_6 = shr_i32(loc_4, 2)
					loc_1 = add_i32(loc_6, 1)
					if loc_1 >= 1073741824 then
						desired = 1
						break
					end
					loc_2 = shr_i32(loc_4, 1)
					loc_1 = (if loc_4 >= 2147483644 then 1073741823 else (if loc_1 < loc_2 then loc_2 else loc_1))
					if loc_1 ~= 0 then
						while true do
							if loc_1 >= 1073741824 then
								desired = 2
								break
							end
							reg_0 = FUNC_LIST[606](shl_i32(loc_1, 2))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = reg_0
					loc_4 = add_i32(loc_2, shl_i32(loc_6, 2))
					store_i32(memory_at_0, loc_4, load_i32(memory_at_0, loc_0 + 320))
					loc_1 = add_i32(shl_i32(loc_1, 2), loc_2)
					loc_2 = add_i32(loc_4, 4)
					if loc_3 ~= loc_5 then
						while true do
							while true do
								loc_4 = sub_i32(loc_4, 4)
								loc_3 = sub_i32(loc_3, 4)
								store_i32(memory_at_0, loc_4, load_i32(memory_at_0, loc_3))
								if loc_3 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					store_i32(memory_at_0, loc_0 + 44, loc_1)
					store_i32(memory_at_0, loc_0 + 40, loc_2)
					store_i32(memory_at_0, loc_0 + 36, loc_4)
					if loc_5 ~= 0 then
						while true do
							FUNC_LIST[609](loc_5)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[40](loc_6)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[163]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[40](loc_2)
		error("out of code bounds")
	end
end
FUNC_LIST[99] = --[[ Luau::BytecodeBuilder::emitLabel() ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 28), load_i32(memory_at_0, loc_0 + 24)), 2)
		break
	end
	return reg_0
end
FUNC_LIST[100] = --[[ Luau::BytecodeBuilder::patchJumpD(unsigned long, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					while true do
						loc_3 = add_i32(loc_2, bxor_i32(loc_1, 4294967295))
						if add_i32(loc_3, 32768) <= 65535 then
							while true do
								loc_4 = add_i32(load_i32(memory_at_0, loc_0 + 24), shl_i32(loc_1, 2))
								store_i32(memory_at_0, loc_4, bor_i32(load_i32(memory_at_0, loc_4), shl_i32(loc_3, 16)))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = shr_i32(loc_3, 31)
						if sub_i32(bxor_i32(loc_6, loc_3), loc_6) > 8388607 then
							desired = 3
							break
						end
						store_i32_n8(memory_at_0, loc_0 + 96, 1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = load_i32(memory_at_0, loc_0 + 76)
					loc_4 = load_i32(memory_at_0, loc_0 + 80)
					if loc_3 < loc_4 then
						while true do
							store_i64(memory_at_0, loc_3, bor_i64(extend_i64_u32(loc_1), shl_i64(extend_i64_u32(loc_2), i64_from_u32(32, 0))))
							store_i32(memory_at_0, loc_0 + 76, add_i32(loc_3, 8))
							reg_0 = 1
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_8 = add_i32(loc_0, 72)
					loc_6 = load_i32(memory_at_0, loc_8)
					loc_9 = shr_i32(sub_i32(loc_3, loc_6), 3)
					loc_5 = add_i32(loc_9, 1)
					if loc_5 >= 536870912 then
						desired = 2
						break
					end
					loc_4 = sub_i32(loc_4, loc_6)
					loc_7 = shr_i32(loc_4, 2)
					loc_5 = (if loc_4 >= 2147483640 then 536870911 else (if loc_5 < loc_7 then loc_7 else loc_5))
					if loc_5 ~= 0 then
						while true do
							if loc_5 >= 536870912 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](shl_i32(loc_5, 3))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = reg_0
					loc_4 = add_i32(loc_7, shl_i32(loc_9, 3))
					store_i64(memory_at_0, loc_4, bor_i64(extend_i64_u32(loc_1), shl_i64(extend_i64_u32(loc_2), i64_from_u32(32, 0))))
					loc_1 = add_i32(shl_i32(loc_5, 3), loc_7)
					loc_2 = add_i32(loc_4, 8)
					if loc_3 ~= loc_6 then
						while true do
							while true do
								loc_4 = sub_i32(loc_4, 8)
								loc_3 = sub_i32(loc_3, 8)
								store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_3))
								if loc_3 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = load_i32(memory_at_0, loc_8)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = reg_0
					store_i32(memory_at_0, loc_0 + 80, loc_1)
					store_i32(memory_at_0, loc_0 + 76, loc_2)
					store_i32(memory_at_0, loc_0 + 72, loc_4)
					loc_4 = 1
					if loc_3 == 0 then
						break
					end
					FUNC_LIST[609](loc_3)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = loc_4
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_8)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[101] = --[[ Luau::BytecodeBuilder::patchSkipC(unsigned long, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		loc_2 = add_i32(loc_2, bxor_i32(loc_1, 4294967295))
		if loc_2 <= 255 then
			while true do
				loc_1 = add_i32(load_i32(memory_at_0, loc_0 + 24), shl_i32(loc_1, 2))
				store_i32(memory_at_0, loc_1, bor_i32(load_i32(memory_at_0, loc_1), shl_i32(loc_2, 24)))
				break
			end
		end
		reg_0 = (if loc_2 < 256 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[102] = --[[ Luau::BytecodeBuilder::setFunctionTypeInfo(std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>) ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = add_i32(load_i32(memory_at_0, loc_0), mul_i32(load_i32(memory_at_0, loc_0 + 12), 72))
		loc_0 = add_i32(loc_2, 60)
		if lt_i32(load_i32_i8(memory_at_0, loc_2 + 71), 0) then
			while true do
				FUNC_LIST[609](load_i32(memory_at_0, loc_0))
				break
			end
		end
		store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_1))
		store_i32(memory_at_0, loc_0 + 8, load_i32(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_1 + 11, 0)
		store_i32_n8(memory_at_0, loc_1, 0)
		break
	end
end
FUNC_LIST[103] = --[[ Luau::BytecodeBuilder::setDebugFunctionName(Luau::BytecodeBuilder::StringRef) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_2
		loc_5 = load_i64(memory_at_0, loc_1)
		store_i64(memory_at_0, loc_2, loc_5)
		store_i64(memory_at_0, loc_2 + 24, loc_5)
		reg_0 = FUNC_LIST[78](loc_0, loc_2)
		loc_1 = reg_0
		store_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_0), mul_i32(load_i32(memory_at_0, loc_0 + 12), 72)) + 16, loc_1)
		while true do
			if bor_i32(load_i32(memory_at_0, loc_0 + 452), band_i32(load_i32(memory_at_0, loc_0 + 456), 1)) ~= 0 then
				while true do
					loc_6 = shr_u64(loc_5, i64_from_u32(32, 0))
					loc_1 = wrap_i32_i64(loc_6)
					if loc_1 >= 2147483632 then
						desired = 1
						break
					end
					while true do
						while true do
							if loc_1 >= 11 then
								while true do
									loc_4 = add_i32(bor_i32(loc_1, 15), 1)
									reg_0 = FUNC_LIST[606](loc_4)
									loc_3 = reg_0
									store_i32(memory_at_0, loc_2 + 20, bor_i32(loc_4, 2147483648))
									store_i32(memory_at_0, loc_2 + 12, loc_3)
									store_i32(memory_at_0, loc_2 + 16, loc_1)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							store_i64_n8(memory_at_0, loc_2 + 23, loc_6)
							loc_3 = add_i32(loc_2, 12)
							if loc_1 == 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[478](loc_3, wrap_i32_i64(loc_5), loc_1)
						break
					end
					if desired then
						break
					end
					store_i32_n8(memory_at_0, add_i32(loc_1, loc_3), 0)
					loc_1 = add_i32(load_i32(memory_at_0, loc_0), mul_i32(load_i32(memory_at_0, loc_0 + 12), 72))
					loc_0 = add_i32(loc_1, 36)
					if lt_i32(load_i32_i8(memory_at_0, loc_1 + 47), 0) then
						while true do
							FUNC_LIST[609](load_i32(memory_at_0, loc_0))
							break
						end
						if desired then
							break
						end
					end
					store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_2 + 12))
					store_i32(memory_at_0, loc_0 + 8, load_i32(memory_at_0, loc_2 + 20))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			GLOBAL_LIST[0].value = add_i32(loc_2, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[242](add_i32(loc_2, 12))
		error("out of code bounds")
	end
end
FUNC_LIST[104] = --[[ Luau::BytecodeBuilder::setDebugFunctionLineDefined(int) ]] function(loc_0, loc_1)
	while true do
		store_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_0), mul_i32(load_i32(memory_at_0, loc_0 + 12), 72)) + 20, loc_1)
		break
	end
end
FUNC_LIST[105] = --[[ Luau::BytecodeBuilder::setDebugLine(int) ]] function(loc_0, loc_1)
	while true do
		store_i32(memory_at_0, loc_0 + 320, loc_1)
		break
	end
end
FUNC_LIST[106] = --[[ Luau::BytecodeBuilder::pushDebugLocal(Luau::BytecodeBuilder::StringRef, unsigned char, unsigned int, unsigned int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_7 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_7
		loc_13 = load_i64(memory_at_0, loc_1)
		store_i64(memory_at_0, loc_7, loc_13)
		store_i64(memory_at_0, loc_7 + 8, loc_13)
		reg_0 = FUNC_LIST[78](loc_0, loc_7)
		loc_9 = reg_0
		while true do
			while true do
				while true do
					loc_1 = load_i32(memory_at_0, loc_0 + 328)
					if loc_1 ~= load_i32(memory_at_0, loc_0 + 332) then
						while true do
							store_i32(memory_at_0, loc_1 + 12, loc_4)
							store_i32(memory_at_0, loc_1 + 8, loc_3)
							store_i32_n8(memory_at_0, loc_1 + 4, loc_2)
							store_i32(memory_at_0, loc_1, loc_9)
							store_i32(memory_at_0, loc_0 + 328, add_i32(loc_1, 16))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_10 = add_i32(loc_0, 324)
					loc_11 = load_i32(memory_at_0, loc_10)
					loc_5 = sub_i32(loc_1, loc_11)
					loc_12 = shr_i32(loc_5, 4)
					loc_6 = add_i32(loc_12, 1)
					if loc_6 >= 268435456 then
						desired = 2
						break
					end
					loc_8 = shr_i32(loc_5, 3)
					loc_6 = (if loc_5 >= 2147483632 then 268435455 else (if loc_6 < loc_8 then loc_8 else loc_6))
					if loc_6 ~= 0 then
						while true do
							if loc_6 >= 268435456 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](shl_i32(loc_6, 4))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_8 = reg_0
					loc_5 = add_i32(loc_8, shl_i32(loc_12, 4))
					store_i32(memory_at_0, loc_5 + 12, loc_4)
					store_i32(memory_at_0, loc_5 + 8, loc_3)
					store_i32_n8(memory_at_0, loc_5 + 4, loc_2)
					store_i32(memory_at_0, loc_5, loc_9)
					loc_4 = add_i32(shl_i32(loc_6, 4), loc_8)
					loc_3 = add_i32(loc_5, 16)
					if loc_1 ~= loc_11 then
						while true do
							while true do
								loc_5 = sub_i32(loc_5, 16)
								loc_1 = sub_i32(loc_1, 16)
								store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_1))
								store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_1 + 8))
								if loc_1 ~= loc_11 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = load_i32(memory_at_0, loc_10)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_1 = reg_0
					store_i32(memory_at_0, loc_0 + 332, loc_4)
					store_i32(memory_at_0, loc_0 + 328, loc_3)
					store_i32(memory_at_0, loc_0 + 324, loc_5)
					if loc_1 == 0 then
						break
					end
					FUNC_LIST[609](loc_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				GLOBAL_LIST[0].value = add_i32(loc_7, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_10)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[107] = --[[ Luau::BytecodeBuilder::pushDebugUpval(Luau::BytecodeBuilder::StringRef) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		loc_9 = load_i64(memory_at_0, loc_1)
		store_i64(memory_at_0, loc_5, loc_9)
		store_i64(memory_at_0, loc_5 + 8, loc_9)
		reg_0 = FUNC_LIST[78](loc_0, loc_5)
		loc_6 = reg_0
		while true do
			while true do
				while true do
					loc_1 = load_i32(memory_at_0, loc_0 + 340)
					if loc_1 ~= load_i32(memory_at_0, loc_0 + 344) then
						while true do
							store_i32(memory_at_0, loc_1, loc_6)
							store_i32(memory_at_0, loc_0 + 340, add_i32(loc_1, 4))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_4 = add_i32(loc_0, 336)
					loc_7 = load_i32(memory_at_0, loc_4)
					loc_3 = sub_i32(loc_1, loc_7)
					loc_8 = shr_i32(loc_3, 2)
					loc_2 = add_i32(loc_8, 1)
					if loc_2 >= 1073741824 then
						desired = 2
						break
					end
					loc_4 = shr_i32(loc_3, 1)
					loc_2 = (if loc_3 >= 2147483644 then 1073741823 else (if loc_2 < loc_4 then loc_4 else loc_2))
					if loc_2 ~= 0 then
						while true do
							if loc_2 >= 1073741824 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](shl_i32(loc_2, 2))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_4 = reg_0
					loc_3 = add_i32(loc_4, shl_i32(loc_8, 2))
					store_i32(memory_at_0, loc_3, loc_6)
					loc_6 = add_i32(shl_i32(loc_2, 2), loc_4)
					loc_2 = add_i32(loc_3, 4)
					if loc_1 ~= loc_7 then
						while true do
							while true do
								loc_3 = sub_i32(loc_3, 4)
								loc_1 = sub_i32(loc_1, 4)
								store_i32(memory_at_0, loc_3, load_i32(memory_at_0, loc_1))
								if loc_1 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					store_i32(memory_at_0, loc_0 + 344, loc_6)
					store_i32(memory_at_0, loc_0 + 340, loc_2)
					store_i32(memory_at_0, loc_0 + 336, loc_3)
					if loc_7 == 0 then
						break
					end
					FUNC_LIST[609](loc_7)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				GLOBAL_LIST[0].value = add_i32(loc_5, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_4)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[108] = --[[ Luau::BytecodeBuilder::addDebugRemark(char const*, ...) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_7 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_7
		while true do
			while true do
				while true do
					while true do
						if band_i32(load_i32_u8(memory_at_0, loc_0 + 424), 16) == 0 then
							break
						end
						loc_6 = load_i32(memory_at_0, loc_0 + 400)
						loc_3 = load_i32_i8(memory_at_0, loc_0 + 407)
						store_i32(memory_at_0, loc_7 + 12, loc_2)
						loc_4 = add_i32(loc_0, 396)
						FUNC_LIST[472](loc_4, loc_1, loc_2)
						FUNC_LIST[680](loc_4, 0)
						loc_6 = (if lt_i32(loc_3, 0) then loc_6 else loc_3)
						loc_8 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 28), load_i32(memory_at_0, loc_0 + 24)), 2)
						while true do
							loc_2 = load_i32(memory_at_0, loc_0 + 388)
							loc_1 = load_i32(memory_at_0, loc_0 + 392)
							if loc_2 < loc_1 then
								while true do
									store_i32(memory_at_0, loc_2 + 4, loc_6)
									store_i32(memory_at_0, loc_2, loc_8)
									store_i32(memory_at_0, loc_0 + 388, add_i32(loc_2, 8))
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_10 = add_i32(loc_0, 384)
							loc_3 = load_i32(memory_at_0, loc_10)
							loc_11 = shr_i32(sub_i32(loc_2, loc_3), 3)
							loc_5 = add_i32(loc_11, 1)
							if loc_5 >= 536870912 then
								desired = 3
								break
							end
							loc_1 = sub_i32(loc_1, loc_3)
							loc_9 = shr_i32(loc_1, 2)
							loc_5 = (if loc_1 >= 2147483640 then 536870911 else (if loc_5 < loc_9 then loc_9 else loc_5))
							if loc_5 ~= 0 then
								while true do
									if loc_5 >= 536870912 then
										desired = 2
										break
									end
									reg_0 = FUNC_LIST[606](shl_i32(loc_5, 3))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = 0
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_9 = reg_0
							loc_1 = add_i32(loc_9, shl_i32(loc_11, 3))
							store_i32(memory_at_0, loc_1 + 4, loc_6)
							store_i32(memory_at_0, loc_1, loc_8)
							loc_8 = add_i32(shl_i32(loc_5, 3), loc_9)
							loc_5 = add_i32(loc_1, 8)
							if loc_2 ~= loc_3 then
								while true do
									while true do
										loc_1 = sub_i32(loc_1, 8)
										loc_2 = sub_i32(loc_2, 8)
										store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_2))
										if loc_2 ~= loc_3 then
											continue
										end
										break
									end
									if desired then
										break
									end
									reg_0 = load_i32(memory_at_0, loc_10)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = loc_2
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_2 = reg_0
							store_i32(memory_at_0, loc_0 + 392, loc_8)
							store_i32(memory_at_0, loc_0 + 388, loc_5)
							store_i32(memory_at_0, loc_0 + 384, loc_1)
							if loc_2 == 0 then
								break
							end
							FUNC_LIST[609](loc_2)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_3 = add_i32(loc_6, (if lt_i32(load_i32_i8(memory_at_0, loc_0 + 407), 0) then load_i32(memory_at_0, loc_0 + 396) else loc_4))
						store_i32(memory_at_0, loc_7 + 8, loc_3)
						loc_1 = add_i32(loc_0, 320)
						loc_2 = load_i32(memory_at_0, loc_0 + 444)
						if loc_2 < load_i32(memory_at_0, loc_0 + 448) then
							while true do
								store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_1))
								loc_4 = add_i32(loc_2, 4)
								reg_0 = FUNC_LIST[504](loc_3)
								loc_1 = reg_0
								if loc_1 >= 2147483632 then
									desired = 1
									break
								end
								while true do
									while true do
										if loc_1 >= 11 then
											while true do
												loc_6 = add_i32(bor_i32(loc_1, 15), 1)
												reg_0 = FUNC_LIST[606](loc_6)
												loc_4 = reg_0
												store_i32(memory_at_0, loc_2 + 12, bor_i32(loc_6, 2147483648))
												store_i32(memory_at_0, loc_2 + 4, loc_4)
												store_i32(memory_at_0, loc_2 + 8, loc_1)
												desired = 7
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										store_i32_n8(memory_at_0, loc_2 + 15, loc_1)
										if loc_1 == 0 then
											desired = 6
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									reg_0 = FUNC_LIST[478](loc_4, loc_3, loc_1)
									break
								end
								if desired then
									break
								end
								store_i32_n8(memory_at_0, add_i32(loc_1, loc_4), 0)
								store_i32(memory_at_0, loc_0 + 444, add_i32(loc_2, 16))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[109](add_i32(loc_0, 440), loc_1, add_i32(loc_7, 8))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					GLOBAL_LIST[0].value = add_i32(loc_7, 16)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[40](loc_10)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[163]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[242](loc_4)
		error("out of code bounds")
	end
end
FUNC_LIST[109] = --[[ void std::__2::vector<std::__2::pair<int, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>>, std::__2::allocator<std::__2::pair<int, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>>>>::__emplace_back_slow_path<int&, char const*>(int&, char const*&&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					while true do
						loc_3 = load_i32(memory_at_0, loc_0)
						loc_6 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 4), loc_3), 4)
						loc_4 = add_i32(loc_6, 1)
						if loc_4 < 268435456 then
							while true do
								loc_3 = sub_i32(load_i32(memory_at_0, loc_0 + 8), loc_3)
								loc_5 = shr_i32(loc_3, 3)
								loc_5 = (if loc_3 >= 2147483632 then 268435455 else (if loc_4 < loc_5 then loc_5 else loc_4))
								if loc_5 ~= 0 then
									while true do
										if loc_5 >= 268435456 then
											desired = 4
											break
										end
										reg_0 = FUNC_LIST[606](shl_i32(loc_5, 4))
										break
									end
									if desired then
										break
									end
								else
									while true do
										reg_0 = 0
										break
									end
									if desired then
										break
									end
								end
								loc_7 = reg_0
								loc_3 = add_i32(loc_7, shl_i32(loc_6, 4))
								store_i32(memory_at_0, loc_3, load_i32(memory_at_0, loc_1))
								loc_1 = add_i32(loc_3, 4)
								loc_2 = load_i32(memory_at_0, loc_2)
								reg_0 = FUNC_LIST[504](loc_2)
								loc_4 = reg_0
								if loc_4 >= 2147483632 then
									desired = 3
									break
								end
								loc_5 = shl_i32(loc_5, 4)
								while true do
									while true do
										if loc_4 >= 11 then
											while true do
												loc_6 = add_i32(bor_i32(loc_4, 15), 1)
												reg_0 = FUNC_LIST[606](loc_6)
												loc_1 = reg_0
												store_i32(memory_at_0, loc_3 + 12, bor_i32(loc_6, 2147483648))
												store_i32(memory_at_0, loc_3 + 4, loc_1)
												store_i32(memory_at_0, loc_3 + 8, loc_4)
												desired = 7
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										store_i32_n8(memory_at_0, loc_3 + 15, loc_4)
										if loc_4 == 0 then
											desired = 6
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									reg_0 = FUNC_LIST[478](loc_1, loc_2, loc_4)
									break
								end
								if desired then
									break
								end
								loc_6 = add_i32(loc_5, loc_7)
								store_i32_n8(memory_at_0, add_i32(loc_1, loc_4), 0)
								loc_8 = add_i32(loc_3, 16)
								loc_4 = load_i32(memory_at_0, loc_0 + 4)
								loc_2 = load_i32(memory_at_0, loc_0)
								if loc_4 == loc_2 then
									desired = 2
									break
								end
								while true do
									loc_5 = sub_i32(loc_3, 16)
									loc_1 = sub_i32(loc_4, 16)
									store_i32(memory_at_0, loc_5, load_i32(memory_at_0, loc_1))
									loc_3 = sub_i32(loc_3, 12)
									loc_4 = sub_i32(loc_4, 12)
									loc_9 = loc_4
									loc_7 = add_i32(loc_9, 8)
									store_i32(memory_at_0, loc_3 + 8, load_i32(memory_at_0, loc_7))
									store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_4))
									store_i64(memory_at_0, loc_4, i64_ZERO)
									store_i32(memory_at_0, loc_9 + 8, 0)
									loc_3 = loc_5
									loc_4 = loc_1
									if loc_4 ~= loc_2 then
										continue
									end
									break
								end
								if desired then
									break
								end
								store_i32(memory_at_0, loc_0 + 8, loc_6)
								loc_3 = load_i32(memory_at_0, loc_0 + 4)
								store_i32(memory_at_0, loc_0 + 4, loc_8)
								loc_4 = load_i32(memory_at_0, loc_0)
								store_i32(memory_at_0, loc_0, loc_5)
								if loc_3 == loc_4 then
									desired = 1
									break
								end
								while true do
									if lt_i32(load_i32_i8(memory_at_0, sub_i32(loc_3, 1)), 0) then
										while true do
											FUNC_LIST[609](load_i32(memory_at_0, sub_i32(loc_3, 12)))
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
												continue
											end
											break
										end
									end
									loc_3 = sub_i32(loc_3, 16)
									if loc_4 ~= loc_3 then
										continue
									end
									break
								end
								if desired then
									break
								end
								desired = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[40](loc_0)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[163]()
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[242](loc_1)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_0 + 8, loc_6)
			store_i32(memory_at_0, loc_0 + 4, loc_8)
			store_i32(memory_at_0, loc_0, loc_3)
			break
		end
		if loc_4 ~= 0 then
			while true do
				FUNC_LIST[609](loc_4)
				break
			end
		end
		break
	end
end
FUNC_LIST[110] = --[[ Luau::BytecodeBuilder::finalize() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		while true do
			while true do
				loc_3 = load_i32(memory_at_0, loc_0 + 352)
				if loc_3 == 0 then
					while true do
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_7 = load_i32(memory_at_0, loc_0 + 364)
				loc_4 = load_i32(memory_at_0, loc_0 + 360)
				loc_8 = load_i32(memory_at_0, loc_0 + 348)
				while true do
					while true do
						while true do
							loc_6 = add_i32(mul_i32(loc_1, 12), loc_8)
							loc_2 = load_i32(memory_at_0, loc_6)
							if loc_2 == 0 then
								break
							end
							if loc_4 == 0 then
								break
							end
							if loc_7 ~= load_i32(memory_at_0, loc_6 + 4) then
								desired = 2
								break
							end
							reg_0 = FUNC_LIST[535](loc_2, loc_4, loc_7)
							if reg_0 ~= 0 then
								desired = 2
								break
							end
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_2 ~= loc_4 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_1 = add_i32(loc_1, 1)
					if loc_3 ~= loc_1 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = 16
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = 16
			if loc_1 == loc_3 then
				break
			end
			loc_9 = load_i32(memory_at_0, loc_0 + 364)
			loc_6 = load_i32(memory_at_0, loc_0 + 360)
			loc_7 = load_i32(memory_at_0, loc_0 + 348)
			while true do
				loc_2 = add_i32(add_i32(load_i32(memory_at_0, add_i32(mul_i32(loc_1, 12), loc_7) + 4), loc_2), 2)
				while true do
					loc_1 = add_i32(loc_1, 1)
					if loc_3 <= loc_1 then
						break
					end
					while true do
						while true do
							while true do
								loc_8 = add_i32(mul_i32(loc_1, 12), loc_7)
								loc_4 = load_i32(memory_at_0, loc_8)
								if loc_4 == 0 then
									break
								end
								if loc_6 == 0 then
									break
								end
								if loc_9 ~= load_i32(memory_at_0, loc_8 + 4) then
									desired = 3
									break
								end
								reg_0 = FUNC_LIST[535](loc_4, loc_6, loc_9)
								if reg_0 == 0 then
									desired = 5
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_4 ~= loc_6 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_1 = add_i32(loc_1, 1)
						if loc_3 ~= loc_1 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				if loc_1 ~= loc_3 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		loc_1 = load_i32(memory_at_0, loc_0)
		loc_4 = load_i32(memory_at_0, loc_0 + 4)
		if loc_1 ~= loc_4 then
			while true do
				while true do
					loc_3 = load_i32_i8(memory_at_0, loc_1 + 11)
					loc_2 = add_i32(loc_2, (if lt_i32(loc_3, 0) then load_i32(memory_at_0, loc_1 + 4) else loc_3))
					loc_1 = add_i32(loc_1, 72)
					if loc_4 ~= loc_1 then
						continue
					end
					break
				end
				break
			end
		end
		loc_3 = add_i32(loc_0, 412)
		FUNC_LIST[673](loc_3, loc_2)
		reg_0 = FUNC_LIST[670](loc_3, 5)
		store_i32_n8(memory_at_0, loc_5 + 13, 1)
		reg_0 = FUNC_LIST[675](loc_3, add_i32(loc_5, 13), 1)
		FUNC_LIST[111](loc_0, loc_3)
		loc_1 = div_i32(sub_i32(load_i32(memory_at_0, loc_0 + 4), load_i32(memory_at_0, loc_0)), 72)
		while true do
			loc_2 = (if loc_1 > 127 then 1 else 0)
			store_i32_n8(memory_at_0, loc_5 + 14, bor_i32(band_i32(loc_1, 127), shl_i32(loc_2, 7)))
			reg_0 = FUNC_LIST[675](loc_3, add_i32(loc_5, 14), 1)
			loc_1 = shr_u32(loc_1, 7)
			if loc_2 ~= 0 then
				continue
			end
			break
		end
		loc_1 = load_i32(memory_at_0, loc_0)
		loc_6 = load_i32(memory_at_0, loc_0 + 4)
		if loc_1 ~= loc_6 then
			while true do
				while true do
					loc_2 = load_i32_i8(memory_at_0, loc_1 + 11)
					loc_4 = (if lt_i32(loc_2, 0) then 1 else 0)
					reg_0 = FUNC_LIST[675](loc_3, (if loc_4 ~= 0 then load_i32(memory_at_0, loc_1) else loc_1), (if loc_4 ~= 0 then load_i32(memory_at_0, loc_1 + 4) else loc_2))
					loc_1 = add_i32(loc_1, 72)
					if loc_6 ~= loc_1 then
						continue
					end
					break
				end
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 16)
		while true do
			loc_2 = (if loc_1 > 127 then 1 else 0)
			store_i32_n8(memory_at_0, loc_5 + 15, bor_i32(band_i32(loc_1, 127), shl_i32(loc_2, 7)))
			reg_0 = FUNC_LIST[675](loc_3, add_i32(loc_5, 15), 1)
			loc_1 = shr_u32(loc_1, 7)
			if loc_2 ~= 0 then
				continue
			end
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_5, 16)
		break
	end
end
FUNC_LIST[111] = --[[ Luau::BytecodeBuilder::writeStringTable(std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>&) const ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		loc_3 = load_i32(memory_at_0, loc_0 + 356)
		store_i32(memory_at_0, loc_5 + 8, 0)
		store_i64(memory_at_0, loc_5, i64_ZERO)
		while true do
			while true do
				while true do
					if loc_3 ~= 0 then
						while true do
							if loc_3 >= 536870912 then
								desired = 3
								break
							end
							loc_3 = shl_i32(loc_3, 3)
							reg_0 = FUNC_LIST[606](loc_3)
							loc_6 = reg_0
							reg_0 = FUNC_LIST[479](loc_6, 0, loc_3)
							reg_0 = add_i32(reg_0, loc_3)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_8
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_8 = reg_0
					loc_3 = load_i32(memory_at_0, loc_0 + 352)
					if loc_3 == 0 then
						desired = 2
						break
					end
					loc_9 = load_i32(memory_at_0, loc_0 + 364)
					loc_7 = load_i32(memory_at_0, loc_0 + 360)
					loc_10 = load_i32(memory_at_0, loc_0 + 348)
					while true do
						while true do
							while true do
								loc_11 = add_i32(mul_i32(loc_2, 12), loc_10)
								loc_4 = load_i32(memory_at_0, loc_11)
								if loc_4 == 0 then
									break
								end
								if loc_7 == 0 then
									break
								end
								if loc_9 ~= load_i32(memory_at_0, loc_11 + 4) then
									desired = 2
									break
								end
								reg_0 = FUNC_LIST[535](loc_4, loc_7, loc_9)
								if reg_0 == 0 then
									desired = 5
									break
								end
								desired = 2
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_4 ~= loc_7 then
								desired = 2
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_2 = add_i32(loc_2, 1)
						if loc_3 ~= loc_2 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[40](loc_5)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_2 == loc_3 then
				break
			end
			loc_12 = sub_i32(loc_6, 8)
			loc_9 = load_i32(memory_at_0, loc_0 + 364)
			loc_7 = load_i32(memory_at_0, loc_0 + 360)
			loc_10 = load_i32(memory_at_0, loc_0 + 348)
			while true do
				loc_4 = add_i32(mul_i32(loc_2, 12), loc_10)
				store_i64(memory_at_0, add_i32(shl_i32(load_i32(memory_at_0, loc_4 + 8), 3), loc_12), load_i64(memory_at_0, loc_4))
				while true do
					loc_2 = add_i32(loc_2, 1)
					if loc_3 <= loc_2 then
						break
					end
					while true do
						while true do
							while true do
								loc_11 = add_i32(mul_i32(loc_2, 12), loc_10)
								loc_4 = load_i32(memory_at_0, loc_11)
								if loc_4 == 0 then
									break
								end
								if loc_7 == 0 then
									break
								end
								if loc_9 ~= load_i32(memory_at_0, loc_11 + 4) then
									desired = 3
									break
								end
								reg_0 = FUNC_LIST[535](loc_4, loc_7, loc_9)
								if reg_0 == 0 then
									desired = 5
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_4 ~= loc_7 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_2 = add_i32(loc_2, 1)
						if loc_3 ~= loc_2 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				if loc_2 ~= loc_3 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		loc_2 = shr_i32(sub_i32(loc_8, loc_6), 3)
		while true do
			loc_3 = (if loc_2 > 127 then 1 else 0)
			store_i32_n8(memory_at_0, loc_5 + 14, bor_i32(band_i32(loc_2, 127), shl_i32(loc_3, 7)))
			reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_5, 14), 1)
			loc_2 = shr_u32(loc_2, 7)
			if loc_3 ~= 0 then
				continue
			end
			break
		end
		if loc_6 ~= loc_8 then
			while true do
				loc_4 = loc_6
				while true do
					loc_2 = load_i32(memory_at_0, loc_4 + 4)
					while true do
						loc_3 = (if loc_2 > 127 then 1 else 0)
						store_i32_n8(memory_at_0, loc_5 + 15, bor_i32(band_i32(loc_2, 127), shl_i32(loc_3, 7)))
						reg_0 = FUNC_LIST[675](loc_1, add_i32(loc_5, 15), 1)
						loc_2 = shr_u32(loc_2, 7)
						if loc_3 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					reg_0 = FUNC_LIST[675](loc_1, load_i32(memory_at_0, loc_4), load_i32(memory_at_0, loc_4 + 4))
					loc_4 = add_i32(loc_4, 8)
					if loc_8 ~= loc_4 then
						continue
					end
					break
				end
				break
			end
		end
		if loc_6 ~= 0 then
			while true do
				FUNC_LIST[609](loc_6)
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_5, 16)
		break
	end
end
FUNC_LIST[112] = --[[ std::__2::vector<int, std::__2::allocator<int>>::__append(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_2 = load_i32(memory_at_0, loc_0 + 8)
		loc_3 = load_i32(memory_at_0, loc_0 + 4)
		if shr_i32(sub_i32(loc_2, loc_3), 2) >= loc_1 then
			while true do
				reg_0 = loc_0
				if loc_1 ~= 0 then
					while true do
						loc_2 = shl_i32(loc_1, 2)
						reg_1 = FUNC_LIST[479](loc_3, 0, loc_2)
						reg_1 = add_i32(reg_1, loc_2)
						break
					end
					if desired then
						break
					end
				else
					while true do
						reg_1 = loc_3
						break
					end
					if desired then
						break
					end
				end
				loc_3 = reg_1
				store_i32(memory_at_0, reg_0 + 4, loc_3)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_5 = load_i32(memory_at_0, loc_0)
			loc_7 = shr_i32(sub_i32(loc_3, loc_5), 2)
			loc_4 = add_i32(loc_1, loc_7)
			if loc_4 < 1073741824 then
				while true do
					loc_2 = sub_i32(loc_2, loc_5)
					loc_8 = shr_i32(loc_2, 1)
					loc_4 = (if loc_2 >= 2147483644 then 1073741823 else (if loc_4 < loc_8 then loc_8 else loc_4))
					if loc_4 ~= 0 then
						while true do
							if loc_4 >= 1073741824 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](shl_i32(loc_4, 2))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_6
							break
						end
						if desired then
							break
						end
					end
					loc_6 = reg_0
					loc_2 = add_i32(loc_6, shl_i32(loc_7, 2))
					loc_1 = shl_i32(loc_1, 2)
					reg_0 = FUNC_LIST[479](loc_2, 0, loc_1)
					loc_1 = add_i32(reg_0, loc_1)
					loc_6 = add_i32(shl_i32(loc_4, 2), loc_6)
					if loc_3 ~= loc_5 then
						while true do
							while true do
								loc_2 = sub_i32(loc_2, 4)
								loc_3 = sub_i32(loc_3, 4)
								store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_3))
								if loc_3 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					store_i32(memory_at_0, loc_0 + 8, loc_6)
					store_i32(memory_at_0, loc_0 + 4, loc_1)
					store_i32(memory_at_0, loc_0, loc_2)
					if loc_5 ~= 0 then
						while true do
							FUNC_LIST[609](loc_5)
							break
						end
						if desired then
							break
						end
					end
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[40](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[113] = --[[ Luau::BytecodeBuilder::getImportId(int) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = bor_i32(shl_i32(loc_0, 20), 1073741824)
		break
	end
	return reg_0
end
FUNC_LIST[114] = --[[ Luau::BytecodeBuilder::getImportId(int, int) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = bor_i32(bor_i32(shl_i32(loc_0, 20), shl_i32(loc_1, 10)), 2147483648)
		break
	end
	return reg_0
end
FUNC_LIST[115] = --[[ Luau::BytecodeBuilder::getImportId(int, int, int) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = bor_i32(bor_i32(loc_2, bor_i32(shl_i32(loc_0, 20), shl_i32(loc_1, 10))), 3221225472)
		break
	end
	return reg_0
end
FUNC_LIST[116] = --[[ Luau::BytecodeBuilder::getStringHash(Luau::BytecodeBuilder::StringRef) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_1 = load_i32(memory_at_0, loc_0 + 4)
		if loc_1 == 0 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = sub_i32(load_i32(memory_at_0, loc_0), 1)
		loc_2 = loc_1
		loc_0 = loc_1
		if band_i32(loc_1, 1) ~= 0 then
			while true do
				loc_2 = sub_i32(loc_1, 1)
				reg_0 = bxor_i32(loc_1, add_i32(load_i32_u8(memory_at_0, add_i32(loc_1, loc_3)), add_i32(shl_i32(loc_1, 5), shr_u32(loc_1, 2))))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = reg_0
		if loc_1 ~= 1 then
			while true do
				loc_1 = sub_i32(loc_3, 1)
				while true do
					loc_0 = bxor_i32(loc_0, add_i32(load_i32_u8(memory_at_0, add_i32(loc_2, loc_3)), add_i32(shl_i32(loc_0, 5), shr_u32(loc_0, 2))))
					loc_0 = bxor_i32(add_i32(load_i32_u8(memory_at_0, add_i32(loc_1, loc_2)), add_i32(shl_i32(loc_0, 5), shr_u32(loc_0, 2))), loc_0)
					loc_2 = sub_i32(loc_2, 2)
					if loc_2 ~= 0 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[117] = --[[ Luau::BytecodeBuilder::foldJumps() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local desired
	while true do
		while true do
			if load_i32_u8(memory_at_0, loc_0 + 96) ~= 0 then
				break
			end
			loc_2 = load_i32(memory_at_0, loc_0 + 72)
			loc_10 = load_i32(memory_at_0, loc_0 + 76)
			if loc_2 == loc_10 then
				break
			end
			loc_4 = load_i32(memory_at_0, loc_0 + 36)
			loc_3 = load_i32(memory_at_0, loc_0 + 24)
			loc_11 = load_i32_u8(memory_at_0, 47168)
			while true do
				while true do
					loc_5 = load_i32(memory_at_0, loc_2)
					loc_12 = shl_i32(loc_5, 2)
					loc_6 = add_i32(loc_12, loc_3)
					loc_7 = load_i32(memory_at_0, loc_6)
					loc_0 = add_i32(add_i32(loc_5, shr_i32(loc_7, 16)), 1)
					loc_1 = load_i32(memory_at_0, add_i32(shl_i32(loc_0, 2), loc_3))
					loc_8 = band_i32(loc_1, 255)
					if loc_8 ~= 23 then
						break
					end
					loc_9 = shr_i32(loc_1, 16)
					if lt_i32(loc_9, 0) then
						break
					end
					while true do
						loc_0 = add_i32(add_i32(loc_0, loc_9), 1)
						loc_1 = load_i32(memory_at_0, add_i32(shl_i32(loc_0, 2), loc_3))
						loc_8 = band_i32(loc_1, 255)
						if loc_8 ~= 23 then
							desired = 3
							break
						end
						loc_9 = shr_i32(loc_1, 16)
						if ge_i32(loc_9, 0) then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				while true do
					while true do
						if band_i32(loc_7, 255) ~= 23 then
							break
						end
						if loc_8 ~= 22 then
							break
						end
						store_i32(memory_at_0, loc_6, loc_1)
						if loc_11 ~= 0 then
							desired = 3
							break
						end
						store_i32(memory_at_0, add_i32(loc_4, loc_12), load_i32(memory_at_0, add_i32(shl_i32(loc_0, 2), loc_4)))
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = add_i32(bxor_i32(loc_5, 4294967295), loc_0)
					if add_i32(loc_1, 32768) > 65535 then
						break
					end
					store_i32(memory_at_0, loc_6, bor_i32(band_i32(loc_7, 65535), shl_i32(loc_1, 16)))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				store_i32(memory_at_0, loc_2 + 4, loc_0)
				loc_2 = add_i32(loc_2, 8)
				if loc_10 ~= loc_2 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[118] = --[[ Luau::BytecodeBuilder::expandJumps() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_1
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										if load_i32_u8(memory_at_0, loc_0 + 96) == 0 then
											break
										end
										loc_3 = load_i32(memory_at_0, loc_0 + 72)
										loc_4 = load_i32(memory_at_0, loc_0 + 76)
										FUNC_LIST[119](loc_3, loc_4, (if loc_3 ~= loc_4 then sub_i32(62, shl_i32(clz_i32(shr_i32(sub_i32(loc_4, loc_3), 3)), 1)) else 0), 1)
										loc_11 = load_i32(memory_at_0, loc_0 + 24)
										loc_13 = load_i32(memory_at_0, loc_0 + 28)
										store_i32(memory_at_0, loc_1 + 44, 0)
										store_i64(memory_at_0, loc_1 + 36, i64_ZERO)
										loc_2 = sub_i32(loc_13, loc_11)
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				if loc_11 == loc_13 then
																					while true do
																						store_i32(memory_at_0, loc_1 + 32, 0)
																						store_i64(memory_at_0, loc_1 + 24, i64_ZERO)
																						store_i32(memory_at_0, loc_1 + 20, 0)
																						store_i64(memory_at_0, loc_1 + 12, i64_ZERO)
																						loc_3 = 0
																						desired = 18
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																				end
																				if lt_i32(loc_2, 0) then
																					desired = 17
																					break
																				end
																				reg_1 = FUNC_LIST[606](loc_2)
																				loc_15 = reg_1
																				store_i32(memory_at_0, loc_1 + 36, loc_15)
																				loc_3 = add_i32(loc_2, loc_15)
																				store_i32(memory_at_0, loc_1 + 44, loc_3)
																				reg_0 = FUNC_LIST[479](loc_15, 0, loc_2)
																				store_i32(memory_at_0, loc_1 + 40, loc_3)
																				store_i32(memory_at_0, loc_1 + 20, 0)
																				store_i64(memory_at_0, loc_1 + 12, i64_ZERO)
																				reg_1 = FUNC_LIST[606](loc_2)
																				loc_3 = reg_1
																				store_i32(memory_at_0, loc_1 + 28, loc_3)
																				store_i32(memory_at_0, loc_1 + 24, loc_3)
																				loc_8 = add_i32(loc_2, loc_3)
																				store_i32(memory_at_0, loc_1 + 32, loc_8)
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			while true do
																				loc_5 = (if loc_11 == loc_13 then 1 else 0)
																				if loc_5 ~= 0 then
																					while true do
																						loc_4 = 0
																						desired = 18
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																				end
																				if lt_i32(loc_2, 0) then
																					desired = 16
																					break
																				end
																				reg_1 = FUNC_LIST[606](loc_2)
																				loc_4 = reg_1
																				store_i32(memory_at_0, loc_1 + 16, loc_4)
																				store_i32(memory_at_0, loc_1 + 12, loc_4)
																				loc_7 = add_i32(loc_2, loc_4)
																				store_i32(memory_at_0, loc_1 + 20, loc_7)
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			while true do
																				if loc_5 ~= 0 then
																					while true do
																						loc_9 = loc_4
																						loc_5 = loc_3
																						loc_11 = loc_13
																						desired = 18
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																				end
																				loc_5 = loc_3
																				loc_9 = loc_4
																				while true do
																					loc_10 = shl_i32(loc_14, 2)
																					loc_11 = load_i32_u8(memory_at_0, add_i32(loc_10, loc_11))
																					while true do
																						loc_2 = load_i32(memory_at_0, loc_0 + 72)
																						if shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 76), loc_2), 3) <= loc_16 then
																							break
																						end
																						loc_2 = add_i32(shl_i32(loc_16, 3), loc_2)
																						if loc_14 ~= load_i32(memory_at_0, loc_2) then
																							break
																						end
																						while true do
																							loc_2 = add_i32(load_i32(memory_at_0, loc_2 + 4), bxor_i32(loc_14, 4294967295))
																							reg_0 = loc_2
																							loc_2 = shr_i32(loc_2, 31)
																							if sub_i32(bxor_i32(reg_0, loc_2), loc_2) < 10923 then
																								break
																							end
																							while true do
																								if loc_3 < loc_8 then
																									while true do
																										store_i32(memory_at_0, loc_3, 65559)
																										loc_3 = add_i32(loc_3, 4)
																										desired = 22
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								end
																								loc_12 = shr_i32(sub_i32(loc_3, loc_5), 2)
																								loc_2 = add_i32(loc_12, 1)
																								if loc_2 >= 1073741824 then
																									desired = 2
																									break
																								end
																								loc_6 = sub_i32(loc_8, loc_5)
																								loc_13 = shr_i32(loc_6, 1)
																								loc_2 = (if loc_6 >= 2147483644 then 1073741823 else (if loc_2 < loc_13 then loc_13 else loc_2))
																								if loc_2 ~= 0 then
																									while true do
																										if loc_2 >= 1073741824 then
																											while true do
																												store_i32(memory_at_0, loc_1 + 32, loc_8)
																												desired = 6
																												break
																											end
																											if desired then
																												break
																											end
																										end
																										reg_0 = FUNC_LIST[606](shl_i32(loc_2, 2))
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								else
																									while true do
																										reg_0 = 0
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								end
																								loc_6 = reg_0
																								loc_12 = add_i32(loc_6, shl_i32(loc_12, 2))
																								store_i32(memory_at_0, loc_12, 65559)
																								loc_8 = shl_i32(loc_2, 2)
																								loc_2 = loc_12
																								if loc_3 ~= loc_5 then
																									while true do
																										while true do
																											loc_2 = sub_i32(loc_2, 4)
																											loc_3 = sub_i32(loc_3, 4)
																											store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_3))
																											if loc_3 ~= loc_5 then
																												continue
																											end
																											break
																										end
																										if desired then
																											break
																										end
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								end
																								loc_8 = add_i32(loc_6, loc_8)
																								loc_3 = add_i32(loc_12, 4)
																								if loc_5 ~= 0 then
																									while true do
																										FUNC_LIST[609](loc_5)
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								end
																								loc_5 = loc_2
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							while true do
																								if loc_3 < loc_8 then
																									while true do
																										store_i32(memory_at_0, loc_3, 67)
																										loc_3 = add_i32(loc_3, 4)
																										desired = 22
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								end
																								loc_12 = shr_i32(sub_i32(loc_3, loc_5), 2)
																								loc_2 = add_i32(loc_12, 1)
																								if loc_2 >= 1073741824 then
																									desired = 2
																									break
																								end
																								loc_6 = sub_i32(loc_8, loc_5)
																								loc_13 = shr_i32(loc_6, 1)
																								loc_2 = (if loc_6 >= 2147483644 then 1073741823 else (if loc_2 < loc_13 then loc_13 else loc_2))
																								if loc_2 ~= 0 then
																									while true do
																										if loc_2 >= 1073741824 then
																											while true do
																												store_i32(memory_at_0, loc_1 + 32, loc_8)
																												desired = 6
																												break
																											end
																											if desired then
																												break
																											end
																										end
																										reg_0 = FUNC_LIST[606](shl_i32(loc_2, 2))
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								else
																									while true do
																										reg_0 = 0
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								end
																								loc_6 = reg_0
																								loc_12 = add_i32(loc_6, shl_i32(loc_12, 2))
																								store_i32(memory_at_0, loc_12, 67)
																								loc_8 = shl_i32(loc_2, 2)
																								loc_2 = loc_12
																								if loc_3 ~= loc_5 then
																									while true do
																										while true do
																											loc_2 = sub_i32(loc_2, 4)
																											loc_3 = sub_i32(loc_3, 4)
																											store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_3))
																											if loc_3 ~= loc_5 then
																												continue
																											end
																											break
																										end
																										if desired then
																											break
																										end
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								end
																								loc_8 = add_i32(loc_6, loc_8)
																								loc_3 = add_i32(loc_12, 4)
																								if loc_5 ~= 0 then
																									while true do
																										FUNC_LIST[609](loc_5)
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								end
																								loc_5 = loc_2
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							loc_6 = load_i32(memory_at_0, loc_0 + 36)
																							loc_2 = add_i32(loc_10, loc_6)
																							while true do
																								if loc_4 ~= loc_7 then
																									while true do
																										store_i32(memory_at_0, loc_4, load_i32(memory_at_0, loc_2))
																										loc_4 = add_i32(loc_4, 4)
																										desired = 22
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								end
																								loc_7 = sub_i32(loc_4, loc_9)
																								loc_13 = shr_i32(loc_7, 2)
																								loc_12 = add_i32(loc_13, 1)
																								if loc_12 >= 1073741824 then
																									desired = 15
																									break
																								end
																								loc_17 = shr_i32(loc_7, 1)
																								loc_7 = (if loc_7 >= 2147483644 then 1073741823 else (if loc_12 < loc_17 then loc_17 else loc_12))
																								if loc_7 ~= 0 then
																									while true do
																										if loc_7 >= 1073741824 then
																											desired = 7
																											break
																										end
																										reg_0 = FUNC_LIST[606](shl_i32(loc_7, 2))
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								else
																									while true do
																										reg_0 = 0
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								end
																								loc_12 = reg_0
																								loc_13 = add_i32(loc_12, shl_i32(loc_13, 2))
																								store_i32(memory_at_0, loc_13, load_i32(memory_at_0, loc_2))
																								loc_7 = shl_i32(loc_7, 2)
																								loc_2 = loc_13
																								if loc_4 ~= loc_9 then
																									while true do
																										while true do
																											loc_2 = sub_i32(loc_2, 4)
																											loc_4 = sub_i32(loc_4, 4)
																											store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_4))
																											if loc_4 ~= loc_9 then
																												continue
																											end
																											break
																										end
																										if desired then
																											break
																										end
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								end
																								loc_7 = add_i32(loc_7, loc_12)
																								loc_4 = add_i32(loc_13, 4)
																								if loc_9 ~= 0 then
																									while true do
																										FUNC_LIST[609](loc_9)
																										reg_0 = load_i32(memory_at_0, loc_0 + 36)
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								else
																									while true do
																										reg_0 = loc_6
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								end
																								loc_6 = reg_0
																								loc_9 = loc_2
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							loc_2 = add_i32(loc_6, loc_10)
																							if loc_4 ~= loc_7 then
																								while true do
																									store_i32(memory_at_0, loc_4, load_i32(memory_at_0, loc_2))
																									loc_4 = add_i32(loc_4, 4)
																									desired = 21
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																							end
																							loc_4 = sub_i32(loc_7, loc_9)
																							loc_6 = shr_i32(loc_4, 2)
																							loc_10 = add_i32(loc_6, 1)
																							if loc_10 >= 1073741824 then
																								desired = 14
																								break
																							end
																							loc_12 = shr_i32(loc_4, 1)
																							loc_4 = (if loc_4 >= 2147483644 then 1073741823 else (if loc_10 < loc_12 then loc_12 else loc_10))
																							if loc_4 ~= 0 then
																								while true do
																									if loc_4 >= 1073741824 then
																										desired = 13
																										break
																									end
																									reg_0 = FUNC_LIST[606](shl_i32(loc_4, 2))
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																							else
																								while true do
																									reg_0 = 0
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																							end
																							loc_10 = reg_0
																							loc_6 = add_i32(loc_10, shl_i32(loc_6, 2))
																							store_i32(memory_at_0, loc_6, load_i32(memory_at_0, loc_2))
																							loc_4 = shl_i32(loc_4, 2)
																							loc_2 = loc_6
																							if loc_7 ~= loc_9 then
																								while true do
																									while true do
																										loc_2 = sub_i32(loc_2, 4)
																										loc_7 = sub_i32(loc_7, 4)
																										store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_7))
																										if loc_7 ~= loc_9 then
																											continue
																										end
																										break
																									end
																									if desired then
																										break
																									end
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																							end
																							loc_7 = add_i32(loc_4, loc_10)
																							loc_4 = add_i32(loc_6, 4)
																							if loc_9 ~= 0 then
																								while true do
																									FUNC_LIST[609](loc_9)
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																							end
																							loc_9 = loc_2
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						loc_16 = add_i32(loc_16, 1)
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																							continue
																						end
																						break
																					end
																					reg_0 = FUNC_LIST[120](loc_11)
																					loc_2 = reg_0
																					if gt_i32(loc_2, 0) then
																						while true do
																							loc_12 = add_i32(loc_2, loc_14)
																							while true do
																								loc_11 = shl_i32(loc_14, 2)
																								loc_6 = sub_i32(loc_3, loc_5)
																								loc_10 = shr_i32(loc_6, 2)
																								store_i32(memory_at_0, add_i32(loc_11, loc_15), loc_10)
																								loc_2 = add_i32(loc_11, load_i32(memory_at_0, loc_0 + 24))
																								while true do
																									if loc_3 ~= loc_8 then
																										while true do
																											store_i32(memory_at_0, loc_3, load_i32(memory_at_0, loc_2))
																											loc_3 = add_i32(loc_3, 4)
																											desired = 22
																											break
																										end
																										if desired then
																											if desired == 22 then
																												desired = nil
																											end
																											break
																										end
																									end
																									loc_8 = add_i32(loc_10, 1)
																									if loc_8 >= 1073741824 then
																										desired = 12
																										break
																									end
																									loc_13 = shr_i32(loc_6, 1)
																									loc_6 = (if loc_6 >= 2147483644 then 1073741823 else (if loc_8 < loc_13 then loc_13 else loc_8))
																									if loc_6 ~= 0 then
																										while true do
																											if loc_6 >= 1073741824 then
																												while true do
																													store_i32(memory_at_0, loc_1 + 32, loc_3)
																													desired = 6
																													break
																												end
																												if desired then
																													break
																												end
																											end
																											reg_0 = FUNC_LIST[606](shl_i32(loc_6, 2))
																											break
																										end
																										if desired then
																											if desired == 22 then
																												desired = nil
																											end
																											break
																										end
																									else
																										while true do
																											reg_0 = 0
																											break
																										end
																										if desired then
																											if desired == 22 then
																												desired = nil
																											end
																											break
																										end
																									end
																									loc_8 = reg_0
																									loc_10 = add_i32(loc_8, shl_i32(loc_10, 2))
																									store_i32(memory_at_0, loc_10, load_i32(memory_at_0, loc_2))
																									loc_6 = shl_i32(loc_6, 2)
																									loc_2 = loc_10
																									if loc_3 ~= loc_5 then
																										while true do
																											while true do
																												loc_2 = sub_i32(loc_2, 4)
																												loc_3 = sub_i32(loc_3, 4)
																												store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_3))
																												if loc_3 ~= loc_5 then
																													continue
																												end
																												break
																											end
																											if desired then
																												break
																											end
																											break
																										end
																										if desired then
																											if desired == 22 then
																												desired = nil
																											end
																											break
																										end
																									end
																									loc_8 = add_i32(loc_6, loc_8)
																									loc_3 = add_i32(loc_10, 4)
																									if loc_5 ~= 0 then
																										while true do
																											FUNC_LIST[609](loc_5)
																											break
																										end
																										if desired then
																											if desired == 22 then
																												desired = nil
																											end
																											break
																										end
																									end
																									loc_5 = loc_2
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																										continue
																									end
																									break
																								end
																								loc_2 = add_i32(loc_11, load_i32(memory_at_0, loc_0 + 36))
																								while true do
																									if loc_4 ~= loc_7 then
																										while true do
																											store_i32(memory_at_0, loc_4, load_i32(memory_at_0, loc_2))
																											loc_4 = add_i32(loc_4, 4)
																											desired = 22
																											break
																										end
																										if desired then
																											if desired == 22 then
																												desired = nil
																											end
																											break
																										end
																									end
																									loc_11 = sub_i32(loc_4, loc_9)
																									loc_6 = shr_i32(loc_11, 2)
																									loc_10 = add_i32(loc_6, 1)
																									if loc_10 >= 1073741824 then
																										desired = 11
																										break
																									end
																									loc_7 = shr_i32(loc_11, 1)
																									loc_11 = (if loc_11 >= 2147483644 then 1073741823 else (if loc_7 > loc_10 then loc_7 else loc_10))
																									if loc_11 ~= 0 then
																										while true do
																											if loc_11 >= 1073741824 then
																												desired = 7
																												break
																											end
																											reg_0 = FUNC_LIST[606](shl_i32(loc_11, 2))
																											break
																										end
																										if desired then
																											if desired == 22 then
																												desired = nil
																											end
																											break
																										end
																									else
																										while true do
																											reg_0 = 0
																											break
																										end
																										if desired then
																											if desired == 22 then
																												desired = nil
																											end
																											break
																										end
																									end
																									loc_10 = reg_0
																									loc_6 = add_i32(loc_10, shl_i32(loc_6, 2))
																									store_i32(memory_at_0, loc_6, load_i32(memory_at_0, loc_2))
																									loc_11 = shl_i32(loc_11, 2)
																									loc_2 = loc_6
																									if loc_4 ~= loc_9 then
																										while true do
																											while true do
																												loc_2 = sub_i32(loc_2, 4)
																												loc_4 = sub_i32(loc_4, 4)
																												store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_4))
																												if loc_4 ~= loc_9 then
																													continue
																												end
																												break
																											end
																											if desired then
																												break
																											end
																											break
																										end
																										if desired then
																											if desired == 22 then
																												desired = nil
																											end
																											break
																										end
																									end
																									loc_7 = add_i32(loc_10, loc_11)
																									loc_4 = add_i32(loc_6, 4)
																									if loc_9 ~= 0 then
																										while true do
																											FUNC_LIST[609](loc_9)
																											break
																										end
																										if desired then
																											if desired == 22 then
																												desired = nil
																											end
																											break
																										end
																									end
																									loc_9 = loc_2
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																										continue
																									end
																									break
																								end
																								loc_14 = add_i32(loc_14, 1)
																								if loc_12 ~= loc_14 then
																									continue
																								end
																								break
																							end
																							if desired then
																								break
																							end
																							reg_0 = loc_12
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																								continue
																							end
																							break
																						end
																					else
																						while true do
																							reg_0 = loc_14
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																								continue
																							end
																							break
																						end
																					end
																					loc_14 = reg_0
																					loc_13 = load_i32(memory_at_0, loc_0 + 28)
																					loc_11 = load_i32(memory_at_0, loc_0 + 24)
																					if loc_14 < shr_i32(sub_i32(loc_13, loc_11), 2) then
																						continue
																					end
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			store_i32(memory_at_0, loc_1 + 24, loc_5)
																			loc_2 = load_i32(memory_at_0, loc_0 + 72)
																			loc_16 = load_i32(memory_at_0, loc_0 + 76)
																			if loc_2 == loc_16 then
																				desired = 9
																				break
																			end
																			loc_17 = sub_i32(loc_5, 4)
																			loc_14 = load_i32(memory_at_0, loc_1 + 36)
																			while true do
																				loc_10 = load_i32(memory_at_0, loc_2 + 4)
																				loc_6 = load_i32(memory_at_0, loc_2)
																				loc_12 = load_i32(memory_at_0, add_i32(shl_i32(loc_6, 2), loc_14))
																				loc_15 = sub_i32(load_i32(memory_at_0, add_i32(shl_i32(loc_10, 2), loc_14)), loc_12)
																				while true do
																					loc_10 = add_i32(bxor_i32(loc_6, 4294967295), loc_10)
																					reg_0 = loc_10
																					loc_10 = shr_i32(loc_10, 31)
																					if sub_i32(bxor_i32(reg_0, loc_10), loc_10) >= 10923 then
																						while true do
																							loc_10 = shl_i32(loc_12, 2)
																							loc_6 = add_i32(loc_10, loc_17)
																							store_i32(memory_at_0, loc_6, bor_i32(load_i32_u8(memory_at_0, loc_6), shl_i32(loc_15, 8)))
																							store_i32_n16(memory_at_0, add_i32(loc_5, loc_10) + 2, 65534)
																							desired = 19
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					store_i32_n16(memory_at_0, add_i32(shl_i32(loc_12, 2), loc_5) + 2, shr_u32(sub_i32(shl_i32(loc_15, 16), 65536), 16))
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																						continue
																					end
																					break
																				end
																				loc_2 = add_i32(loc_2, 8)
																				if loc_2 ~= loc_16 then
																					continue
																				end
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			desired = 10
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		FUNC_LIST[40](add_i32(loc_1, 36))
																		error("out of code bounds")
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	FUNC_LIST[40](add_i32(loc_1, 12))
																	error("out of code bounds")
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																store_i32(memory_at_0, loc_1 + 32, loc_8)
																store_i32(memory_at_0, loc_1 + 28, loc_3)
																store_i32(memory_at_0, loc_1 + 24, loc_5)
																desired = 4
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															store_i32(memory_at_0, loc_1 + 32, loc_8)
															store_i32(memory_at_0, loc_1 + 28, loc_3)
															store_i32(memory_at_0, loc_1 + 24, loc_5)
															store_i32(memory_at_0, loc_1 + 20, loc_7)
															store_i32(memory_at_0, loc_1 + 16, loc_7)
															desired = 3
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														store_i32(memory_at_0, loc_1 + 32, loc_8)
														store_i32(memory_at_0, loc_1 + 28, loc_3)
														store_i32(memory_at_0, loc_1 + 20, loc_7)
														store_i32(memory_at_0, loc_1 + 16, loc_7)
														FUNC_LIST[163]()
														error("out of code bounds")
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													store_i32(memory_at_0, loc_1 + 32, loc_3)
													store_i32(memory_at_0, loc_1 + 24, loc_5)
													store_i32(memory_at_0, loc_1 + 28, loc_3)
													desired = 1
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												store_i32(memory_at_0, loc_1 + 32, loc_8)
												store_i32(memory_at_0, loc_1 + 24, loc_5)
												store_i32(memory_at_0, loc_1 + 28, loc_3)
												desired = 4
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_5 = load_i32(memory_at_0, loc_1 + 24)
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										store_i32(memory_at_0, loc_0 + 28, loc_3)
										store_i32(memory_at_0, loc_0 + 24, loc_5)
										store_i32(memory_at_0, loc_1 + 28, loc_13)
										loc_3 = load_i32(memory_at_0, loc_0 + 32)
										store_i32(memory_at_0, loc_0 + 32, loc_8)
										store_i32(memory_at_0, loc_1 + 32, loc_3)
										loc_3 = load_i32(memory_at_0, loc_0 + 36)
										store_i32(memory_at_0, loc_0 + 36, loc_9)
										loc_2 = load_i32(memory_at_0, loc_0 + 40)
										store_i32(memory_at_0, loc_0 + 40, loc_4)
										store_i32(memory_at_0, loc_1 + 16, loc_2)
										loc_4 = load_i32(memory_at_0, loc_0 + 44)
										store_i32(memory_at_0, loc_0 + 44, loc_7)
										store_i32(memory_at_0, loc_1 + 20, loc_4)
										if loc_3 ~= 0 then
											while true do
												store_i32(memory_at_0, loc_1 + 16, loc_3)
												FUNC_LIST[609](loc_3)
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										if loc_11 ~= 0 then
											while true do
												store_i32(memory_at_0, loc_1 + 28, loc_11)
												FUNC_LIST[609](loc_11)
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_3 = load_i32(memory_at_0, loc_1 + 36)
										if loc_3 == 0 then
											break
										end
										FUNC_LIST[609](loc_3)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									GLOBAL_LIST[0].value = add_i32(loc_1, 48)
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								store_i32(memory_at_0, loc_1 + 32, loc_8)
								store_i32(memory_at_0, loc_1 + 28, loc_3)
								store_i32(memory_at_0, loc_1 + 20, loc_4)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i32(memory_at_0, loc_1 + 28, loc_3)
							store_i32(memory_at_0, loc_1 + 20, loc_7)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32(memory_at_0, loc_1 + 16, loc_4)
						FUNC_LIST[163]()
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_1 + 20, loc_4)
					store_i32(memory_at_0, loc_1 + 16, loc_4)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_1 + 12, loc_9)
				FUNC_LIST[40](add_i32(loc_1, 12))
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_1 + 32, loc_8)
			store_i32(memory_at_0, loc_1 + 28, loc_3)
			store_i32(memory_at_0, loc_1 + 24, loc_5)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32(memory_at_0, loc_1 + 20, loc_7)
		store_i32(memory_at_0, loc_1 + 16, loc_4)
		store_i32(memory_at_0, loc_1 + 12, loc_9)
		FUNC_LIST[40](add_i32(loc_1, 24))
		error("out of code bounds")
	end
end
FUNC_LIST[119] = --[[ void std::__2::__introsort<std::__2::_ClassicAlgPolicy, Luau::BytecodeBuilder::expandJumps()::$_0&, Luau::BytecodeBuilder::Jump*, false>(Luau::BytecodeBuilder::Jump*, Luau::BytecodeBuilder::Jump*, Luau::BytecodeBuilder::expandJumps()::$_0&, std::__2::iterator_traits<Luau::BytecodeBuilder::Jump*>::difference_type, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = i64_ZERO
	local loc_16 = i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					loc_10 = sub_i32(loc_1, 8)
					loc_11 = sub_i32(loc_1, 24)
					loc_12 = sub_i32(loc_1, 16)
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													loc_5 = loc_0
													loc_6 = shr_i32(sub_i32(loc_1, loc_5), 3)
													if not br_map[1] then
														br_map[1] = (function()
															return { [0] = 6, 6, 0, 1, 4, 2, }
														end)()
													end
													temp = br_map[1][loc_6] or 3
													if temp < 3 then
														if temp < 1 then
															break
														elseif temp > 1 then
															desired = 9
															break
														else
															desired = 10
															break
														end
													elseif temp > 3 then
														if temp < 6 then
															desired = 7
															break
														else
															desired = 5
															break
														end
													else
														desired = 8
														break
													end
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_4 = sub_i32(loc_1, 8)
												if load_i32(memory_at_0, loc_4) >= load_i32(memory_at_0, loc_5) then
													desired = 5
													break
												end
												loc_15 = load_i64(memory_at_0, loc_5)
												desired = 2
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_4 = sub_i32(loc_1, 8)
											loc_0 = load_i32(memory_at_0, loc_4)
											loc_6 = load_i32(memory_at_0, loc_5 + 8)
											if loc_6 >= load_i32(memory_at_0, loc_5) then
												while true do
													if loc_0 >= loc_6 then
														desired = 5
														break
													end
													loc_15 = load_i64(memory_at_0, loc_5 + 8)
													store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_4))
													store_i64(memory_at_0, loc_4, loc_15)
													if load_i32(memory_at_0, loc_5 + 8) >= load_i32(memory_at_0, loc_5) then
														desired = 5
														break
													end
													loc_15 = load_i64(memory_at_0, loc_5 + 8)
													desired = 1
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_15 = load_i64(memory_at_0, loc_5)
											if loc_0 < loc_6 then
												while true do
													desired = 2
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_16 = load_i64(memory_at_0, loc_5 + 8)
											store_i64(memory_at_0, loc_5 + 8, loc_15)
											store_i64(memory_at_0, loc_5, loc_16)
											if load_i32(memory_at_0, loc_4) >= wrap_i32_i64(loc_15) then
												desired = 5
												break
											end
											store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_4))
											store_i64(memory_at_0, loc_4, loc_15)
											desired = 0
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_7 = add_i32(loc_5, 8)
										loc_6 = add_i32(loc_5, 16)
										loc_4 = add_i32(loc_5, 24)
										FUNC_LIST[122](loc_5, loc_7, loc_6, loc_4)
										loc_0 = sub_i32(loc_1, 8)
										if load_i32(memory_at_0, loc_0) >= load_i32(memory_at_0, loc_5 + 24) then
											desired = 5
											break
										end
										loc_15 = load_i64(memory_at_0, loc_5 + 24)
										store_i64(memory_at_0, loc_5 + 24, load_i64(memory_at_0, loc_0))
										store_i64(memory_at_0, loc_0, loc_15)
										if load_i32(memory_at_0, loc_5 + 24) >= load_i32(memory_at_0, loc_5 + 16) then
											desired = 5
											break
										end
										loc_16 = load_i64(memory_at_0, loc_5 + 16)
										loc_15 = load_i64(memory_at_0, loc_5 + 24)
										store_i64(memory_at_0, loc_5 + 16, loc_15)
										store_i64(memory_at_0, loc_5 + 24, loc_16)
										loc_4 = wrap_i32_i64(loc_15)
										if loc_4 >= load_i32(memory_at_0, loc_5 + 8) then
											desired = 5
											break
										end
										store_i64(memory_at_0, loc_5 + 16, load_i64(memory_at_0, loc_5 + 8))
										store_i64(memory_at_0, loc_5 + 8, loc_15)
										if loc_4 >= load_i32(memory_at_0, loc_5) then
											desired = 5
											break
										end
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if le_i32(loc_6, 23) then
										while true do
											loc_4 = add_i32(loc_5, 8)
											loc_0 = bor_i32((if loc_1 == loc_5 then 1 else 0), (if loc_1 == loc_4 then 1 else 0))
											if band_i32(loc_3, 1) ~= 0 then
												while true do
													if loc_0 ~= 0 then
														desired = 5
														break
													end
													loc_0 = loc_5
													while true do
														loc_8 = loc_4
														if load_i32(memory_at_0, loc_0 + 8) < load_i32(memory_at_0, loc_0) then
															while true do
																loc_15 = load_i64(memory_at_0, loc_4)
																loc_7 = wrap_i32_i64(loc_15)
																loc_6 = loc_4
																while true do
																	while true do
																		loc_4 = loc_0
																		store_i64(memory_at_0, loc_6, load_i64(memory_at_0, loc_4))
																		if loc_4 == loc_5 then
																			while true do
																				loc_4 = loc_5
																				desired = 13
																				break
																			end
																			if desired then
																				if desired == 13 then
																					desired = nil
																				end
																				break
																			end
																		end
																		loc_6 = loc_4
																		loc_0 = sub_i32(loc_4, 8)
																		if loc_7 < load_i32(memory_at_0, loc_0) then
																			desired = 12
																			break
																		end
																		break
																	end
																	if desired then
																		if desired == 12 then
																			desired = nil
																			continue
																		end
																		break
																	end
																	break
																end
																if desired then
																	break
																end
																store_i64(memory_at_0, loc_4, loc_15)
																break
															end
															if desired then
																if desired == 10 then
																	desired = nil
																	continue
																end
																break
															end
														end
														loc_0 = loc_8
														loc_4 = add_i32(loc_0, 8)
														if loc_1 ~= loc_4 then
															continue
														end
														break
													end
													if desired then
														break
													end
													desired = 5
													break
												end
												if desired then
													break
												end
											end
											if loc_0 ~= 0 then
												desired = 5
												break
											end
											while true do
												loc_7 = loc_4
												if load_i32(memory_at_0, loc_5 + 8) < load_i32(memory_at_0, loc_5) then
													while true do
														loc_15 = load_i64(memory_at_0, loc_4)
														loc_6 = wrap_i32_i64(loc_15)
														loc_0 = loc_4
														while true do
															loc_4 = loc_5
															store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_4))
															loc_0 = loc_5
															loc_5 = sub_i32(loc_5, 8)
															if loc_6 < load_i32(memory_at_0, loc_5) then
																continue
															end
															break
														end
														if desired then
															break
														end
														store_i64(memory_at_0, loc_4, loc_15)
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
															continue
														end
														break
													end
												end
												loc_5 = loc_7
												loc_4 = add_i32(loc_5, 8)
												if loc_1 ~= loc_4 then
													continue
												end
												break
											end
											if desired then
												break
											end
											desired = 5
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									if loc_2 == 0 then
										while true do
											if loc_1 == loc_5 then
												desired = 5
												break
											end
											loc_10 = shr_u32(sub_i32(loc_6, 2), 1)
											loc_4 = loc_10
											while true do
												while true do
													loc_12 = loc_4
													if gt_i32(loc_12, loc_10) then
														break
													end
													loc_7 = add_i32(shl_i32(loc_4, 3), loc_5)
													loc_8 = band_i32(shl_i32(loc_4, 1), 1073741822)
													loc_0 = bor_i32(loc_8, 1)
													loc_4 = add_i32(shl_i32(loc_0, 3), loc_5)
													while true do
														loc_8 = add_i32(loc_8, 2)
														if ge_i32(loc_8, loc_6) then
															while true do
																reg_0 = load_i32(memory_at_0, loc_4)
																desired = 11
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														loc_9 = load_i32(memory_at_0, loc_4)
														loc_2 = load_i32(memory_at_0, loc_4 + 8)
														loc_11 = (if loc_9 < loc_2 then 1 else 0)
														loc_4 = (if loc_11 ~= 0 then add_i32(loc_4, 8) else loc_4)
														loc_0 = (if loc_11 ~= 0 then loc_8 else loc_0)
														reg_0 = (if loc_2 < loc_9 then loc_9 else loc_2)
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													loc_8 = reg_0
													if loc_8 < load_i32(memory_at_0, loc_7) then
														break
													end
													loc_15 = load_i64(memory_at_0, loc_7)
													loc_11 = wrap_i32_i64(loc_15)
													while true do
														while true do
															loc_8 = loc_4
															store_i64(memory_at_0, loc_7, load_i64(memory_at_0, loc_8))
															if gt_i32(loc_0, loc_10) then
																break
															end
															loc_7 = shl_i32(loc_0, 1)
															loc_0 = bor_i32(loc_7, 1)
															loc_4 = add_i32(shl_i32(loc_0, 3), loc_5)
															while true do
																loc_7 = add_i32(loc_7, 2)
																if ge_i32(loc_7, loc_6) then
																	while true do
																		reg_0 = load_i32(memory_at_0, loc_4)
																		desired = 13
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																loc_9 = load_i32(memory_at_0, loc_4)
																loc_2 = load_i32(memory_at_0, loc_4 + 8)
																loc_3 = (if loc_9 < loc_2 then 1 else 0)
																loc_4 = (if loc_3 ~= 0 then add_i32(loc_4, 8) else loc_4)
																loc_0 = (if loc_3 ~= 0 then loc_7 else loc_0)
																reg_0 = (if loc_2 < loc_9 then loc_9 else loc_2)
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															loc_9 = reg_0
															loc_7 = loc_8
															if loc_9 >= loc_11 then
																desired = 11
																break
															end
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
																continue
															end
															break
														end
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													store_i64(memory_at_0, loc_8, loc_15)
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
												loc_4 = sub_i32(loc_12, 1)
												if gt_i32(loc_12, 0) then
													continue
												end
												break
											end
											if desired then
												break
											end
											while true do
												loc_9 = loc_6
												loc_2 = shr_u32(sub_i32(loc_9, 2), 1)
												loc_15 = load_i64(memory_at_0, loc_5)
												loc_0 = 0
												loc_6 = loc_5
												while true do
													loc_7 = shl_i32(loc_0, 1)
													loc_8 = bor_i32(loc_7, 1)
													loc_0 = add_i32(shl_i32(loc_0, 3), loc_6)
													loc_4 = add_i32(loc_0, 8)
													while true do
														loc_7 = add_i32(loc_7, 2)
														if ge_i32(loc_7, loc_9) then
															while true do
																loc_0 = loc_8
																desired = 11
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														loc_10 = add_i32(loc_0, 16)
														loc_11 = (if load_i32(memory_at_0, loc_4) < load_i32(memory_at_0, loc_10) then 1 else 0)
														loc_0 = (if loc_11 ~= 0 then loc_7 else loc_8)
														loc_4 = (if loc_11 ~= 0 then loc_10 else loc_4)
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
															continue
														end
														break
													end
													store_i64(memory_at_0, loc_6, load_i64(memory_at_0, loc_4))
													loc_6 = loc_4
													if le_i32(loc_0, loc_2) then
														continue
													end
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
												while true do
													loc_1 = sub_i32(loc_1, 8)
													if loc_4 == loc_1 then
														while true do
															store_i64(memory_at_0, loc_4, loc_15)
															desired = 10
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_1))
													store_i64(memory_at_0, loc_1, loc_15)
													loc_0 = shr_i32(add_i32(sub_i32(loc_4, loc_5), 8), 3)
													if lt_i32(loc_0, 2) then
														break
													end
													loc_0 = shr_u32(sub_i32(loc_0, 2), 1)
													loc_6 = add_i32(shl_i32(loc_0, 3), loc_5)
													if load_i32(memory_at_0, loc_6) >= load_i32(memory_at_0, loc_4) then
														break
													end
													loc_15 = load_i64(memory_at_0, loc_4)
													loc_8 = wrap_i32_i64(loc_15)
													while true do
														while true do
															loc_7 = loc_6
															store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_7))
															if loc_0 == 0 then
																break
															end
															loc_4 = loc_6
															loc_0 = shr_u32(sub_i32(loc_0, 1), 1)
															loc_6 = add_i32(shl_i32(loc_0, 3), loc_5)
															if loc_8 > load_i32(memory_at_0, loc_6) then
																desired = 11
																break
															end
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
																continue
															end
															break
														end
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													store_i64(memory_at_0, loc_7, loc_15)
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
												loc_6 = sub_i32(loc_9, 1)
												if gt_i32(loc_9, 2) then
													continue
												end
												break
											end
											if desired then
												break
											end
											desired = 5
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_4 = add_i32(shl_i32(shr_u32(loc_6, 1), 3), loc_5)
									loc_0 = load_i32(memory_at_0, loc_10)
									while true do
										if loc_6 >= 129 then
											while true do
												while true do
													loc_6 = load_i32(memory_at_0, loc_4)
													if loc_6 >= load_i32(memory_at_0, loc_5) then
														while true do
															if loc_0 >= loc_6 then
																desired = 10
																break
															end
															loc_15 = load_i64(memory_at_0, loc_4)
															store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_10))
															store_i64(memory_at_0, loc_10, loc_15)
															if load_i32(memory_at_0, loc_4) >= load_i32(memory_at_0, loc_5) then
																desired = 10
																break
															end
															loc_15 = load_i64(memory_at_0, loc_5)
															store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_4))
															store_i64(memory_at_0, loc_4, loc_15)
															desired = 10
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													loc_15 = load_i64(memory_at_0, loc_5)
													while true do
														if loc_0 < loc_6 then
															while true do
																store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_10))
																desired = 11
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_4))
														store_i64(memory_at_0, loc_4, loc_15)
														if load_i32(memory_at_0, loc_10) >= wrap_i32_i64(loc_15) then
															desired = 10
															break
														end
														store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_10))
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													store_i64(memory_at_0, loc_10, loc_15)
													break
												end
												if desired then
													break
												end
												loc_6 = load_i32(memory_at_0, loc_12)
												while true do
													loc_0 = sub_i32(loc_4, 8)
													loc_7 = load_i32(memory_at_0, loc_0)
													if loc_7 >= load_i32(memory_at_0, loc_5 + 8) then
														while true do
															if loc_6 >= loc_7 then
																desired = 10
																break
															end
															loc_15 = load_i64(memory_at_0, loc_0)
															store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_12))
															store_i64(memory_at_0, loc_12, loc_15)
															if load_i32(memory_at_0, loc_0) >= load_i32(memory_at_0, loc_5 + 8) then
																desired = 10
																break
															end
															loc_15 = load_i64(memory_at_0, loc_5 + 8)
															store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_0))
															store_i64(memory_at_0, loc_0, loc_15)
															desired = 10
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													loc_15 = load_i64(memory_at_0, loc_5 + 8)
													while true do
														if loc_6 < loc_7 then
															while true do
																store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_12))
																desired = 11
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_0))
														store_i64(memory_at_0, loc_0, loc_15)
														if load_i32(memory_at_0, loc_12) >= wrap_i32_i64(loc_15) then
															desired = 10
															break
														end
														store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_12))
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													store_i64(memory_at_0, loc_12, loc_15)
													break
												end
												if desired then
													break
												end
												loc_7 = load_i32(memory_at_0, loc_11)
												while true do
													loc_13 = loc_4
													loc_6 = add_i32(loc_13, 8)
													loc_8 = load_i32(memory_at_0, loc_6)
													if loc_8 >= load_i32(memory_at_0, loc_5 + 16) then
														while true do
															if loc_7 >= loc_8 then
																desired = 10
																break
															end
															loc_15 = load_i64(memory_at_0, loc_4 + 8)
															store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_11))
															store_i64(memory_at_0, loc_11, loc_15)
															if load_i32(memory_at_0, loc_4 + 8) >= load_i32(memory_at_0, loc_5 + 16) then
																desired = 10
																break
															end
															loc_15 = load_i64(memory_at_0, loc_5 + 16)
															store_i64(memory_at_0, loc_5 + 16, load_i64(memory_at_0, loc_4 + 8))
															store_i64(memory_at_0, loc_4 + 8, loc_15)
															desired = 10
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													loc_15 = load_i64(memory_at_0, loc_5 + 16)
													while true do
														if loc_7 < loc_8 then
															while true do
																store_i64(memory_at_0, loc_5 + 16, load_i64(memory_at_0, loc_11))
																desired = 11
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														store_i64(memory_at_0, loc_5 + 16, load_i64(memory_at_0, loc_13 + 8))
														store_i64(memory_at_0, loc_13 + 8, loc_15)
														if load_i32(memory_at_0, loc_11) >= wrap_i32_i64(loc_15) then
															desired = 10
															break
														end
														store_i64(memory_at_0, loc_13 + 8, load_i64(memory_at_0, loc_11))
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													store_i64(memory_at_0, loc_11, loc_15)
													break
												end
												if desired then
													break
												end
												loc_7 = load_i32(memory_at_0, loc_13 + 8)
												while true do
													loc_8 = load_i32(memory_at_0, loc_4)
													loc_9 = load_i32(memory_at_0, loc_0)
													if loc_8 >= loc_9 then
														while true do
															loc_15 = load_i64(memory_at_0, loc_4)
															if loc_7 >= loc_8 then
																desired = 10
																break
															end
															loc_16 = load_i64(memory_at_0, loc_13 + 8)
															store_i64(memory_at_0, loc_4, loc_16)
															store_i64(memory_at_0, loc_13 + 8, loc_15)
															if loc_9 <= wrap_i32_i64(loc_16) then
																while true do
																	loc_15 = loc_16
																	desired = 10
																	break
																end
																if desired then
																	break
																end
															end
															loc_15 = load_i64(memory_at_0, loc_0)
															store_i64(memory_at_0, loc_0, loc_16)
															store_i64(memory_at_0, loc_4, loc_15)
															desired = 10
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													loc_16 = load_i64(memory_at_0, loc_0)
													if loc_7 < loc_8 then
														while true do
															store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_13 + 8))
															store_i64(memory_at_0, loc_13 + 8, loc_16)
															loc_15 = load_i64(memory_at_0, loc_4)
															desired = 10
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_4))
													store_i64(memory_at_0, loc_4, loc_16)
													if loc_7 >= wrap_i32_i64(loc_16) then
														while true do
															loc_15 = loc_16
															desired = 10
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													loc_15 = load_i64(memory_at_0, loc_13 + 8)
													store_i64(memory_at_0, loc_4, loc_15)
													store_i64(memory_at_0, loc_13 + 8, loc_16)
													break
												end
												if desired then
													break
												end
												loc_16 = load_i64(memory_at_0, loc_5)
												store_i64(memory_at_0, loc_5, loc_15)
												store_i64(memory_at_0, loc_4, loc_16)
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_6 = load_i32(memory_at_0, loc_5)
										if loc_6 >= load_i32(memory_at_0, loc_4) then
											while true do
												if loc_0 >= loc_6 then
													desired = 8
													break
												end
												loc_15 = load_i64(memory_at_0, loc_5)
												store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_10))
												store_i64(memory_at_0, loc_10, loc_15)
												if load_i32(memory_at_0, loc_5) >= load_i32(memory_at_0, loc_4) then
													desired = 8
													break
												end
												loc_15 = load_i64(memory_at_0, loc_4)
												store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_5))
												store_i64(memory_at_0, loc_5, loc_15)
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_15 = load_i64(memory_at_0, loc_4)
										while true do
											if loc_0 < loc_6 then
												while true do
													store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_10))
													desired = 9
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_5))
											store_i64(memory_at_0, loc_5, loc_15)
											if load_i32(memory_at_0, loc_10) >= wrap_i32_i64(loc_15) then
												desired = 8
												break
											end
											store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_10))
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										store_i64(memory_at_0, loc_10, loc_15)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_2 = sub_i32(loc_2, 1)
									loc_14 = band_i32(loc_3, 1)
									if loc_14 ~= 0 then
										while true do
											loc_16 = load_i64(memory_at_0, loc_5)
											desired = 6
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_16 = load_i64(memory_at_0, loc_5)
									if load_i32(memory_at_0, sub_i32(loc_5, 8)) < load_i32(memory_at_0, loc_5) then
										desired = 6
										break
									end
									loc_4 = loc_5
									loc_0 = loc_5
									while true do
										loc_6 = wrap_i32_i64(loc_16)
										if loc_6 < load_i32(memory_at_0, loc_10) then
											while true do
												while true do
													loc_7 = load_i32(memory_at_0, loc_4 + 8)
													loc_0 = add_i32(loc_4, 8)
													loc_4 = loc_0
													if loc_6 >= loc_7 then
														continue
													end
													desired = 8
													break
												end
												if desired then
													break
												end
												error("out of code bounds")
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										while true do
											loc_0 = add_i32(loc_0, 8)
											if loc_1 <= loc_0 then
												desired = 8
												break
											end
											if loc_6 >= load_i32(memory_at_0, loc_0) then
												continue
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_4 = loc_1
									if loc_0 < loc_4 then
										while true do
											while true do
												loc_4 = sub_i32(loc_4, 8)
												if loc_6 < load_i32(memory_at_0, loc_4) then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									if loc_0 < loc_4 then
										while true do
											while true do
												loc_15 = load_i64(memory_at_0, loc_0)
												store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_4))
												store_i64(memory_at_0, loc_4, loc_15)
												while true do
													loc_7 = load_i32(memory_at_0, loc_0 + 8)
													loc_8 = add_i32(loc_0, 8)
													loc_0 = loc_8
													if loc_6 >= loc_7 then
														continue
													end
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
												while true do
													loc_4 = sub_i32(loc_4, 8)
													if loc_6 < load_i32(memory_at_0, loc_4) then
														continue
													end
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
												if loc_4 > loc_8 then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_4 = sub_i32(loc_0, 8)
									if loc_4 ~= loc_5 then
										while true do
											store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_4))
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									store_i64(memory_at_0, loc_4, loc_16)
									loc_3 = 0
									desired = 4
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[122](loc_5, add_i32(loc_5, 8), add_i32(loc_5, 16), sub_i32(loc_1, 8))
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_0 = wrap_i32_i64(loc_16)
							loc_8 = loc_5
							while true do
								loc_4 = loc_8
								loc_8 = add_i32(loc_4, 8)
								if loc_0 > load_i32(memory_at_0, loc_4 + 8) then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_9 = loc_1
							while true do
								if loc_4 == loc_5 then
									while true do
										while true do
											if loc_8 >= loc_9 then
												desired = 6
												break
											end
											loc_9 = sub_i32(loc_9, 8)
											if loc_0 <= load_i32(memory_at_0, loc_9) then
												continue
											end
											desired = 6
											break
										end
										if desired then
											break
										end
										error("out of code bounds")
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								while true do
									loc_9 = sub_i32(loc_9, 8)
									if loc_0 <= load_i32(memory_at_0, loc_9) then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_6 = loc_8
							loc_7 = loc_9
							if loc_6 < loc_7 then
								while true do
									while true do
										loc_15 = load_i64(memory_at_0, loc_6)
										store_i64(memory_at_0, loc_6, load_i64(memory_at_0, loc_7))
										store_i64(memory_at_0, loc_7, loc_15)
										while true do
											loc_4 = loc_6
											loc_6 = add_i32(loc_4, 8)
											if loc_0 > load_i32(memory_at_0, loc_4 + 8) then
												continue
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
										while true do
											loc_7 = sub_i32(loc_7, 8)
											if loc_0 <= load_i32(memory_at_0, loc_7) then
												continue
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
										if loc_6 < loc_7 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_4 ~= loc_5 then
								while true do
									store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_4))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							store_i64(memory_at_0, loc_4, loc_16)
							if loc_8 >= loc_9 then
								while true do
									reg_0 = FUNC_LIST[123](loc_5, loc_4)
									loc_6 = reg_0
									loc_0 = add_i32(loc_4, 8)
									reg_0 = FUNC_LIST[123](loc_0, loc_1)
									if reg_0 ~= 0 then
										while true do
											loc_1 = loc_4
											loc_0 = loc_5
											if loc_6 == 0 then
												desired = 3
												break
											end
											desired = 5
											break
										end
										if desired then
											break
										end
									end
									if loc_6 ~= 0 then
										desired = 4
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[119](loc_5, loc_4, loc_2, loc_14)
							loc_0 = add_i32(loc_4, 8)
							loc_3 = 0
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_4))
			store_i64(memory_at_0, loc_4, loc_15)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_5))
		store_i64(memory_at_0, loc_5, loc_15)
		break
	end
end
FUNC_LIST[120] = --[[ Luau::getOpLength(LuauOpcode) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_1 = 2
		while true do
			while true do
				if not br_map[1] then
					br_map[1] = (function()
						return { [0] = 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, }
					end)()
				end
				temp = br_map[1][sub_i32(loc_0, 7)] or 0
				if temp < 1 then
					break
				else
					desired = 1
					break
				end
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = 1
			break
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[121] = --[[ Luau::BytecodeBuilder::getError(std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>> const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		store_i64(memory_at_0, loc_0, i64_ZERO)
		store_i32(memory_at_0, loc_0 + 8, 0)
		FUNC_LIST[680](loc_0, 0)
		loc_2 = load_i32_i8(memory_at_0, loc_1 + 11)
		loc_3 = (if lt_i32(loc_2, 0) then 1 else 0)
		reg_0 = FUNC_LIST[675](loc_0, (if loc_3 ~= 0 then load_i32(memory_at_0, loc_1) else loc_1), (if loc_3 ~= 0 then load_i32(memory_at_0, loc_1 + 4) else loc_2))
		break
	end
end
FUNC_LIST[122] = --[[ void std::__2::__sort4[abi:ue170004]<std::__2::_ClassicAlgPolicy, Luau::BytecodeBuilder::expandJumps()::$_0&, Luau::BytecodeBuilder::Jump*>(Luau::BytecodeBuilder::Jump*, Luau::BytecodeBuilder::Jump*, Luau::BytecodeBuilder::Jump*, Luau::BytecodeBuilder::Jump*, Luau::BytecodeBuilder::expandJumps()::$_0&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = i64_ZERO
	local loc_5 = 0
	local loc_6 = 0
	local desired
	while true do
		loc_5 = load_i32(memory_at_0, loc_2)
		while true do
			loc_6 = load_i32(memory_at_0, loc_1)
			if loc_6 >= load_i32(memory_at_0, loc_0) then
				while true do
					if loc_5 >= loc_6 then
						desired = 1
						break
					end
					loc_4 = load_i64(memory_at_0, loc_1)
					store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_2))
					store_i64(memory_at_0, loc_2, loc_4)
					if load_i32(memory_at_0, loc_1) >= load_i32(memory_at_0, loc_0) then
						while true do
							loc_5 = wrap_i32_i64(loc_4)
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					loc_4 = load_i64(memory_at_0, loc_0)
					store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_1))
					store_i64(memory_at_0, loc_1, loc_4)
					loc_5 = load_i32(memory_at_0, loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = load_i64(memory_at_0, loc_0)
			if loc_5 < loc_6 then
				while true do
					store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_2))
					store_i64(memory_at_0, loc_2, loc_4)
					loc_5 = wrap_i32_i64(loc_4)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_1))
			store_i64(memory_at_0, loc_1, loc_4)
			loc_5 = load_i32(memory_at_0, loc_2)
			loc_6 = wrap_i32_i64(loc_4)
			if loc_5 >= loc_6 then
				break
			end
			store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_2))
			store_i64(memory_at_0, loc_2, loc_4)
			loc_5 = loc_6
			break
		end
		while true do
			if loc_5 <= load_i32(memory_at_0, loc_3) then
				break
			end
			loc_4 = load_i64(memory_at_0, loc_2)
			store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_3))
			store_i64(memory_at_0, loc_3, loc_4)
			if load_i32(memory_at_0, loc_2) >= load_i32(memory_at_0, loc_1) then
				break
			end
			loc_4 = load_i64(memory_at_0, loc_1)
			store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_2))
			store_i64(memory_at_0, loc_2, loc_4)
			if load_i32(memory_at_0, loc_1) >= load_i32(memory_at_0, loc_0) then
				break
			end
			loc_4 = load_i64(memory_at_0, loc_0)
			store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_1))
			store_i64(memory_at_0, loc_1, loc_4)
			break
		end
		break
	end
end
FUNC_LIST[123] = --[[ bool std::__2::__insertion_sort_incomplete[abi:ue170004]<std::__2::_ClassicAlgPolicy, Luau::BytecodeBuilder::expandJumps()::$_0&, Luau::BytecodeBuilder::Jump*>(Luau::BytecodeBuilder::Jump*, Luau::BytecodeBuilder::Jump*, Luau::BytecodeBuilder::expandJumps()::$_0&) ]] function(loc_0, loc_1)
	local loc_2 = i64_ZERO
	local loc_3 = i64_ZERO
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_7 = 1
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 5, 5, 0, 1, 2, 3, }
											end)()
										end
										temp = br_map[1][shr_i32(sub_i32(loc_1, loc_0), 3)] or 4
										if temp < 3 then
											if temp < 1 then
												break
											elseif temp > 1 then
												desired = 6
												break
											else
												desired = 7
												break
											end
										elseif temp > 3 then
											if temp < 5 then
												desired = 4
												break
											else
												desired = 3
												break
											end
										else
											desired = 5
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_4 = sub_i32(loc_1, 8)
									if load_i32(memory_at_0, loc_4) >= load_i32(memory_at_0, loc_0) then
										desired = 3
										break
									end
									loc_2 = load_i64(memory_at_0, loc_0)
									desired = 2
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_4 = sub_i32(loc_1, 8)
								loc_5 = load_i32(memory_at_0, loc_4)
								loc_6 = load_i32(memory_at_0, loc_0 + 8)
								if loc_6 >= load_i32(memory_at_0, loc_0) then
									while true do
										if loc_5 >= loc_6 then
											desired = 3
											break
										end
										loc_2 = load_i64(memory_at_0, loc_0 + 8)
										store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_4))
										store_i64(memory_at_0, loc_4, loc_2)
										if load_i32(memory_at_0, loc_0 + 8) >= load_i32(memory_at_0, loc_0) then
											desired = 3
											break
										end
										loc_2 = load_i64(memory_at_0, loc_0 + 8)
										desired = 1
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_2 = load_i64(memory_at_0, loc_0)
								if loc_5 < loc_6 then
									while true do
										desired = 2
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_3 = load_i64(memory_at_0, loc_0 + 8)
								store_i64(memory_at_0, loc_0 + 8, loc_2)
								store_i64(memory_at_0, loc_0, loc_3)
								if load_i32(memory_at_0, loc_4) >= wrap_i32_i64(loc_2) then
									desired = 3
									break
								end
								store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_4))
								store_i64(memory_at_0, loc_4, loc_2)
								reg_0 = 1
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[122](loc_0, add_i32(loc_0, 8), add_i32(loc_0, 16), sub_i32(loc_1, 8))
							reg_0 = 1
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_8 = add_i32(loc_0, 8)
						loc_5 = add_i32(loc_0, 16)
						loc_4 = add_i32(loc_0, 24)
						FUNC_LIST[122](loc_0, loc_8, loc_5, loc_4)
						loc_6 = sub_i32(loc_1, 8)
						if load_i32(memory_at_0, loc_6) >= load_i32(memory_at_0, loc_0 + 24) then
							desired = 3
							break
						end
						loc_2 = load_i64(memory_at_0, loc_0 + 24)
						store_i64(memory_at_0, loc_0 + 24, load_i64(memory_at_0, loc_6))
						store_i64(memory_at_0, loc_6, loc_2)
						if load_i32(memory_at_0, loc_0 + 24) >= load_i32(memory_at_0, loc_0 + 16) then
							desired = 3
							break
						end
						loc_3 = load_i64(memory_at_0, loc_0 + 16)
						loc_2 = load_i64(memory_at_0, loc_0 + 24)
						store_i64(memory_at_0, loc_0 + 16, loc_2)
						store_i64(memory_at_0, loc_0 + 24, loc_3)
						loc_4 = wrap_i32_i64(loc_2)
						if loc_4 >= load_i32(memory_at_0, loc_0 + 8) then
							desired = 3
							break
						end
						store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_0 + 8))
						store_i64(memory_at_0, loc_0 + 8, loc_2)
						if loc_4 >= load_i32(memory_at_0, loc_0) then
							desired = 3
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = load_i32(memory_at_0, loc_0 + 16)
					while true do
						loc_5 = load_i32(memory_at_0, loc_0 + 8)
						loc_6 = load_i32(memory_at_0, loc_0)
						if loc_5 >= loc_6 then
							while true do
								if loc_4 >= loc_5 then
									desired = 4
									break
								end
								loc_2 = load_i64(memory_at_0, loc_0 + 16)
								store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_0 + 8))
								store_i64(memory_at_0, loc_0 + 8, loc_2)
								if wrap_i32_i64(loc_2) >= loc_6 then
									desired = 4
									break
								end
								store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_0))
								store_i64(memory_at_0, loc_0, loc_2)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_2 = load_i64(memory_at_0, loc_0)
						if loc_4 < loc_5 then
							while true do
								loc_3 = load_i64(memory_at_0, loc_0 + 16)
								store_i64(memory_at_0, loc_0 + 16, loc_2)
								store_i64(memory_at_0, loc_0, loc_3)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_3 = load_i64(memory_at_0, loc_0 + 8)
						store_i64(memory_at_0, loc_0 + 8, loc_2)
						store_i64(memory_at_0, loc_0, loc_3)
						if wrap_i32_i64(loc_2) <= loc_4 then
							break
						end
						loc_3 = load_i64(memory_at_0, loc_0 + 16)
						store_i64(memory_at_0, loc_0 + 16, loc_2)
						store_i64(memory_at_0, loc_0 + 8, loc_3)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_8 = add_i32(loc_0, 24)
					if loc_1 == loc_8 then
						break
					end
					loc_4 = add_i32(loc_0, 16)
					while true do
						while true do
							if load_i32(memory_at_0, loc_8) >= load_i32(memory_at_0, loc_4) then
								break
							end
							loc_2 = load_i64(memory_at_0, loc_8)
							loc_6 = wrap_i32_i64(loc_2)
							loc_5 = loc_8
							while true do
								while true do
									loc_7 = loc_4
									store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_7))
									if loc_0 == loc_4 then
										while true do
											loc_7 = loc_0
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_5 = loc_7
									loc_4 = sub_i32(loc_5, 8)
									if loc_6 < load_i32(memory_at_0, loc_4) then
										desired = 6
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i64(memory_at_0, loc_7, loc_2)
							loc_9 = add_i32(loc_9, 1)
							if loc_9 ~= 8 then
								break
							end
							reg_0 = (if loc_1 == add_i32(loc_8, 8) then 1 else 0)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_4 = loc_8
						loc_7 = add_i32(loc_4, 8)
						loc_8 = loc_7
						if loc_1 ~= loc_7 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_7 = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = 1
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_4))
			store_i64(memory_at_0, loc_4, loc_2)
			reg_0 = 1
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_0))
		store_i64(memory_at_0, loc_0, loc_2)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[124] = --[[ Luau::Compile::modelCost(Luau::AstNode*, Luau::AstLocal* const*, unsigned long, Luau::DenseHashMap<Luau::AstExprCall*, int, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprCall*>> const&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = i64_ZERO
	local reg_0
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_4
		store_i64(memory_at_0, loc_4 + 16, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 40, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 8, i64_ZERO)
		store_i32(memory_at_0, loc_4 + 4, loc_3)
		store_i64(memory_at_0, loc_4 + 32, i64_ZERO)
		store_i32(memory_at_0, loc_4, 10128)
		if loc_2 ~= 0 then
			while true do
				loc_3 = add_i32(loc_4, 8)
				loc_6 = extend_i64_u32((if loc_2 >= 7 then 7 else loc_2))
				while true do
					reg_0 = FUNC_LIST[125](loc_3, add_i32(shl_i32(wrap_i32_i64(loc_5), 2), loc_1))
					store_i64(memory_at_0, reg_0, shl_i64(i64_from_u32(65280, 0), shl_i64(loc_5, i64_from_u32(3, 0))))
					loc_5 = add_i64(loc_5, i64_ONE)
					if ne_i64(loc_6, loc_5) then
						continue
					end
					break
				end
				break
			end
		end
		TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0))](loc_0, loc_4)
		store_i32(memory_at_0, loc_4, 10128)
		loc_5 = load_i64(memory_at_0, loc_4 + 32)
		loc_1 = load_i32(memory_at_0, loc_4 + 8)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 48)
		reg_0 = loc_5
		break
	end
	return reg_0
end
FUNC_LIST[125] = --[[ Luau::DenseHashMap<Luau::AstLocal*, unsigned long long, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>::operator[](Luau::AstLocal* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			loc_6 = load_i32(memory_at_0, loc_0 + 4)
			if loc_3 < shr_u32(mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_3 == 0 then
					break
				end
				loc_4 = load_i32(memory_at_0, loc_1)
				loc_8 = load_i32(memory_at_0, loc_0 + 12)
				if loc_4 == loc_8 then
					break
				end
				loc_2 = bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9))
				loc_7 = sub_i32(loc_6, 1)
				loc_9 = load_i32(memory_at_0, loc_0)
				loc_3 = 0
				while true do
					loc_5 = band_i32(loc_2, loc_7)
					loc_2 = load_i32(memory_at_0, add_i32(shl_i32(loc_5, 4), loc_9))
					if loc_4 == loc_2 then
						desired = 1
						break
					end
					if loc_2 == loc_8 then
						desired = 2
						break
					end
					loc_3 = add_i32(loc_3, 1)
					loc_2 = add_i32(loc_5, loc_3)
					if loc_3 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[126](loc_0)
			loc_6 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_8 = load_i32(memory_at_0, loc_0)
				loc_6 = sub_i32(loc_6, 1)
				loc_5 = load_i32(memory_at_0, loc_1)
				loc_3 = band_i32(loc_6, bxor_i32(shr_u32(loc_5, 4), shr_u32(loc_5, 9)))
				loc_4 = add_i32(loc_8, shl_i32(loc_3, 4))
				loc_2 = load_i32(memory_at_0, loc_4)
				loc_9 = load_i32(memory_at_0, loc_0 + 12)
				if loc_2 == loc_9 then
					break
				end
				if loc_2 == loc_5 then
					desired = 1
					break
				end
				loc_2 = 0
				while true do
					loc_2 = add_i32(loc_2, 1)
					loc_3 = band_i32(loc_6, add_i32(loc_3, loc_2))
					loc_4 = add_i32(shl_i32(loc_3, 4), loc_8)
					loc_7 = load_i32(memory_at_0, loc_4)
					if loc_9 == loc_7 then
						desired = 2
						break
					end
					if loc_5 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_4, loc_5)
			store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = add_i32(loc_4, 8)
		break
	end
	return reg_0
end
FUNC_LIST[126] = --[[ Luau::detail::DenseHashTable<Luau::AstLocal*, std::__2::pair<Luau::AstLocal*, unsigned long long>, std::__2::pair<Luau::AstLocal* const, unsigned long long>, Luau::detail::ItemInterfaceMap<Luau::AstLocal*, unsigned long long>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local desired
	while true do
		loc_12 = load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_11 = load_i32(memory_at_0, loc_0 + 4)
			loc_6 = (if loc_11 ~= 0 then shl_i32(loc_11, 1) else 16)
			if loc_6 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = band_i32(loc_6, 2)
			reg_0 = FUNC_LIST[606](shl_i32(loc_6, 4))
			loc_7 = reg_0
			loc_3 = load_i32(memory_at_0, loc_0 + 12)
			if loc_6 >= 4 then
				while true do
					loc_9 = band_i32(loc_6, 4294967292)
					while true do
						loc_1 = add_i32(shl_i32(loc_2, 4), loc_7)
						store_i64(memory_at_0, loc_1 + 8, i64_ZERO)
						store_i32(memory_at_0, loc_1, loc_3)
						store_i32(memory_at_0, loc_1 + 16, loc_3)
						store_i64(memory_at_0, loc_1 + 24, i64_ZERO)
						store_i64(memory_at_0, loc_1 + 40, i64_ZERO)
						store_i32(memory_at_0, loc_1 + 32, loc_3)
						store_i64(memory_at_0, loc_1 + 56, i64_ZERO)
						store_i32(memory_at_0, loc_1 + 48, loc_3)
						loc_2 = add_i32(loc_2, 4)
						loc_5 = add_i32(loc_5, 4)
						if loc_9 ~= loc_5 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 ~= 0 then
				while true do
					while true do
						loc_1 = add_i32(shl_i32(loc_2, 4), loc_7)
						store_i64(memory_at_0, loc_1 + 8, i64_ZERO)
						store_i32(memory_at_0, loc_1, loc_3)
						loc_2 = add_i32(loc_2, 1)
						loc_4 = add_i32(loc_4, 1)
						if loc_8 ~= loc_4 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_11 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		loc_10 = load_i32(memory_at_0, loc_0)
		if loc_11 ~= 0 then
			while true do
				loc_8 = sub_i32(loc_6, 1)
				loc_9 = 0
				while true do
					loc_13 = add_i32(shl_i32(loc_9, 4), loc_10)
					loc_4 = load_i32(memory_at_0, loc_13)
					if loc_4 ~= load_i32(memory_at_0, loc_0 + 12) then
						while true do
							while true do
								while true do
									loc_1 = band_i32(loc_8, bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9)))
									loc_5 = add_i32(shl_i32(loc_1, 4), loc_7)
									loc_3 = load_i32(memory_at_0, loc_5)
									if loc_12 == loc_3 then
										break
									end
									loc_2 = 0
									if loc_3 == loc_4 then
										desired = 4
										break
									end
									while true do
										loc_2 = add_i32(loc_2, 1)
										loc_1 = band_i32(loc_8, add_i32(loc_1, loc_2))
										loc_5 = add_i32(shl_i32(loc_1, 4), loc_7)
										loc_3 = load_i32(memory_at_0, loc_5)
										if loc_12 == loc_3 then
											desired = 5
											break
										end
										if loc_3 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
								store_i32(memory_at_0, loc_5, loc_4)
								break
							end
							if desired then
								break
							end
							store_i32(memory_at_0, loc_5, loc_4)
							store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_13 + 8))
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_9 = add_i32(loc_9, 1)
					if loc_11 ~= loc_9 then
						continue
					end
					break
				end
				reg_0 = load_i32(memory_at_0, loc_0)
				break
			end
		else
			while true do
				reg_0 = loc_10
				break
			end
		end
		loc_10 = reg_0
		store_i32(memory_at_0, loc_0 + 4, loc_6)
		store_i32(memory_at_0, loc_0, loc_7)
		if loc_10 ~= 0 then
			while true do
				FUNC_LIST[609](loc_10)
				break
			end
		end
		break
	end
end
FUNC_LIST[127] = --[[ Luau::Compile::CostVisitor::~CostVisitor() ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0, 10128)
		loc_1 = load_i32(memory_at_0, loc_0 + 8)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[128] = --[[ Luau::Compile::computeCost(unsigned long long, bool const*, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = 127
			loc_4 = wrap_i32_i64(loc_0)
			loc_5 = band_i32(loc_4, 127)
			reg_0 = loc_3
			if loc_5 == 127 then
				break
			end
			if loc_2 == 0 then
				while true do
					reg_0 = loc_5
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = sub_i32(loc_5, mul_i32(load_i32_u8(memory_at_0, loc_1), band_i32(shr_u32(loc_4, 8), 127)))
			reg_0 = loc_3
			if loc_2 == 1 then
				break
			end
			loc_3 = sub_i32(loc_3, mul_i32(load_i32_u8(memory_at_0, loc_1 + 1), band_i32(shr_u32(loc_4, 16), 127)))
			reg_0 = loc_3
			if loc_2 == 2 then
				break
			end
			loc_3 = sub_i32(loc_3, mul_i32(load_i32_u8(memory_at_0, loc_1 + 2), band_i32(shr_u32(loc_4, 24), 127)))
			reg_0 = loc_3
			if loc_2 == 3 then
				break
			end
			loc_3 = sub_i32(loc_3, mul_i32(load_i32_u8(memory_at_0, loc_1 + 3), band_i32(wrap_i32_i64(shr_u64(loc_0, i64_from_u32(32, 0))), 127)))
			reg_0 = loc_3
			if loc_2 == 4 then
				break
			end
			loc_3 = sub_i32(loc_3, mul_i32(load_i32_u8(memory_at_0, loc_1 + 4), band_i32(wrap_i32_i64(shr_u64(loc_0, i64_from_u32(40, 0))), 127)))
			reg_0 = loc_3
			if loc_2 == 5 then
				break
			end
			loc_3 = sub_i32(loc_3, mul_i32(load_i32_u8(memory_at_0, loc_1 + 5), band_i32(wrap_i32_i64(shr_u64(loc_0, i64_from_u32(48, 0))), 127)))
			reg_0 = loc_3
			if loc_2 == 6 then
				break
			end
			reg_0 = sub_i32(loc_3, mul_i32(load_i32_u8(memory_at_0, loc_1 + 6), band_i32(wrap_i32_i64(shr_u64(loc_0, i64_from_u32(56, 0))), 127)))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_3 = reg_0
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[129] = --[[ Luau::Compile::getTripCount(double, double, double) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_5 = 2147483648
		while true do
			loc_4 = 2147483648
			loc_7 = abs_f64(loc_0)
			reg_0 = loc_4
			if (if loc_7 <= 3.2767e4 then 1 else 0) == 0 then
				break
			end
			reg_0 = 2147483648
			reg_1 = loc_0
			while true do
				if loc_7 < 2.147483648e9 then
					while true do
						reg_2 = truncate_i32_f64(loc_0)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_2 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_2
			if reg_1 ~= convert_f64_i32(loc_3) then
				break
			end
			reg_0 = loc_3
			break
		end
		loc_4 = reg_0
		while true do
			loc_0 = abs_f64(loc_1)
			if (if loc_0 <= 3.2767e4 then 1 else 0) == 0 then
				break
			end
			reg_0 = loc_1
			while true do
				if loc_0 < 2.147483648e9 then
					while true do
						reg_1 = truncate_i32_f64(loc_1)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_1
			if reg_0 ~= convert_f64_i32(loc_3) then
				break
			end
			loc_5 = loc_3
			break
		end
		loc_3 = 4294967295
		while true do
			loc_0 = abs_f64(loc_2)
			if (if loc_0 <= 3.2767e4 then 1 else 0) == 0 then
				break
			end
			reg_0 = loc_2
			while true do
				if loc_0 < 2.147483648e9 then
					while true do
						reg_1 = truncate_i32_f64(loc_2)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = reg_1
			if reg_0 ~= convert_f64_i32(loc_6) then
				break
			end
			if band_i32(loc_6, 2147483647) == 0 then
				break
			end
			if loc_4 == 2147483648 then
				break
			end
			if loc_5 == 2147483648 then
				break
			end
			loc_3 = 0
			if band_i32((if lt_i32(loc_6, 0) then 1 else 0), (if lt_i32(loc_4, loc_5) then 1 else 0)) ~= 0 then
				break
			end
			if band_i32((if gt_i32(loc_6, 0) then 1 else 0), (if gt_i32(loc_4, loc_5) then 1 else 0)) ~= 0 then
				break
			end
			loc_3 = add_i32(div_i32(sub_i32(loc_5, loc_4), loc_6), 1)
			break
		end
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[130] = --[[ Luau::Compile::CostVisitor::~CostVisitor().1 ]] function(loc_0)
	local loc_1 = 0
	while true do
		store_i32(memory_at_0, loc_0, 10128)
		loc_1 = load_i32(memory_at_0, loc_0 + 8)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				break
			end
		end
		FUNC_LIST[609](loc_0)
		break
	end
end
FUNC_LIST[131] = --[[ Luau::Compile::CostVisitor::visit(Luau::AstExpr*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = i64_ZERO
	local loc_4 = i64_ZERO
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		FUNC_LIST[132](loc_2, loc_0, loc_1)
		loc_3 = load_i64(memory_at_0, loc_2)
		store_i64(memory_at_0, loc_0 + 40, i64_ZERO)
		loc_3 = add_i64(load_i64(memory_at_0, loc_0 + 32), loc_3)
		loc_4 = band_i64(loc_3, i64_from_u32(2155905152, 2155905152))
		store_i64(memory_at_0, loc_0 + 32, bor_i64(sub_i64(loc_4, shr_u64(loc_4, i64_from_u32(7, 0))), band_i64(loc_3, i64_from_u32(2139062143, 2139062143))))
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[132] = --[[ Luau::Compile::CostVisitor::model(Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = i64_ZERO
	local loc_4 = i64_ZERO
	local loc_5 = i64_ZERO
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_6
		loc_7 = load_i32(memory_at_0, loc_2 + 4)
		while true do
			if loc_2 == 0 then
				break
			end
			loc_8 = load_i32(memory_at_0, 47180)
			if loc_8 ~= loc_7 then
				break
			end
			while true do
				loc_2 = load_i32(memory_at_0, loc_2 + 24)
				loc_7 = load_i32(memory_at_0, loc_2 + 4)
				if loc_2 == 0 then
					desired = 1
					break
				end
				if loc_7 == loc_8 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		while true do
			while true do
				while true do
					if load_i32(memory_at_0, 47188) == loc_7 then
						break
					end
					if load_i32(memory_at_0, 47196) == loc_7 then
						break
					end
					if load_i32(memory_at_0, 47204) == loc_7 then
						break
					end
					if load_i32(memory_at_0, 47212) ~= loc_7 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i64(memory_at_0, loc_0 + 8, i64_from_u32(4294967295, 4294967295))
				store_i64(memory_at_0, loc_0, i64_ZERO)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_7 == load_i32(memory_at_0, 47220) then
				while true do
					reg_1 = FUNC_LIST[141](add_i32(loc_1, 8), add_i32(loc_2, 24))
					loc_2 = reg_1
					reg_0 = loc_0
					if loc_2 ~= 0 then
						while true do
							reg_1 = load_i64(memory_at_0, loc_2)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_1 = loc_3
							break
						end
						if desired then
							break
						end
					end
					loc_3 = reg_1
					store_i64(memory_at_0, reg_0 + 8, loc_3)
					store_i64(memory_at_0, loc_0, i64_ZERO)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == load_i32(memory_at_0, 47228) then
				while true do
					store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
					store_i64(memory_at_0, loc_0, i64_ONE)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == load_i32(memory_at_0, 47236) then
				while true do
					store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
					store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = (if load_i32(memory_at_0, 47244) == loc_7 then loc_2 else 0)
			store_i32(memory_at_0, loc_6 + 60, loc_8)
			if loc_8 ~= 0 then
				while true do
					while true do
						reg_0 = FUNC_LIST[33](load_i32(memory_at_0, loc_1 + 4), add_i32(loc_6, 60))
						if reg_0 ~= 0 then
							while true do
								loc_7 = load_i32(memory_at_0, loc_6 + 60)
								loc_2 = load_i32(memory_at_0, loc_7 + 32)
								store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
								loc_4 = i64_from_u32(2, 0)
								store_i64(memory_at_0, loc_0, i64_from_u32(2, 0))
								reg_0 = (if loc_2 < 3 then 1 else 0)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[132](add_i32(loc_6, 40), loc_1, load_i32(memory_at_0, load_i32(memory_at_0, loc_6 + 60) + 24))
						loc_3 = load_i64(memory_at_0, loc_6 + 40)
						store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
						loc_3 = add_i64(loc_3, i64_from_u32(3, 0))
						loc_4 = band_i64(loc_3, i64_from_u32(2155905152, 2155905152))
						loc_4 = bor_i64(sub_i64(loc_4, shr_u64(loc_4, i64_from_u32(7, 0))), band_i64(loc_3, i64_from_u32(2139062143, 2139062143)))
						store_i64(memory_at_0, loc_0, loc_4)
						loc_7 = load_i32(memory_at_0, loc_6 + 60)
						loc_2 = load_i32(memory_at_0, loc_7 + 32)
						reg_0 = 0
						break
					end
					if desired then
						break
					end
					loc_8 = reg_0
					if loc_2 == 0 then
						desired = 1
						break
					end
					loc_2 = 0
					while true do
						FUNC_LIST[132](add_i32(loc_6, 40), loc_1, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_7 + 28), shl_i32(loc_2, 2))))
						loc_3 = load_i64(memory_at_0, loc_6 + 40)
						store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
						loc_3 = add_i64(loc_4, (if ne_i64(loc_3, i64_ZERO) then loc_3 else (if loc_8 ~= 0 then loc_3 else i64_ONE)))
						loc_4 = band_i64(loc_3, i64_from_u32(2155905152, 2155905152))
						loc_4 = bor_i64(sub_i64(loc_4, shr_u64(loc_4, i64_from_u32(7, 0))), band_i64(loc_3, i64_from_u32(2139062143, 2139062143)))
						store_i64(memory_at_0, loc_0, loc_4)
						loc_2 = add_i32(loc_2, 1)
						loc_7 = load_i32(memory_at_0, loc_6 + 60)
						if loc_2 < load_i32(memory_at_0, loc_7 + 32) then
							continue
						end
						break
					end
					if desired then
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == load_i32(memory_at_0, 47252) then
				while true do
					FUNC_LIST[132](add_i32(loc_6, 40), loc_1, load_i32(memory_at_0, loc_2 + 24))
					store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
					loc_3 = add_i64(load_i64(memory_at_0, loc_6 + 40), i64_ONE)
					loc_4 = band_i64(loc_3, i64_from_u32(2155905152, 2155905152))
					store_i64(memory_at_0, loc_0, bor_i64(sub_i64(loc_4, shr_u64(loc_4, i64_from_u32(7, 0))), band_i64(loc_3, i64_from_u32(2139062143, 2139062143))))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == load_i32(memory_at_0, 47260) then
				while true do
					FUNC_LIST[132](add_i32(loc_6, 40), loc_1, load_i32(memory_at_0, loc_2 + 24))
					FUNC_LIST[132](add_i32(loc_6, 24), loc_1, load_i32(memory_at_0, loc_2 + 28))
					loc_3 = load_i64(memory_at_0, loc_6 + 24)
					loc_4 = load_i64(memory_at_0, loc_6 + 40)
					store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
					loc_3 = add_i64(loc_3, loc_4)
					loc_4 = band_i64(loc_3, i64_from_u32(2155905152, 2155905152))
					loc_3 = add_i64(bor_i64(sub_i64(loc_4, shr_u64(loc_4, i64_from_u32(7, 0))), band_i64(loc_3, i64_from_u32(2139062143, 2139062143))), i64_ONE)
					loc_4 = band_i64(loc_3, i64_from_u32(2155905152, 2155905152))
					store_i64(memory_at_0, loc_0, bor_i64(sub_i64(loc_4, shr_u64(loc_4, i64_from_u32(7, 0))), band_i64(loc_3, i64_from_u32(2139062143, 2139062143))))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == load_i32(memory_at_0, 47268) then
				while true do
					store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
					store_i64(memory_at_0, loc_0, i64_from_u32(10, 0))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == load_i32(memory_at_0, 47276) then
				while true do
					store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
					loc_3 = i64_from_u32(10, 0)
					store_i64(memory_at_0, loc_0, i64_from_u32(10, 0))
					if load_i32(memory_at_0, loc_2 + 28) == 0 then
						desired = 1
						break
					end
					loc_7 = 0
					while true do
						loc_8 = add_i32(load_i32(memory_at_0, loc_2 + 24), mul_i32(loc_7, 12))
						loc_9 = load_i32(memory_at_0, loc_8 + 4)
						if loc_9 ~= 0 then
							while true do
								FUNC_LIST[132](add_i32(loc_6, 40), loc_1, loc_9)
								loc_3 = add_i64(loc_3, load_i64(memory_at_0, loc_6 + 40))
								loc_4 = band_i64(loc_3, i64_from_u32(2155905152, 2155905152))
								reg_0 = bor_i64(sub_i64(loc_4, shr_u64(loc_4, i64_from_u32(7, 0))), band_i64(loc_3, i64_from_u32(2139062143, 2139062143)))
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
									continue
								end
								break
							end
						else
							while true do
								reg_0 = loc_3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
									continue
								end
								break
							end
						end
						loc_3 = reg_0
						FUNC_LIST[132](add_i32(loc_6, 40), loc_1, load_i32(memory_at_0, loc_8 + 8))
						loc_4 = load_i64(memory_at_0, loc_6 + 40)
						store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
						loc_3 = add_i64(loc_3, loc_4)
						loc_4 = band_i64(loc_3, i64_from_u32(2155905152, 2155905152))
						loc_3 = add_i64(bor_i64(sub_i64(loc_4, shr_u64(loc_4, i64_from_u32(7, 0))), band_i64(loc_3, i64_from_u32(2139062143, 2139062143))), i64_ONE)
						loc_4 = band_i64(loc_3, i64_from_u32(2155905152, 2155905152))
						loc_3 = bor_i64(sub_i64(loc_4, shr_u64(loc_4, i64_from_u32(7, 0))), band_i64(loc_3, i64_from_u32(2139062143, 2139062143)))
						store_i64(memory_at_0, loc_0, loc_3)
						loc_7 = add_i32(loc_7, 1)
						if loc_7 < load_i32(memory_at_0, loc_2 + 28) then
							continue
						end
						break
					end
					if desired then
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == load_i32(memory_at_0, 47284) then
				while true do
					FUNC_LIST[132](add_i32(loc_6, 40), loc_1, load_i32(memory_at_0, loc_2 + 28))
					store_i64(memory_at_0, loc_6 + 32, i64_from_u32(4294967295, 4294967295))
					store_i64(memory_at_0, loc_6 + 24, i64_ZERO)
					FUNC_LIST[142](loc_0, add_i32(loc_6, 40), add_i32(loc_6, 24))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == load_i32(memory_at_0, 47292) then
				while true do
					FUNC_LIST[132](add_i32(loc_6, 40), loc_1, load_i32(memory_at_0, loc_2 + 28))
					FUNC_LIST[132](add_i32(loc_6, 24), loc_1, load_i32(memory_at_0, loc_2 + 32))
					FUNC_LIST[142](loc_0, add_i32(loc_6, 40), add_i32(loc_6, 24))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == load_i32(memory_at_0, 47300) then
				while true do
					FUNC_LIST[132](loc_0, loc_1, load_i32(memory_at_0, loc_2 + 24))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == load_i32(memory_at_0, 47308) then
				while true do
					FUNC_LIST[132](add_i32(loc_6, 40), loc_1, load_i32(memory_at_0, loc_2 + 24))
					FUNC_LIST[132](add_i32(loc_6, 24), loc_1, load_i32(memory_at_0, loc_2 + 32))
					loc_3 = load_i64(memory_at_0, loc_6 + 24)
					loc_4 = load_i64(memory_at_0, loc_6 + 40)
					FUNC_LIST[132](add_i32(loc_6, 8), loc_1, load_i32(memory_at_0, loc_2 + 40))
					loc_5 = load_i64(memory_at_0, loc_6 + 8)
					store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
					loc_3 = add_i64(loc_3, loc_4)
					loc_4 = band_i64(loc_3, i64_from_u32(2155905152, 2155905152))
					loc_3 = add_i64(bor_i64(sub_i64(loc_4, shr_u64(loc_4, i64_from_u32(7, 0))), band_i64(loc_3, i64_from_u32(2139062143, 2139062143))), loc_5)
					loc_4 = band_i64(loc_3, i64_from_u32(2155905152, 2155905152))
					loc_3 = add_i64(bor_i64(sub_i64(loc_4, shr_u64(loc_4, i64_from_u32(7, 0))), band_i64(loc_3, i64_from_u32(2139062143, 2139062143))), i64_from_u32(2, 0))
					loc_4 = band_i64(loc_3, i64_from_u32(2155905152, 2155905152))
					store_i64(memory_at_0, loc_0, bor_i64(sub_i64(loc_4, shr_u64(loc_4, i64_from_u32(7, 0))), band_i64(loc_3, i64_from_u32(2139062143, 2139062143))))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == load_i32(memory_at_0, 47316) then
				while true do
					store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
					store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
					loc_7 = load_i32(memory_at_0, loc_2 + 36)
					if loc_7 == 0 then
						desired = 1
						break
					end
					loc_2 = load_i32(memory_at_0, loc_2 + 32)
					loc_7 = add_i32(loc_2, shl_i32(loc_7, 2))
					while true do
						FUNC_LIST[132](add_i32(loc_6, 40), loc_1, load_i32(memory_at_0, loc_2))
						loc_3 = load_i64(memory_at_0, loc_6 + 40)
						store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
						loc_3 = add_i64(load_i64(memory_at_0, loc_0), loc_3)
						loc_4 = band_i64(loc_3, i64_from_u32(2155905152, 2155905152))
						store_i64(memory_at_0, loc_0, bor_i64(sub_i64(loc_4, shr_u64(loc_4, i64_from_u32(7, 0))), band_i64(loc_3, i64_from_u32(2139062143, 2139062143))))
						loc_2 = add_i32(loc_2, 4)
						if loc_7 ~= loc_2 then
							continue
						end
						break
					end
					if desired then
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			store_i64(memory_at_0, loc_0, i64_ZERO)
			store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
			break
		end
		GLOBAL_LIST[0].value = sub_i32(loc_6, 4294967232)
		break
	end
end
FUNC_LIST[133] = --[[ Luau::Compile::CostVisitor::visit(Luau::AstStatIf*) ]] function(loc_0, loc_1)
	local loc_2 = i64_ZERO
	local loc_3 = i64_ZERO
	local reg_0
	while true do
		loc_1 = load_i32(memory_at_0, loc_1 + 36)
		if loc_1 ~= 0 then
			while true do
				reg_0 = (if load_i32(memory_at_0, loc_1 + 4) == load_i32(memory_at_0, 47332) then i64_ONE else i64_from_u32(2, 0))
				break
			end
		else
			while true do
				reg_0 = i64_ONE
				break
			end
		end
		loc_2 = reg_0
		store_i64(memory_at_0, loc_0 + 40, i64_ZERO)
		loc_2 = add_i64(loc_2, load_i64(memory_at_0, loc_0 + 32))
		loc_3 = band_i64(loc_2, i64_from_u32(2155905152, 2155905152))
		store_i64(memory_at_0, loc_0 + 32, bor_i64(sub_i64(loc_3, shr_u64(loc_3, i64_from_u32(7, 0))), band_i64(loc_2, i64_from_u32(2139062143, 2139062143))))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[134] = --[[ Luau::Compile::CostVisitor::visit(Luau::AstStatWhile*) ]] function(loc_0, loc_1)
	local loc_2 = i64_ZERO
	local loc_3 = i64_ZERO
	local loc_4 = i64_ZERO
	local loc_5 = 0
	local reg_0
	local reg_1
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		FUNC_LIST[132](loc_5, loc_0, load_i32(memory_at_0, loc_1 + 28))
		loc_1 = load_i32(memory_at_0, loc_1 + 32)
		loc_2 = load_i64(memory_at_0, loc_5)
		store_i64(memory_at_0, loc_0 + 40, i64_ZERO)
		loc_3 = load_i64(memory_at_0, loc_0 + 32)
		store_i64(memory_at_0, loc_0 + 32, i64_ZERO)
		TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1))](loc_1, loc_0)
		store_i64(memory_at_0, loc_0 + 40, i64_ZERO)
		loc_2 = add_i64(load_i64(memory_at_0, loc_0 + 32), loc_2)
		loc_4 = band_i64(loc_2, i64_from_u32(2155905152, 2155905152))
		loc_2 = bor_i64(sub_i64(loc_4, shr_u64(loc_4, i64_from_u32(7, 0))), loc_2)
		loc_4 = band_i64(shr_u64(loc_2, i64_from_u32(8, 0)), i64_from_u32(8323199, 8323199))
		loc_2 = mul_i64(band_i64(loc_2, i64_from_u32(8323199, 8323199)), i64_from_u32(3, 0))
		reg_1 = bor_i64(band_i64(mul_i64(loc_4, i64_from_u32(768, 0)), i64_from_u32(2130738944, 2130738944)), band_i64(loc_2, i64_from_u32(8323199, 8323199)))
		loc_2 = bor_i64(band_i64(shr_u64(add_i64(loc_2, i64_from_u32(2139127680, 2139127680)), i64_from_u32(8, 0)), i64_from_u32(8388736, 8388736)), band_i64(add_i64(mul_i64(loc_4, i64_from_u32(3, 0)), i64_from_u32(2139127680, 2139127680)), i64_from_u32(2147516416, 2147516416)))
		loc_2 = add_i64(bor_i64(reg_1, sub_i64(loc_2, shr_u64(loc_2, i64_from_u32(7, 0)))), loc_3)
		loc_3 = band_i64(loc_2, i64_from_u32(2155905152, 2155905152))
		store_i64(memory_at_0, loc_0 + 32, bor_i64(sub_i64(loc_3, shr_u64(loc_3, i64_from_u32(7, 0))), band_i64(loc_2, i64_from_u32(2139062143, 2139062143))))
		GLOBAL_LIST[0].value = add_i32(loc_5, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[135] = --[[ Luau::Compile::CostVisitor::visit(Luau::AstStatBreak*) ]] function(loc_0, loc_1)
	local loc_2 = i64_ZERO
	local loc_3 = i64_ZERO
	local reg_0
	while true do
		store_i64(memory_at_0, loc_0 + 40, i64_ZERO)
		loc_2 = add_i64(load_i64(memory_at_0, loc_0 + 32), i64_ONE)
		loc_3 = band_i64(loc_2, i64_from_u32(2155905152, 2155905152))
		store_i64(memory_at_0, loc_0 + 32, bor_i64(sub_i64(loc_3, shr_u64(loc_3, i64_from_u32(7, 0))), band_i64(loc_2, i64_from_u32(2139062143, 2139062143))))
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[136] = --[[ Luau::Compile::CostVisitor::visit(Luau::AstStatLocal*) ]] function(loc_0, loc_1)
	local loc_2 = i64_ZERO
	local loc_3 = i64_ZERO
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		if load_i32(memory_at_0, loc_1 + 40) ~= 0 then
			while true do
				loc_6 = add_i32(loc_0, 8)
				while true do
					loc_7 = shl_i32(loc_5, 2)
					FUNC_LIST[132](loc_4, loc_0, load_i32(memory_at_0, add_i32(loc_7, load_i32(memory_at_0, loc_1 + 36))))
					while true do
						loc_2 = load_i64(memory_at_0, loc_4 + 8)
						if eq_i64(loc_2, i64_ZERO) then
							break
						end
						if load_i32(memory_at_0, loc_1 + 32) <= loc_5 then
							break
						end
						reg_0 = FUNC_LIST[125](loc_6, add_i32(loc_7, load_i32(memory_at_0, loc_1 + 28)))
						store_i64(memory_at_0, reg_0, loc_2)
						break
					end
					loc_2 = load_i64(memory_at_0, loc_4)
					store_i64(memory_at_0, loc_0 + 40, i64_ZERO)
					loc_2 = add_i64(load_i64(memory_at_0, loc_0 + 32), loc_2)
					loc_3 = band_i64(loc_2, i64_from_u32(2155905152, 2155905152))
					store_i64(memory_at_0, loc_0 + 32, bor_i64(sub_i64(loc_3, shr_u64(loc_3, i64_from_u32(7, 0))), band_i64(loc_2, i64_from_u32(2139062143, 2139062143))))
					loc_5 = add_i32(loc_5, 1)
					if loc_5 < load_i32(memory_at_0, loc_1 + 40) then
						continue
					end
					break
				end
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[137] = --[[ Luau::Compile::CostVisitor::visit(Luau::AstStatFor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local loc_9 = i64_ZERO
	local loc_10 = i64_ZERO
	local loc_11 = i64_ZERO
	local loc_12 = 0.0
	local loc_13 = 0.0
	local loc_14 = 0.0
	local loc_15 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_6 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		FUNC_LIST[132](loc_6, loc_0, load_i32(memory_at_0, loc_1 + 32))
		loc_8 = load_i64(memory_at_0, loc_6)
		store_i64(memory_at_0, loc_0 + 40, i64_ZERO)
		loc_8 = add_i64(load_i64(memory_at_0, loc_0 + 32), loc_8)
		loc_9 = band_i64(loc_8, i64_from_u32(2155905152, 2155905152))
		store_i64(memory_at_0, loc_0 + 32, bor_i64(sub_i64(loc_9, shr_u64(loc_9, i64_from_u32(7, 0))), band_i64(loc_8, i64_from_u32(2139062143, 2139062143))))
		FUNC_LIST[132](loc_6, loc_0, load_i32(memory_at_0, loc_1 + 36))
		loc_8 = load_i64(memory_at_0, loc_6)
		store_i64(memory_at_0, loc_0 + 40, i64_ZERO)
		loc_8 = add_i64(load_i64(memory_at_0, loc_0 + 32), loc_8)
		loc_9 = band_i64(loc_8, i64_from_u32(2155905152, 2155905152))
		loc_8 = bor_i64(sub_i64(loc_9, shr_u64(loc_9, i64_from_u32(7, 0))), band_i64(loc_8, i64_from_u32(2139062143, 2139062143)))
		store_i64(memory_at_0, loc_0 + 32, loc_8)
		loc_2 = load_i32(memory_at_0, loc_1 + 40)
		if loc_2 ~= 0 then
			while true do
				FUNC_LIST[132](loc_6, loc_0, loc_2)
				loc_8 = add_i64(load_i64(memory_at_0, loc_6), load_i64(memory_at_0, loc_0 + 32))
				loc_9 = band_i64(loc_8, i64_from_u32(2155905152, 2155905152))
				reg_0 = bor_i64(sub_i64(loc_9, shr_u64(loc_9, i64_from_u32(7, 0))), band_i64(loc_8, i64_from_u32(2139062143, 2139062143)))
				break
			end
		else
			while true do
				reg_0 = loc_8
				break
			end
		end
		loc_8 = reg_0
		loc_7 = add_i32(loc_0, 32)
		loc_3 = load_i32(memory_at_0, 47204)
		loc_2 = load_i32(memory_at_0, loc_1 + 32)
		loc_4 = load_i32(memory_at_0, loc_2 + 4)
		while true do
			while true do
				while true do
					if loc_2 == 0 then
						break
					end
					if loc_3 ~= loc_4 then
						break
					end
					reg_0 = load_f64(memory_at_0, loc_2 + 24)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = 3
				if loc_2 == 0 then
					desired = 1
					break
				end
				if load_i32(memory_at_0, 47284) ~= loc_4 then
					desired = 1
					break
				end
				if load_i32(memory_at_0, loc_2 + 24) ~= 1 then
					desired = 1
					break
				end
				loc_2 = load_i32(memory_at_0, loc_2 + 28)
				if loc_2 == 0 then
					desired = 1
					break
				end
				if loc_3 ~= load_i32(memory_at_0, loc_2 + 4) then
					desired = 1
					break
				end
				reg_0 = neg_f64(load_f64(memory_at_0, loc_2 + 24))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_12 = reg_0
			loc_2 = load_i32(memory_at_0, loc_1 + 36)
			loc_4 = load_i32(memory_at_0, loc_2 + 4)
			while true do
				while true do
					if loc_2 == 0 then
						break
					end
					if loc_3 ~= loc_4 then
						break
					end
					reg_0 = load_f64(memory_at_0, loc_2 + 24)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = 3
				if loc_2 == 0 then
					desired = 1
					break
				end
				if load_i32(memory_at_0, 47284) ~= loc_4 then
					desired = 1
					break
				end
				if load_i32(memory_at_0, loc_2 + 24) ~= 1 then
					desired = 1
					break
				end
				loc_2 = load_i32(memory_at_0, loc_2 + 28)
				if loc_2 == 0 then
					desired = 1
					break
				end
				if loc_3 ~= load_i32(memory_at_0, loc_2 + 4) then
					desired = 1
					break
				end
				reg_0 = neg_f64(load_f64(memory_at_0, loc_2 + 24))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_13 = reg_0
			while true do
				loc_2 = load_i32(memory_at_0, loc_1 + 40)
				reg_0 = 1e0
				if loc_2 == 0 then
					break
				end
				loc_4 = load_i32(memory_at_0, loc_2 + 4)
				if loc_4 == loc_3 then
					while true do
						reg_0 = load_f64(memory_at_0, loc_2 + 24)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_5 = 3
				if load_i32(memory_at_0, 47284) ~= loc_4 then
					desired = 1
					break
				end
				if load_i32(memory_at_0, loc_2 + 24) ~= 1 then
					desired = 1
					break
				end
				loc_2 = load_i32(memory_at_0, loc_2 + 28)
				if loc_2 == 0 then
					desired = 1
					break
				end
				if loc_3 ~= load_i32(memory_at_0, loc_2 + 4) then
					desired = 1
					break
				end
				reg_0 = neg_f64(load_f64(memory_at_0, loc_2 + 24))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_14 = reg_0
			loc_3 = 2147483648
			while true do
				loc_2 = 2147483648
				loc_15 = abs_f64(loc_12)
				reg_0 = loc_2
				if (if loc_15 <= 3.2767e4 then 1 else 0) == 0 then
					break
				end
				reg_0 = 2147483648
				while true do
					if loc_15 < 2.147483648e9 then
						while true do
							reg_1 = truncate_i32_f64(loc_12)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_1 = 2147483648
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = reg_1
				if convert_f64_i32(loc_5) ~= loc_12 then
					break
				end
				reg_0 = loc_5
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = reg_0
			while true do
				loc_12 = abs_f64(loc_13)
				if (if loc_12 <= 3.2767e4 then 1 else 0) == 0 then
					break
				end
				while true do
					if loc_12 < 2.147483648e9 then
						while true do
							reg_0 = truncate_i32_f64(loc_13)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = 2147483648
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = reg_0
				if convert_f64_i32(loc_5) ~= loc_13 then
					break
				end
				loc_3 = loc_5
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = 3
			loc_12 = abs_f64(loc_14)
			if (if loc_12 <= 3.2767e4 then 1 else 0) == 0 then
				break
			end
			while true do
				if loc_12 < 2.147483648e9 then
					while true do
						reg_0 = truncate_i32_f64(loc_14)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = reg_0
			if convert_f64_i32(loc_4) ~= loc_14 then
				break
			end
			if band_i32(loc_4, 2147483647) == 0 then
				break
			end
			if loc_2 == 2147483648 then
				break
			end
			if loc_3 == 2147483648 then
				break
			end
			loc_5 = 0
			if band_i32((if lt_i32(loc_4, 0) then 1 else 0), (if lt_i32(loc_2, loc_3) then 1 else 0)) ~= 0 then
				break
			end
			if band_i32((if gt_i32(loc_4, 0) then 1 else 0), (if gt_i32(loc_2, loc_3) then 1 else 0)) ~= 0 then
				break
			end
			loc_2 = div_i32(sub_i32(loc_3, loc_2), loc_4)
			loc_5 = (if lt_i32(loc_2, 4294967295) then 3 else add_i32(loc_2, 1))
			break
		end
		loc_1 = load_i32(memory_at_0, loc_1 + 44)
		store_i64(memory_at_0, loc_7 + 8, i64_ZERO)
		store_i64(memory_at_0, loc_7, i64_ZERO)
		TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1))](loc_1, loc_0)
		store_i64(memory_at_0, loc_0 + 40, i64_ZERO)
		loc_9 = add_i64(load_i64(memory_at_0, loc_0 + 32), i64_ONE)
		loc_10 = band_i64(loc_9, i64_from_u32(2155905152, 2155905152))
		loc_9 = bor_i64(sub_i64(loc_10, shr_u64(loc_10, i64_from_u32(7, 0))), loc_9)
		loc_10 = extend_i64_u32((if loc_5 >= 127 then 127 else loc_5))
		loc_11 = mul_i64(band_i64(shr_u64(loc_9, i64_from_u32(8, 0)), i64_from_u32(8323199, 8323199)), loc_10)
		loc_9 = mul_i64(loc_10, band_i64(loc_9, i64_from_u32(8323199, 8323199)))
		reg_2 = bor_i64(band_i64(shl_i64(loc_11, i64_from_u32(8, 0)), i64_from_u32(2130738944, 2130738944)), band_i64(loc_9, i64_from_u32(8323199, 8323199)))
		loc_9 = bor_i64(band_i64(shr_u64(add_i64(loc_9, i64_from_u32(2139127680, 2139127680)), i64_from_u32(8, 0)), i64_from_u32(8388736, 8388736)), band_i64(add_i64(loc_11, i64_from_u32(2139127680, 2139127680)), i64_from_u32(2147516416, 2147516416)))
		loc_8 = add_i64(loc_8, bor_i64(reg_2, sub_i64(loc_9, shr_u64(loc_9, i64_from_u32(7, 0)))))
		loc_9 = band_i64(loc_8, i64_from_u32(2155905152, 2155905152))
		store_i64(memory_at_0, loc_0 + 32, bor_i64(sub_i64(loc_9, shr_u64(loc_9, i64_from_u32(7, 0))), band_i64(loc_8, i64_from_u32(2139062143, 2139062143))))
		GLOBAL_LIST[0].value = add_i32(loc_6, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[138] = --[[ Luau::Compile::CostVisitor::visit(Luau::AstStatForIn*) ]] function(loc_0, loc_1)
	local loc_2 = i64_ZERO
	local loc_3 = i64_ZERO
	local loc_4 = i64_ZERO
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_6 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		while true do
			if load_i32(memory_at_0, loc_1 + 40) == 0 then
				while true do
					loc_3 = load_i64(memory_at_0, loc_0 + 32)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				FUNC_LIST[132](loc_6, loc_0, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 36), shl_i32(loc_5, 2))))
				loc_3 = load_i64(memory_at_0, loc_6)
				store_i64(memory_at_0, loc_0 + 40, i64_ZERO)
				loc_3 = add_i64(load_i64(memory_at_0, loc_0 + 32), loc_3)
				loc_2 = band_i64(loc_3, i64_from_u32(2155905152, 2155905152))
				loc_3 = bor_i64(sub_i64(loc_2, shr_u64(loc_2, i64_from_u32(7, 0))), band_i64(loc_3, i64_from_u32(2139062143, 2139062143)))
				store_i64(memory_at_0, loc_0 + 32, loc_3)
				loc_5 = add_i32(loc_5, 1)
				if loc_5 < load_i32(memory_at_0, loc_1 + 40) then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		loc_5 = load_i32(memory_at_0, loc_1 + 44)
		loc_1 = add_i32(loc_0, 40)
		store_i64(memory_at_0, loc_1, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 32, i64_ZERO)
		TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_5))](loc_5, loc_0)
		store_i64(memory_at_0, loc_0 + 40, i64_ZERO)
		loc_2 = add_i64(load_i64(memory_at_0, loc_0 + 32), i64_ONE)
		loc_4 = band_i64(loc_2, i64_from_u32(2155905152, 2155905152))
		loc_2 = bor_i64(sub_i64(loc_4, shr_u64(loc_4, i64_from_u32(7, 0))), loc_2)
		loc_4 = band_i64(shr_u64(loc_2, i64_from_u32(8, 0)), i64_from_u32(8323199, 8323199))
		loc_2 = mul_i64(band_i64(loc_2, i64_from_u32(8323199, 8323199)), i64_from_u32(3, 0))
		reg_2 = bor_i64(band_i64(mul_i64(loc_4, i64_from_u32(768, 0)), i64_from_u32(2130738944, 2130738944)), band_i64(loc_2, i64_from_u32(8323199, 8323199)))
		loc_2 = bor_i64(band_i64(shr_u64(add_i64(loc_2, i64_from_u32(2139127680, 2139127680)), i64_from_u32(8, 0)), i64_from_u32(8388736, 8388736)), band_i64(add_i64(mul_i64(loc_4, i64_from_u32(3, 0)), i64_from_u32(2139127680, 2139127680)), i64_from_u32(2147516416, 2147516416)))
		loc_3 = add_i64(loc_3, bor_i64(reg_2, sub_i64(loc_2, shr_u64(loc_2, i64_from_u32(7, 0)))))
		loc_2 = band_i64(loc_3, i64_from_u32(2155905152, 2155905152))
		store_i64(memory_at_0, loc_0 + 32, bor_i64(sub_i64(loc_2, shr_u64(loc_2, i64_from_u32(7, 0))), band_i64(loc_3, i64_from_u32(2139062143, 2139062143))))
		GLOBAL_LIST[0].value = add_i32(loc_6, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[139] = --[[ Luau::Compile::CostVisitor::visit(Luau::AstStatAssign*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = i64_ZERO
	local loc_17 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_3 = load_i32(memory_at_0, loc_1 + 32)
		if loc_3 ~= 0 then
			while true do
				loc_8 = sub_i32(load_i32(memory_at_0, loc_0 + 12), 1)
				loc_10 = load_i32(memory_at_0, loc_0 + 8)
				loc_9 = load_i32(memory_at_0, loc_0 + 20)
				loc_11 = load_i32(memory_at_0, loc_0 + 16)
				loc_12 = load_i32(memory_at_0, 47220)
				loc_13 = load_i32(memory_at_0, loc_1 + 28)
				while true do
					while true do
						loc_2 = load_i32(memory_at_0, add_i32(shl_i32(loc_6, 2), loc_13))
						if loc_2 == 0 then
							break
						end
						if loc_12 ~= load_i32(memory_at_0, loc_2 + 4) then
							break
						end
						if loc_11 == 0 then
							break
						end
						loc_7 = load_i32(memory_at_0, loc_2 + 24)
						if loc_9 == loc_7 then
							break
						end
						loc_5 = bxor_i32(shr_u32(loc_7, 4), shr_u32(loc_7, 9))
						loc_2 = 0
						while true do
							loc_14 = band_i32(loc_5, loc_8)
							loc_15 = add_i32(shl_i32(loc_14, 4), loc_10)
							loc_5 = load_i32(memory_at_0, loc_15)
							if loc_5 ~= loc_7 then
								while true do
									if loc_5 == loc_9 then
										desired = 3
										break
									end
									loc_2 = add_i32(loc_2, 1)
									loc_5 = add_i32(loc_14, loc_2)
									if loc_2 <= loc_8 then
										desired = 4
										break
									end
									desired = 3
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						store_i64(memory_at_0, loc_15 + 8, i64_ZERO)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_6 = add_i32(loc_6, 1)
					if loc_3 ~= loc_6 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = 0
		while true do
			while true do
				if loc_2 >= loc_3 then
					while true do
						loc_16 = i64_ZERO
						loc_3 = load_i32(memory_at_0, loc_1 + 40)
						reg_0 = loc_16
						if loc_3 > loc_2 then
							desired = 2
							break
						end
						GLOBAL_LIST[0].value = add_i32(loc_4, 16)
						reg_0 = 0
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[132](loc_4, loc_0, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 28), shl_i32(loc_2, 2))))
				loc_3 = load_i32(memory_at_0, loc_1 + 40)
				loc_16 = load_i64(memory_at_0, loc_4)
				loc_17 = band_i64(loc_16, i64_from_u32(2155905152, 2155905152))
				reg_0 = bor_i64(sub_i64(loc_17, shr_u64(loc_17, i64_from_u32(7, 0))), band_i64(loc_16, i64_from_u32(2139062143, 2139062143)))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_16 = reg_0
			if loc_2 < loc_3 then
				while true do
					FUNC_LIST[132](loc_4, loc_0, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 36), shl_i32(loc_2, 2))))
					loc_16 = add_i64(loc_16, load_i64(memory_at_0, loc_4))
					loc_17 = band_i64(loc_16, i64_from_u32(2155905152, 2155905152))
					reg_0 = bor_i64(sub_i64(loc_17, shr_u64(loc_17, i64_from_u32(7, 0))), band_i64(loc_16, i64_from_u32(2139062143, 2139062143)))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			else
				while true do
					reg_0 = loc_16
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			loc_16 = reg_0
			store_i64(memory_at_0, loc_0 + 40, i64_ZERO)
			loc_16 = add_i64(load_i64(memory_at_0, loc_0 + 32), (if le_u64(loc_16, i64_ONE) then i64_ONE else loc_16))
			loc_17 = band_i64(loc_16, i64_from_u32(2155905152, 2155905152))
			store_i64(memory_at_0, loc_0 + 32, bor_i64(sub_i64(loc_17, shr_u64(loc_17, i64_from_u32(7, 0))), band_i64(loc_16, i64_from_u32(2139062143, 2139062143))))
			loc_2 = add_i32(loc_2, 1)
			loc_3 = load_i32(memory_at_0, loc_1 + 32)
			continue
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[140] = --[[ Luau::Compile::CostVisitor::visit(Luau::AstStatCompoundAssign*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = i64_ZERO
	local loc_12 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_4 = load_i32(memory_at_0, 47220)
		loc_1 = load_i32(memory_at_0, loc_1 + 32)
		loc_5 = load_i32(memory_at_0, loc_1 + 4)
		while true do
			if loc_1 == 0 then
				break
			end
			if loc_4 ~= loc_5 then
				break
			end
			if load_i32(memory_at_0, loc_0 + 16) == 0 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_1 + 24)
			loc_7 = load_i32(memory_at_0, loc_0 + 20)
			if loc_3 == loc_7 then
				break
			end
			loc_2 = bxor_i32(shr_u32(loc_3, 4), shr_u32(loc_3, 9))
			loc_6 = sub_i32(load_i32(memory_at_0, loc_0 + 12), 1)
			loc_8 = load_i32(memory_at_0, loc_0 + 8)
			loc_1 = 0
			while true do
				loc_9 = band_i32(loc_2, loc_6)
				loc_10 = add_i32(shl_i32(loc_9, 4), loc_8)
				loc_2 = load_i32(memory_at_0, loc_10)
				if loc_2 ~= loc_3 then
					while true do
						if loc_2 == loc_7 then
							desired = 1
							break
						end
						loc_1 = add_i32(loc_1, 1)
						loc_2 = add_i32(loc_9, loc_1)
						if loc_1 <= loc_6 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_10 + 8, i64_ZERO)
			break
		end
		store_i64(memory_at_0, loc_0 + 40, i64_ZERO)
		loc_11 = add_i64(load_i64(memory_at_0, loc_0 + 32), (if loc_4 == loc_5 then i64_ONE else i64_from_u32(2, 0)))
		loc_12 = band_i64(loc_11, i64_from_u32(2155905152, 2155905152))
		store_i64(memory_at_0, loc_0 + 32, bor_i64(sub_i64(loc_12, shr_u64(loc_12, i64_from_u32(7, 0))), band_i64(loc_11, i64_from_u32(2139062143, 2139062143))))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[141] = --[[ Luau::DenseHashMap<Luau::AstLocal*, unsigned long long, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>::find(Luau::AstLocal* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		while true do
			if load_i32(memory_at_0, loc_0 + 8) == 0 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_1)
			loc_5 = load_i32(memory_at_0, loc_0 + 12)
			if loc_3 == loc_5 then
				break
			end
			loc_1 = bxor_i32(shr_u32(loc_3, 4), shr_u32(loc_3, 9))
			loc_4 = sub_i32(load_i32(memory_at_0, loc_0 + 4), 1)
			loc_6 = load_i32(memory_at_0, loc_0)
			loc_0 = 0
			while true do
				loc_7 = band_i32(loc_1, loc_4)
				loc_2 = add_i32(shl_i32(loc_7, 4), loc_6)
				loc_1 = load_i32(memory_at_0, loc_2)
				if loc_3 == loc_1 then
					desired = 1
					break
				end
				loc_2 = 0
				if loc_1 == loc_5 then
					desired = 1
					break
				end
				loc_0 = add_i32(loc_0, 1)
				loc_1 = add_i32(loc_7, loc_0)
				if loc_0 <= loc_4 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = (if loc_2 ~= 0 then add_i32(loc_2, 8) else 0)
		break
	end
	return reg_0
end
FUNC_LIST[142] = --[[ Luau::Compile::Cost::fold(Luau::Compile::Cost const&, Luau::Compile::Cost const&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = i64_ZERO
	local loc_4 = i64_ZERO
	local loc_5 = i64_ZERO
	local reg_0
	local reg_1
	while true do
		loc_4 = load_i64(memory_at_0, loc_2)
		loc_5 = load_i64(memory_at_0, loc_1)
		loc_3 = band_i64(load_i64(memory_at_0, loc_2 + 8), load_i64(memory_at_0, loc_1 + 8))
		store_i64(memory_at_0, loc_0 + 8, loc_3)
		reg_1 = (if ne_i64(loc_3, i64_from_u32(4294967295, 4294967295)) then bor_i64(band_i64(loc_3, i64_from_u32(16843008, 16843009)), i64_ONE) else i64_ZERO)
		loc_3 = add_i64(loc_4, loc_5)
		loc_4 = band_i64(loc_3, i64_from_u32(2155905152, 2155905152))
		loc_3 = add_i64(reg_1, bor_i64(sub_i64(loc_4, shr_u64(loc_4, i64_from_u32(7, 0))), band_i64(loc_3, i64_from_u32(2139062143, 2139062143))))
		loc_4 = band_i64(loc_3, i64_from_u32(2155905152, 2155905152))
		store_i64(memory_at_0, loc_0, bor_i64(sub_i64(loc_4, shr_u64(loc_4, i64_from_u32(7, 0))), band_i64(loc_3, i64_from_u32(2139062143, 2139062143))))
		break
	end
end
FUNC_LIST[143] = --[[ Luau::CompileError::CompileError(Luau::Location const&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>> const&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local desired
	while true do
		store_i32(memory_at_0, loc_0, 10412)
		store_i64(memory_at_0, loc_0 + 12, load_i64(memory_at_0, loc_1 + 8))
		store_i64(memory_at_0, loc_0 + 4, load_i64(memory_at_0, loc_1))
		loc_1 = add_i32(loc_0, 20)
		if ge_i32(load_i32_i8(memory_at_0, loc_2 + 11), 0) then
			while true do
				store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_2))
				store_i32(memory_at_0, loc_1 + 8, load_i32(memory_at_0, loc_2 + 8))
				reg_0 = loc_0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[671](loc_1, load_i32(memory_at_0, loc_2), load_i32(memory_at_0, loc_2 + 4))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[144] = --[[ Luau::CompileError::~CompileError() ]] function(loc_0)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0, 10412)
		if lt_i32(load_i32_i8(memory_at_0, loc_0 + 31), 0) then
			while true do
				FUNC_LIST[609](load_i32(memory_at_0, loc_0 + 20))
				break
			end
		end
		reg_0 = FUNC_LIST[159](loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[145] = --[[ Luau::CompileError::~CompileError().1 ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[144](loc_0)
		FUNC_LIST[609](loc_0)
		break
	end
end
FUNC_LIST[146] = --[[ Luau::CompileError::what() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = (if lt_i32(load_i32_i8(memory_at_0, loc_0 + 31), 0) then load_i32(memory_at_0, loc_0 + 20) else add_i32(loc_0, 20))
		break
	end
	return reg_0
end
FUNC_LIST[147] = --[[ Luau::CompileError::raise(Luau::Location const&, char const*, ...) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, loc_3 + 12, loc_2)
		FUNC_LIST[474](loc_3, loc_1, loc_2)
		reg_0 = FUNC_LIST[538](32)
		loc_2 = reg_0
		reg_0 = FUNC_LIST[143](loc_2, loc_0, loc_3)
		FUNC_LIST[0](loc_2, 10448, 94)
		error("out of code bounds")
	end
end
FUNC_LIST[148] = --[[ Luau::compileOrThrow(Luau::BytecodeBuilder&, Luau::ParseResult const&, Luau::AstNameTable const&, Luau::CompileOptions const&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 592)
		GLOBAL_LIST[0].value = loc_4
		loc_13 = loc_4
		loc_11 = add_i32(loc_13, 584)
		store_i32(memory_at_0, loc_11, load_i32(memory_at_0, loc_3 + 24))
		loc_14 = loc_4
		loc_9 = add_i32(loc_14, 576)
		store_i64(memory_at_0, loc_9, load_i64(memory_at_0, loc_3 + 16))
		loc_15 = loc_4
		loc_12 = add_i32(loc_15, 568)
		store_i64(memory_at_0, loc_12, load_i64(memory_at_0, loc_3 + 8))
		loc_19 = load_i64(memory_at_0, loc_3)
		store_i64(memory_at_0, loc_4 + 560, loc_19)
		loc_6 = wrap_i32_i64(loc_19)
		while true do
			loc_3 = load_i32(memory_at_0, loc_1 + 8)
			loc_5 = load_i32(memory_at_0, loc_1 + 12)
			if loc_3 == loc_5 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				while true do
					if load_i32_u8(memory_at_0, loc_3) == 0 then
						break
					end
					loc_7 = add_i32(loc_3, 20)
					reg_0 = FUNC_LIST[685](loc_7, 0, 9, 7758)
					if reg_0 ~= 0 then
						while true do
							reg_0 = loc_6
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_1 = FUNC_LIST[552](add_i32((if lt_i32(load_i32_i8(memory_at_0, loc_3 + 31), 0) then load_i32(memory_at_0, loc_3 + 20) else loc_7), 9))
							loc_6 = reg_1
							loc_6 = (if ge_i32(loc_6, 2) then 2 else loc_6)
							reg_0 = (if gt_i32(loc_6, 0) then loc_6 else 0)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = reg_0
					if load_i32_u8(memory_at_0, loc_3) == 0 then
						break
					end
					loc_8 = load_i32_i8(memory_at_0, loc_3 + 31)
					reg_1 = loc_8
					loc_8 = (if lt_i32(loc_8, 0) then 1 else 0)
					if (if loc_8 ~= 0 then load_i32(memory_at_0, loc_3 + 24) else reg_1) ~= 6 then
						break
					end
					reg_2 = FUNC_LIST[535]((if loc_8 ~= 0 then load_i32(memory_at_0, loc_7) else loc_7), 3946, 6)
					loc_7 = reg_2
					loc_10 = (if loc_7 ~= 0 then loc_10 else 1)
					loc_6 = (if loc_7 ~= 0 then loc_6 else 2)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_3 = add_i32(loc_3, 32)
				if loc_5 ~= loc_3 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		store_i32(memory_at_0, loc_4 + 560, loc_6)
		loc_5 = load_i32(memory_at_0, loc_1)
		store_i64(memory_at_0, loc_4 + 256, load_i64(memory_at_0, loc_15 + 568))
		store_i64(memory_at_0, loc_4 + 264, load_i64(memory_at_0, loc_14 + 576))
		store_i32(memory_at_0, loc_4 + 272, load_i32(memory_at_0, loc_13 + 584))
		store_i64(memory_at_0, loc_4 + 284, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 304, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 324, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 344, i64_ZERO)
		store_i32(memory_at_0, loc_4 + 244, loc_0)
		store_i64(memory_at_0, loc_4 + 248, load_i64(memory_at_0, loc_4 + 560))
		store_i32_n8(memory_at_0, loc_4 + 460, 0)
		store_i32(memory_at_0, loc_4 + 456, 0)
		store_i64(memory_at_0, loc_4 + 276, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 296, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 316, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 336, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 364, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 384, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 404, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 424, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 444, i64_ZERO)
		store_i32(memory_at_0, loc_4 + 471, 0)
		store_i64(memory_at_0, loc_4 + 508, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 516, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 524, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 532, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 540, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 548, i64_ZERO)
		store_i32(memory_at_0, loc_4 + 556, 0)
		store_i64(memory_at_0, loc_4 + 356, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 376, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 396, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 416, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 436, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 464, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 500, i64_ZERO)
		reg_1 = FUNC_LIST[606](64)
		loc_3 = reg_1
		store_i32(memory_at_0, loc_4 + 480, loc_3)
		store_i32(memory_at_0, loc_4 + 476, loc_3)
		store_i32(memory_at_0, loc_4 + 484, sub_i32(loc_3, 4294967232))
		reg_1 = FUNC_LIST[606](64)
		loc_3 = reg_1
		store_i32(memory_at_0, loc_4 + 492, loc_3)
		store_i32(memory_at_0, loc_4 + 488, loc_3)
		store_i32(memory_at_0, loc_4 + 496, sub_i32(loc_3, 4294967232))
		loc_1 = add_i32(loc_4, 316)
		FUNC_LIST[4](loc_1, loc_2, load_i32(memory_at_0, loc_13 + 584))
		loc_11 = add_i32(loc_4, 336)
		FUNC_LIST[7](loc_1, loc_11, loc_5)
		while true do
			if le_i32(loc_6, 0) then
				break
			end
			reg_0 = FUNC_LIST[367](loc_2, 1226)
			if reg_0 == 0 then
				while true do
					reg_0 = FUNC_LIST[367](loc_2, 1218)
					if reg_0 == 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			store_i32(memory_at_0, loc_4 + 100, add_i32(loc_4, 474))
			store_i32(memory_at_0, loc_4 + 96, add_i32(loc_4, 473))
			store_i32(memory_at_0, loc_4 + 92, 10468)
			TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_5))](loc_5, add_i32(loc_4, 92))
			break
		end
		loc_12 = add_i32(loc_4, 416)
		while true do
			while true do
				while true do
					if lt_i32(loc_6, 2) then
						break
					end
					if load_i32_u8(memory_at_0, loc_4 + 473) ~= 0 then
						break
					end
					if load_i32_u8(memory_at_0, loc_4 + 474) ~= 0 then
						break
					end
					store_i32(memory_at_0, loc_4 + 456, loc_12)
					reg_0 = FUNC_LIST[367](loc_2, 3676)
					loc_9 = reg_0
					if loc_9 == 0 then
						desired = 2
						break
					end
					while true do
						if load_i32(memory_at_0, loc_4 + 324) == 0 then
							break
						end
						loc_16 = load_i32(memory_at_0, loc_4 + 328)
						if loc_9 == loc_16 then
							break
						end
						loc_7 = bxor_i32(shr_u32(loc_9, 4), shr_u32(loc_9, 9))
						loc_8 = sub_i32(load_i32(memory_at_0, loc_4 + 320), 1)
						loc_3 = 0
						loc_17 = load_i32(memory_at_0, loc_4 + 316)
						while true do
							loc_2 = band_i32(loc_7, loc_8)
							loc_18 = add_i32(shl_i32(loc_2, 3), loc_17)
							loc_7 = load_i32(memory_at_0, loc_18)
							if loc_7 ~= loc_9 then
								while true do
									if loc_7 == loc_16 then
										desired = 4
										break
									end
									loc_3 = add_i32(loc_3, 1)
									loc_7 = add_i32(loc_2, loc_3)
									if loc_3 <= loc_8 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if load_i32(memory_at_0, loc_18 + 4) ~= 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32_n8(memory_at_0, loc_4 + 460, 1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if le_i32(loc_6, 0) then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[17](loc_12, loc_1, loc_11, add_i32(loc_4, 560), loc_5)
			FUNC_LIST[25](add_i32(loc_4, 356), loc_11, add_i32(loc_4, 376), load_i32(memory_at_0, loc_4 + 456), load_i32_u8(memory_at_0, loc_4 + 460), loc_5)
			FUNC_LIST[44](add_i32(loc_4, 396), loc_5)
			break
		end
		store_i32_n8(memory_at_0, loc_4 + 228, 0)
		store_i32(memory_at_0, loc_4 + 216, 10780)
		store_i32(memory_at_0, loc_4 + 224, add_i32(loc_4, 232))
		store_i32(memory_at_0, loc_4 + 220, add_i32(loc_4, 244))
		reg_1 = FUNC_LIST[606](64)
		loc_3 = reg_1
		store_i32(memory_at_0, loc_4 + 236, loc_3)
		store_i32(memory_at_0, loc_4 + 232, loc_3)
		store_i32(memory_at_0, loc_4 + 240, sub_i32(loc_3, 4294967232))
		TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_5))](loc_5, add_i32(loc_4, 216))
		if load_i32_u8(memory_at_0, loc_4 + 228) ~= 0 then
			while true do
				FUNC_LIST[55](add_i32(loc_4, 436), loc_5, load_i32(memory_at_0, loc_4 + 580))
				break
			end
		end
		loc_3 = load_i32(memory_at_0, loc_4 + 232)
		loc_7 = load_i32(memory_at_0, loc_4 + 236)
		if loc_3 ~= loc_7 then
			while true do
				while true do
					reg_0 = FUNC_LIST[149](add_i32(loc_4, 244), load_i32(memory_at_0, loc_3), 0)
					loc_3 = add_i32(loc_3, 4)
					if loc_7 ~= loc_3 then
						continue
					end
					break
				end
				break
			end
		end
		store_i64(memory_at_0, loc_4 + 80, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 72, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 64, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 56, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 48, i64_ZERO)
		store_i32(memory_at_0, loc_4 + 44, 0)
		store_i32_n8(memory_at_0, loc_4 + 40, 0)
		store_i32_n8(memory_at_0, loc_4 + 28, 0)
		store_i32_n8(memory_at_0, loc_4 + 24, 0)
		store_i32_n8(memory_at_0, loc_4 + 8, 0)
		reg_2 = FUNC_LIST[267](add_i32(loc_4, 92), add_i32(loc_5, 8), add_i32(loc_4, 80), add_i32(loc_4, 72), 0, sub_i32(loc_4, 4294967232), 1, add_i32(loc_4, 48), loc_5, 0, add_i32(loc_4, 44), add_i32(loc_4, 28), 0, add_i32(loc_4, 8))
		reg_1 = FUNC_LIST[149](add_i32(loc_4, 244), reg_2, band_i32(loc_10, 255))
		FUNC_LIST[73](loc_0, reg_1)
		FUNC_LIST[110](loc_0)
		loc_3 = load_i32(memory_at_0, loc_4 + 232)
		if loc_3 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_4 + 236, loc_3)
				FUNC_LIST[609](loc_3)
				break
			end
		end
		reg_0 = FUNC_LIST[150](add_i32(loc_4, 244))
		GLOBAL_LIST[0].value = add_i32(loc_4, 592)
		break
	end
end
FUNC_LIST[149] = --[[ Luau::Compiler::compileFunction(Luau::AstExprFunction*, unsigned char) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_4
		store_i32(memory_at_0, loc_4 + 56, loc_1)
		loc_12 = load_i32(memory_at_0, loc_0 + 220)
		loc_9 = (if load_i32(memory_at_0, loc_1 + 40) ~= 0 then 1 else 0)
		reg_0 = FUNC_LIST[67](load_i32(memory_at_0, loc_0), band_i32(add_i32(loc_9, load_i32(memory_at_0, loc_1 + 48)), 255), load_i32_u8(memory_at_0, loc_1 + 68))
		loc_11 = reg_0
		if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
			while true do
				FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, loc_1 + 8), 1))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			if load_i32(memory_at_0, loc_0 + 200) == 0 then
				break
			end
			loc_10 = load_i32(memory_at_0, loc_0 + 204)
			if loc_1 == loc_10 then
				break
			end
			loc_5 = bxor_i32(shr_u32(loc_1, 4), shr_u32(loc_1, 9))
			loc_6 = sub_i32(load_i32(memory_at_0, loc_0 + 196), 1)
			loc_13 = load_i32(memory_at_0, loc_0 + 192)
			while true do
				loc_7 = band_i32(loc_5, loc_6)
				loc_8 = add_i32(shl_i32(loc_7, 4), loc_13)
				loc_5 = load_i32(memory_at_0, loc_8)
				if loc_5 ~= loc_1 then
					while true do
						if loc_5 == loc_10 then
							desired = 1
							break
						end
						loc_3 = add_i32(loc_3, 1)
						loc_5 = add_i32(loc_7, loc_3)
						if loc_3 <= loc_6 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = load_i32(memory_at_0, loc_0)
			loc_5 = add_i32(loc_8, 12)
			store_i32(memory_at_0, loc_4 + 48, load_i32(memory_at_0, loc_5))
			store_i64(memory_at_0, loc_4 + 40, load_i64(memory_at_0, loc_8 + 4))
			store_i64(memory_at_0, loc_8 + 4, i64_ZERO)
			store_i32(memory_at_0, loc_8 + 12, 0)
			FUNC_LIST[102](loc_3, add_i32(loc_4, 40))
			if ge_i32(load_i32_i8(memory_at_0, loc_4 + 51), 0) then
				break
			end
			FUNC_LIST[609](load_i32(memory_at_0, loc_4 + 40))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		if load_i32_u8(memory_at_0, loc_1 + 68) ~= 0 then
			while true do
				FUNC_LIST[96](load_i32(memory_at_0, loc_0), 65, band_i32(add_i32(loc_9, load_i32(memory_at_0, loc_1 + 48)), 255), 0, 0)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_6 = load_i32(memory_at_0, loc_0 + 220)
			loc_5 = load_i32(memory_at_0, loc_1 + 48)
			loc_7 = add_i32(loc_9, loc_5)
			loc_3 = add_i32(loc_6, loc_7)
			if loc_3 < 256 then
				while true do
					store_i32(memory_at_0, loc_0 + 220, loc_3)
					loc_7 = load_i32(memory_at_0, loc_0 + 224)
					store_i32(memory_at_0, loc_0 + 224, (if loc_3 < loc_7 then loc_7 else loc_3))
					loc_3 = load_i32(memory_at_0, loc_1 + 40)
					if loc_3 ~= 0 then
						while true do
							FUNC_LIST[151](loc_0, loc_3, band_i32(loc_6, 255))
							reg_0 = load_i32(memory_at_0, loc_1 + 48)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_5
							break
						end
						if desired then
							break
						end
					end
					loc_5 = reg_0
					if loc_5 ~= 0 then
						while true do
							loc_5 = add_i32(loc_6, loc_9)
							loc_3 = 0
							while true do
								FUNC_LIST[151](loc_0, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 44), shl_i32(loc_3, 2))), band_i32(add_i32(loc_3, loc_5), 255))
								loc_3 = add_i32(loc_3, 1)
								if loc_3 < load_i32(memory_at_0, loc_1 + 48) then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					loc_5 = load_i32(memory_at_0, loc_1 + 92)
					if load_i32(memory_at_0, loc_5 + 32) ~= 0 then
						while true do
							loc_3 = 0
							while true do
								FUNC_LIST[152](loc_0, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_5 + 28), shl_i32(loc_3, 2))))
								loc_3 = add_i32(loc_3, 1)
								if loc_3 < load_i32(memory_at_0, loc_5 + 32) then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					reg_0 = FUNC_LIST[153](loc_0, loc_5)
					if reg_0 == 0 then
						while true do
							if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
								while true do
									FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, loc_5 + 16), 1))
									break
								end
								if desired then
									break
								end
							end
							FUNC_LIST[154](loc_0, 0)
							FUNC_LIST[96](load_i32(memory_at_0, loc_0), 22, 0, 1, 0)
							break
						end
						if desired then
							break
						end
					end
					while true do
						if le_i32(load_i32(memory_at_0, loc_0 + 4), 0) then
							break
						end
						if lt_i32(load_i32(memory_at_0, loc_0 + 8), 2) then
							break
						end
						store_i32(memory_at_0, loc_4 + 76, 0)
						store_i64(memory_at_0, loc_4 + 68, i64_ZERO)
						store_i32(memory_at_0, loc_4 + 64, loc_0)
						loc_7 = 11764
						store_i32(memory_at_0, loc_4 + 60, loc_7)
						loc_3 = load_i32(memory_at_0, loc_1 + 92)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, add_i32(loc_4, 60))
						loc_3 = load_i32(memory_at_0, loc_4 + 68)
						loc_6 = load_i32(memory_at_0, loc_4 + 72)
						if loc_3 ~= loc_6 then
							while true do
								while true do
									reg_0 = FUNC_LIST[155](loc_0, load_i32(memory_at_0, loc_3))
									loc_3 = add_i32(loc_3, 4)
									if loc_6 ~= loc_3 then
										continue
									end
									break
								end
								if desired then
									break
								end
								reg_0 = load_i32(memory_at_0, loc_4 + 68)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = loc_3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_3 = reg_0
						store_i32(memory_at_0, loc_4 + 60, 11764)
						if loc_3 == 0 then
							break
						end
						store_i32(memory_at_0, loc_4 + 72, loc_3)
						FUNC_LIST[609](loc_3)
						break
					end
					if desired then
						break
					end
					FUNC_LIST[104](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, loc_1 + 8), 1))
					while true do
						loc_3 = load_i32(memory_at_0, loc_0 + 8)
						if le_i32(loc_3, 0) then
							break
						end
						loc_6 = load_i32(memory_at_0, loc_1 + 100)
						if loc_6 ~= 0 then
							while true do
								loc_3 = load_i32(memory_at_0, loc_0)
								store_i32(memory_at_0, loc_4 + 32, loc_6)
								reg_1 = FUNC_LIST[504](loc_6)
								store_i32(memory_at_0, loc_4 + 36, reg_1)
								store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_4 + 32))
								FUNC_LIST[103](loc_3, add_i32(loc_4, 16))
								reg_0 = load_i32(memory_at_0, loc_0 + 8)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = loc_3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_3 = reg_0
						if lt_i32(loc_3, 2) then
							break
						end
						loc_3 = load_i32(memory_at_0, loc_0 + 244)
						loc_10 = load_i32(memory_at_0, loc_0 + 248)
						if loc_3 == loc_10 then
							break
						end
						while true do
							loc_6 = load_i32(memory_at_0, loc_0)
							loc_7 = load_i32(memory_at_0, load_i32(memory_at_0, loc_3))
							store_i32(memory_at_0, loc_4 + 24, loc_7)
							reg_1 = FUNC_LIST[504](loc_7)
							store_i32(memory_at_0, loc_4 + 28, reg_1)
							store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_4 + 24))
							FUNC_LIST[107](loc_6, add_i32(loc_4, 8))
							loc_3 = add_i32(loc_3, 4)
							if loc_10 ~= loc_3 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						break
					end
					if gt_i32(load_i32(memory_at_0, loc_0 + 4), 0) then
						while true do
							FUNC_LIST[117](load_i32(memory_at_0, loc_0))
							break
						end
						if desired then
							break
						end
					end
					FUNC_LIST[118](load_i32(memory_at_0, loc_0))
					FUNC_LIST[156](loc_0, 0)
					reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
					if reg_0 >= 1000000001 then
						desired = 1
						break
					end
					FUNC_LIST[70](load_i32(memory_at_0, loc_0), load_i32_u8(memory_at_0, loc_0 + 224), band_i32(shr_u32(sub_i32(load_i32(memory_at_0, loc_0 + 248), load_i32(memory_at_0, loc_0 + 244)), 2), 255), (if load_i32(memory_at_0, loc_1 + 96) ~= 0 then loc_2 else (if load_i32_u8(memory_at_0, loc_0 + 228) ~= 0 then loc_2 else bor_i32(loc_2, 2))))
					reg_0 = FUNC_LIST[157](add_i32(loc_0, 32), add_i32(loc_4, 56))
					loc_3 = reg_0
					store_i32(memory_at_0, loc_3, loc_11)
					loc_1 = add_i32(loc_3, 4)
					if loc_1 ~= add_i32(loc_0, 244) then
						while true do
							loc_6 = load_i32(memory_at_0, loc_0 + 244)
							loc_7 = load_i32(memory_at_0, loc_0 + 248)
							FUNC_LIST[158](loc_1, loc_6, loc_7, shr_i32(sub_i32(loc_7, loc_6), 2))
							break
						end
						if desired then
							break
						end
					end
					while true do
						if lt_i32(load_i32(memory_at_0, loc_0 + 4), 2) then
							break
						end
						loc_1 = load_i32(memory_at_0, loc_4 + 56)
						if load_i32_u8(memory_at_0, loc_1 + 68) ~= 0 then
							break
						end
						if load_i32(memory_at_0, loc_1 + 40) ~= 0 then
							break
						end
						if load_i32_u8(memory_at_0, loc_0 + 229) ~= 0 then
							break
						end
						if load_i32_u8(memory_at_0, loc_0 + 230) ~= 0 then
							break
						end
						store_i32_n8(memory_at_0, loc_3 + 28, 1)
						store_i32(memory_at_0, loc_3 + 24, load_i32(memory_at_0, loc_0 + 224))
						reg_1 = FUNC_LIST[124](load_i32(memory_at_0, loc_1 + 92), load_i32(memory_at_0, loc_1 + 44), load_i32(memory_at_0, loc_1 + 48), add_i32(loc_0, 172))
						store_i64(memory_at_0, loc_3 + 16, reg_1)
						reg_0 = FUNC_LIST[153](loc_0, load_i32(memory_at_0, load_i32(memory_at_0, loc_4 + 56) + 92))
						if reg_0 == 0 then
							break
						end
						store_i32_n8(memory_at_0, loc_4 + 68, 1)
						store_i32(memory_at_0, loc_4 + 64, loc_0)
						store_i32(memory_at_0, loc_4 + 60, 12056)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_5))](loc_5, add_i32(loc_4, 60))
						store_i32_n8(memory_at_0, loc_3 + 29, load_i32_u8(memory_at_0, loc_4 + 68))
						break
					end
					if desired then
						break
					end
					store_i32_n8(memory_at_0, loc_0 + 228, 0)
					store_i32(memory_at_0, loc_0 + 224, 0)
					store_i32(memory_at_0, loc_0 + 220, loc_12)
					store_i32(memory_at_0, loc_0 + 248, load_i32(memory_at_0, loc_0 + 244))
					GLOBAL_LIST[0].value = add_i32(loc_4, 80)
					reg_0 = loc_11
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			store_i32(memory_at_0, loc_4 + 4, 255)
			store_i32(memory_at_0, loc_4, loc_7)
			FUNC_LIST[147](add_i32(loc_1, 8), 5468, loc_4)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[147](add_i32(loc_1, 8), 4360, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[150] = --[[ Luau::Compiler::~Compiler() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	while true do
		loc_3 = load_i32(memory_at_0, loc_0 + 304)
		if loc_3 ~= 0 then
			while true do
				loc_1 = load_i32(memory_at_0, loc_0 + 308)
				loc_2 = loc_3
				if loc_1 ~= loc_2 then
					while true do
						while true do
							loc_1 = sub_i32(loc_1, 4)
							loc_2 = load_i32(memory_at_0, loc_1)
							store_i32(memory_at_0, loc_1, 0)
							if loc_2 ~= 0 then
								while true do
									FUNC_LIST[8](loc_2)
									break
								end
							end
							if loc_1 ~= loc_3 then
								continue
							end
							break
						end
						reg_0 = load_i32(memory_at_0, loc_0 + 304)
						break
					end
				else
					while true do
						reg_0 = loc_2
						break
					end
				end
				loc_2 = reg_0
				store_i32(memory_at_0, loc_0 + 308, loc_3)
				FUNC_LIST[609](loc_2)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 292)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 296, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_3 = load_i32(memory_at_0, loc_0 + 280)
		if loc_3 ~= 0 then
			while true do
				loc_1 = load_i32(memory_at_0, loc_0 + 284)
				loc_2 = loc_3
				if loc_1 ~= loc_2 then
					while true do
						while true do
							loc_2 = load_i32(memory_at_0, sub_i32(loc_1, 12))
							if loc_2 ~= 0 then
								while true do
									store_i32(memory_at_0, sub_i32(loc_1, 8), loc_2)
									FUNC_LIST[609](loc_2)
									break
								end
							end
							loc_1 = sub_i32(loc_1, 24)
							if loc_3 ~= loc_1 then
								continue
							end
							break
						end
						reg_0 = load_i32(memory_at_0, loc_0 + 280)
						break
					end
				else
					while true do
						reg_0 = loc_2
						break
					end
				end
				loc_2 = reg_0
				store_i32(memory_at_0, loc_0 + 284, loc_3)
				FUNC_LIST[609](loc_2)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 268)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 272, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 256)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 260, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 244)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 248, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 232)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 236, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_3 = load_i32(memory_at_0, loc_0 + 192)
		if loc_3 ~= 0 then
			while true do
				loc_4 = load_i32(memory_at_0, loc_0 + 196)
				if loc_4 ~= 0 then
					while true do
						loc_1 = 0
						while true do
							loc_2 = add_i32(shl_i32(loc_1, 4), loc_3)
							if lt_i32(load_i32_i8(memory_at_0, loc_2 + 15), 0) then
								while true do
									FUNC_LIST[609](load_i32(memory_at_0, loc_2 + 4))
									break
								end
							end
							loc_1 = add_i32(loc_1, 1)
							if loc_4 ~= loc_1 then
								continue
							end
							break
						end
						reg_0 = load_i32(memory_at_0, loc_0 + 192)
						break
					end
				else
					while true do
						reg_0 = loc_3
						break
					end
				end
				loc_3 = reg_0
				FUNC_LIST[609](loc_3)
				store_i64(memory_at_0, loc_0 + 192, i64_ZERO)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 172)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_0 + 172, i64_ZERO)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 152)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_0 + 152, i64_ZERO)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 132)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_0 + 132, i64_ZERO)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 112)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_0 + 112, i64_ZERO)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 92)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_0 + 92, i64_ZERO)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 72)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_0 + 72, i64_ZERO)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 52)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_0 + 52, i64_ZERO)
				break
			end
		end
		loc_4 = load_i32(memory_at_0, loc_0 + 32)
		if loc_4 ~= 0 then
			while true do
				loc_5 = load_i32(memory_at_0, loc_0 + 36)
				if loc_5 ~= 0 then
					while true do
						loc_1 = 0
						while true do
							loc_3 = add_i32(mul_i32(loc_1, 40), loc_4)
							loc_2 = load_i32(memory_at_0, loc_3 + 12)
							if loc_2 ~= 0 then
								while true do
									store_i32(memory_at_0, loc_3 + 16, loc_2)
									FUNC_LIST[609](loc_2)
									break
								end
							end
							loc_1 = add_i32(loc_1, 1)
							if loc_5 ~= loc_1 then
								continue
							end
							break
						end
						reg_0 = load_i32(memory_at_0, loc_0 + 32)
						break
					end
				else
					while true do
						reg_0 = loc_4
						break
					end
				end
				loc_4 = reg_0
				FUNC_LIST[609](loc_4)
				store_i64(memory_at_0, loc_0 + 32, i64_ZERO)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[151] = --[[ Luau::Compiler::pushLocal(Luau::AstLocal*, unsigned char) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		store_i32(memory_at_0, loc_6 + 12, loc_1)
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 236)
			loc_7 = load_i32(memory_at_0, loc_0 + 232)
			loc_5 = sub_i32(loc_3, loc_7)
			loc_4 = shr_i32(loc_5, 2)
			if loc_4 < 200 then
				while true do
					while true do
						if loc_3 ~= load_i32(memory_at_0, loc_0 + 240) then
							while true do
								store_i32(memory_at_0, loc_3, loc_1)
								store_i32(memory_at_0, loc_0 + 236, add_i32(loc_3, 4))
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_8 = shr_i32(loc_5, 1)
						loc_4 = add_i32(loc_4, 1)
						loc_4 = (if loc_5 >= 2147483644 then 1073741823 else (if loc_4 < loc_8 then loc_8 else loc_4))
						if loc_4 >= 1073741824 then
							desired = 1
							break
						end
						loc_4 = shl_i32(loc_4, 2)
						reg_1 = FUNC_LIST[606](loc_4)
						loc_8 = reg_1
						loc_5 = add_i32(loc_5, loc_8)
						store_i32(memory_at_0, loc_5, loc_1)
						loc_1 = add_i32(loc_4, loc_8)
						loc_4 = add_i32(loc_5, 4)
						if loc_3 ~= loc_7 then
							while true do
								while true do
									loc_5 = sub_i32(loc_5, 4)
									loc_3 = sub_i32(loc_3, 4)
									store_i32(memory_at_0, loc_5, load_i32(memory_at_0, loc_3))
									if loc_3 ~= loc_7 then
										continue
									end
									break
								end
								if desired then
									break
								end
								reg_0 = loc_7
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = loc_3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_3 = reg_0
						store_i32(memory_at_0, loc_0 + 240, loc_1)
						store_i32(memory_at_0, loc_0 + 236, loc_4)
						store_i32(memory_at_0, loc_0 + 232, loc_5)
						if loc_3 == 0 then
							break
						end
						FUNC_LIST[609](loc_3)
						break
					end
					if desired then
						break
					end
					reg_0 = FUNC_LIST[174](add_i32(loc_0, 52), add_i32(loc_6, 12))
					loc_3 = reg_0
					store_i32_n8(memory_at_0, loc_3 + 1, 1)
					store_i32_n8(memory_at_0, loc_3, loc_2)
					reg_1 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
					store_i32(memory_at_0, loc_3 + 4, reg_1)
					GLOBAL_LIST[0].value = add_i32(loc_6, 16)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = load_i32(memory_at_0, loc_1)
			store_i32(memory_at_0, loc_6 + 4, 200)
			store_i32(memory_at_0, loc_6, loc_3)
			FUNC_LIST[147](add_i32(loc_1, 4), 5541, loc_6)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[152] = --[[ Luau::Compiler::compileStat(Luau::AstStat*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
			while true do
				FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, loc_1 + 8), 1))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = load_i32(memory_at_0, 47324)
		while true do
			if le_i32(load_i32(memory_at_0, loc_0 + 12), 0) then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_1 + 4)
			if loc_2 == loc_3 then
				break
			end
			if load_i32(memory_at_0, 47444) == loc_3 then
				break
			end
			FUNC_LIST[96](load_i32(memory_at_0, loc_0), 69, 0, 0, 0)
			loc_2 = load_i32(memory_at_0, 47324)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_3 = load_i32(memory_at_0, loc_1 + 4)
		while true do
			while true do
				while true do
					while true do
						if loc_1 == 0 then
							break
						end
						if loc_2 ~= loc_3 then
							break
						end
						loc_3 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 236), load_i32(memory_at_0, loc_0 + 232)), 2)
						loc_5 = load_i32(memory_at_0, loc_0 + 220)
						if load_i32(memory_at_0, loc_1 + 32) ~= 0 then
							while true do
								loc_2 = 0
								while true do
									FUNC_LIST[152](loc_0, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 28), shl_i32(loc_2, 2))))
									loc_2 = add_i32(loc_2, 1)
									if loc_2 < load_i32(memory_at_0, loc_1 + 32) then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[154](loc_0, loc_3)
						FUNC_LIST[156](loc_0, loc_3)
						store_i32(memory_at_0, loc_0 + 220, loc_5)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if load_i32(memory_at_0, 47332) ~= loc_3 then
							break
						end
						FUNC_LIST[175](loc_0, loc_1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if load_i32(memory_at_0, 47340) ~= loc_3 then
							break
						end
						FUNC_LIST[176](loc_0, loc_1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if load_i32(memory_at_0, 47348) ~= loc_3 then
							break
						end
						FUNC_LIST[177](loc_0, loc_1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_3 == load_i32(memory_at_0, 47356) then
						while true do
							FUNC_LIST[154](loc_0, load_i32(memory_at_0, sub_i32(load_i32(memory_at_0, loc_0 + 272), 12)))
							reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
							loc_5 = reg_0
							FUNC_LIST[97](load_i32(memory_at_0, loc_0), 23, 0, 0)
							loc_2 = load_i32(memory_at_0, loc_0 + 260)
							loc_1 = load_i32(memory_at_0, loc_0 + 264)
							if loc_2 < loc_1 then
								while true do
									store_i64(memory_at_0, loc_2, shl_i64(extend_i64_u32(loc_5), i64_from_u32(32, 0)))
									store_i32(memory_at_0, loc_0 + 260, add_i32(loc_2, 8))
									desired = 3
									break
								end
								if desired then
									break
								end
							end
							loc_8 = add_i32(loc_0, 256)
							loc_3 = load_i32(memory_at_0, loc_8)
							loc_9 = shr_i32(sub_i32(loc_2, loc_3), 3)
							loc_4 = add_i32(loc_9, 1)
							if loc_4 >= 536870912 then
								desired = 2
								break
							end
							loc_1 = sub_i32(loc_1, loc_3)
							loc_7 = shr_i32(loc_1, 2)
							loc_4 = (if loc_1 >= 2147483640 then 536870911 else (if loc_4 < loc_7 then loc_7 else loc_4))
							if loc_4 ~= 0 then
								while true do
									if loc_4 >= 536870912 then
										desired = 1
										break
									end
									reg_0 = FUNC_LIST[606](shl_i32(loc_4, 3))
									break
								end
								if desired then
									break
								end
							else
								while true do
									reg_0 = 0
									break
								end
								if desired then
									break
								end
							end
							loc_7 = reg_0
							loc_1 = add_i32(loc_7, shl_i32(loc_9, 3))
							store_i64(memory_at_0, loc_1, shl_i64(extend_i64_u32(loc_5), i64_from_u32(32, 0)))
							loc_5 = add_i32(shl_i32(loc_4, 3), loc_7)
							loc_4 = add_i32(loc_1, 8)
							if loc_2 ~= loc_3 then
								while true do
									while true do
										loc_1 = sub_i32(loc_1, 8)
										loc_2 = sub_i32(loc_2, 8)
										store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_2))
										if loc_2 ~= loc_3 then
											continue
										end
										break
									end
									if desired then
										break
									end
									reg_0 = load_i32(memory_at_0, loc_8)
									break
								end
								if desired then
									break
								end
							else
								while true do
									reg_0 = loc_2
									break
								end
								if desired then
									break
								end
							end
							loc_2 = reg_0
							store_i32(memory_at_0, loc_0 + 264, loc_5)
							store_i32(memory_at_0, loc_0 + 260, loc_4)
							store_i32(memory_at_0, loc_0 + 256, loc_1)
							if loc_2 == 0 then
								desired = 3
								break
							end
							FUNC_LIST[609](loc_2)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if load_i32(memory_at_0, 47364) ~= loc_3 then
							break
						end
						loc_2 = load_i32(memory_at_0, loc_0 + 272)
						loc_3 = sub_i32(loc_2, 4)
						if load_i32(memory_at_0, loc_3) == 0 then
							while true do
								store_i32(memory_at_0, loc_3, loc_1)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[154](loc_0, load_i32(memory_at_0, sub_i32(loc_2, 8)))
						reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
						loc_2 = reg_0
						FUNC_LIST[97](load_i32(memory_at_0, loc_0), 23, 0, 0)
						store_i32(memory_at_0, loc_6 + 12, loc_2)
						store_i32(memory_at_0, loc_6 + 8, 1)
						FUNC_LIST[178](add_i32(loc_0, 256), add_i32(loc_6, 8))
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if load_i32(memory_at_0, 47372) ~= loc_3 then
							break
						end
						while true do
							if lt_i32(load_i32(memory_at_0, loc_0 + 4), 2) then
								break
							end
							if load_i32(memory_at_0, loc_0 + 280) == load_i32(memory_at_0, loc_0 + 284) then
								break
							end
							FUNC_LIST[179](loc_0, loc_1, 0)
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[180](loc_0, loc_1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if load_i32(memory_at_0, 47380) ~= loc_3 then
							break
						end
						while true do
							loc_2 = load_i32(memory_at_0, loc_1 + 28)
							if loc_2 == 0 then
								break
							end
							if load_i32(memory_at_0, loc_2 + 4) ~= load_i32(memory_at_0, 47244) then
								break
							end
							FUNC_LIST[181](loc_0, loc_2, load_i32_u8(memory_at_0, loc_0 + 220), 0, 0, 0)
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[182](loc_0, loc_2)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if load_i32(memory_at_0, 47388) ~= loc_3 then
							break
						end
						FUNC_LIST[183](loc_0, loc_1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if load_i32(memory_at_0, 47396) ~= loc_3 then
							break
						end
						FUNC_LIST[184](loc_0, loc_1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if load_i32(memory_at_0, 47404) ~= loc_3 then
							break
						end
						FUNC_LIST[185](loc_0, loc_1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if load_i32(memory_at_0, 47412) ~= loc_3 then
							break
						end
						FUNC_LIST[186](loc_0, loc_1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if load_i32(memory_at_0, 47420) ~= loc_3 then
							break
						end
						FUNC_LIST[187](loc_0, loc_1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if load_i32(memory_at_0, 47428) ~= loc_3 then
							break
						end
						FUNC_LIST[188](loc_0, loc_1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_1 == 0 then
						break
					end
					if load_i32(memory_at_0, 47436) ~= loc_3 then
						break
					end
					reg_0 = FUNC_LIST[173](loc_0, loc_1, 1)
					loc_2 = reg_0
					FUNC_LIST[151](loc_0, load_i32(memory_at_0, loc_1 + 28), loc_2)
					FUNC_LIST[189](loc_0, load_i32(memory_at_0, loc_1 + 32), loc_2)
					reg_0 = FUNC_LIST[174](add_i32(loc_0, 52), add_i32(loc_1, 28))
					reg_1 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
					store_i32(memory_at_0, reg_0 + 4, reg_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				GLOBAL_LIST[0].value = add_i32(loc_6, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_8)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[153] = --[[ Luau::Compiler::alwaysTerminates(Luau::AstStat*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_3 = load_i32(memory_at_0, 47324)
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_1 + 4)
				while true do
					if loc_1 == 0 then
						break
					end
					if loc_2 ~= loc_3 then
						break
					end
					loc_2 = load_i32(memory_at_0, loc_1 + 32)
					if loc_2 == 0 then
						while true do
							loc_3 = 0
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_1 = load_i32(memory_at_0, sub_i32(add_i32(load_i32(memory_at_0, loc_1 + 28), shl_i32(loc_2, 2)), 4))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = 1
				if load_i32(memory_at_0, 47372) == loc_2 then
					break
				end
				if load_i32(memory_at_0, 47356) == loc_2 then
					break
				end
				if load_i32(memory_at_0, 47364) == loc_2 then
					break
				end
				loc_3 = 0
				if loc_1 == 0 then
					break
				end
				if load_i32(memory_at_0, 47332) ~= loc_2 then
					break
				end
				if load_i32(memory_at_0, loc_1 + 36) == 0 then
					break
				end
				reg_0 = FUNC_LIST[153](loc_0, load_i32(memory_at_0, loc_1 + 32))
				if reg_0 == 0 then
					break
				end
				loc_3 = load_i32(memory_at_0, 47324)
				loc_1 = load_i32(memory_at_0, loc_1 + 36)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			break
		end
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[154] = --[[ Luau::Compiler::closeLocals(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_10 = load_i32(memory_at_0, loc_0 + 232)
			loc_11 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 236), loc_10), 2)
			if loc_1 >= loc_11 then
				break
			end
			loc_7 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
			loc_12 = load_i32(memory_at_0, loc_0 + 52)
			loc_8 = load_i32(memory_at_0, loc_0 + 64)
			loc_13 = load_i32(memory_at_0, loc_0 + 60)
			loc_4 = 255
			while true do
				loc_2 = 0
				while true do
					if loc_13 == 0 then
						break
					end
					loc_6 = load_i32(memory_at_0, add_i32(shl_i32(loc_1, 2), loc_10))
					if loc_8 == loc_6 then
						break
					end
					loc_5 = bxor_i32(shr_u32(loc_6, 4), shr_u32(loc_6, 9))
					loc_3 = 0
					while true do
						loc_14 = band_i32(loc_5, loc_7)
						loc_2 = add_i32(mul_i32(loc_14, 12), loc_12)
						loc_5 = load_i32(memory_at_0, loc_2)
						if loc_6 == loc_5 then
							desired = 3
							break
						end
						loc_2 = 0
						if loc_5 == loc_8 then
							desired = 3
							break
						end
						loc_3 = add_i32(loc_3, 1)
						loc_5 = add_i32(loc_14, loc_3)
						if loc_3 <= loc_7 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_3 = (if loc_2 ~= 0 then add_i32(loc_2, 4) else 0)
				if load_i32_u8(memory_at_0, loc_3 + 2) ~= 0 then
					while true do
						loc_9 = 1
						loc_3 = load_i32_u8(memory_at_0, loc_3)
						loc_2 = band_i32(loc_4, 255)
						reg_0 = (if loc_2 > loc_3 then loc_3 else loc_2)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				else
					while true do
						reg_0 = loc_4
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				loc_4 = reg_0
				loc_1 = add_i32(loc_1, 1)
				if loc_11 ~= loc_1 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_9 == 0 then
				break
			end
			FUNC_LIST[96](load_i32(memory_at_0, loc_0), 11, band_i32(loc_4, 255), 0, 0)
			break
		end
		break
	end
end
FUNC_LIST[155] = --[[ Luau::Compiler::getUpval(Luau::AstLocal*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local desired
	while true do
		loc_7 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_7
		store_i32(memory_at_0, loc_7 + 12, loc_1)
		loc_4 = load_i32(memory_at_0, loc_0 + 248)
		loc_5 = load_i32(memory_at_0, loc_0 + 244)
		loc_6 = shr_i32(sub_i32(loc_4, loc_5), 2)
		while true do
			while true do
				while true do
					while true do
						if loc_4 ~= loc_5 then
							while true do
								loc_3 = (if loc_6 <= 1 then 1 else loc_6)
								while true do
									if loc_1 == load_i32(memory_at_0, add_i32(shl_i32(loc_2, 2), loc_5)) then
										desired = 4
										break
									end
									loc_2 = add_i32(loc_2, 1)
									if loc_3 ~= loc_2 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_6 >= 200 then
							desired = 3
							break
						end
						while true do
							if load_i32(memory_at_0, loc_0 + 100) == 0 then
								break
							end
							loc_8 = load_i32(memory_at_0, loc_0 + 104)
							if loc_1 == loc_8 then
								break
							end
							loc_5 = bxor_i32(shr_u32(loc_1, 4), shr_u32(loc_1, 9))
							loc_3 = sub_i32(load_i32(memory_at_0, loc_0 + 96), 1)
							loc_9 = load_i32(memory_at_0, loc_0 + 92)
							loc_2 = 0
							while true do
								loc_6 = band_i32(loc_3, loc_5)
								loc_10 = add_i32(mul_i32(loc_6, 12), loc_9)
								loc_5 = load_i32(memory_at_0, loc_10)
								if loc_5 ~= loc_1 then
									while true do
										if loc_5 == loc_8 then
											desired = 5
											break
										end
										loc_2 = add_i32(loc_2, 1)
										loc_5 = add_i32(loc_6, loc_2)
										if loc_2 <= loc_3 then
											desired = 6
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if load_i32_u8(memory_at_0, loc_10 + 8) == 0 then
								break
							end
							reg_0 = FUNC_LIST[174](add_i32(loc_0, 52), add_i32(loc_7, 12))
							store_i32_n8(memory_at_0, reg_0 + 2, 1)
							loc_4 = load_i32(memory_at_0, loc_0 + 248)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = add_i32(loc_0, 244)
						while true do
							if loc_4 ~= load_i32(memory_at_0, loc_0 + 252) then
								while true do
									store_i32(memory_at_0, loc_4, load_i32(memory_at_0, loc_7 + 12))
									loc_3 = add_i32(loc_4, 4)
									store_i32(memory_at_0, loc_0 + 248, loc_3)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_1 = load_i32(memory_at_0, loc_5)
							loc_2 = sub_i32(loc_4, loc_1)
							loc_8 = shr_i32(loc_2, 2)
							loc_3 = add_i32(loc_8, 1)
							if loc_3 >= 1073741824 then
								desired = 2
								break
							end
							loc_6 = shr_i32(loc_2, 1)
							loc_3 = (if loc_2 >= 2147483644 then 1073741823 else (if loc_3 < loc_6 then loc_6 else loc_3))
							if loc_3 ~= 0 then
								while true do
									if loc_3 >= 1073741824 then
										desired = 1
										break
									end
									reg_0 = FUNC_LIST[606](shl_i32(loc_3, 2))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = 0
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_6 = reg_0
							loc_2 = add_i32(loc_6, shl_i32(loc_8, 2))
							store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_7 + 12))
							loc_6 = add_i32(shl_i32(loc_3, 2), loc_6)
							loc_3 = add_i32(loc_2, 4)
							if loc_1 ~= loc_4 then
								while true do
									while true do
										loc_2 = sub_i32(loc_2, 4)
										loc_4 = sub_i32(loc_4, 4)
										store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_4))
										if loc_1 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										break
									end
									reg_0 = load_i32(memory_at_0, loc_5)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = loc_4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_4 = reg_0
							store_i32(memory_at_0, loc_0 + 252, loc_6)
							store_i32(memory_at_0, loc_0 + 248, loc_3)
							store_i32(memory_at_0, loc_0 + 244, loc_2)
							if loc_4 == 0 then
								break
							end
							FUNC_LIST[609](loc_4)
							loc_3 = load_i32(memory_at_0, loc_0 + 248)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = sub_i32(shr_u32(sub_i32(loc_3, load_i32(memory_at_0, loc_5)), 2), 1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					GLOBAL_LIST[0].value = add_i32(loc_7, 16)
					reg_0 = band_i32(loc_2, 255)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = load_i32(memory_at_0, loc_1)
				store_i32(memory_at_0, loc_7 + 4, 200)
				store_i32(memory_at_0, loc_7, loc_2)
				FUNC_LIST[147](add_i32(loc_1, 4), 5610, loc_7)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_5)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[156] = --[[ Luau::Compiler::popLocals(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_10 = load_i32(memory_at_0, loc_0 + 236)
		loc_7 = load_i32(memory_at_0, loc_0 + 232)
		loc_2 = shr_i32(sub_i32(loc_10, loc_7), 2)
		if loc_2 > loc_1 then
			while true do
				loc_8 = loc_1
				while true do
					loc_3 = 0
					while true do
						if load_i32(memory_at_0, loc_0 + 60) == 0 then
							break
						end
						loc_9 = load_i32(memory_at_0, add_i32(shl_i32(loc_8, 2), loc_7))
						loc_11 = load_i32(memory_at_0, loc_0 + 64)
						if loc_9 == loc_11 then
							break
						end
						loc_5 = bxor_i32(shr_u32(loc_9, 4), shr_u32(loc_9, 9))
						loc_6 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
						loc_12 = load_i32(memory_at_0, loc_0 + 52)
						loc_2 = 0
						while true do
							loc_13 = band_i32(loc_5, loc_6)
							loc_3 = add_i32(mul_i32(loc_13, 12), loc_12)
							loc_5 = load_i32(memory_at_0, loc_3)
							if loc_9 == loc_5 then
								desired = 3
								break
							end
							loc_3 = 0
							if loc_5 == loc_11 then
								desired = 3
								break
							end
							loc_2 = add_i32(loc_2, 1)
							loc_5 = add_i32(loc_13, loc_2)
							if loc_2 <= loc_6 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_2 = (if loc_3 ~= 0 then add_i32(loc_3, 4) else 0)
					store_i32_n8(memory_at_0, loc_2 + 1, 0)
					if ge_i32(load_i32(memory_at_0, loc_0 + 8), 2) then
						while true do
							reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
							loc_3 = reg_0
							loc_5 = load_i32(memory_at_0, loc_0)
							loc_6 = load_i32(memory_at_0, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_0 + 232), shl_i32(loc_8, 2))))
							store_i32(memory_at_0, loc_4 + 8, loc_6)
							reg_1 = FUNC_LIST[504](loc_6)
							store_i32(memory_at_0, loc_4 + 12, reg_1)
							loc_6 = load_i32(memory_at_0, loc_2 + 4)
							loc_2 = load_i32_u8(memory_at_0, loc_2)
							store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_4 + 8))
							FUNC_LIST[106](loc_5, loc_4, loc_2, loc_6, loc_3)
							loc_10 = load_i32(memory_at_0, loc_0 + 236)
							reg_0 = load_i32(memory_at_0, loc_0 + 232)
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					else
						while true do
							reg_0 = loc_7
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_7 = reg_0
					loc_8 = add_i32(loc_8, 1)
					loc_2 = shr_i32(sub_i32(loc_10, loc_7), 2)
					if loc_8 < loc_2 then
						continue
					end
					break
				end
				break
			end
		end
		while true do
			if loc_1 > loc_2 then
				while true do
					FUNC_LIST[190](add_i32(loc_0, 232), sub_i32(loc_1, loc_2))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_1 >= loc_2 then
				break
			end
			store_i32(memory_at_0, loc_0 + 236, add_i32(shl_i32(loc_1, 2), loc_7))
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[157] = --[[ Luau::DenseHashMap<Luau::AstExprFunction*, Luau::Compiler::Function, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprFunction*>>::operator[](Luau::AstExprFunction* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			loc_6 = load_i32(memory_at_0, loc_0 + 4)
			if loc_3 < shr_u32(mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_3 == 0 then
					break
				end
				loc_4 = load_i32(memory_at_0, loc_1)
				loc_8 = load_i32(memory_at_0, loc_0 + 12)
				if loc_4 == loc_8 then
					break
				end
				loc_2 = bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9))
				loc_7 = sub_i32(loc_6, 1)
				loc_9 = load_i32(memory_at_0, loc_0)
				loc_3 = 0
				while true do
					loc_5 = band_i32(loc_2, loc_7)
					loc_2 = load_i32(memory_at_0, add_i32(mul_i32(loc_5, 40), loc_9))
					if loc_4 == loc_2 then
						desired = 1
						break
					end
					if loc_2 == loc_8 then
						desired = 2
						break
					end
					loc_3 = add_i32(loc_3, 1)
					loc_2 = add_i32(loc_5, loc_3)
					if loc_3 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[191](loc_0)
			loc_6 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_8 = load_i32(memory_at_0, loc_0)
				loc_6 = sub_i32(loc_6, 1)
				loc_5 = load_i32(memory_at_0, loc_1)
				loc_3 = band_i32(loc_6, bxor_i32(shr_u32(loc_5, 4), shr_u32(loc_5, 9)))
				loc_4 = add_i32(loc_8, mul_i32(loc_3, 40))
				loc_2 = load_i32(memory_at_0, loc_4)
				loc_9 = load_i32(memory_at_0, loc_0 + 12)
				if loc_2 == loc_9 then
					break
				end
				if loc_2 == loc_5 then
					desired = 1
					break
				end
				loc_2 = 0
				while true do
					loc_2 = add_i32(loc_2, 1)
					loc_3 = band_i32(loc_6, add_i32(loc_3, loc_2))
					loc_4 = add_i32(mul_i32(loc_3, 40), loc_8)
					loc_7 = load_i32(memory_at_0, loc_4)
					if loc_9 == loc_7 then
						desired = 2
						break
					end
					if loc_5 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_4, loc_5)
			store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = add_i32(loc_4, 8)
		break
	end
	return reg_0
end
FUNC_LIST[158] = --[[ void std::__2::vector<Luau::AstLocal*, std::__2::allocator<Luau::AstLocal*>>::__assign_with_size[abi:ue170004]<Luau::AstLocal**, Luau::AstLocal**>(Luau::AstLocal**, Luau::AstLocal**, long) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			loc_5 = load_i32(memory_at_0, loc_0 + 8)
			loc_4 = load_i32(memory_at_0, loc_0)
			if shr_i32(sub_i32(loc_5, loc_4), 2) >= loc_3 then
				while true do
					loc_6 = load_i32(memory_at_0, loc_0 + 4)
					loc_5 = sub_i32(loc_6, loc_4)
					if shr_i32(loc_5, 2) < loc_3 then
						while true do
							loc_3 = add_i32(loc_1, loc_5)
							if loc_4 ~= loc_6 then
								while true do
									reg_0 = FUNC_LIST[478](loc_4, loc_1, loc_5)
									reg_0 = load_i32(memory_at_0, loc_0 + 4)
									break
								end
								if desired then
									break
								end
							else
								while true do
									reg_0 = loc_4
									break
								end
								if desired then
									break
								end
							end
							loc_4 = reg_0
							loc_1 = sub_i32(loc_2, loc_3)
							if loc_2 ~= loc_3 then
								while true do
									reg_0 = FUNC_LIST[478](loc_4, loc_3, loc_1)
									break
								end
								if desired then
									break
								end
							end
							store_i32(memory_at_0, loc_0 + 4, add_i32(loc_1, loc_4))
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					loc_3 = sub_i32(loc_2, loc_1)
					if loc_1 ~= loc_2 then
						while true do
							reg_0 = FUNC_LIST[478](loc_4, loc_1, loc_3)
							break
						end
						if desired then
							break
						end
					end
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_4 ~= 0 then
				while true do
					store_i32(memory_at_0, loc_0 + 4, loc_4)
					FUNC_LIST[609](loc_4)
					store_i32(memory_at_0, loc_0 + 8, 0)
					store_i64(memory_at_0, loc_0, i64_ZERO)
					reg_0 = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_5
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_5 = reg_0
			while true do
				if loc_3 >= 1073741824 then
					break
				end
				loc_4 = shr_i32(loc_5, 1)
				loc_4 = (if loc_5 >= 2147483644 then 1073741823 else (if loc_3 < loc_4 then loc_4 else loc_3))
				if loc_4 >= 1073741824 then
					break
				end
				loc_3 = shl_i32(loc_4, 2)
				reg_1 = FUNC_LIST[606](loc_3)
				loc_4 = reg_1
				store_i32(memory_at_0, loc_0 + 4, loc_4)
				store_i32(memory_at_0, loc_0, loc_4)
				store_i32(memory_at_0, loc_0 + 8, add_i32(loc_3, loc_4))
				loc_3 = sub_i32(loc_2, loc_1)
				if loc_1 ~= loc_2 then
					while true do
						reg_0 = FUNC_LIST[477](loc_4, loc_1, loc_3)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32(memory_at_0, loc_0 + 4, add_i32(loc_3, loc_4))
		break
	end
end
FUNC_LIST[159] = --[[ Luau::AstVisitor::~AstVisitor() ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[160] = --[[ Luau::compile(std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>> const&, Luau::CompileOptions const&, Luau::ParseOptions const&, Luau::BytecodeEncoder*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 576)
		GLOBAL_LIST[0].value = loc_5
		reg_1 = FUNC_LIST[351](add_i32(loc_5, 568))
		loc_8 = reg_1
		reg_0 = FUNC_LIST[360](add_i32(loc_5, 536), loc_8)
		loc_7 = reg_0
		loc_9 = load_i32(memory_at_0, loc_1)
		loc_10 = load_i32(memory_at_0, loc_1 + 4)
		loc_6 = load_i32_i8(memory_at_0, loc_1 + 11)
		loc_3 = load_i32_u16(memory_at_0, loc_3)
		store_i32_n16(memory_at_0, loc_5 + 22, loc_3)
		store_i32_n16(memory_at_0, loc_5 + 490, loc_3)
		loc_3 = (if lt_i32(loc_6, 0) then 1 else 0)
		FUNC_LIST[392](add_i32(loc_5, 492), (if loc_3 ~= 0 then loc_9 else loc_1), (if loc_3 ~= 0 then loc_10 else loc_6), loc_7, loc_8, add_i32(loc_5, 22))
		while true do
			loc_1 = load_i32(memory_at_0, loc_5 + 512)
			if loc_1 ~= load_i32(memory_at_0, loc_5 + 516) then
				while true do
					reg_0 = FUNC_LIST[389](loc_1)
					loc_6 = load_i32(memory_at_0, reg_0)
					reg_1 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 8)](loc_1)
					store_i32(memory_at_0, loc_5 + 4, reg_1)
					store_i32(memory_at_0, loc_5, add_i32(loc_6, 1))
					FUNC_LIST[473](add_i32(loc_5, 24), 2825, loc_5)
					FUNC_LIST[121](loc_0, add_i32(loc_5, 24))
					if ge_i32(load_i32_i8(memory_at_0, loc_5 + 35), 0) then
						desired = 1
						break
					end
					FUNC_LIST[609](load_i32(memory_at_0, loc_5 + 24))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[65](add_i32(loc_5, 24), loc_4)
			loc_1 = reg_0
			FUNC_LIST[148](loc_1, add_i32(loc_5, 492), loc_7, loc_2)
			while true do
				if ge_i32(load_i32_i8(memory_at_0, loc_1 + 423), 0) then
					while true do
						loc_6 = add_i32(loc_1, 412)
						store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_6))
						store_i32(memory_at_0, loc_0 + 8, load_i32(memory_at_0, loc_6 + 8))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[671](loc_0, load_i32(memory_at_0, loc_1 + 412), load_i32(memory_at_0, loc_1 + 416))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[161](loc_1)
			break
		end
		loc_1 = load_i32(memory_at_0, loc_5 + 524)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_5 + 528, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_6 = load_i32(memory_at_0, loc_5 + 512)
		if loc_6 ~= 0 then
			while true do
				loc_0 = loc_6
				loc_1 = load_i32(memory_at_0, loc_5 + 516)
				if loc_1 ~= loc_6 then
					while true do
						while true do
							loc_1 = sub_i32(loc_1, 32)
							reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1))](loc_1)
							if loc_1 ~= loc_6 then
								continue
							end
							break
						end
						reg_0 = load_i32(memory_at_0, loc_5 + 512)
						break
					end
				else
					while true do
						reg_0 = loc_0
						break
					end
				end
				loc_0 = reg_0
				store_i32(memory_at_0, loc_5 + 516, loc_6)
				FUNC_LIST[609](loc_0)
				break
			end
		end
		loc_6 = load_i32(memory_at_0, loc_5 + 500)
		if loc_6 ~= 0 then
			while true do
				loc_0 = loc_6
				loc_1 = load_i32(memory_at_0, loc_5 + 504)
				if loc_1 ~= loc_6 then
					while true do
						while true do
							if lt_i32(load_i32_i8(memory_at_0, sub_i32(loc_1, 1)), 0) then
								while true do
									FUNC_LIST[609](load_i32(memory_at_0, sub_i32(loc_1, 12)))
									break
								end
								if desired then
									if desired == 3 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_1 = sub_i32(loc_1, 32)
							if loc_6 ~= loc_1 then
								continue
							end
							break
						end
						reg_0 = load_i32(memory_at_0, loc_5 + 500)
						break
					end
				else
					while true do
						reg_0 = loc_0
						break
					end
				end
				loc_0 = reg_0
				store_i32(memory_at_0, loc_5 + 504, loc_6)
				FUNC_LIST[609](loc_0)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_7)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				break
			end
		end
		reg_0 = FUNC_LIST[352](loc_8)
		GLOBAL_LIST[0].value = add_i32(loc_5, 576)
		break
	end
end
FUNC_LIST[161] = --[[ Luau::BytecodeBuilder::~BytecodeBuilder() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		loc_2 = load_i32(memory_at_0, loc_0 + 440)
		if loc_2 ~= 0 then
			while true do
				loc_3 = loc_2
				loc_1 = load_i32(memory_at_0, loc_0 + 444)
				if loc_1 ~= loc_2 then
					while true do
						while true do
							if lt_i32(load_i32_i8(memory_at_0, sub_i32(loc_1, 1)), 0) then
								while true do
									FUNC_LIST[609](load_i32(memory_at_0, sub_i32(loc_1, 12)))
									break
								end
							end
							loc_1 = sub_i32(loc_1, 16)
							if loc_2 ~= loc_1 then
								continue
							end
							break
						end
						reg_0 = load_i32(memory_at_0, loc_0 + 440)
						break
					end
				else
					while true do
						reg_0 = loc_3
						break
					end
				end
				loc_3 = reg_0
				store_i32(memory_at_0, loc_0 + 444, loc_2)
				FUNC_LIST[609](loc_3)
				break
			end
		end
		loc_3 = load_i32(memory_at_0, loc_0 + 428)
		if loc_3 ~= 0 then
			while true do
				loc_2 = load_i32(memory_at_0, loc_0 + 432)
				loc_1 = loc_3
				if loc_2 ~= loc_1 then
					while true do
						while true do
							loc_1 = sub_i32(loc_2, 12)
							if lt_i32(load_i32_i8(memory_at_0, sub_i32(loc_2, 1)), 0) then
								while true do
									FUNC_LIST[609](load_i32(memory_at_0, loc_1))
									break
								end
							end
							loc_2 = loc_1
							if loc_1 ~= loc_3 then
								continue
							end
							break
						end
						reg_0 = load_i32(memory_at_0, loc_0 + 428)
						break
					end
				else
					while true do
						reg_0 = loc_1
						break
					end
				end
				loc_1 = reg_0
				store_i32(memory_at_0, loc_0 + 432, loc_3)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		if lt_i32(load_i32_i8(memory_at_0, loc_0 + 423), 0) then
			while true do
				FUNC_LIST[609](load_i32(memory_at_0, loc_0 + 412))
				break
			end
		end
		if lt_i32(load_i32_i8(memory_at_0, loc_0 + 407), 0) then
			while true do
				FUNC_LIST[609](load_i32(memory_at_0, loc_0 + 396))
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 384)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 388, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 372)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 376, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 348)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_0 + 348, i64_ZERO)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 336)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 340, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 324)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 328, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 300)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_0 + 300, i64_ZERO)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 152)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_0 + 152, i64_ZERO)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 104)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_0 + 104, i64_ZERO)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 84)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 88, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 72)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 76, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 60)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 64, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 48)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 52, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 36)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 40, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 24)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 28, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_2 = load_i32(memory_at_0, loc_0)
		if loc_2 ~= 0 then
			while true do
				loc_3 = loc_2
				loc_1 = load_i32(memory_at_0, loc_0 + 4)
				if loc_1 ~= loc_2 then
					while true do
						loc_3 = add_i32(loc_0, 8)
						while true do
							loc_1 = sub_i32(loc_1, 72)
							FUNC_LIST[162](loc_3, loc_1)
							if loc_1 ~= loc_2 then
								continue
							end
							break
						end
						reg_0 = load_i32(memory_at_0, loc_0)
						break
					end
				else
					while true do
						reg_0 = loc_3
						break
					end
				end
				loc_3 = reg_0
				store_i32(memory_at_0, loc_0 + 4, loc_2)
				FUNC_LIST[609](loc_3)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[162] = --[[ std::__2::allocator<Luau::BytecodeBuilder::Function>::destroy[abi:ue170004](Luau::BytecodeBuilder::Function*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		if lt_i32(load_i32_i8(memory_at_0, loc_1 + 71), 0) then
			while true do
				FUNC_LIST[609](load_i32(memory_at_0, loc_1 + 60))
				break
			end
		end
		loc_2 = load_i32(memory_at_0, loc_1 + 48)
		if loc_2 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_1 + 52, loc_2)
				FUNC_LIST[609](loc_2)
				break
			end
		end
		if lt_i32(load_i32_i8(memory_at_0, loc_1 + 47), 0) then
			while true do
				FUNC_LIST[609](load_i32(memory_at_0, loc_1 + 36))
				break
			end
		end
		if lt_i32(load_i32_i8(memory_at_0, loc_1 + 35), 0) then
			while true do
				FUNC_LIST[609](load_i32(memory_at_0, loc_1 + 24))
				break
			end
		end
		if lt_i32(load_i32_i8(memory_at_0, loc_1 + 11), 0) then
			while true do
				FUNC_LIST[609](load_i32(memory_at_0, loc_1))
				break
			end
		end
		break
	end
end
FUNC_LIST[163] = --[[ std::__throw_bad_array_new_length[abi:ue170004]() ]] function()
	local reg_0
	while true do
		reg_0 = FUNC_LIST[538](4)
		reg_0 = FUNC_LIST[711](reg_0)
		FUNC_LIST[0](reg_0, 46864, 95)
		error("out of code bounds")
	end
end
FUNC_LIST[164] = --[[ Luau::AstVisitor::visit(Luau::AstNode*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[165] = --[[ Luau::AstVisitor::visit(Luau::AstExpr*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0) + 8)](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[166] = --[[ Luau::AstVisitor::visit(Luau::AstExprGroup*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0) + 12)](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[167] = --[[ Luau::Compiler::FenvVisitor::visit(Luau::AstExprGlobal*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		while true do
			loc_1 = load_i32(memory_at_0, loc_1 + 24)
			if loc_1 == 0 then
				break
			end
			reg_0 = FUNC_LIST[544](loc_1, 1226)
			if reg_0 == 0 then
				while true do
					store_i32_n8(memory_at_0, load_i32(memory_at_0, loc_0 + 4), 1)
					break
				end
			end
			reg_0 = FUNC_LIST[544](loc_1, 1218)
			if reg_0 ~= 0 then
				break
			end
			store_i32_n8(memory_at_0, load_i32(memory_at_0, loc_0 + 8), 1)
			break
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[168] = --[[ Luau::AstVisitor::visit(Luau::AstStatBlock*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0) + 92)](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[169] = --[[ Luau::AstVisitor::visit(Luau::AstType*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[170] = --[[ Luau::AstVisitor::visit(Luau::AstTypeReference*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0) + 176)](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[171] = --[[ Luau::AstVisitor::visit(Luau::AstTypePackExplicit*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0) + 216)](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[172] = --[[ Luau::Compiler::FunctionVisitor::visit(Luau::AstExprFunction*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		loc_2 = load_i32(memory_at_0, loc_1 + 92)
		TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		loc_7 = load_i32(memory_at_0, loc_1 + 48)
		if loc_7 ~= 0 then
			while true do
				loc_8 = load_i32(memory_at_0, loc_1 + 44)
				loc_9 = band_i32(sub_i32(loc_7, 1), 1073741823)
				loc_3 = load_i32_u8(memory_at_0, loc_0 + 12)
				while true do
					loc_5 = band_i32(loc_7, 3)
					if loc_5 == 0 then
						while true do
							loc_2 = loc_8
							desired = 2
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					loc_6 = loc_8
					while true do
						loc_3 = bor_i32((if load_i32(memory_at_0, load_i32(memory_at_0, loc_6) + 32) ~= 0 then 1 else 0), loc_3)
						loc_2 = add_i32(loc_6, 4)
						loc_6 = loc_2
						loc_4 = add_i32(loc_4, 1)
						if loc_5 ~= loc_4 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					break
				end
				if loc_9 > 2 then
					while true do
						loc_6 = add_i32(shl_i32(loc_7, 2), loc_8)
						while true do
							loc_3 = bor_i32(bor_i32(bor_i32(bor_i32((if load_i32(memory_at_0, load_i32(memory_at_0, loc_2) + 32) ~= 0 then 1 else 0), loc_3), (if load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 4) + 32) ~= 0 then 1 else 0)), (if load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 8) + 32) ~= 0 then 1 else 0)), (if load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 12) + 32) ~= 0 then 1 else 0))
							loc_2 = add_i32(loc_2, 16)
							if loc_6 ~= loc_2 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						break
					end
				end
				store_i32_n8(memory_at_0, loc_0 + 12, loc_3)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_4 = load_i32(memory_at_0, loc_0 + 8)
		loc_2 = load_i32(memory_at_0, loc_4 + 4)
		if loc_2 ~= load_i32(memory_at_0, loc_4 + 8) then
			while true do
				store_i32(memory_at_0, loc_2, loc_1)
				store_i32(memory_at_0, loc_4 + 4, add_i32(loc_2, 4))
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_6 = load_i32(memory_at_0, loc_4)
			loc_3 = sub_i32(loc_2, loc_6)
			loc_7 = shr_i32(loc_3, 2)
			loc_5 = add_i32(loc_7, 1)
			if loc_5 < 1073741824 then
				while true do
					loc_0 = shr_i32(loc_3, 1)
					loc_5 = (if loc_3 >= 2147483644 then 1073741823 else (if loc_0 > loc_5 then loc_0 else loc_5))
					if loc_5 ~= 0 then
						while true do
							if loc_5 >= 1073741824 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](shl_i32(loc_5, 2))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							break
						end
					end
					loc_0 = reg_0
					loc_3 = add_i32(loc_0, shl_i32(loc_7, 2))
					store_i32(memory_at_0, loc_3, loc_1)
					loc_5 = add_i32(shl_i32(loc_5, 2), loc_0)
					loc_1 = add_i32(loc_3, 4)
					if loc_2 ~= loc_6 then
						while true do
							while true do
								loc_3 = sub_i32(loc_3, 4)
								loc_2 = sub_i32(loc_2, 4)
								store_i32(memory_at_0, loc_3, load_i32(memory_at_0, loc_2))
								if loc_2 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = load_i32(memory_at_0, loc_4)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
						if desired then
							break
						end
					end
					loc_2 = reg_0
					store_i32(memory_at_0, loc_4 + 8, loc_5)
					store_i32(memory_at_0, loc_4 + 4, loc_1)
					store_i32(memory_at_0, loc_4, loc_3)
					if loc_2 ~= 0 then
						while true do
							FUNC_LIST[609](loc_2)
							break
						end
						if desired then
							break
						end
					end
					reg_0 = 0
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[40](loc_4)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[173] = --[[ Luau::Compiler::allocReg(Luau::AstNode*, unsigned int) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		loc_5 = load_i32(memory_at_0, loc_0 + 220)
		loc_4 = add_i32(loc_2, loc_5)
		if loc_4 >= 256 then
			while true do
				store_i32(memory_at_0, loc_3 + 4, 255)
				store_i32(memory_at_0, loc_3, loc_2)
				FUNC_LIST[147](add_i32(loc_1, 8), 5468, loc_3)
				error("out of code bounds")
			end
		end
		store_i32(memory_at_0, loc_0 + 220, loc_4)
		loc_2 = load_i32(memory_at_0, loc_0 + 224)
		store_i32(memory_at_0, loc_0 + 224, (if loc_2 > loc_4 then loc_2 else loc_4))
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		reg_0 = band_i32(loc_5, 255)
		break
	end
	return reg_0
end
FUNC_LIST[174] = --[[ Luau::DenseHashMap<Luau::AstLocal*, Luau::Compiler::Local, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>::operator[](Luau::AstLocal* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			loc_6 = load_i32(memory_at_0, loc_0 + 4)
			if loc_3 < shr_u32(mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_3 == 0 then
					break
				end
				loc_4 = load_i32(memory_at_0, loc_1)
				loc_8 = load_i32(memory_at_0, loc_0 + 12)
				if loc_4 == loc_8 then
					break
				end
				loc_2 = bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9))
				loc_7 = sub_i32(loc_6, 1)
				loc_9 = load_i32(memory_at_0, loc_0)
				loc_3 = 0
				while true do
					loc_5 = band_i32(loc_2, loc_7)
					loc_2 = load_i32(memory_at_0, add_i32(mul_i32(loc_5, 12), loc_9))
					if loc_4 == loc_2 then
						desired = 1
						break
					end
					if loc_2 == loc_8 then
						desired = 2
						break
					end
					loc_3 = add_i32(loc_3, 1)
					loc_2 = add_i32(loc_5, loc_3)
					if loc_3 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[192](loc_0)
			loc_6 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_8 = load_i32(memory_at_0, loc_0)
				loc_6 = sub_i32(loc_6, 1)
				loc_5 = load_i32(memory_at_0, loc_1)
				loc_3 = band_i32(loc_6, bxor_i32(shr_u32(loc_5, 4), shr_u32(loc_5, 9)))
				loc_4 = add_i32(loc_8, mul_i32(loc_3, 12))
				loc_2 = load_i32(memory_at_0, loc_4)
				loc_9 = load_i32(memory_at_0, loc_0 + 12)
				if loc_2 == loc_9 then
					break
				end
				if loc_2 == loc_5 then
					desired = 1
					break
				end
				loc_2 = 0
				while true do
					loc_2 = add_i32(loc_2, 1)
					loc_3 = band_i32(loc_6, add_i32(loc_3, loc_2))
					loc_4 = add_i32(mul_i32(loc_3, 12), loc_8)
					loc_7 = load_i32(memory_at_0, loc_4)
					if loc_9 == loc_7 then
						desired = 2
						break
					end
					if loc_5 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_4, loc_5)
			store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = add_i32(loc_4, 4)
		break
	end
	return reg_0
end
FUNC_LIST[175] = --[[ Luau::Compiler::compileStatIf(Luau::AstStatIf*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_6 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		loc_4 = load_i32(memory_at_0, loc_1 + 28)
		while true do
			while true do
				while true do
					loc_12 = load_i32(memory_at_0, loc_0 + 120)
					if loc_12 == 0 then
						break
					end
					loc_8 = load_i32(memory_at_0, loc_0 + 124)
					if loc_4 == loc_8 then
						break
					end
					loc_3 = bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9))
					loc_5 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
					loc_9 = load_i32(memory_at_0, loc_0 + 112)
					while true do
						loc_7 = band_i32(loc_3, loc_5)
						loc_11 = add_i32(shl_i32(loc_7, 5), loc_9)
						loc_3 = load_i32(memory_at_0, loc_11)
						if loc_3 ~= loc_4 then
							while true do
								if loc_3 == loc_8 then
									desired = 3
									break
								end
								loc_2 = add_i32(loc_2, 1)
								loc_3 = add_i32(loc_7, loc_2)
								if loc_2 <= loc_5 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 0, }
								end)()
							end
							temp = br_map[1][sub_i32(load_i32(memory_at_0, loc_11 + 8), 1)] or 2
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if load_i32_u8(memory_at_0, loc_11 + 16) ~= 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = load_i32(memory_at_0, loc_1 + 36)
					if loc_2 == 0 then
						desired = 2
						break
					end
					FUNC_LIST[152](loc_0, loc_2)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if load_i32(memory_at_0, loc_4 + 4) ~= load_i32(memory_at_0, 47292) then
						break
					end
					if loc_4 == 0 then
						break
					end
					if load_i32(memory_at_0, loc_4 + 24) ~= 14 then
						break
					end
					if loc_12 == 0 then
						break
					end
					loc_9 = load_i32(memory_at_0, loc_0 + 124)
					loc_8 = load_i32(memory_at_0, loc_4 + 32)
					if loc_9 == loc_8 then
						break
					end
					loc_3 = bxor_i32(shr_u32(loc_8, 4), shr_u32(loc_8, 9))
					loc_5 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
					loc_11 = load_i32(memory_at_0, loc_0 + 112)
					loc_2 = 0
					while true do
						loc_7 = band_i32(loc_3, loc_5)
						loc_12 = add_i32(shl_i32(loc_7, 5), loc_11)
						loc_3 = load_i32(memory_at_0, loc_12)
						if loc_3 ~= loc_8 then
							while true do
								if loc_3 == loc_9 then
									desired = 3
									break
								end
								loc_2 = add_i32(loc_2, 1)
								loc_3 = add_i32(loc_7, loc_2)
								if loc_2 <= loc_5 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							if not br_map[2] then
								br_map[2] = (function()
									return { [0] = 1, 0, }
								end)()
							end
							temp = br_map[2][sub_i32(load_i32(memory_at_0, loc_12 + 8), 1)] or 2
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if load_i32_u8(memory_at_0, loc_12 + 16) ~= 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[182](loc_0, load_i32(memory_at_0, loc_4 + 28))
					loc_2 = load_i32(memory_at_0, loc_1 + 36)
					if loc_2 == 0 then
						desired = 2
						break
					end
					FUNC_LIST[152](loc_0, loc_2)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_13 = load_i32(memory_at_0, loc_1 + 32)
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												loc_16 = load_i32(memory_at_0, loc_1 + 36)
												if loc_16 ~= 0 then
													break
												end
												loc_2 = load_i32(memory_at_0, loc_13 + 4)
												while true do
													while true do
														if loc_13 == 0 then
															break
														end
														if load_i32(memory_at_0, 47324) ~= loc_2 then
															break
														end
														if load_i32(memory_at_0, loc_13 + 32) ~= 1 then
															desired = 10
															break
														end
														if load_i32(memory_at_0, load_i32(memory_at_0, load_i32(memory_at_0, loc_13 + 28)) + 4) ~= load_i32(memory_at_0, 47356) then
															desired = 10
															break
														end
														desired = 11
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													if load_i32(memory_at_0, 47356) ~= loc_2 then
														desired = 10
														break
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_17 = load_i32(memory_at_0, loc_0 + 232)
												loc_14 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 236), loc_17), 2)
												loc_10 = load_i32(memory_at_0, sub_i32(load_i32(memory_at_0, loc_0 + 272), 12))
												if loc_14 > loc_10 then
													while true do
														loc_7 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
														loc_12 = load_i32(memory_at_0, loc_0 + 52)
														loc_11 = load_i32(memory_at_0, loc_0 + 64)
														loc_18 = load_i32(memory_at_0, loc_0 + 60)
														loc_15 = 1
														while true do
															loc_3 = 0
															while true do
																if loc_18 == 0 then
																	break
																end
																loc_9 = load_i32(memory_at_0, add_i32(shl_i32(loc_10, 2), loc_17))
																if loc_11 == loc_9 then
																	break
																end
																loc_5 = bxor_i32(shr_u32(loc_9, 4), shr_u32(loc_9, 9))
																loc_2 = 0
																while true do
																	loc_8 = band_i32(loc_5, loc_7)
																	loc_3 = add_i32(mul_i32(loc_8, 12), loc_12)
																	loc_5 = load_i32(memory_at_0, loc_3)
																	if loc_9 == loc_5 then
																		desired = 13
																		break
																	end
																	loc_3 = 0
																	if loc_5 == loc_11 then
																		desired = 13
																		break
																	end
																	loc_2 = add_i32(loc_2, 1)
																	loc_5 = add_i32(loc_8, loc_2)
																	if loc_2 <= loc_7 then
																		continue
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																	continue
																end
																break
															end
															if load_i32_u8(memory_at_0, (if loc_3 ~= 0 then add_i32(loc_3, 4) else 0) + 2) == 0 then
																while true do
																	loc_10 = add_i32(loc_10, 1)
																	loc_15 = (if loc_14 > loc_10 then 1 else 0)
																	if loc_10 ~= loc_14 then
																		desired = 12
																		break
																	end
																	break
																end
																if desired then
																	if desired == 12 then
																		desired = nil
																		continue
																	end
																	break
																end
															end
															break
														end
														if desired then
															break
														end
														if band_i32(loc_15, 1) ~= 0 then
															desired = 10
															break
														end
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												store_i32(memory_at_0, loc_6 + 12, 0)
												store_i64(memory_at_0, loc_6 + 4, i64_ZERO)
												FUNC_LIST[193](loc_0, loc_4, 0, add_i32(loc_6, 4), 1)
												loc_7 = load_i32(memory_at_0, loc_6 + 4)
												loc_11 = load_i32(memory_at_0, loc_6 + 8)
												if loc_7 == loc_11 then
													desired = 3
													break
												end
												loc_10 = add_i32(loc_0, 256)
												while true do
													loc_8 = load_i32(memory_at_0, loc_7)
													while true do
														loc_2 = load_i32(memory_at_0, loc_0 + 260)
														loc_3 = load_i32(memory_at_0, loc_0 + 264)
														if loc_2 < loc_3 then
															while true do
																store_i64(memory_at_0, loc_2, shl_i64(extend_i64_u32(loc_8), i64_from_u32(32, 0)))
																store_i32(memory_at_0, loc_0 + 260, add_i32(loc_2, 8))
																desired = 12
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														loc_5 = load_i32(memory_at_0, loc_10)
														loc_12 = shr_i32(sub_i32(loc_2, loc_5), 3)
														loc_4 = add_i32(loc_12, 1)
														if loc_4 >= 536870912 then
															desired = 9
															break
														end
														loc_3 = sub_i32(loc_3, loc_5)
														loc_9 = shr_i32(loc_3, 2)
														loc_4 = (if loc_3 >= 2147483640 then 536870911 else (if loc_4 < loc_9 then loc_9 else loc_4))
														if loc_4 ~= 0 then
															while true do
																if loc_4 >= 536870912 then
																	desired = 8
																	break
																end
																reg_0 = FUNC_LIST[606](shl_i32(loc_4, 3))
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														else
															while true do
																reg_0 = 0
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														loc_9 = reg_0
														loc_3 = add_i32(loc_9, shl_i32(loc_12, 3))
														store_i64(memory_at_0, loc_3, shl_i64(extend_i64_u32(loc_8), i64_from_u32(32, 0)))
														loc_8 = add_i32(shl_i32(loc_4, 3), loc_9)
														loc_4 = add_i32(loc_3, 8)
														if loc_2 ~= loc_5 then
															while true do
																while true do
																	loc_3 = sub_i32(loc_3, 8)
																	loc_2 = sub_i32(loc_2, 8)
																	store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2))
																	if loc_2 ~= loc_5 then
																		continue
																	end
																	break
																end
																if desired then
																	break
																end
																reg_0 = load_i32(memory_at_0, loc_10)
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														else
															while true do
																reg_0 = loc_2
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														loc_2 = reg_0
														store_i32(memory_at_0, loc_0 + 264, loc_8)
														store_i32(memory_at_0, loc_0 + 260, loc_4)
														store_i32(memory_at_0, loc_0 + 256, loc_3)
														if loc_2 == 0 then
															break
														end
														FUNC_LIST[609](loc_2)
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
															continue
														end
														break
													end
													loc_7 = add_i32(loc_7, 4)
													if loc_7 ~= loc_11 then
														continue
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												desired = 4
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											while true do
												if load_i32(memory_at_0, loc_13 + 32) ~= 1 then
													break
												end
												if loc_16 ~= 0 then
													break
												end
												loc_2 = load_i32(memory_at_0, load_i32(memory_at_0, loc_13 + 28))
												loc_18 = (if load_i32(memory_at_0, loc_2 + 4) == load_i32(memory_at_0, 47364) then loc_2 else 0)
												if loc_18 == 0 then
													break
												end
												loc_15 = load_i32(memory_at_0, loc_0 + 232)
												loc_13 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 236), loc_15), 2)
												loc_17 = load_i32(memory_at_0, loc_0 + 272)
												loc_10 = load_i32(memory_at_0, sub_i32(loc_17, 8))
												if loc_13 > loc_10 then
													while true do
														loc_7 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
														loc_12 = load_i32(memory_at_0, loc_0 + 52)
														loc_11 = load_i32(memory_at_0, loc_0 + 64)
														loc_16 = load_i32(memory_at_0, loc_0 + 60)
														loc_14 = 1
														while true do
															loc_3 = 0
															while true do
																if loc_16 == 0 then
																	break
																end
																loc_9 = load_i32(memory_at_0, add_i32(shl_i32(loc_10, 2), loc_15))
																if loc_11 == loc_9 then
																	break
																end
																loc_5 = bxor_i32(shr_u32(loc_9, 4), shr_u32(loc_9, 9))
																loc_2 = 0
																while true do
																	loc_8 = band_i32(loc_5, loc_7)
																	loc_3 = add_i32(mul_i32(loc_8, 12), loc_12)
																	loc_5 = load_i32(memory_at_0, loc_3)
																	if loc_9 == loc_5 then
																		desired = 13
																		break
																	end
																	loc_3 = 0
																	if loc_5 == loc_11 then
																		desired = 13
																		break
																	end
																	loc_2 = add_i32(loc_2, 1)
																	loc_5 = add_i32(loc_8, loc_2)
																	if loc_2 <= loc_7 then
																		continue
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																	continue
																end
																break
															end
															if load_i32_u8(memory_at_0, (if loc_3 ~= 0 then add_i32(loc_3, 4) else 0) + 2) == 0 then
																while true do
																	loc_10 = add_i32(loc_10, 1)
																	loc_14 = (if loc_13 > loc_10 then 1 else 0)
																	if loc_10 ~= loc_13 then
																		desired = 12
																		break
																	end
																	break
																end
																if desired then
																	if desired == 12 then
																		desired = nil
																		continue
																	end
																	break
																end
															end
															break
														end
														if desired then
															break
														end
														if band_i32(loc_14, 1) ~= 0 then
															desired = 10
															break
														end
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_2 = sub_i32(loc_17, 4)
												if load_i32(memory_at_0, loc_2) == 0 then
													while true do
														store_i32(memory_at_0, loc_2, loc_18)
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												store_i32(memory_at_0, loc_6 + 12, 0)
												store_i64(memory_at_0, loc_6 + 4, i64_ZERO)
												FUNC_LIST[193](loc_0, loc_4, 0, add_i32(loc_6, 4), 1)
												loc_7 = load_i32(memory_at_0, loc_6 + 4)
												loc_11 = load_i32(memory_at_0, loc_6 + 8)
												if loc_7 == loc_11 then
													desired = 5
													break
												end
												loc_10 = add_i32(loc_0, 256)
												while true do
													loc_8 = load_i32(memory_at_0, loc_7)
													while true do
														loc_2 = load_i32(memory_at_0, loc_0 + 260)
														loc_3 = load_i32(memory_at_0, loc_0 + 264)
														if loc_2 < loc_3 then
															while true do
																store_i64(memory_at_0, loc_2, bor_i64(shl_i64(extend_i64_u32(loc_8), i64_from_u32(32, 0)), i64_ONE))
																store_i32(memory_at_0, loc_0 + 260, add_i32(loc_2, 8))
																desired = 12
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														loc_5 = load_i32(memory_at_0, loc_10)
														loc_12 = shr_i32(sub_i32(loc_2, loc_5), 3)
														loc_4 = add_i32(loc_12, 1)
														if loc_4 >= 536870912 then
															desired = 7
															break
														end
														loc_3 = sub_i32(loc_3, loc_5)
														loc_9 = shr_i32(loc_3, 2)
														loc_4 = (if loc_3 >= 2147483640 then 536870911 else (if loc_4 < loc_9 then loc_9 else loc_4))
														if loc_4 ~= 0 then
															while true do
																if loc_4 >= 536870912 then
																	desired = 8
																	break
																end
																reg_0 = FUNC_LIST[606](shl_i32(loc_4, 3))
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														else
															while true do
																reg_0 = 0
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														loc_9 = reg_0
														loc_3 = add_i32(loc_9, shl_i32(loc_12, 3))
														store_i64(memory_at_0, loc_3, bor_i64(shl_i64(extend_i64_u32(loc_8), i64_from_u32(32, 0)), i64_ONE))
														loc_8 = add_i32(shl_i32(loc_4, 3), loc_9)
														loc_4 = add_i32(loc_3, 8)
														if loc_2 ~= loc_5 then
															while true do
																while true do
																	loc_3 = sub_i32(loc_3, 8)
																	loc_2 = sub_i32(loc_2, 8)
																	store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2))
																	if loc_2 ~= loc_5 then
																		continue
																	end
																	break
																end
																if desired then
																	break
																end
																reg_0 = load_i32(memory_at_0, loc_10)
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														else
															while true do
																reg_0 = loc_2
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														loc_2 = reg_0
														store_i32(memory_at_0, loc_0 + 264, loc_8)
														store_i32(memory_at_0, loc_0 + 260, loc_4)
														store_i32(memory_at_0, loc_0 + 256, loc_3)
														if loc_2 == 0 then
															break
														end
														FUNC_LIST[609](loc_2)
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
															continue
														end
														break
													end
													loc_7 = add_i32(loc_7, 4)
													if loc_7 ~= loc_11 then
														continue
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												desired = 6
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											store_i32(memory_at_0, loc_6 + 12, 0)
											store_i64(memory_at_0, loc_6 + 4, i64_ZERO)
											FUNC_LIST[193](loc_0, loc_4, 0, add_i32(loc_6, 4), 0)
											FUNC_LIST[152](loc_0, load_i32(memory_at_0, loc_1 + 32))
											while true do
												while true do
													while true do
														if load_i32(memory_at_0, loc_1 + 36) == 0 then
															break
														end
														if load_i32(memory_at_0, loc_6 + 8) == load_i32(memory_at_0, loc_6 + 4) then
															break
														end
														reg_0 = FUNC_LIST[153](loc_0, load_i32(memory_at_0, loc_1 + 32))
														loc_2 = reg_0
														reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
														loc_3 = reg_0
														if loc_2 ~= 0 then
															while true do
																FUNC_LIST[152](loc_0, load_i32(memory_at_0, loc_1 + 36))
																loc_2 = load_i32(memory_at_0, loc_6 + 4)
																loc_5 = load_i32(memory_at_0, loc_6 + 8)
																if loc_2 == loc_5 then
																	desired = 10
																	break
																end
																while true do
																	reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_2), loc_3)
																	if reg_0 ~= 0 then
																		while true do
																			loc_2 = add_i32(loc_2, 4)
																			if loc_2 ~= loc_5 then
																				desired = 14
																				break
																			end
																			desired = 11
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																				continue
																			end
																			break
																		end
																	end
																	break
																end
																if desired then
																	break
																end
																desired = 1
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														FUNC_LIST[97](load_i32(memory_at_0, loc_0), 23, 0, 0)
														reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
														loc_5 = reg_0
														FUNC_LIST[152](loc_0, load_i32(memory_at_0, loc_1 + 36))
														reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
														loc_8 = reg_0
														while true do
															loc_2 = load_i32(memory_at_0, loc_6 + 4)
															loc_7 = load_i32(memory_at_0, loc_6 + 8)
															if loc_2 == loc_7 then
																break
															end
															while true do
																reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_2), loc_5)
																if reg_0 ~= 0 then
																	while true do
																		loc_2 = add_i32(loc_2, 4)
																		if loc_2 ~= loc_7 then
																			desired = 14
																			break
																		end
																		desired = 13
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																			continue
																		end
																		break
																	end
																end
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															desired = 1
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), loc_3, loc_8)
														if reg_0 ~= 0 then
															desired = 11
															break
														end
														desired = 1
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
													loc_3 = reg_0
													loc_2 = load_i32(memory_at_0, loc_6 + 4)
													loc_5 = load_i32(memory_at_0, loc_6 + 8)
													if loc_2 == loc_5 then
														desired = 10
														break
													end
													while true do
														reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_2), loc_3)
														if reg_0 ~= 0 then
															while true do
																loc_2 = add_i32(loc_2, 4)
																if loc_2 ~= loc_5 then
																	desired = 12
																	break
																end
																desired = 11
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																	continue
																end
																break
															end
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													desired = 1
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_2 = load_i32(memory_at_0, loc_6 + 4)
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if loc_2 == 0 then
												desired = 2
												break
											end
											store_i32(memory_at_0, loc_6 + 8, loc_2)
											FUNC_LIST[609](loc_2)
											desired = 2
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										FUNC_LIST[40](loc_10)
										error("out of code bounds")
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									FUNC_LIST[163]()
									error("out of code bounds")
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[40](loc_10)
								error("out of code bounds")
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_7 = load_i32(memory_at_0, loc_6 + 4)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_7 == 0 then
							desired = 2
							break
						end
						store_i32(memory_at_0, loc_6 + 8, loc_7)
						FUNC_LIST[609](loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_7 = load_i32(memory_at_0, loc_6 + 4)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_7 == 0 then
					break
				end
				store_i32(memory_at_0, loc_6 + 8, loc_7)
				FUNC_LIST[609](loc_7)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = add_i32(loc_6, 16)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[147](add_i32(loc_1, 8), 4545, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[176] = --[[ Luau::Compiler::compileStatWhile(Luau::AstStatWhile*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_7 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_7
		while true do
			while true do
				while true do
					while true do
						while true do
							if load_i32(memory_at_0, loc_0 + 120) == 0 then
								break
							end
							loc_10 = load_i32(memory_at_0, loc_0 + 124)
							loc_9 = load_i32(memory_at_0, loc_1 + 28)
							if loc_10 == loc_9 then
								break
							end
							loc_3 = bxor_i32(shr_u32(loc_9, 4), shr_u32(loc_9, 9))
							loc_4 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
							loc_8 = load_i32(memory_at_0, loc_0 + 112)
							while true do
								loc_5 = band_i32(loc_3, loc_4)
								loc_6 = add_i32(shl_i32(loc_5, 5), loc_8)
								loc_3 = load_i32(memory_at_0, loc_6)
								if loc_3 ~= loc_9 then
									while true do
										if loc_3 == loc_10 then
											desired = 5
											break
										end
										loc_2 = add_i32(loc_2, 1)
										loc_3 = add_i32(loc_5, loc_2)
										if loc_2 <= loc_4 then
											desired = 6
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 2, 0, }
									end)()
								end
								temp = br_map[1][sub_i32(load_i32(memory_at_0, loc_6 + 8), 1)] or 1
								if temp < 1 then
									break
								elseif temp > 1 then
									desired = 4
									break
								else
									desired = 5
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if load_i32_u8(memory_at_0, loc_6 + 16) == 0 then
								desired = 4
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 236), load_i32(memory_at_0, loc_0 + 232)), 2)
						loc_9 = load_i32(memory_at_0, loc_0 + 256)
						loc_10 = load_i32(memory_at_0, loc_0 + 260)
						while true do
							loc_2 = load_i32(memory_at_0, loc_0 + 272)
							loc_3 = load_i32(memory_at_0, loc_0 + 276)
							if loc_2 < loc_3 then
								while true do
									store_i32(memory_at_0, loc_2 + 8, 0)
									store_i32(memory_at_0, loc_2 + 4, loc_5)
									store_i32(memory_at_0, loc_2, loc_5)
									store_i32(memory_at_0, loc_0 + 272, add_i32(loc_2, 12))
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_11 = add_i32(loc_0, 268)
							loc_4 = load_i32(memory_at_0, loc_11)
							loc_12 = div_i32(sub_i32(loc_2, loc_4), 12)
							loc_6 = add_i32(loc_12, 1)
							if loc_6 >= 357913942 then
								desired = 3
								break
							end
							loc_8 = 0
							loc_3 = div_i32(sub_i32(loc_3, loc_4), 12)
							loc_13 = shl_i32(loc_3, 1)
							loc_6 = (if loc_3 >= 178956970 then 357913941 else (if loc_6 < loc_13 then loc_13 else loc_6))
							if loc_6 ~= 0 then
								while true do
									if loc_6 >= 357913942 then
										desired = 2
										break
									end
									reg_0 = FUNC_LIST[606](mul_i32(loc_6, 12))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = loc_8
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_8 = reg_0
							loc_3 = add_i32(loc_8, mul_i32(loc_12, 12))
							store_i32(memory_at_0, loc_3 + 8, 0)
							store_i32(memory_at_0, loc_3 + 4, loc_5)
							store_i32(memory_at_0, loc_3, loc_5)
							loc_5 = add_i32(mul_i32(loc_6, 12), loc_8)
							loc_8 = add_i32(loc_3, 12)
							if loc_2 ~= loc_4 then
								while true do
									while true do
										loc_3 = sub_i32(loc_3, 12)
										loc_2 = sub_i32(loc_2, 12)
										store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2))
										store_i32(memory_at_0, loc_3 + 8, load_i32(memory_at_0, loc_2 + 8))
										if loc_2 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										break
									end
									reg_0 = load_i32(memory_at_0, loc_11)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = loc_2
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_2 = reg_0
							store_i32(memory_at_0, loc_0 + 276, loc_5)
							store_i32(memory_at_0, loc_0 + 272, loc_8)
							store_i32(memory_at_0, loc_0 + 268, loc_3)
							if loc_2 == 0 then
								break
							end
							FUNC_LIST[609](loc_2)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32_n8(memory_at_0, loc_0 + 228, 1)
						reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
						loc_2 = reg_0
						store_i32(memory_at_0, loc_7 + 12, 0)
						store_i64(memory_at_0, loc_7 + 4, i64_ZERO)
						FUNC_LIST[193](loc_0, load_i32(memory_at_0, loc_1 + 28), 0, add_i32(loc_7, 4), 0)
						FUNC_LIST[152](loc_0, load_i32(memory_at_0, loc_1 + 32))
						reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
						loc_5 = reg_0
						reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
						loc_4 = reg_0
						if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
							while true do
								FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 28) + 8), 1))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[97](load_i32(memory_at_0, loc_0), 24, 0, 0)
						reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
						loc_3 = reg_0
						reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), loc_4, loc_2)
						if reg_0 == 0 then
							desired = 1
							break
						end
						while true do
							loc_2 = load_i32(memory_at_0, loc_7 + 4)
							loc_4 = load_i32(memory_at_0, loc_7 + 8)
							if loc_2 == loc_4 then
								break
							end
							while true do
								reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_2), loc_3)
								if reg_0 ~= 0 then
									while true do
										loc_2 = add_i32(loc_2, 4)
										if loc_2 ~= loc_4 then
											desired = 6
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = sub_i32(loc_10, loc_9)
						loc_2 = shr_i32(loc_4, 3)
						FUNC_LIST[194](loc_0, loc_1, loc_2, loc_3, loc_5)
						while true do
							loc_5 = load_i32(memory_at_0, loc_0 + 256)
							loc_3 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 260), loc_5), 3)
							if loc_2 > loc_3 then
								while true do
									FUNC_LIST[195](add_i32(loc_0, 256), sub_i32(loc_2, loc_3))
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_2 >= loc_3 then
								break
							end
							store_i32(memory_at_0, loc_0 + 260, add_i32(loc_4, loc_5))
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32(memory_at_0, loc_0 + 272, sub_i32(load_i32(memory_at_0, loc_0 + 272), 12))
						loc_2 = load_i32(memory_at_0, loc_7 + 4)
						if loc_2 == 0 then
							break
						end
						store_i32(memory_at_0, loc_7 + 8, loc_2)
						FUNC_LIST[609](loc_2)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					GLOBAL_LIST[0].value = add_i32(loc_7, 16)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[40](loc_11)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[163]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[147](add_i32(loc_1, 8), 4545, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[177] = --[[ Luau::Compiler::compileStatRepeat(Luau::AstStatRepeat*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_7 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_7
		loc_8 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 236), load_i32(memory_at_0, loc_0 + 232)), 2)
		loc_12 = load_i32(memory_at_0, loc_0 + 256)
		loc_13 = load_i32(memory_at_0, loc_0 + 260)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								loc_2 = load_i32(memory_at_0, loc_0 + 272)
								loc_3 = load_i32(memory_at_0, loc_0 + 276)
								if loc_2 < loc_3 then
									while true do
										store_i32(memory_at_0, loc_2 + 8, 0)
										store_i32(memory_at_0, loc_2 + 4, loc_8)
										store_i32(memory_at_0, loc_2, loc_8)
										store_i32(memory_at_0, loc_0 + 272, add_i32(loc_2, 12))
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_9 = add_i32(loc_0, 268)
								loc_5 = load_i32(memory_at_0, loc_9)
								loc_10 = div_i32(sub_i32(loc_2, loc_5), 12)
								loc_4 = add_i32(loc_10, 1)
								if loc_4 >= 357913942 then
									desired = 5
									break
								end
								loc_3 = div_i32(sub_i32(loc_3, loc_5), 12)
								loc_11 = shl_i32(loc_3, 1)
								loc_4 = (if loc_3 >= 178956970 then 357913941 else (if loc_4 < loc_11 then loc_11 else loc_4))
								if loc_4 ~= 0 then
									while true do
										if loc_4 >= 357913942 then
											desired = 4
											break
										end
										reg_0 = FUNC_LIST[606](mul_i32(loc_4, 12))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = loc_6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_6 = reg_0
								loc_3 = add_i32(loc_6, mul_i32(loc_10, 12))
								store_i32(memory_at_0, loc_3 + 8, 0)
								store_i32(memory_at_0, loc_3 + 4, loc_8)
								store_i32(memory_at_0, loc_3, loc_8)
								loc_6 = add_i32(mul_i32(loc_4, 12), loc_6)
								loc_4 = add_i32(loc_3, 12)
								if loc_2 ~= loc_5 then
									while true do
										while true do
											loc_3 = sub_i32(loc_3, 12)
											loc_2 = sub_i32(loc_2, 12)
											store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2))
											store_i32(memory_at_0, loc_3 + 8, load_i32(memory_at_0, loc_2 + 8))
											if loc_2 ~= loc_5 then
												continue
											end
											break
										end
										if desired then
											break
										end
										reg_0 = load_i32(memory_at_0, loc_9)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = loc_2
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_2 = reg_0
								store_i32(memory_at_0, loc_0 + 276, loc_6)
								store_i32(memory_at_0, loc_0 + 272, loc_4)
								store_i32(memory_at_0, loc_0 + 268, loc_3)
								if loc_2 == 0 then
									break
								end
								FUNC_LIST[609](loc_2)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i32_n8(memory_at_0, loc_0 + 228, 1)
							reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
							loc_14 = reg_0
							loc_15 = load_i32(memory_at_0, loc_0 + 220)
							while true do
								loc_3 = load_i32(memory_at_0, loc_1 + 32)
								if load_i32(memory_at_0, loc_3 + 32) == 0 then
									break
								end
								loc_6 = 0
								loc_4 = 0
								loc_2 = 0
								while true do
									FUNC_LIST[152](loc_0, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_3 + 28), shl_i32(loc_2, 2))))
									loc_5 = load_i32(memory_at_0, loc_0 + 272)
									store_i32(memory_at_0, sub_i32(loc_5, 8), shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 236), load_i32(memory_at_0, loc_0 + 232)), 2))
									while true do
										loc_5 = load_i32(memory_at_0, sub_i32(loc_5, 4))
										if (if band_i32(loc_6, 1) ~= 0 then 0 else loc_5) == 0 then
											while true do
												loc_2 = add_i32(loc_2, 1)
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_6 = 1
										loc_2 = add_i32(loc_2, 1)
										FUNC_LIST[196](loc_0, loc_5, load_i32(memory_at_0, loc_1 + 28), loc_3, loc_2)
										if load_i32_u8(memory_at_0, 47668) == 0 then
											break
										end
										loc_4 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 236), load_i32(memory_at_0, loc_0 + 232)), 2)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									loc_5 = load_i32(memory_at_0, loc_3 + 32)
									if loc_5 > loc_2 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if band_i32(loc_6, load_i32_u8(memory_at_0, 47668)) == 0 then
									break
								end
								if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
									while true do
										FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, load_i32(memory_at_0, sub_i32(add_i32(load_i32(memory_at_0, loc_3 + 28), shl_i32(loc_5, 2)), 4)) + 16), 1))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								FUNC_LIST[154](loc_0, loc_4)
								FUNC_LIST[156](loc_0, loc_4)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
							loc_16 = reg_0
							if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
								while true do
									FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 28) + 8), 1))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_4 = load_i32(memory_at_0, loc_1 + 28)
							if load_i32(memory_at_0, loc_0 + 120) == 0 then
								desired = 3
								break
							end
							loc_10 = load_i32(memory_at_0, loc_0 + 124)
							if loc_4 == loc_10 then
								desired = 3
								break
							end
							loc_3 = bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9))
							loc_5 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
							loc_11 = load_i32(memory_at_0, loc_0 + 112)
							loc_2 = 0
							while true do
								loc_6 = band_i32(loc_3, loc_5)
								loc_9 = add_i32(shl_i32(loc_6, 5), loc_11)
								loc_3 = load_i32(memory_at_0, loc_9)
								if loc_3 ~= loc_4 then
									while true do
										if loc_3 == loc_10 then
											desired = 3
											break
										end
										loc_2 = add_i32(loc_2, 1)
										loc_3 = add_i32(loc_6, loc_2)
										if loc_2 <= loc_5 then
											desired = 6
											break
										end
										desired = 3
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								while true do
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 4, 4, 0, }
										end)()
									end
									temp = br_map[1][load_i32(memory_at_0, loc_9 + 8)] or 1
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 3
										break
									else
										desired = 6
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if load_i32_u8(memory_at_0, loc_9 + 16) == 0 then
									desired = 3
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[154](loc_0, loc_8)
							reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
							loc_6 = reg_0
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[40](loc_9)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[163]()
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_7 + 12, 0)
				store_i64(memory_at_0, loc_7 + 4, i64_ZERO)
				FUNC_LIST[193](loc_0, loc_4, 0, add_i32(loc_7, 4), 1)
				FUNC_LIST[154](loc_0, loc_8)
				reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
				loc_2 = reg_0
				FUNC_LIST[97](load_i32(memory_at_0, loc_0), 24, 0, 0)
				reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
				loc_3 = reg_0
				FUNC_LIST[154](loc_0, loc_8)
				reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
				loc_6 = reg_0
				reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), loc_2, loc_14)
				if reg_0 == 0 then
					desired = 1
					break
				end
				loc_2 = load_i32(memory_at_0, loc_7 + 4)
				loc_5 = load_i32(memory_at_0, loc_7 + 8)
				if loc_2 ~= loc_5 then
					while true do
						while true do
							while true do
								reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_2), loc_3)
								if reg_0 ~= 0 then
									while true do
										loc_2 = add_i32(loc_2, 4)
										if loc_2 ~= loc_5 then
											desired = 5
											break
										end
										desired = 4
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							desired = 1
							break
						end
						if desired then
							break
						end
						reg_0 = load_i32(memory_at_0, loc_7 + 4)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = reg_0
				if loc_2 == 0 then
					break
				end
				store_i32(memory_at_0, loc_7 + 8, loc_2)
				FUNC_LIST[609](loc_2)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[156](loc_0, loc_8)
			loc_5 = sub_i32(loc_13, loc_12)
			loc_2 = shr_i32(loc_5, 3)
			FUNC_LIST[194](loc_0, loc_1, loc_2, loc_6, loc_16)
			while true do
				loc_6 = load_i32(memory_at_0, loc_0 + 256)
				loc_3 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 260), loc_6), 3)
				if loc_2 > loc_3 then
					while true do
						FUNC_LIST[195](add_i32(loc_0, 256), sub_i32(loc_2, loc_3))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_2 >= loc_3 then
					break
				end
				store_i32(memory_at_0, loc_0 + 260, add_i32(loc_5, loc_6))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_0 + 220, loc_15)
			store_i32(memory_at_0, loc_0 + 272, sub_i32(load_i32(memory_at_0, loc_0 + 272), 12))
			GLOBAL_LIST[0].value = add_i32(loc_7, 16)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[147](add_i32(loc_1, 8), 4545, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[178] = --[[ std::__2::vector<Luau::Compiler::LoopJump, std::__2::allocator<Luau::Compiler::LoopJump>>::push_back[abi:ue170004](Luau::Compiler::LoopJump&&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_2 = load_i32(memory_at_0, loc_0 + 4)
		loc_3 = load_i32(memory_at_0, loc_0 + 8)
		if loc_2 < loc_3 then
			while true do
				store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_1))
				store_i32(memory_at_0, loc_0 + 4, add_i32(loc_2, 8))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_5 = load_i32(memory_at_0, loc_0)
			loc_7 = shr_i32(sub_i32(loc_2, loc_5), 3)
			loc_4 = add_i32(loc_7, 1)
			if loc_4 < 536870912 then
				while true do
					loc_3 = sub_i32(loc_3, loc_5)
					loc_6 = shr_i32(loc_3, 2)
					loc_4 = (if loc_3 >= 2147483640 then 536870911 else (if loc_4 < loc_6 then loc_6 else loc_4))
					if loc_4 ~= 0 then
						while true do
							if loc_4 >= 536870912 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](shl_i32(loc_4, 3))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							break
						end
					end
					loc_6 = reg_0
					loc_3 = add_i32(loc_6, shl_i32(loc_7, 3))
					store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_1))
					loc_1 = add_i32(shl_i32(loc_4, 3), loc_6)
					loc_4 = add_i32(loc_3, 8)
					if loc_2 ~= loc_5 then
						while true do
							while true do
								loc_3 = sub_i32(loc_3, 8)
								loc_2 = sub_i32(loc_2, 8)
								store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2))
								if loc_2 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = load_i32(memory_at_0, loc_0)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
						if desired then
							break
						end
					end
					loc_2 = reg_0
					store_i32(memory_at_0, loc_0 + 8, loc_1)
					store_i32(memory_at_0, loc_0 + 4, loc_4)
					store_i32(memory_at_0, loc_0, loc_3)
					if loc_2 ~= 0 then
						while true do
							FUNC_LIST[609](loc_2)
							break
						end
						if desired then
							break
						end
					end
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[40](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[179] = --[[ Luau::Compiler::compileInlineReturn(Luau::AstStatReturn*, bool) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
			while true do
				FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, loc_1 + 8), 1))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = load_i32(memory_at_0, loc_0 + 284)
		loc_7 = sub_i32(loc_3, 24)
		store_i32_n16(memory_at_0, loc_4 + 16, load_i32_u16(memory_at_0, loc_7 + 8))
		store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_7))
		store_i32(memory_at_0, loc_4 + 28, 0)
		store_i64(memory_at_0, loc_4 + 20, i64_ZERO)
		loc_7 = 0
		while true do
			while true do
				while true do
					loc_6 = load_i32(memory_at_0, sub_i32(loc_3, 8))
					loc_3 = load_i32(memory_at_0, sub_i32(loc_3, 12))
					if loc_6 ~= loc_3 then
						while true do
							loc_6 = sub_i32(loc_6, loc_3)
							if lt_i32(loc_6, 0) then
								desired = 3
								break
							end
							reg_0 = FUNC_LIST[606](loc_6)
							loc_7 = reg_0
							reg_0 = FUNC_LIST[477](loc_7, loc_3, loc_6)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[197](loc_0, add_i32(loc_1, 28), load_i32_u8(memory_at_0, loc_4 + 16), load_i32_u8(memory_at_0, loc_4 + 17), 0)
					FUNC_LIST[154](loc_0, load_i32(memory_at_0, loc_4 + 12))
					while true do
						if loc_2 ~= 0 then
							break
						end
						reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
						loc_2 = reg_0
						FUNC_LIST[97](load_i32(memory_at_0, loc_0), 23, 0, 0)
						loc_3 = load_i32(memory_at_0, loc_0 + 284)
						loc_6 = sub_i32(loc_3, 8)
						loc_0 = load_i32(memory_at_0, loc_6)
						loc_10 = sub_i32(loc_3, 4)
						if loc_0 ~= load_i32(memory_at_0, loc_10) then
							while true do
								store_i32(memory_at_0, loc_0, loc_2)
								store_i32(memory_at_0, loc_6, add_i32(loc_0, 4))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_9 = sub_i32(loc_3, 12)
						loc_1 = load_i32(memory_at_0, loc_9)
						loc_3 = sub_i32(loc_0, loc_1)
						loc_11 = shr_i32(loc_3, 2)
						loc_5 = add_i32(loc_11, 1)
						if loc_5 >= 1073741824 then
							desired = 2
							break
						end
						loc_8 = shr_i32(loc_3, 1)
						loc_5 = (if loc_3 >= 2147483644 then 1073741823 else (if loc_5 < loc_8 then loc_8 else loc_5))
						if loc_5 ~= 0 then
							while true do
								if loc_5 >= 1073741824 then
									desired = 1
									break
								end
								reg_0 = FUNC_LIST[606](shl_i32(loc_5, 2))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = 0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_8 = reg_0
						loc_3 = add_i32(loc_8, shl_i32(loc_11, 2))
						store_i32(memory_at_0, loc_3, loc_2)
						loc_2 = add_i32(shl_i32(loc_5, 2), loc_8)
						loc_5 = add_i32(loc_3, 4)
						if loc_0 ~= loc_1 then
							while true do
								while true do
									loc_3 = sub_i32(loc_3, 4)
									loc_0 = sub_i32(loc_0, 4)
									store_i32(memory_at_0, loc_3, load_i32(memory_at_0, loc_0))
									if loc_0 ~= loc_1 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						store_i32(memory_at_0, loc_9, loc_3)
						store_i32(memory_at_0, loc_6, loc_5)
						store_i32(memory_at_0, loc_10, loc_2)
						if loc_1 == 0 then
							break
						end
						FUNC_LIST[609](loc_1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_7 ~= 0 then
						while true do
							FUNC_LIST[609](loc_7)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					GLOBAL_LIST[0].value = add_i32(loc_4, 32)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[40](add_i32(loc_4, 20))
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_9)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[180] = --[[ Luau::Compiler::compileStatReturn(Luau::AstStatReturn*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local reg_0
	local desired
	while true do
		loc_9 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_9
		loc_10 = load_i32(memory_at_0, loc_0 + 220)
		while true do
			while true do
				while true do
					loc_4 = load_i32(memory_at_0, loc_1 + 32)
					if loc_4 == 0 then
						break
					end
					loc_18 = load_i32(memory_at_0, loc_1 + 28)
					loc_2 = load_i32(memory_at_0, loc_18)
					loc_3 = load_i32(memory_at_0, loc_2 + 4)
					while true do
						loc_8 = load_i32(memory_at_0, 47220)
						if (if loc_8 == loc_3 then loc_2 else 0) == 0 then
							while true do
								loc_7 = load_i32(memory_at_0, 47300)
								loc_5 = load_i32(memory_at_0, 47180)
								while true do
									if band_i32((if loc_3 ~= loc_5 then 1 else 0), (if loc_3 ~= loc_7 then 1 else 0)) ~= 0 then
										desired = 4
										break
									end
									loc_2 = load_i32(memory_at_0, loc_2 + 24)
									loc_3 = load_i32(memory_at_0, loc_2 + 4)
									if loc_2 == 0 then
										continue
									end
									if loc_3 ~= loc_8 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if load_i32(memory_at_0, loc_0 + 60) == 0 then
							break
						end
						loc_6 = load_i32(memory_at_0, loc_2 + 24)
						loc_7 = load_i32(memory_at_0, loc_0 + 64)
						if loc_6 == loc_7 then
							break
						end
						loc_3 = bxor_i32(shr_u32(loc_6, 4), shr_u32(loc_6, 9))
						loc_5 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
						loc_16 = load_i32(memory_at_0, loc_0 + 52)
						loc_2 = 0
						while true do
							loc_13 = band_i32(loc_3, loc_5)
							loc_11 = add_i32(mul_i32(loc_13, 12), loc_16)
							loc_3 = load_i32(memory_at_0, loc_11)
							if loc_3 ~= loc_6 then
								while true do
									if loc_3 == loc_7 then
										desired = 4
										break
									end
									loc_2 = add_i32(loc_2, 1)
									loc_3 = add_i32(loc_13, loc_2)
									if loc_2 <= loc_5 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if load_i32_u8(memory_at_0, loc_11 + 5) == 0 then
							break
						end
						loc_6 = load_i32_u8(memory_at_0, loc_11 + 4)
						if loc_4 == 1 then
							desired = 3
							break
						end
						loc_19 = (if loc_4 <= 2 then 2 else loc_4)
						loc_20 = load_i32(memory_at_0, 47300)
						loc_11 = load_i32(memory_at_0, 47180)
						loc_12 = 1
						while true do
							loc_2 = load_i32(memory_at_0, add_i32(shl_i32(loc_12, 2), loc_18))
							loc_3 = load_i32(memory_at_0, loc_2 + 4)
							while true do
								if (if loc_3 == loc_8 then loc_2 else 0) == 0 then
									while true do
										while true do
											while true do
												if loc_3 == loc_11 then
													break
												end
												if loc_3 == loc_20 then
													break
												end
												loc_14 = 4294967295
												desired = 6
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
											loc_2 = load_i32(memory_at_0, loc_2 + 24)
											loc_3 = load_i32(memory_at_0, loc_2 + 4)
											if loc_2 == 0 then
												continue
											end
											if loc_3 ~= loc_8 then
												continue
											end
											break
										end
										if desired then
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_14 = 4294967295
								loc_15 = load_i32(memory_at_0, loc_2 + 24)
								if loc_7 == loc_15 then
									break
								end
								loc_3 = bxor_i32(shr_u32(loc_15, 4), shr_u32(loc_15, 9))
								loc_2 = 0
								while true do
									loc_13 = band_i32(loc_3, loc_5)
									loc_17 = add_i32(mul_i32(loc_13, 12), loc_16)
									loc_3 = load_i32(memory_at_0, loc_17)
									if loc_3 ~= loc_15 then
										while true do
											if loc_3 == loc_7 then
												desired = 6
												break
											end
											loc_2 = add_i32(loc_2, 1)
											loc_3 = add_i32(loc_13, loc_2)
											if loc_2 <= loc_5 then
												desired = 7
												break
											end
											desired = 6
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if load_i32_u8(memory_at_0, loc_17 + 5) == 0 then
									break
								end
								loc_14 = load_i32_u8(memory_at_0, loc_17 + 4)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							if add_i32(loc_6, loc_12) ~= loc_14 then
								desired = 4
								break
							end
							loc_12 = add_i32(loc_12, 1)
							if loc_12 ~= loc_19 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = add_i32(loc_4, loc_10)
					if loc_2 < 256 then
						while true do
							store_i32(memory_at_0, loc_0 + 220, loc_2)
							loc_3 = load_i32(memory_at_0, loc_0 + 224)
							store_i32(memory_at_0, loc_0 + 224, (if loc_2 < loc_3 then loc_3 else loc_2))
							loc_2 = 0
							loc_7 = 0
							while true do
								loc_5 = add_i32(loc_2, loc_10)
								loc_8 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 28), shl_i32(loc_2, 2)))
								while true do
									loc_3 = add_i32(loc_2, 1)
									if loc_3 == loc_4 then
										while true do
											reg_0 = FUNC_LIST[198](loc_0, loc_8, band_i32(loc_5, 255))
											loc_7 = reg_0
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									loc_2 = load_i32(memory_at_0, loc_0 + 220)
									loc_4 = band_i32(loc_5, 255)
									store_i32(memory_at_0, loc_0 + 220, add_i32(loc_4, 1))
									FUNC_LIST[199](loc_0, loc_8, loc_4, 1)
									store_i32(memory_at_0, loc_0 + 220, loc_2)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
								loc_4 = load_i32(memory_at_0, loc_1 + 32)
								loc_2 = loc_3
								if loc_4 > loc_2 then
									continue
								end
								break
							end
							if desired then
								break
							end
							FUNC_LIST[154](loc_0, 0)
							loc_3 = load_i32(memory_at_0, loc_0)
							loc_6 = loc_10
							loc_2 = 0
							reg_0 = loc_2
							if band_i32(loc_7, 1) ~= 0 then
								desired = 1
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					store_i32(memory_at_0, loc_9 + 4, 255)
					store_i32(memory_at_0, loc_9, loc_4)
					FUNC_LIST[147](add_i32(loc_1, 8), 5468, loc_9)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[154](loc_0, 0)
				loc_3 = load_i32(memory_at_0, loc_0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = add_i32(load_i32_u8(memory_at_0, loc_1 + 32), 1)
			break
		end
		loc_2 = reg_0
		FUNC_LIST[96](loc_3, 22, band_i32(loc_6, 255), band_i32(loc_2, 255), 0)
		store_i32(memory_at_0, loc_0 + 220, loc_10)
		GLOBAL_LIST[0].value = add_i32(loc_9, 16)
		break
	end
end
FUNC_LIST[181] = --[[ Luau::Compiler::compileExprCall(Luau::AstExprCall*, unsigned char, unsigned char, bool, bool) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local desired
	while true do
		loc_9 = sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_9
		if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
			while true do
				FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, loc_1 + 8), 1))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			while true do
				while true do
					while true do
						if lt_i32(load_i32(memory_at_0, loc_0 + 4), 2) then
							break
						end
						if load_i32_u8(memory_at_0, loc_1 + 36) ~= 0 then
							break
						end
						loc_8 = sub_i32(load_i32(memory_at_0, loc_0 + 96), 1)
						loc_16 = load_i32(memory_at_0, 47300)
						loc_17 = load_i32(memory_at_0, 47180)
						loc_13 = load_i32(memory_at_0, loc_0 + 92)
						loc_15 = load_i32(memory_at_0, loc_0 + 104)
						loc_12 = load_i32(memory_at_0, loc_0 + 100)
						loc_18 = load_i32(memory_at_0, 47220)
						loc_6 = load_i32(memory_at_0, loc_1 + 24)
						while true do
							loc_7 = load_i32(memory_at_0, loc_6 + 4)
							while true do
								if loc_6 == 0 then
									break
								end
								if loc_7 ~= loc_18 then
									break
								end
								if loc_12 == 0 then
									desired = 4
									break
								end
								loc_11 = load_i32(memory_at_0, loc_6 + 24)
								if loc_15 == loc_11 then
									desired = 4
									break
								end
								loc_7 = bxor_i32(shr_u32(loc_11, 4), shr_u32(loc_11, 9))
								loc_6 = 0
								while true do
									loc_10 = band_i32(loc_7, loc_8)
									loc_14 = add_i32(mul_i32(loc_10, 12), loc_13)
									loc_7 = load_i32(memory_at_0, loc_14)
									if loc_7 ~= loc_11 then
										while true do
											if loc_7 == loc_15 then
												desired = 4
												break
											end
											loc_6 = add_i32(loc_6, 1)
											loc_7 = add_i32(loc_10, loc_6)
											if loc_6 <= loc_8 then
												desired = 7
												break
											end
											desired = 4
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if load_i32_u8(memory_at_0, loc_14 + 8) ~= 0 then
									desired = 4
									break
								end
								loc_6 = load_i32(memory_at_0, loc_14 + 4)
								if loc_6 ~= 0 then
									desired = 5
									break
								end
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							while true do
								if loc_6 == 0 then
									break
								end
								if band_i32((if loc_7 ~= loc_17 then 1 else 0), (if loc_7 ~= loc_16 then 1 else 0)) ~= 0 then
									break
								end
								loc_6 = load_i32(memory_at_0, loc_6 + 24)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if load_i32(memory_at_0, 47268) ~= loc_7 then
							break
						end
						while true do
							while true do
								while true do
									if load_i32(memory_at_0, loc_0 + 40) == 0 then
										break
									end
									loc_15 = load_i32(memory_at_0, loc_0 + 44)
									if loc_15 == loc_6 then
										break
									end
									loc_8 = bxor_i32(shr_u32(loc_6, 4), shr_u32(loc_6, 9))
									loc_10 = sub_i32(load_i32(memory_at_0, loc_0 + 36), 1)
									loc_13 = load_i32(memory_at_0, loc_0 + 32)
									loc_7 = 0
									while true do
										loc_11 = band_i32(loc_8, loc_10)
										loc_14 = add_i32(mul_i32(loc_11, 40), loc_13)
										loc_8 = load_i32(memory_at_0, loc_14)
										if loc_6 == loc_8 then
											desired = 6
											break
										end
										if loc_8 == loc_15 then
											desired = 7
											break
										end
										loc_7 = add_i32(loc_7, 1)
										loc_8 = add_i32(loc_11, loc_7)
										if loc_7 <= loc_10 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_7 = (if load_i32_u8(memory_at_0, loc_6 + 68) ~= 0 then 5752 else 2132)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if load_i32_u8(memory_at_0, loc_14 + 36) ~= 0 then
								while true do
									reg_0 = FUNC_LIST[200](loc_0, loc_1, loc_6, loc_2, loc_3, loc_5, load_i32(memory_at_0, 47620), load_i32(memory_at_0, 47636), load_i32(memory_at_0, 47652))
									if reg_0 ~= 0 then
										desired = 3
										break
									end
									if load_i32_u8(memory_at_0, loc_14 + 36) ~= 0 then
										desired = 4
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_7 = 5752
							if load_i32_u8(memory_at_0, loc_6 + 68) ~= 0 then
								break
							end
							loc_7 = 1181
							if bor_i32(load_i32_u8(memory_at_0, loc_0 + 229), load_i32_u8(memory_at_0, loc_0 + 230)) == 0 then
								desired = 4
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[108](load_i32(memory_at_0, loc_0), loc_7, 0)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_7 = load_i32_u8(memory_at_0, loc_1 + 36)
					loc_6 = add_i32(load_i32(memory_at_0, loc_1 + 32), band_i32(add_i32(loc_7, 1), 3))
					loc_6 = (if loc_3 < loc_6 then loc_6 else loc_3)
					loc_18 = load_i32(memory_at_0, loc_0 + 220)
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		if loc_4 ~= 0 then
																			while true do
																				loc_8 = sub_i32(loc_6, loc_3)
																				loc_6 = add_i32(loc_18, loc_8)
																				if loc_6 >= 256 then
																					desired = 15
																					break
																				end
																				store_i32(memory_at_0, loc_0 + 220, loc_6)
																				loc_8 = load_i32(memory_at_0, loc_0 + 224)
																				store_i32(memory_at_0, loc_0 + 224, (if loc_6 < loc_8 then loc_8 else loc_6))
																				reg_0 = sub_i32(loc_18, loc_3)
																				desired = 16
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																		end
																		loc_8 = add_i32(loc_6, loc_18)
																		if loc_8 >= 256 then
																			desired = 14
																			break
																		end
																		store_i32(memory_at_0, loc_0 + 220, loc_8)
																		loc_6 = load_i32(memory_at_0, loc_0 + 224)
																		store_i32(memory_at_0, loc_0 + 224, (if loc_6 > loc_8 then loc_6 else loc_8))
																		reg_0 = loc_18
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_15 = reg_0
																	loc_12 = 4294967295
																	loc_16 = 0
																	if band_i32(loc_7, 255) ~= 0 then
																		desired = 9
																		break
																	end
																	if le_i32(load_i32(memory_at_0, loc_0 + 4), 0) then
																		desired = 9
																		break
																	end
																	if load_i32(memory_at_0, loc_0 + 180) == 0 then
																		desired = 9
																		break
																	end
																	loc_11 = load_i32(memory_at_0, loc_0 + 184)
																	if loc_1 == loc_11 then
																		desired = 9
																		break
																	end
																	loc_7 = bxor_i32(shr_u32(loc_1, 4), shr_u32(loc_1, 9))
																	loc_8 = sub_i32(load_i32(memory_at_0, loc_0 + 176), 1)
																	loc_13 = load_i32(memory_at_0, loc_0 + 172)
																	loc_6 = 0
																	while true do
																		loc_10 = band_i32(loc_7, loc_8)
																		loc_14 = add_i32(shl_i32(loc_10, 3), loc_13)
																		loc_7 = load_i32(memory_at_0, loc_14)
																		if loc_7 ~= loc_1 then
																			while true do
																				if loc_7 == loc_11 then
																					desired = 9
																					break
																				end
																				loc_6 = add_i32(loc_6, 1)
																				loc_7 = add_i32(loc_10, loc_6)
																				if loc_6 <= loc_8 then
																					desired = 16
																					break
																				end
																				desired = 9
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																					continue
																				end
																				break
																			end
																		end
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_12 = load_i32(memory_at_0, loc_14 + 4)
																	if lt_i32(loc_12, 0) then
																		desired = 9
																		break
																	end
																	while true do
																		if band_i32(load_i32_u8(memory_at_0, load_i32(memory_at_0, loc_0) + 424), 16) == 0 then
																			break
																		end
																		FUNC_LIST[16](add_i32(loc_9, 96), load_i32(memory_at_0, loc_1 + 24), add_i32(loc_0, 72), add_i32(loc_0, 92))
																		loc_6 = load_i32(memory_at_0, loc_1 + 32)
																		if loc_6 ~= 0 then
																			while true do
																				reg_0 = FUNC_LIST[201](loc_0, load_i32(memory_at_0, sub_i32(add_i32(load_i32(memory_at_0, loc_1 + 28), shl_i32(loc_6, 2)), 4)))
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																		else
																			while true do
																				reg_0 = 0
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																		end
																		loc_6 = reg_0
																		loc_7 = load_i32(memory_at_0, loc_9 + 96)
																		if loc_7 ~= 0 then
																			while true do
																				loc_8 = load_i32(memory_at_0, loc_0)
																				loc_10 = load_i32(memory_at_0, loc_1 + 32)
																				store_i32(memory_at_0, loc_9 + 48, loc_7)
																				store_i32(memory_at_0, loc_9 + 52, load_i32(memory_at_0, loc_9 + 100))
																				store_i32(memory_at_0, loc_9 + 56, loc_10)
																				store_i32(memory_at_0, loc_9 + 60, (if loc_6 ~= 0 then 6837 else 7767))
																				FUNC_LIST[108](loc_8, 2537, add_i32(loc_9, 48))
																				desired = 16
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																		end
																		loc_7 = load_i32(memory_at_0, loc_9 + 100)
																		if loc_7 == 0 then
																			break
																		end
																		loc_8 = load_i32(memory_at_0, loc_0)
																		loc_10 = load_i32(memory_at_0, loc_1 + 32)
																		store_i32(memory_at_0, loc_9 + 40, (if loc_6 ~= 0 then 6837 else 7767))
																		store_i32(memory_at_0, loc_9 + 36, loc_10)
																		store_i32(memory_at_0, loc_9 + 32, loc_7)
																		FUNC_LIST[108](loc_8, 2556, add_i32(loc_9, 32))
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	if loc_12 ~= 34 then
																		while true do
																			if loc_12 ~= 57 then
																				while true do
																					loc_6 = load_i32(memory_at_0, loc_1 + 32)
																					desired = 10
																					break
																				end
																				if desired then
																					break
																				end
																			end
																			loc_12 = 4294967295
																			if loc_3 ~= 1 then
																				desired = 9
																				break
																			end
																			if loc_5 ~= 0 then
																				desired = 9
																				break
																			end
																			FUNC_LIST[202](loc_0, loc_1, loc_2, 1, loc_4, 0, band_i32(loc_15, 255))
																			desired = 4
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																	end
																	loc_6 = load_i32(memory_at_0, loc_1 + 32)
																	if loc_6 ~= 3 then
																		desired = 10
																		break
																	end
																	if load_i32(memory_at_0, loc_0 + 120) == 0 then
																		desired = 11
																		break
																	end
																	loc_13 = load_i32(memory_at_0, loc_0 + 124)
																	loc_16 = load_i32(memory_at_0, loc_1 + 28)
																	loc_11 = load_i32(memory_at_0, loc_16 + 4)
																	if loc_13 == loc_11 then
																		desired = 11
																		break
																	end
																	loc_7 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
																	loc_14 = load_i32(memory_at_0, loc_0 + 112)
																	loc_6 = 0
																	loc_17 = bxor_i32(shr_u32(loc_11, 4), shr_u32(loc_11, 9))
																	loc_8 = loc_17
																	while true do
																		loc_10 = band_i32(loc_7, loc_8)
																		loc_12 = add_i32(shl_i32(loc_10, 5), loc_14)
																		loc_8 = load_i32(memory_at_0, loc_12)
																		if loc_8 ~= loc_11 then
																			while true do
																				if loc_8 == loc_13 then
																					desired = 11
																					break
																				end
																				loc_6 = add_i32(loc_6, 1)
																				loc_8 = add_i32(loc_10, loc_6)
																				if loc_6 <= loc_7 then
																					desired = 16
																					break
																				end
																				desired = 11
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																					continue
																				end
																				break
																			end
																		end
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	if load_i32(memory_at_0, loc_12 + 8) == 0 then
																		desired = 11
																		break
																	end
																	loc_12 = load_i32(memory_at_0, loc_16 + 8)
																	if loc_12 == loc_13 then
																		desired = 11
																		break
																	end
																	loc_6 = 0
																	loc_19 = bxor_i32(shr_u32(loc_12, 4), shr_u32(loc_12, 9))
																	loc_8 = loc_19
																	while true do
																		loc_10 = band_i32(loc_7, loc_8)
																		loc_16 = add_i32(shl_i32(loc_10, 5), loc_14)
																		loc_8 = load_i32(memory_at_0, loc_16)
																		if loc_8 ~= loc_12 then
																			while true do
																				if loc_8 == loc_13 then
																					desired = 11
																					break
																				end
																				loc_6 = add_i32(loc_6, 1)
																				loc_8 = add_i32(loc_10, loc_6)
																				if loc_6 <= loc_7 then
																					desired = 16
																					break
																				end
																				desired = 11
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																					continue
																				end
																				break
																			end
																		end
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	if load_i32(memory_at_0, loc_16 + 8) == 0 then
																		desired = 11
																		break
																	end
																	loc_6 = 0
																	while true do
																		loc_10 = band_i32(loc_7, loc_17)
																		loc_16 = add_i32(shl_i32(loc_10, 5), loc_14)
																		loc_8 = load_i32(memory_at_0, loc_16)
																		if loc_11 == loc_8 then
																			desired = 13
																			break
																		end
																		if loc_8 ~= loc_13 then
																			while true do
																				loc_6 = add_i32(loc_6, 1)
																				loc_17 = add_i32(loc_10, loc_6)
																				if loc_6 <= loc_7 then
																					desired = 16
																					break
																				end
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																					continue
																				end
																				break
																			end
																		end
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_17 = 0
																	store_i32(memory_at_0, loc_9 + 96, 0)
																	desired = 12
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																store_i32(memory_at_0, loc_9 + 4, 255)
																store_i32(memory_at_0, loc_9, loc_8)
																FUNC_LIST[147](add_i32(loc_1, 8), 5468, loc_9)
																error("out of code bounds")
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															store_i32(memory_at_0, loc_9 + 68, 255)
															store_i32(memory_at_0, loc_9 + 64, loc_6)
															FUNC_LIST[147](add_i32(loc_1, 8), 5468, sub_i32(loc_9, 4294967232))
															error("out of code bounds")
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_17 = load_i32(memory_at_0, loc_16 + 8)
														store_f64(memory_at_0, loc_9 + 96, load_f64(memory_at_0, loc_16 + 16))
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_6 = 0
													while true do
														loc_10 = band_i32(loc_7, loc_19)
														loc_11 = add_i32(shl_i32(loc_10, 5), loc_14)
														loc_8 = load_i32(memory_at_0, loc_11)
														if loc_8 ~= loc_12 then
															while true do
																if loc_8 == loc_13 then
																	desired = 11
																	break
																end
																loc_6 = add_i32(loc_6, 1)
																loc_19 = add_i32(loc_10, loc_6)
																if loc_6 <= loc_7 then
																	desired = 12
																	break
																end
																desired = 11
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																	continue
																end
																break
															end
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													while true do
														loc_20 = load_f64(memory_at_0, loc_9 + 96)
														if abs_f64(loc_20) < 2.147483648e9 then
															while true do
																reg_0 = truncate_i32_f64(loc_20)
																desired = 12
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														reg_0 = 2147483648
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_8 = reg_0
													loc_7 = (if load_i32(memory_at_0, loc_11 + 8) ~= 3 then 1 else 0)
													while true do
														loc_20 = load_f64(memory_at_0, loc_11 + 16)
														if abs_f64(loc_20) < 2.147483648e9 then
															while true do
																reg_0 = truncate_i32_f64(loc_20)
																desired = 12
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														reg_0 = 2147483648
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_6 = reg_0
													if loc_7 ~= 0 then
														break
													end
													loc_7 = (if loc_17 ~= 3 then 4294967295 else loc_8)
													if lt_i32(loc_7, 0) then
														break
													end
													if le_i32(loc_6, 0) then
														break
													end
													if gt_i32(add_i32(loc_6, loc_7), 32) then
														break
													end
													reg_0 = FUNC_LIST[84](load_i32(memory_at_0, loc_0), convert_f64_i32(bor_i32(loc_7, sub_i32(shl_i32(loc_6, 5), 32))))
													loc_6 = reg_0
													if ge_i32(loc_6, 0) then
														while true do
															FUNC_LIST[203](loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, band_i32(loc_15, 255), 59, loc_6)
															desired = 4
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													FUNC_LIST[147](add_i32(loc_1, 8), 4438, 0)
													error("out of code bounds")
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_16 = 1
												loc_12 = 34
												if load_i32_u8(memory_at_0, loc_1 + 36) ~= 0 then
													desired = 8
													break
												end
												loc_17 = 0
												desired = 5
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_16 = 1
											if sub_i32(loc_6, 1) > 1 then
												break
											end
											reg_0 = FUNC_LIST[201](loc_0, load_i32(memory_at_0, sub_i32(add_i32(load_i32(memory_at_0, loc_1 + 28), shl_i32(loc_6, 2)), 4)))
											if reg_0 == 0 then
												while true do
													FUNC_LIST[203](loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, band_i32(loc_15, 255), loc_12, 4294967295)
													desired = 4
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											if lt_i32(load_i32(memory_at_0, loc_0 + 4), 2) then
												break
											end
											FUNC_LIST[18](add_i32(loc_9, 96), loc_12)
											if load_i32(memory_at_0, loc_1 + 32) ~= load_i32(memory_at_0, loc_9 + 96) then
												break
											end
											if band_i32(load_i32_u8(memory_at_0, loc_9 + 104), 1) == 0 then
												break
											end
											FUNC_LIST[203](loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, band_i32(loc_15, 255), loc_12, 4294967295)
											desired = 4
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if load_i32_u8(memory_at_0, loc_1 + 36) == 0 then
											desired = 7
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_6 = load_i32(memory_at_0, loc_1 + 24)
									loc_13 = load_i32(memory_at_0, (if load_i32(memory_at_0, loc_6 + 4) == load_i32(memory_at_0, 47252) then loc_6 else 0) + 24)
									loc_6 = load_i32(memory_at_0, loc_13 + 4)
									loc_10 = load_i32(memory_at_0, 47220)
									while true do
										if loc_13 ~= 0 then
											while true do
												loc_7 = loc_13
												if loc_6 == loc_10 then
													desired = 8
													break
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_11 = load_i32(memory_at_0, 47300)
										loc_8 = load_i32(memory_at_0, 47180)
										loc_7 = loc_13
										while true do
											if band_i32((if loc_6 ~= loc_8 then 1 else 0), (if loc_6 ~= loc_11 then 1 else 0)) ~= 0 then
												desired = 6
												break
											end
											loc_7 = load_i32(memory_at_0, loc_7 + 24)
											loc_6 = load_i32(memory_at_0, loc_7 + 4)
											if loc_7 == 0 then
												continue
											end
											if loc_6 ~= loc_10 then
												continue
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if load_i32(memory_at_0, loc_0 + 60) == 0 then
										desired = 6
										break
									end
									loc_11 = load_i32(memory_at_0, loc_7 + 24)
									loc_14 = load_i32(memory_at_0, loc_0 + 64)
									if loc_11 == loc_14 then
										desired = 6
										break
									end
									loc_7 = bxor_i32(shr_u32(loc_11, 4), shr_u32(loc_11, 9))
									loc_8 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
									loc_17 = load_i32(memory_at_0, loc_0 + 52)
									loc_6 = 0
									while true do
										loc_10 = band_i32(loc_7, loc_8)
										loc_19 = add_i32(mul_i32(loc_10, 12), loc_17)
										loc_7 = load_i32(memory_at_0, loc_19)
										if loc_7 ~= loc_11 then
											while true do
												if loc_7 == loc_14 then
													desired = 6
													break
												end
												loc_6 = add_i32(loc_6, 1)
												loc_7 = add_i32(loc_10, loc_6)
												if loc_6 <= loc_8 then
													desired = 8
													break
												end
												desired = 6
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if load_i32_u8(memory_at_0, loc_19 + 5) == 0 then
										desired = 6
										break
									end
									loc_17 = load_i32_u8(memory_at_0, loc_19 + 4)
									desired = 5
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_17 = 0
								if ge_i32(loc_12, 0) then
									desired = 5
									break
								end
								loc_6 = load_i32(memory_at_0, loc_0 + 220)
								loc_7 = load_i32(memory_at_0, loc_1 + 24)
								loc_8 = band_i32(loc_15, 255)
								store_i32(memory_at_0, loc_0 + 220, add_i32(loc_8, 1))
								FUNC_LIST[199](loc_0, loc_7, loc_8, 1)
								store_i32(memory_at_0, loc_0 + 220, loc_6)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_6 = load_i32(memory_at_0, loc_0 + 220)
							loc_7 = band_i32(loc_15, 255)
							store_i32(memory_at_0, loc_0 + 220, add_i32(loc_7, 1))
							FUNC_LIST[199](loc_0, loc_13, loc_7, 1)
							store_i32(memory_at_0, loc_0 + 220, loc_6)
							loc_17 = loc_15
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							loc_8 = load_i32(memory_at_0, loc_1 + 32)
							if loc_8 == 0 then
								while true do
									loc_14 = 0
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_13 = add_i32(band_i32(loc_15, 255), 1)
							loc_14 = 0
							loc_6 = 0
							while true do
								loc_10 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 28), shl_i32(loc_6, 2)))
								loc_11 = load_i32_u8(memory_at_0, loc_1 + 36)
								while true do
									loc_7 = add_i32(loc_6, 1)
									if loc_7 == loc_8 then
										while true do
											reg_0 = FUNC_LIST[198](loc_0, loc_10, band_i32(add_i32(add_i32(loc_6, loc_13), loc_11), 255))
											loc_14 = reg_0
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_8 = load_i32(memory_at_0, loc_0 + 220)
									loc_6 = band_i32(add_i32(loc_11, add_i32(loc_6, loc_13)), 255)
									store_i32(memory_at_0, loc_0 + 220, add_i32(loc_6, 1))
									FUNC_LIST[199](loc_0, loc_10, loc_6, 1)
									store_i32(memory_at_0, loc_0 + 220, loc_8)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								loc_8 = load_i32(memory_at_0, loc_1 + 32)
								loc_6 = loc_7
								if loc_8 > loc_6 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
							while true do
								FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 24) + 16), 1))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if load_i32_u8(memory_at_0, loc_1 + 36) ~= 0 then
								while true do
									loc_6 = load_i32(memory_at_0, loc_1 + 24)
									loc_8 = (if load_i32(memory_at_0, loc_6 + 4) == load_i32(memory_at_0, 47252) then loc_6 else 0)
									loc_6 = load_i32(memory_at_0, loc_0)
									if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
										while true do
											FUNC_LIST[105](loc_6, add_i32(load_i32(memory_at_0, loc_8 + 32), 1))
											reg_0 = load_i32(memory_at_0, loc_0)
											break
										end
										if desired then
											break
										end
									else
										while true do
											reg_0 = loc_6
											break
										end
										if desired then
											break
										end
									end
									loc_6 = reg_0
									loc_7 = load_i32(memory_at_0, loc_8 + 28)
									reg_1 = FUNC_LIST[504](loc_7)
									loc_10 = reg_1
									store_i32(memory_at_0, loc_9 + 92, loc_10)
									store_i32(memory_at_0, loc_9 + 88, loc_7)
									store_i64(memory_at_0, loc_9 + 24, load_i64(memory_at_0, loc_9 + 88))
									reg_0 = FUNC_LIST[86](loc_6, add_i32(loc_9, 24))
									loc_6 = reg_0
									if lt_i32(loc_6, 0) then
										desired = 2
										break
									end
									loc_8 = load_i32(memory_at_0, loc_0)
									store_i32(memory_at_0, loc_9 + 84, loc_10)
									store_i32(memory_at_0, loc_9 + 80, loc_7)
									store_i64(memory_at_0, loc_9 + 16, load_i64(memory_at_0, loc_9 + 80))
									reg_4 = FUNC_LIST[116](add_i32(loc_9, 16))
									FUNC_LIST[96](loc_8, 20, band_i32(loc_15, 255), band_i32(loc_17, 255), band_i32(reg_4, 255))
									FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_6)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_16 == 0 then
								break
							end
							reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
							loc_6 = reg_0
							FUNC_LIST[96](load_i32(memory_at_0, loc_0), 68, band_i32(loc_12, 255), 0, 0)
							FUNC_LIST[199](loc_0, load_i32(memory_at_0, loc_1 + 24), band_i32(loc_15, 255), 1)
							reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
							loc_7 = reg_0
							reg_0 = FUNC_LIST[101](load_i32(memory_at_0, loc_0), loc_6, loc_7)
							if reg_0 == 0 then
								desired = 1
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_6 = 0
						loc_7 = 0
						loc_8 = load_i32(memory_at_0, loc_0)
						reg_0 = loc_8
						reg_1 = 21
						reg_2 = band_i32(loc_15, 255)
						if band_i32(loc_14, 1) ~= 0 then
							while true do
								reg_3 = loc_7
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_3 = add_i32(add_i32(load_i32_u8(memory_at_0, loc_1 + 36), load_i32_u8(memory_at_0, loc_1 + 32)), 1)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_7 = reg_3
						FUNC_LIST[96](reg_0, reg_1, reg_2, band_i32(loc_7, 255), band_i32((if loc_5 ~= 0 then 0 else add_i32(loc_3, 1)), 255))
						if loc_3 == 0 then
							break
						end
						if loc_4 ~= 0 then
							break
						end
						while true do
							FUNC_LIST[96](load_i32(memory_at_0, loc_0), 6, band_i32(add_i32(loc_2, loc_6), 255), band_i32(add_i32(loc_6, loc_15), 255), 0)
							loc_6 = add_i32(loc_6, 1)
							if loc_3 ~= loc_6 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_0 + 220, loc_18)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				GLOBAL_LIST[0].value = add_i32(loc_9, 112)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[147](add_i32(loc_8, 8), 4438, 0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[147](add_i32(load_i32(memory_at_0, loc_1 + 24), 8), 4545, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[182] = --[[ Luau::Compiler::compileExprSide(Luau::AstExpr*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_9 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_9
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_1 + 4)
				loc_6 = load_i32(memory_at_0, 47220)
				if loc_2 == loc_6 then
					break
				end
				if load_i32(memory_at_0, 47228) == loc_2 then
					break
				end
				if load_i32(memory_at_0, 47236) == loc_2 then
					break
				end
				if load_i32(memory_at_0, 47268) == loc_2 then
					break
				end
				while true do
					if load_i32(memory_at_0, loc_0 + 120) == 0 then
						break
					end
					loc_7 = load_i32(memory_at_0, loc_0 + 124)
					if loc_1 == loc_7 then
						break
					end
					loc_4 = bxor_i32(shr_u32(loc_1, 4), shr_u32(loc_1, 9))
					loc_5 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
					loc_10 = load_i32(memory_at_0, loc_0 + 112)
					while true do
						loc_8 = band_i32(loc_4, loc_5)
						loc_11 = add_i32(shl_i32(loc_8, 5), loc_10)
						loc_4 = load_i32(memory_at_0, loc_11)
						if loc_4 ~= loc_1 then
							while true do
								if loc_4 == loc_7 then
									desired = 3
									break
								end
								loc_3 = add_i32(loc_3, 1)
								loc_4 = add_i32(loc_8, loc_3)
								if loc_3 <= loc_5 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if load_i32(memory_at_0, loc_11 + 8) ~= 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_2 ~= load_i32(memory_at_0, 47244) then
					while true do
						FUNC_LIST[108](load_i32(memory_at_0, loc_0), 2052, 0)
						loc_6 = load_i32(memory_at_0, 47220)
						reg_0 = load_i32(memory_at_0, loc_1 + 4)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = reg_0
				loc_7 = load_i32(memory_at_0, loc_0 + 220)
				while true do
					while true do
						while true do
							if loc_1 ~= 0 then
								while true do
									loc_3 = loc_1
									if loc_2 == loc_6 then
										desired = 5
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_5 = load_i32(memory_at_0, 47300)
							loc_4 = load_i32(memory_at_0, 47180)
							loc_3 = loc_1
							while true do
								if band_i32((if loc_2 ~= loc_4 then 1 else 0), (if loc_2 ~= loc_5 then 1 else 0)) ~= 0 then
									desired = 4
									break
								end
								loc_3 = load_i32(memory_at_0, loc_3 + 24)
								loc_2 = load_i32(memory_at_0, loc_3 + 4)
								if loc_3 == 0 then
									continue
								end
								if loc_2 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if load_i32(memory_at_0, loc_0 + 60) == 0 then
							break
						end
						loc_8 = load_i32(memory_at_0, loc_3 + 24)
						loc_6 = load_i32(memory_at_0, loc_0 + 64)
						if loc_8 == loc_6 then
							break
						end
						loc_3 = bxor_i32(shr_u32(loc_8, 4), shr_u32(loc_8, 9))
						loc_4 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
						loc_10 = load_i32(memory_at_0, loc_0 + 52)
						loc_2 = 0
						while true do
							loc_5 = band_i32(loc_3, loc_4)
							loc_11 = add_i32(mul_i32(loc_5, 12), loc_10)
							loc_3 = load_i32(memory_at_0, loc_11)
							if loc_3 ~= loc_8 then
								while true do
									if loc_3 == loc_6 then
										desired = 4
										break
									end
									loc_2 = add_i32(loc_2, 1)
									loc_3 = add_i32(loc_5, loc_2)
									if loc_2 <= loc_4 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if load_i32_u8(memory_at_0, loc_11 + 5) ~= 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = add_i32(loc_7, 1)
					if loc_2 >= 256 then
						desired = 1
						break
					end
					store_i32(memory_at_0, loc_0 + 220, loc_2)
					loc_3 = load_i32(memory_at_0, loc_0 + 224)
					store_i32(memory_at_0, loc_0 + 224, (if loc_2 < loc_3 then loc_3 else loc_2))
					FUNC_LIST[199](loc_0, loc_1, band_i32(loc_7, 255), 1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 220, loc_7)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = add_i32(loc_9, 16)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, loc_9, i64_from_u32(1, 255))
		FUNC_LIST[147](add_i32(loc_1, 8), 5468, loc_9)
		error("out of code bounds")
	end
end
FUNC_LIST[183] = --[[ Luau::Compiler::compileStatLocal(Luau::AstStatLocal*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local reg_0
	local desired
	while true do
		loc_12 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_12
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								loc_9 = load_i32(memory_at_0, loc_0 + 4)
								if le_i32(loc_9, 0) then
									break
								end
								if gt_i32(load_i32(memory_at_0, loc_0 + 8), 1) then
									break
								end
								loc_2 = load_i32(memory_at_0, loc_1 + 32)
								if loc_2 < load_i32(memory_at_0, loc_1 + 40) then
									desired = 4
									break
								end
								if loc_2 == 0 then
									desired = 2
									break
								end
								if load_i32(memory_at_0, loc_0 + 100) == 0 then
									desired = 5
									break
								end
								loc_10 = load_i32(memory_at_0, loc_1 + 28)
								loc_13 = add_i32(loc_10, shl_i32(loc_2, 2))
								loc_4 = sub_i32(load_i32(memory_at_0, loc_0 + 96), 1)
								loc_11 = load_i32(memory_at_0, loc_0 + 92)
								loc_5 = load_i32(memory_at_0, loc_0 + 104)
								while true do
									loc_7 = load_i32(memory_at_0, loc_10)
									if loc_5 == loc_7 then
										desired = 6
										break
									end
									loc_3 = bxor_i32(shr_u32(loc_7, 4), shr_u32(loc_7, 9))
									loc_2 = 0
									while true do
										loc_6 = band_i32(loc_3, loc_4)
										loc_8 = add_i32(mul_i32(loc_6, 12), loc_11)
										loc_3 = load_i32(memory_at_0, loc_8)
										if loc_3 ~= loc_7 then
											while true do
												if loc_3 == loc_5 then
													desired = 6
													break
												end
												loc_2 = add_i32(loc_2, 1)
												loc_3 = add_i32(loc_6, loc_2)
												if loc_2 <= loc_4 then
													desired = 8
													break
												end
												desired = 6
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									if load_i32_u8(memory_at_0, loc_8 + 9) == 0 then
										desired = 6
										break
									end
									loc_10 = add_i32(loc_10, 4)
									if loc_10 ~= loc_13 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								desired = 2
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if gt_i32(loc_9, 0) then
								break
							end
							loc_2 = load_i32(memory_at_0, loc_1 + 32)
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = load_i32(memory_at_0, loc_1 + 32)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_2 ~= 1 then
						break
					end
					if load_i32(memory_at_0, loc_1 + 40) ~= 1 then
						while true do
							loc_2 = 1
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 36))
					loc_3 = load_i32(memory_at_0, loc_2 + 4)
					loc_6 = load_i32(memory_at_0, 47220)
					if (if loc_3 == loc_6 then loc_2 else 0) == 0 then
						while true do
							loc_7 = load_i32(memory_at_0, 47300)
							loc_4 = load_i32(memory_at_0, 47180)
							while true do
								while true do
									if loc_3 == loc_4 then
										break
									end
									if loc_3 == loc_7 then
										break
									end
									loc_2 = 1
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
								loc_2 = load_i32(memory_at_0, loc_2 + 24)
								loc_3 = load_i32(memory_at_0, loc_2 + 4)
								if loc_2 == 0 then
									continue
								end
								if loc_3 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_13 = load_i32(memory_at_0, loc_1 + 28)
					while true do
						if load_i32(memory_at_0, loc_0 + 100) == 0 then
							while true do
								loc_10 = 1
								loc_7 = 0
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_7 = 0
						while true do
							loc_8 = load_i32(memory_at_0, loc_13)
							loc_6 = load_i32(memory_at_0, loc_0 + 104)
							if loc_8 == loc_6 then
								while true do
									reg_0 = 1
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_5 = bxor_i32(shr_u32(loc_8, 4), shr_u32(loc_8, 9))
							loc_11 = sub_i32(load_i32(memory_at_0, loc_0 + 96), 1)
							loc_10 = load_i32(memory_at_0, loc_0 + 92)
							loc_3 = 0
							while true do
								while true do
									loc_9 = band_i32(loc_5, loc_11)
									loc_4 = add_i32(mul_i32(loc_9, 12), loc_10)
									loc_5 = load_i32(memory_at_0, loc_4)
									if loc_8 == loc_5 then
										break
									end
									loc_4 = 0
									if loc_5 == loc_6 then
										break
									end
									loc_3 = add_i32(loc_3, 1)
									loc_5 = add_i32(loc_9, loc_3)
									if loc_3 <= loc_11 then
										desired = 6
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_14 = (if loc_4 ~= 0 then add_i32(loc_4, 4) else 0)
							reg_0 = (if loc_4 == 0 then 1 else 0)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_10 = reg_0
						loc_9 = load_i32(memory_at_0, loc_2 + 24)
						if loc_6 == loc_9 then
							break
						end
						loc_4 = bxor_i32(shr_u32(loc_9, 4), shr_u32(loc_9, 9))
						loc_5 = sub_i32(load_i32(memory_at_0, loc_0 + 96), 1)
						loc_8 = load_i32(memory_at_0, loc_0 + 92)
						loc_3 = 0
						while true do
							loc_11 = band_i32(loc_4, loc_5)
							loc_7 = add_i32(mul_i32(loc_11, 12), loc_8)
							loc_4 = load_i32(memory_at_0, loc_7)
							if loc_9 == loc_4 then
								desired = 4
								break
							end
							loc_7 = 0
							if loc_4 == loc_6 then
								desired = 4
								break
							end
							loc_3 = add_i32(loc_3, 1)
							loc_4 = add_i32(loc_11, loc_3)
							if loc_3 <= loc_5 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if load_i32(memory_at_0, loc_0 + 60) == 0 then
						while true do
							loc_2 = 1
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = load_i32(memory_at_0, loc_2 + 24)
					loc_11 = load_i32(memory_at_0, loc_0 + 64)
					if loc_5 == loc_11 then
						while true do
							loc_2 = 1
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_4 = bxor_i32(shr_u32(loc_5, 4), shr_u32(loc_5, 9))
					loc_6 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
					loc_9 = load_i32(memory_at_0, loc_0 + 52)
					loc_3 = 0
					while true do
						while true do
							loc_4 = band_i32(loc_4, loc_6)
							loc_8 = add_i32(mul_i32(loc_4, 12), loc_9)
							loc_2 = load_i32(memory_at_0, loc_8)
							if loc_2 ~= loc_5 then
								while true do
									if loc_2 ~= loc_11 then
										desired = 5
										break
									end
									loc_2 = 1
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if load_i32_u8(memory_at_0, loc_8 + 5) == 0 then
								while true do
									loc_2 = 1
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_3 = load_i32_u8(memory_at_0, loc_8 + 4)
							while true do
								if loc_10 ~= 0 then
									break
								end
								if load_i32_u8(memory_at_0, loc_14 + 4) == 0 then
									break
								end
								loc_2 = 1
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_7 ~= 0 then
								while true do
									loc_2 = 1
									if load_i32_u8(memory_at_0, loc_7 + 8) ~= 0 then
										desired = 3
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[151](loc_0, load_i32(memory_at_0, loc_13), band_i32(loc_3, 255))
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_2 = 1
						loc_3 = add_i32(loc_3, 1)
						loc_4 = add_i32(loc_4, loc_3)
						if loc_3 <= loc_6 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = load_i32(memory_at_0, loc_0 + 220)
				loc_4 = add_i32(loc_2, loc_3)
				if loc_4 >= 256 then
					desired = 1
					break
				end
				store_i32(memory_at_0, loc_0 + 220, loc_4)
				loc_6 = load_i32(memory_at_0, loc_0 + 224)
				store_i32(memory_at_0, loc_0 + 224, (if loc_4 < loc_6 then loc_6 else loc_4))
				FUNC_LIST[197](loc_0, add_i32(loc_1, 36), band_i32(loc_3, 255), band_i32(loc_2, 255), 1)
				if load_i32(memory_at_0, loc_1 + 32) == 0 then
					break
				end
				loc_2 = 0
				while true do
					FUNC_LIST[151](loc_0, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 28), shl_i32(loc_2, 2))), band_i32(add_i32(loc_2, loc_3), 255))
					loc_2 = add_i32(loc_2, 1)
					if loc_2 < load_i32(memory_at_0, loc_1 + 32) then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = add_i32(loc_12, 16)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32(memory_at_0, loc_12 + 4, 255)
		store_i32(memory_at_0, loc_12, loc_2)
		FUNC_LIST[147](add_i32(loc_1, 8), 5468, loc_12)
		error("out of code bounds")
	end
end
FUNC_LIST[184] = --[[ Luau::Compiler::compileStatFor(Luau::AstStatFor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local reg_0
	local desired
	while true do
		loc_11 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_11
		loc_15 = load_i32(memory_at_0, loc_0 + 220)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									if lt_i32(load_i32(memory_at_0, loc_0 + 4), 2) then
										break
									end
									if load_i32(memory_at_0, loc_0 + 120) == 0 then
										break
									end
									loc_7 = load_i32(memory_at_0, loc_0 + 124)
									loc_4 = load_i32(memory_at_0, loc_1 + 36)
									if loc_7 == loc_4 then
										break
									end
									loc_5 = bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9))
									loc_3 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
									loc_8 = load_i32(memory_at_0, loc_0 + 112)
									while true do
										loc_6 = band_i32(loc_3, loc_5)
										loc_9 = add_i32(shl_i32(loc_6, 5), loc_8)
										loc_5 = load_i32(memory_at_0, loc_9)
										if loc_5 ~= loc_4 then
											while true do
												if loc_5 == loc_7 then
													desired = 7
													break
												end
												loc_2 = add_i32(loc_2, 1)
												loc_5 = add_i32(loc_6, loc_2)
												if loc_2 <= loc_3 then
													desired = 8
													break
												end
												desired = 7
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if load_i32(memory_at_0, loc_9 + 8) == 0 then
										break
									end
									loc_4 = load_i32(memory_at_0, loc_1 + 32)
									if loc_4 == loc_7 then
										break
									end
									loc_5 = bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9))
									loc_2 = 0
									while true do
										loc_6 = band_i32(loc_3, loc_5)
										loc_9 = add_i32(shl_i32(loc_6, 5), loc_8)
										loc_5 = load_i32(memory_at_0, loc_9)
										if loc_5 ~= loc_4 then
											while true do
												if loc_5 == loc_7 then
													desired = 7
													break
												end
												loc_2 = add_i32(loc_2, 1)
												loc_5 = add_i32(loc_6, loc_2)
												if loc_2 <= loc_3 then
													desired = 8
													break
												end
												desired = 7
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if load_i32(memory_at_0, loc_9 + 8) == 0 then
										break
									end
									loc_4 = load_i32(memory_at_0, loc_1 + 40)
									if loc_4 ~= 0 then
										while true do
											if loc_4 == loc_7 then
												desired = 7
												break
											end
											loc_5 = bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9))
											loc_2 = 0
											while true do
												loc_6 = band_i32(loc_3, loc_5)
												loc_9 = add_i32(shl_i32(loc_6, 5), loc_8)
												loc_5 = load_i32(memory_at_0, loc_9)
												if loc_5 ~= loc_4 then
													while true do
														if loc_5 == loc_7 then
															desired = 7
															break
														end
														loc_2 = add_i32(loc_2, 1)
														loc_5 = add_i32(loc_6, loc_2)
														if loc_2 <= loc_3 then
															desired = 9
															break
														end
														desired = 7
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
															continue
														end
														break
													end
												end
												break
											end
											if desired then
												break
											end
											if load_i32(memory_at_0, loc_9 + 8) == 0 then
												desired = 7
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									reg_0 = FUNC_LIST[204](loc_0, loc_1, load_i32(memory_at_0, 47588), load_i32(memory_at_0, 47604))
									if reg_0 ~= 0 then
										desired = 6
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_16 = load_i32(memory_at_0, loc_0 + 256)
								loc_17 = load_i32(memory_at_0, loc_0 + 260)
								loc_8 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 236), load_i32(memory_at_0, loc_0 + 232)), 2)
								while true do
									loc_2 = load_i32(memory_at_0, loc_0 + 272)
									loc_3 = load_i32(memory_at_0, loc_0 + 276)
									if loc_2 < loc_3 then
										while true do
											store_i32(memory_at_0, loc_2 + 8, 0)
											store_i32(memory_at_0, loc_2 + 4, loc_8)
											store_i32(memory_at_0, loc_2, loc_8)
											store_i32(memory_at_0, loc_0 + 272, add_i32(loc_2, 12))
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_12 = add_i32(loc_0, 268)
									loc_5 = load_i32(memory_at_0, loc_12)
									loc_7 = div_i32(sub_i32(loc_2, loc_5), 12)
									loc_4 = add_i32(loc_7, 1)
									if loc_4 >= 357913942 then
										desired = 5
										break
									end
									loc_6 = 0
									loc_3 = div_i32(sub_i32(loc_3, loc_5), 12)
									loc_9 = shl_i32(loc_3, 1)
									loc_4 = (if loc_3 >= 178956970 then 357913941 else (if loc_4 < loc_9 then loc_9 else loc_4))
									if loc_4 ~= 0 then
										while true do
											if loc_4 >= 357913942 then
												desired = 4
												break
											end
											reg_0 = FUNC_LIST[606](mul_i32(loc_4, 12))
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									else
										while true do
											reg_0 = loc_6
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_6 = reg_0
									loc_3 = add_i32(loc_6, mul_i32(loc_7, 12))
									store_i32(memory_at_0, loc_3 + 8, 0)
									store_i32(memory_at_0, loc_3 + 4, loc_8)
									store_i32(memory_at_0, loc_3, loc_8)
									loc_6 = add_i32(mul_i32(loc_4, 12), loc_6)
									loc_4 = add_i32(loc_3, 12)
									if loc_2 ~= loc_5 then
										while true do
											while true do
												loc_3 = sub_i32(loc_3, 12)
												loc_2 = sub_i32(loc_2, 12)
												store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2))
												store_i32(memory_at_0, loc_3 + 8, load_i32(memory_at_0, loc_2 + 8))
												if loc_2 ~= loc_5 then
													continue
												end
												break
											end
											if desired then
												break
											end
											reg_0 = load_i32(memory_at_0, loc_12)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									else
										while true do
											reg_0 = loc_2
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_2 = reg_0
									store_i32(memory_at_0, loc_0 + 276, loc_6)
									store_i32(memory_at_0, loc_0 + 272, loc_4)
									store_i32(memory_at_0, loc_0 + 268, loc_3)
									if loc_2 == 0 then
										break
									end
									FUNC_LIST[609](loc_2)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								store_i32_n8(memory_at_0, loc_0 + 228, 1)
								loc_7 = load_i32(memory_at_0, loc_0 + 220)
								loc_13 = add_i32(loc_7, 3)
								if loc_13 >= 256 then
									desired = 3
									break
								end
								store_i32(memory_at_0, loc_0 + 220, loc_13)
								loc_2 = load_i32(memory_at_0, loc_0 + 224)
								loc_14 = (if loc_2 > loc_13 then loc_2 else loc_13)
								store_i32(memory_at_0, loc_0 + 224, loc_14)
								while true do
									loc_18 = band_i32(loc_7, 255)
									loc_10 = add_i32(loc_18, 2)
									loc_2 = loc_10
									reg_0 = loc_2
									if load_i32(memory_at_0, loc_0 + 100) == 0 then
										break
									end
									loc_4 = load_i32(memory_at_0, loc_1 + 28)
									loc_9 = load_i32(memory_at_0, loc_0 + 104)
									reg_0 = loc_10
									if loc_4 == loc_9 then
										break
									end
									loc_3 = bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9))
									loc_5 = sub_i32(load_i32(memory_at_0, loc_0 + 96), 1)
									loc_12 = load_i32(memory_at_0, loc_0 + 92)
									loc_2 = 0
									while true do
										while true do
											loc_6 = band_i32(loc_3, loc_5)
											loc_19 = add_i32(mul_i32(loc_6, 12), loc_12)
											loc_3 = load_i32(memory_at_0, loc_19)
											if loc_4 == loc_3 then
												desired = 8
												break
											end
											reg_0 = loc_10
											if loc_3 == loc_9 then
												desired = 7
												break
											end
											loc_2 = add_i32(loc_2, 1)
											loc_3 = add_i32(loc_6, loc_2)
											if loc_2 <= loc_5 then
												continue
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										reg_0 = loc_10
										desired = 7
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = loc_10
									if load_i32_u8(memory_at_0, loc_19 + 8) == 0 then
										break
									end
									loc_2 = add_i32(loc_7, 4)
									if loc_2 >= 256 then
										desired = 2
										break
									end
									store_i32(memory_at_0, loc_0 + 220, loc_2)
									store_i32(memory_at_0, loc_0 + 224, (if loc_2 < loc_14 then loc_14 else loc_2))
									reg_0 = loc_13
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_2 = reg_0
								FUNC_LIST[199](loc_0, load_i32(memory_at_0, loc_1 + 32), band_i32(loc_10, 255), 1)
								FUNC_LIST[199](loc_0, load_i32(memory_at_0, loc_1 + 36), loc_18, 1)
								while true do
									loc_3 = load_i32(memory_at_0, loc_1 + 40)
									if loc_3 ~= 0 then
										while true do
											FUNC_LIST[199](loc_0, loc_3, band_i32(add_i32(loc_7, 1), 255), 1)
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									FUNC_LIST[96](load_i32(memory_at_0, loc_0), 4, band_i32(add_i32(loc_7, 1), 255), 1, 0)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
								loc_3 = reg_0
								FUNC_LIST[97](load_i32(memory_at_0, loc_0), 56, band_i32(loc_7, 255), 0)
								reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
								loc_5 = reg_0
								loc_2 = band_i32(loc_2, 255)
								if loc_10 ~= loc_2 then
									while true do
										FUNC_LIST[96](load_i32(memory_at_0, loc_0), 6, loc_2, band_i32(loc_10, 255), 0)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								FUNC_LIST[151](loc_0, load_i32(memory_at_0, loc_1 + 28), loc_2)
								FUNC_LIST[152](loc_0, load_i32(memory_at_0, loc_1 + 44))
								FUNC_LIST[154](loc_0, loc_8)
								FUNC_LIST[156](loc_0, loc_8)
								if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
									while true do
										FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, loc_1 + 8), 1))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
								loc_4 = reg_0
								reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
								loc_6 = reg_0
								FUNC_LIST[97](load_i32(memory_at_0, loc_0), 57, band_i32(loc_7, 255), 0)
								reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
								loc_2 = reg_0
								reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), loc_3, loc_2)
								if reg_0 == 0 then
									desired = 1
									break
								end
								reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), loc_6, loc_5)
								if reg_0 == 0 then
									desired = 1
									break
								end
								loc_5 = sub_i32(loc_17, loc_16)
								loc_3 = shr_i32(loc_5, 3)
								FUNC_LIST[194](loc_0, loc_1, loc_3, loc_2, loc_4)
								while true do
									loc_1 = load_i32(memory_at_0, loc_0 + 256)
									loc_2 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 260), loc_1), 3)
									if loc_3 > loc_2 then
										while true do
											FUNC_LIST[195](add_i32(loc_0, 256), sub_i32(loc_3, loc_2))
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									if loc_2 <= loc_3 then
										break
									end
									store_i32(memory_at_0, loc_0 + 260, add_i32(loc_1, loc_5))
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								store_i32(memory_at_0, loc_0 + 272, sub_i32(load_i32(memory_at_0, loc_0 + 272), 12))
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i32(memory_at_0, loc_0 + 220, loc_15)
							GLOBAL_LIST[0].value = add_i32(loc_11, 32)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[40](loc_12)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[163]()
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i64(memory_at_0, loc_11, i64_from_u32(3, 255))
				FUNC_LIST[147](add_i32(loc_1, 8), 5468, loc_11)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_11 + 16, i64_from_u32(1, 255))
			FUNC_LIST[147](add_i32(loc_1, 8), 5468, add_i32(loc_11, 16))
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[147](add_i32(loc_1, 8), 4545, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[185] = --[[ Luau::Compiler::compileStatForIn(Luau::AstStatForIn*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	local br_map = {}
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		loc_12 = load_i32(memory_at_0, loc_0 + 256)
		loc_13 = load_i32(memory_at_0, loc_0 + 260)
		loc_8 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 236), load_i32(memory_at_0, loc_0 + 232)), 2)
		loc_14 = load_i32(memory_at_0, loc_0 + 220)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								loc_2 = load_i32(memory_at_0, loc_0 + 272)
								loc_3 = load_i32(memory_at_0, loc_0 + 276)
								if loc_2 < loc_3 then
									while true do
										store_i32(memory_at_0, loc_2 + 8, 0)
										store_i32(memory_at_0, loc_2 + 4, loc_8)
										store_i32(memory_at_0, loc_2, loc_8)
										store_i32(memory_at_0, loc_0 + 272, add_i32(loc_2, 12))
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_10 = add_i32(loc_0, 268)
								loc_7 = load_i32(memory_at_0, loc_10)
								loc_9 = div_i32(sub_i32(loc_2, loc_7), 12)
								loc_6 = add_i32(loc_9, 1)
								if loc_6 >= 357913942 then
									desired = 5
									break
								end
								loc_3 = div_i32(sub_i32(loc_3, loc_7), 12)
								loc_15 = shl_i32(loc_3, 1)
								loc_6 = (if loc_3 >= 178956970 then 357913941 else (if loc_6 < loc_15 then loc_15 else loc_6))
								if loc_6 ~= 0 then
									while true do
										if loc_6 >= 357913942 then
											desired = 4
											break
										end
										reg_0 = FUNC_LIST[606](mul_i32(loc_6, 12))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = loc_4
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_4 = reg_0
								loc_3 = add_i32(loc_4, mul_i32(loc_9, 12))
								store_i32(memory_at_0, loc_3 + 8, 0)
								store_i32(memory_at_0, loc_3 + 4, loc_8)
								store_i32(memory_at_0, loc_3, loc_8)
								loc_4 = add_i32(mul_i32(loc_6, 12), loc_4)
								loc_6 = add_i32(loc_3, 12)
								if loc_2 ~= loc_7 then
									while true do
										while true do
											loc_3 = sub_i32(loc_3, 12)
											loc_2 = sub_i32(loc_2, 12)
											store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2))
											store_i32(memory_at_0, loc_3 + 8, load_i32(memory_at_0, loc_2 + 8))
											if loc_2 ~= loc_7 then
												continue
											end
											break
										end
										if desired then
											break
										end
										reg_0 = load_i32(memory_at_0, loc_10)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = loc_2
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_2 = reg_0
								store_i32(memory_at_0, loc_0 + 276, loc_4)
								store_i32(memory_at_0, loc_0 + 272, loc_6)
								store_i32(memory_at_0, loc_0 + 268, loc_3)
								if loc_2 == 0 then
									break
								end
								FUNC_LIST[609](loc_2)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i32_n8(memory_at_0, loc_0 + 228, 1)
							loc_7 = load_i32(memory_at_0, loc_0 + 220)
							loc_2 = add_i32(loc_7, 3)
							if loc_2 >= 256 then
								desired = 3
								break
							end
							store_i32(memory_at_0, loc_0 + 220, loc_2)
							loc_3 = load_i32(memory_at_0, loc_0 + 224)
							store_i32(memory_at_0, loc_0 + 224, (if loc_2 < loc_3 then loc_3 else loc_2))
							loc_11 = loc_1
							loc_9 = add_i32(loc_11, 36)
							FUNC_LIST[197](loc_0, loc_9, band_i32(loc_7, 255), 3, 1)
							loc_3 = load_i32(memory_at_0, loc_0 + 220)
							loc_2 = load_i32(memory_at_0, loc_1 + 32)
							loc_6 = (if loc_2 > 2 then 1 else 0)
							loc_4 = (if loc_6 ~= 0 then loc_2 else 2)
							loc_2 = add_i32(loc_3, loc_4)
							if loc_2 >= 256 then
								desired = 2
								break
							end
							store_i32(memory_at_0, loc_0 + 220, loc_2)
							loc_4 = load_i32(memory_at_0, loc_0 + 224)
							store_i32(memory_at_0, loc_0 + 224, (if loc_2 < loc_4 then loc_4 else loc_2))
							loc_4 = 76
							while true do
								if loc_6 ~= 0 then
									break
								end
								if le_i32(load_i32(memory_at_0, loc_0 + 4), 0) then
									break
								end
								while true do
									while true do
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 0, 1, }
											end)()
										end
										temp = br_map[1][sub_i32(load_i32(memory_at_0, loc_1 + 40), 1)] or 2
										if temp < 1 then
											break
										elseif temp > 1 then
											desired = 6
											break
										else
											desired = 7
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_2 = load_i32(memory_at_0, load_i32(memory_at_0, loc_11 + 36))
									if load_i32(memory_at_0, loc_2 + 4) ~= load_i32(memory_at_0, 47244) then
										desired = 6
										break
									end
									FUNC_LIST[16](add_i32(loc_5, 24), load_i32(memory_at_0, loc_2 + 24), add_i32(loc_0, 72), add_i32(loc_0, 92))
									if load_i32(memory_at_0, loc_5 + 24) ~= 0 then
										desired = 6
										break
									end
									loc_2 = load_i32(memory_at_0, loc_5 + 28)
									if loc_2 == 0 then
										desired = 6
										break
									end
									reg_0 = FUNC_LIST[544](loc_2, 2100)
									if reg_0 == 0 then
										while true do
											loc_4 = 59
											desired = 6
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									reg_2 = FUNC_LIST[544](loc_2, 2101)
									loc_4 = (if reg_2 ~= 0 then 76 else 61)
									desired = 6
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[16](add_i32(loc_5, 24), load_i32(memory_at_0, load_i32(memory_at_0, loc_11 + 36)), add_i32(loc_0, 72), add_i32(loc_0, 92))
								if load_i32(memory_at_0, loc_5 + 24) ~= 0 then
									break
								end
								loc_2 = load_i32(memory_at_0, loc_5 + 28)
								if loc_2 == 0 then
									break
								end
								reg_2 = FUNC_LIST[544](loc_2, 1314)
								loc_4 = (if reg_2 ~= 0 then 76 else 61)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
							loc_6 = reg_0
							loc_2 = 0
							FUNC_LIST[97](load_i32(memory_at_0, loc_0), loc_4, band_i32(loc_7, 255), 0)
							reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
							loc_9 = reg_0
							if load_i32(memory_at_0, loc_1 + 32) ~= 0 then
								while true do
									while true do
										FUNC_LIST[151](loc_0, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 28), shl_i32(loc_2, 2))), band_i32(add_i32(loc_2, loc_3), 255))
										loc_2 = add_i32(loc_2, 1)
										if loc_2 < load_i32(memory_at_0, loc_1 + 32) then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[152](loc_0, load_i32(memory_at_0, loc_1 + 44))
							FUNC_LIST[154](loc_0, loc_8)
							FUNC_LIST[156](loc_0, loc_8)
							if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
								while true do
									FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, loc_1 + 8), 1))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
							loc_3 = reg_0
							reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
							loc_2 = reg_0
							FUNC_LIST[97](load_i32(memory_at_0, loc_0), 58, band_i32(loc_7, 255), 0)
							FUNC_LIST[98](load_i32(memory_at_0, loc_0), bor_i32(load_i32(memory_at_0, loc_1 + 32), shl_i32((if loc_4 == 59 then 1 else 0), 31)))
							reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
							loc_7 = reg_0
							reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), loc_6, loc_2)
							if reg_0 == 0 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), loc_2, loc_9)
							if reg_0 == 0 then
								desired = 1
								break
							end
							loc_8 = sub_i32(loc_13, loc_12)
							loc_2 = shr_i32(loc_8, 3)
							FUNC_LIST[194](loc_0, loc_1, loc_2, loc_7, loc_3)
							while true do
								loc_3 = load_i32(memory_at_0, loc_0 + 256)
								loc_1 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 260), loc_3), 3)
								if loc_2 > loc_1 then
									while true do
										FUNC_LIST[195](add_i32(loc_0, 256), sub_i32(loc_2, loc_1))
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								if loc_1 <= loc_2 then
									break
								end
								store_i32(memory_at_0, loc_0 + 260, add_i32(loc_3, loc_8))
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i32(memory_at_0, loc_0 + 220, loc_14)
							store_i32(memory_at_0, loc_0 + 272, sub_i32(load_i32(memory_at_0, loc_0 + 272), 12))
							GLOBAL_LIST[0].value = add_i32(loc_5, 32)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[40](loc_10)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[163]()
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i64(memory_at_0, loc_5, i64_from_u32(3, 255))
				FUNC_LIST[147](add_i32(loc_1, 8), 5468, loc_5)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_5 + 20, 255)
			store_i32(memory_at_0, loc_5 + 16, loc_4)
			FUNC_LIST[147](add_i32(loc_1, 8), 5468, add_i32(loc_5, 16))
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[147](add_i32(loc_1, 8), 4545, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[186] = --[[ Luau::Compiler::compileStatAssign(Luau::AstStatAssign*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_4
		store_i32(memory_at_0, loc_4 + 88, loc_0)
		store_i32(memory_at_0, loc_4 + 92, load_i32(memory_at_0, loc_0 + 220))
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										loc_7 = load_i32(memory_at_0, loc_1 + 32)
										if loc_7 == 1 then
											while true do
												if load_i32(memory_at_0, loc_1 + 40) ~= 1 then
													while true do
														store_i64(memory_at_0, loc_4 + 48, i64_ZERO)
														desired = 8
														break
													end
													if desired then
														break
													end
												end
												FUNC_LIST[205](add_i32(loc_4, 56), loc_0, load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 28)), add_i32(loc_4, 88))
												loc_5 = load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 36))
												if load_i32(memory_at_0, loc_4 + 56) == 0 then
													while true do
														FUNC_LIST[199](loc_0, loc_5, load_i32_u8(memory_at_0, loc_4 + 60), 0)
														desired = 1
														break
													end
													if desired then
														break
													end
												end
												loc_2 = load_i32(memory_at_0, loc_5 + 4)
												loc_8 = load_i32(memory_at_0, 47220)
												while true do
													if loc_5 ~= 0 then
														while true do
															loc_3 = loc_5
															if loc_2 == loc_8 then
																desired = 10
																break
															end
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													loc_7 = load_i32(memory_at_0, 47300)
													loc_6 = load_i32(memory_at_0, 47180)
													loc_3 = loc_5
													while true do
														if band_i32((if loc_2 ~= loc_6 then 1 else 0), (if loc_2 ~= loc_7 then 1 else 0)) ~= 0 then
															desired = 4
															break
														end
														loc_3 = load_i32(memory_at_0, loc_3 + 24)
														loc_2 = load_i32(memory_at_0, loc_3 + 4)
														if loc_3 == 0 then
															continue
														end
														if loc_2 ~= loc_8 then
															continue
														end
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													break
												end
												if desired then
													break
												end
												if load_i32(memory_at_0, loc_0 + 60) == 0 then
													desired = 4
													break
												end
												loc_7 = load_i32(memory_at_0, loc_3 + 24)
												loc_9 = load_i32(memory_at_0, loc_0 + 64)
												if loc_7 == loc_9 then
													desired = 4
													break
												end
												loc_3 = bxor_i32(shr_u32(loc_7, 4), shr_u32(loc_7, 9))
												loc_6 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
												loc_10 = load_i32(memory_at_0, loc_0 + 52)
												loc_2 = 0
												while true do
													loc_8 = band_i32(loc_3, loc_6)
													loc_11 = add_i32(mul_i32(loc_8, 12), loc_10)
													loc_3 = load_i32(memory_at_0, loc_11)
													if loc_3 ~= loc_7 then
														while true do
															if loc_3 == loc_9 then
																desired = 4
																break
															end
															loc_2 = add_i32(loc_2, 1)
															loc_3 = add_i32(loc_8, loc_2)
															if loc_2 <= loc_6 then
																desired = 10
																break
															end
															desired = 4
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
																continue
															end
															break
														end
													end
													break
												end
												if desired then
													break
												end
												if load_i32_u8(memory_at_0, loc_11 + 5) == 0 then
													desired = 4
													break
												end
												loc_3 = load_i32_u8(memory_at_0, loc_11 + 4)
												desired = 3
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										store_i32(memory_at_0, loc_4 + 52, 0)
										store_i64(memory_at_0, loc_4 + 44, i64_ZERO)
										if loc_7 == 0 then
											desired = 7
											break
										end
										if loc_7 >= 119304648 then
											desired = 6
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_3 = mul_i32(loc_7, 36)
									reg_1 = FUNC_LIST[606](loc_3)
									loc_2 = reg_1
									store_i32(memory_at_0, loc_4 + 44, loc_2)
									loc_8 = add_i32(loc_2, loc_3)
									store_i32(memory_at_0, loc_4 + 52, loc_8)
									loc_9 = sub_i32(loc_3, 36)
									loc_5 = band_i32(add_i32(div_u32(loc_9, 36), 1), 7)
									if loc_5 ~= 0 then
										while true do
											loc_3 = 0
											while true do
												loc_6 = add_i32(loc_2, 32)
												store_i32(memory_at_0, loc_6, 0)
												store_i64(memory_at_0, loc_2, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 24, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 16, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 8, i64_ZERO)
												store_i32_n16(memory_at_0, loc_2 + 32, 65535)
												loc_2 = add_i32(loc_2, 36)
												loc_3 = add_i32(loc_3, 1)
												if loc_5 ~= loc_3 then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									if loc_9 >= 252 then
										while true do
											while true do
												loc_3 = add_i32(loc_2, 32)
												store_i32(memory_at_0, loc_3, 0)
												loc_6 = add_i32(loc_2, 68)
												store_i32(memory_at_0, loc_6, 0)
												loc_5 = add_i32(loc_2, 104)
												store_i32(memory_at_0, loc_5, 0)
												store_i64(memory_at_0, loc_2, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 36, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 72, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 24, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 16, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 8, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 44, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 52, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 60, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 80, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 88, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 96, i64_ZERO)
												store_i32_n16(memory_at_0, loc_2 + 32, 65535)
												store_i32_n16(memory_at_0, loc_2 + 68, 65535)
												store_i32_n16(memory_at_0, loc_2 + 104, 65535)
												loc_3 = add_i32(loc_2, 140)
												store_i32(memory_at_0, loc_3, 0)
												store_i64(memory_at_0, loc_2 + 132, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 124, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 116, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 108, i64_ZERO)
												store_i32_n16(memory_at_0, loc_2 + 140, 65535)
												loc_3 = add_i32(loc_2, 176)
												store_i32(memory_at_0, loc_3, 0)
												store_i64(memory_at_0, loc_2 + 168, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 160, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 152, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 144, i64_ZERO)
												store_i32_n16(memory_at_0, loc_2 + 176, 65535)
												loc_3 = add_i32(loc_2, 212)
												store_i32(memory_at_0, loc_3, 0)
												store_i64(memory_at_0, loc_2 + 204, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 196, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 188, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 180, i64_ZERO)
												store_i32_n16(memory_at_0, loc_2 + 212, 65535)
												loc_3 = add_i32(loc_2, 248)
												store_i32(memory_at_0, loc_3, 0)
												store_i64(memory_at_0, loc_2 + 240, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 232, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 224, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 216, i64_ZERO)
												store_i32_n16(memory_at_0, loc_2 + 248, 65535)
												loc_3 = add_i32(loc_2, 284)
												store_i32(memory_at_0, loc_3, 0)
												store_i64(memory_at_0, loc_2 + 276, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 268, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 260, i64_ZERO)
												store_i64(memory_at_0, loc_2 + 252, i64_ZERO)
												store_i32_n16(memory_at_0, loc_2 + 284, 65535)
												loc_2 = add_i32(loc_2, 288)
												if loc_8 ~= loc_2 then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									store_i32(memory_at_0, loc_4 + 48, loc_8)
									if loc_7 == 0 then
										break
									end
									loc_2 = 0
									while true do
										FUNC_LIST[205](add_i32(loc_4, 56), loc_0, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 28), shl_i32(loc_2, 2))), add_i32(loc_4, 88))
										loc_3 = add_i32(load_i32(memory_at_0, loc_4 + 44), mul_i32(loc_2, 36))
										store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_4 + 56))
										store_i64(memory_at_0, loc_3 + 24, load_i64(memory_at_0, loc_4 + 80))
										store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_4 + 72))
										store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, sub_i32(loc_4, 4294967232)))
										loc_2 = add_i32(loc_2, 1)
										if loc_2 < load_i32(memory_at_0, loc_1 + 32) then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[206](loc_0, loc_1, add_i32(loc_4, 44), add_i32(loc_1, 36))
								loc_2 = load_i32(memory_at_0, loc_1 + 32)
								if loc_2 == 0 then
									while true do
										loc_2 = 0
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								while true do
									loc_5 = loc_10
									loc_3 = load_i32(memory_at_0, loc_1 + 40)
									if loc_5 >= loc_3 then
										desired = 5
										break
									end
									loc_6 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 36), shl_i32(loc_5, 2)))
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															loc_10 = add_i32(loc_5, 1)
															if loc_3 ~= loc_10 then
																break
															end
															if loc_2 <= loc_3 then
																break
															end
															loc_8 = load_i32(memory_at_0, loc_0 + 220)
															loc_3 = band_i32(add_i32(sub_i32(loc_2, loc_3), 1), 255)
															loc_2 = add_i32(loc_8, loc_3)
															if loc_2 >= 256 then
																desired = 12
																break
															end
															store_i32(memory_at_0, loc_0 + 220, loc_2)
															loc_7 = load_i32(memory_at_0, loc_0 + 224)
															store_i32(memory_at_0, loc_0 + 224, (if loc_2 < loc_7 then loc_7 else loc_2))
															FUNC_LIST[207](loc_0, loc_6, band_i32(loc_8, 255), loc_3, 1)
															loc_9 = load_i32(memory_at_0, loc_1 + 32)
															if loc_9 <= loc_5 then
																desired = 9
																break
															end
															loc_3 = 0
															loc_7 = load_i32(memory_at_0, loc_4 + 44)
															loc_2 = loc_5
															loc_6 = band_i32(sub_i32(loc_9, loc_2), 3)
															if loc_6 ~= 0 then
																while true do
																	while true do
																		store_i32_n8(memory_at_0, add_i32(mul_i32(loc_2, 36), loc_7) + 33, add_i32(loc_8, sub_i32(loc_2, loc_5)))
																		loc_2 = add_i32(loc_2, 1)
																		loc_3 = add_i32(loc_3, 1)
																		if loc_6 ~= loc_3 then
																			continue
																		end
																		break
																	end
																	if desired then
																		break
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															if sub_i32(loc_5, loc_9) > 4294967292 then
																desired = 9
																break
															end
															while true do
																loc_3 = add_i32(mul_i32(loc_2, 36), loc_7)
																loc_6 = add_i32(loc_8, sub_i32(loc_2, loc_5))
																store_i32_n8(memory_at_0, loc_3 + 33, loc_6)
																store_i32_n8(memory_at_0, loc_3 + 69, add_i32(loc_6, 1))
																store_i32_n8(memory_at_0, loc_3 + 105, add_i32(loc_6, 2))
																store_i32_n8(memory_at_0, loc_3 + 141, add_i32(loc_6, 3))
																loc_2 = add_i32(loc_2, 4)
																if loc_9 ~= loc_2 then
																	continue
																end
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															desired = 9
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_9 = add_i32(load_i32(memory_at_0, loc_4 + 44), mul_i32(loc_5, 36))
														if load_i32(memory_at_0, loc_9) == 0 then
															while true do
																loc_2 = load_i32_u8(memory_at_0, loc_9 + 32)
																loc_2 = (if loc_2 == 255 then load_i32_u8(memory_at_0, loc_9 + 4) else loc_2)
																store_i32_n8(memory_at_0, loc_9 + 33, loc_2)
																FUNC_LIST[199](loc_0, loc_6, band_i32(loc_2, 255), 0)
																desired = 9
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														loc_2 = load_i32(memory_at_0, loc_6 + 4)
														loc_8 = load_i32(memory_at_0, 47220)
														while true do
															if loc_6 ~= 0 then
																while true do
																	loc_3 = loc_6
																	if loc_2 == loc_8 then
																		desired = 13
																		break
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															loc_7 = load_i32(memory_at_0, 47300)
															loc_5 = load_i32(memory_at_0, 47180)
															loc_3 = loc_6
															while true do
																if band_i32((if loc_2 ~= loc_5 then 1 else 0), (if loc_2 ~= loc_7 then 1 else 0)) ~= 0 then
																	desired = 11
																	break
																end
																loc_3 = load_i32(memory_at_0, loc_3 + 24)
																loc_2 = load_i32(memory_at_0, loc_3 + 4)
																if loc_3 == 0 then
																	continue
																end
																if loc_2 ~= loc_8 then
																	continue
																end
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														if load_i32(memory_at_0, loc_0 + 60) == 0 then
															desired = 11
															break
														end
														loc_7 = load_i32(memory_at_0, loc_3 + 24)
														loc_11 = load_i32(memory_at_0, loc_0 + 64)
														if loc_7 == loc_11 then
															desired = 11
															break
														end
														loc_3 = bxor_i32(shr_u32(loc_7, 4), shr_u32(loc_7, 9))
														loc_5 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
														loc_13 = load_i32(memory_at_0, loc_0 + 52)
														loc_2 = 0
														while true do
															loc_8 = band_i32(loc_3, loc_5)
															loc_12 = add_i32(mul_i32(loc_8, 12), loc_13)
															loc_3 = load_i32(memory_at_0, loc_12)
															if loc_3 ~= loc_7 then
																while true do
																	if loc_3 == loc_11 then
																		desired = 11
																		break
																	end
																	loc_2 = add_i32(loc_2, 1)
																	loc_3 = add_i32(loc_8, loc_2)
																	if loc_2 <= loc_5 then
																		desired = 13
																		break
																	end
																	desired = 11
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																		continue
																	end
																	break
																end
															end
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														if load_i32_u8(memory_at_0, loc_12 + 5) == 0 then
															desired = 11
															break
														end
														loc_3 = load_i32_u8(memory_at_0, loc_12 + 4)
														desired = 10
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													store_i32(memory_at_0, loc_4 + 20, 255)
													store_i32(memory_at_0, loc_4 + 16, loc_3)
													FUNC_LIST[147](add_i32(loc_1, 8), 5468, add_i32(loc_4, 16))
													error("out of code bounds")
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_3 = load_i32(memory_at_0, loc_0 + 220)
												loc_2 = add_i32(loc_3, 1)
												if loc_2 >= 256 then
													desired = 8
													break
												end
												store_i32(memory_at_0, loc_0 + 220, loc_2)
												loc_5 = load_i32(memory_at_0, loc_0 + 224)
												store_i32(memory_at_0, loc_0 + 224, (if loc_2 < loc_5 then loc_5 else loc_2))
												FUNC_LIST[199](loc_0, loc_6, band_i32(loc_3, 255), 1)
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											store_i32_n8(memory_at_0, loc_9 + 33, loc_3)
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_2 = load_i32(memory_at_0, loc_1 + 32)
										if loc_2 > loc_10 then
											desired = 7
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								store_i64(memory_at_0, loc_4 + 32, i64_from_u32(1, 255))
								FUNC_LIST[147](add_i32(loc_6, 8), 5468, add_i32(loc_4, 32))
								error("out of code bounds")
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[40](add_i32(loc_4, 44))
							error("out of code bounds")
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_2 < load_i32(memory_at_0, loc_1 + 40) then
							while true do
								while true do
									FUNC_LIST[182](loc_0, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 36), shl_i32(loc_2, 2))))
									loc_2 = add_i32(loc_2, 1)
									if loc_2 < load_i32(memory_at_0, loc_1 + 40) then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							loc_2 = load_i32(memory_at_0, loc_4 + 44)
							loc_3 = load_i32(memory_at_0, loc_4 + 48)
							if loc_2 == loc_3 then
								break
							end
							while true do
								if load_i32(memory_at_0, loc_2) ~= 0 then
									while true do
										if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
											while true do
												FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, loc_2 + 16), 1))
												break
											end
											if desired then
												break
											end
										end
										FUNC_LIST[208](loc_0, loc_2, load_i32_u8(memory_at_0, loc_2 + 33), 1)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								loc_2 = add_i32(loc_2, 36)
								if loc_3 ~= loc_2 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_3 = load_i32(memory_at_0, loc_4 + 44)
							loc_2 = load_i32(memory_at_0, loc_4 + 48)
							if loc_3 == loc_2 then
								break
							end
							while true do
								while true do
									if load_i32(memory_at_0, loc_3) ~= 0 then
										break
									end
									loc_6 = load_i32_u8(memory_at_0, loc_3 + 33)
									loc_5 = load_i32_u8(memory_at_0, loc_3 + 4)
									if loc_6 == loc_5 then
										break
									end
									FUNC_LIST[96](load_i32(memory_at_0, loc_0), 6, loc_5, loc_6, 0)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								loc_3 = add_i32(loc_3, 36)
								if loc_2 ~= loc_3 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_2 = load_i32(memory_at_0, loc_4 + 44)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_2 == 0 then
							desired = 1
							break
						end
						store_i32(memory_at_0, loc_4 + 48, loc_2)
						FUNC_LIST[609](loc_2)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = load_i32(memory_at_0, loc_0 + 220)
					loc_2 = add_i32(loc_3, 1)
					if loc_2 >= 256 then
						desired = 2
						break
					end
					store_i32(memory_at_0, loc_0 + 220, loc_2)
					loc_6 = load_i32(memory_at_0, loc_0 + 224)
					store_i32(memory_at_0, loc_0 + 224, (if loc_2 < loc_6 then loc_6 else loc_2))
					FUNC_LIST[199](loc_0, loc_5, band_i32(loc_3, 255), 1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
					while true do
						FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 28)) + 8), 1))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[208](loc_0, add_i32(loc_4, 56), band_i32(loc_3, 255), 1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_4, i64_from_u32(1, 255))
			FUNC_LIST[147](add_i32(loc_5, 8), 5468, loc_4)
			error("out of code bounds")
		end
		store_i32(memory_at_0, load_i32(memory_at_0, loc_4 + 88) + 220, load_i32(memory_at_0, loc_4 + 92))
		GLOBAL_LIST[0].value = add_i32(loc_4, 96)
		break
	end
end
FUNC_LIST[187] = --[[ Luau::Compiler::compileStatCompoundAssign(Luau::AstStatCompoundAssign*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_4
		store_i32(memory_at_0, loc_4 + 88, loc_0)
		store_i32(memory_at_0, loc_4 + 92, load_i32(memory_at_0, loc_0 + 220))
		FUNC_LIST[205](add_i32(loc_4, 56), loc_0, load_i32(memory_at_0, loc_1 + 32), add_i32(loc_4, 88))
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											loc_3 = load_i32(memory_at_0, loc_4 + 56)
											if loc_3 == 0 then
												while true do
													loc_9 = load_i32_u8(memory_at_0, loc_4 + 60)
													desired = 9
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_9 = load_i32(memory_at_0, loc_0 + 220)
											loc_2 = add_i32(loc_9, 1)
											if loc_2 >= 256 then
												desired = 8
												break
											end
											store_i32(memory_at_0, loc_0 + 220, loc_2)
											loc_5 = load_i32(memory_at_0, loc_0 + 224)
											store_i32(memory_at_0, loc_0 + 224, (if loc_2 < loc_5 then loc_5 else loc_2))
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										while true do
											loc_2 = load_i32(memory_at_0, loc_1 + 28)
											if loc_2 >= 7 then
												while true do
													if loc_2 == 7 then
														desired = 9
														break
													end
													desired = 1
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											if loc_3 ~= 0 then
												while true do
													FUNC_LIST[208](loc_0, add_i32(loc_4, 56), band_i32(loc_9, 255), 0)
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_5 = load_i32(memory_at_0, loc_1 + 36)
											while true do
												while true do
													while true do
														if load_i32(memory_at_0, loc_0 + 120) == 0 then
															break
														end
														loc_8 = load_i32(memory_at_0, loc_0 + 124)
														if loc_5 == loc_8 then
															break
														end
														loc_3 = bxor_i32(shr_u32(loc_5, 4), shr_u32(loc_5, 9))
														loc_6 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
														loc_11 = load_i32(memory_at_0, loc_0 + 112)
														loc_2 = 0
														while true do
															loc_7 = band_i32(loc_3, loc_6)
															loc_10 = add_i32(shl_i32(loc_7, 5), loc_11)
															loc_3 = load_i32(memory_at_0, loc_10)
															if loc_3 ~= loc_5 then
																while true do
																	if loc_3 == loc_8 then
																		desired = 12
																		break
																	end
																	loc_2 = add_i32(loc_2, 1)
																	loc_3 = add_i32(loc_7, loc_2)
																	if loc_2 <= loc_6 then
																		desired = 13
																		break
																	end
																	desired = 12
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																		continue
																	end
																	break
																end
															end
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														if load_i32(memory_at_0, loc_10 + 8) ~= 3 then
															break
														end
														reg_0 = FUNC_LIST[84](load_i32(memory_at_0, loc_0), load_f64(memory_at_0, loc_10 + 16))
														loc_2 = reg_0
														if lt_i32(loc_2, 0) then
															desired = 7
															break
														end
														if loc_2 < 256 then
															desired = 11
															break
														end
														loc_5 = load_i32(memory_at_0, loc_1 + 36)
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_2 = load_i32(memory_at_0, loc_5 + 4)
													loc_7 = load_i32(memory_at_0, 47220)
													while true do
														if loc_5 ~= 0 then
															while true do
																loc_3 = loc_5
																if loc_2 == loc_7 then
																	desired = 12
																	break
																end
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														loc_8 = load_i32(memory_at_0, 47300)
														loc_6 = load_i32(memory_at_0, 47180)
														loc_3 = loc_5
														while true do
															if band_i32((if loc_2 ~= loc_6 then 1 else 0), (if loc_2 ~= loc_8 then 1 else 0)) ~= 0 then
																desired = 4
																break
															end
															loc_3 = load_i32(memory_at_0, loc_3 + 24)
															loc_2 = load_i32(memory_at_0, loc_3 + 4)
															if loc_3 == 0 then
																continue
															end
															if loc_2 ~= loc_7 then
																continue
															end
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													if load_i32(memory_at_0, loc_0 + 60) == 0 then
														desired = 4
														break
													end
													loc_8 = load_i32(memory_at_0, loc_3 + 24)
													loc_11 = load_i32(memory_at_0, loc_0 + 64)
													if loc_8 == loc_11 then
														desired = 4
														break
													end
													loc_3 = bxor_i32(shr_u32(loc_8, 4), shr_u32(loc_8, 9))
													loc_6 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
													loc_10 = load_i32(memory_at_0, loc_0 + 52)
													loc_2 = 0
													while true do
														loc_7 = band_i32(loc_3, loc_6)
														loc_12 = add_i32(mul_i32(loc_7, 12), loc_10)
														loc_3 = load_i32(memory_at_0, loc_12)
														if loc_8 == loc_3 then
															desired = 10
															break
														end
														if loc_3 == loc_11 then
															desired = 4
															break
														end
														loc_2 = add_i32(loc_2, 1)
														loc_3 = add_i32(loc_7, loc_2)
														if loc_2 <= loc_6 then
															continue
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													desired = 4
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_3 = 0
												loc_5 = load_i32(memory_at_0, loc_0)
												loc_6 = load_i32(memory_at_0, loc_1 + 28)
												reg_0 = loc_5
												if loc_6 <= 6 then
													while true do
														reg_1 = load_i32(memory_at_0, add_i32(shl_i32(loc_6, 2), 12332))
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												else
													while true do
														reg_1 = loc_3
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_3 = reg_1
												loc_6 = band_i32(loc_9, 255)
												FUNC_LIST[96](reg_0, loc_3, loc_6, loc_6, band_i32(loc_2, 255))
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if load_i32_u8(memory_at_0, loc_12 + 5) == 0 then
												desired = 4
												break
											end
											loc_3 = load_i32_u8(memory_at_0, loc_12 + 4)
											desired = 3
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_3 = load_i32(memory_at_0, loc_1 + 36)
										reg_1 = FUNC_LIST[606](4)
										loc_2 = reg_1
										store_i32(memory_at_0, loc_4 + 44, loc_2)
										loc_5 = add_i32(loc_2, 4)
										store_i32(memory_at_0, loc_4 + 52, loc_5)
										store_i32(memory_at_0, loc_2, loc_3)
										store_i32(memory_at_0, loc_4 + 48, loc_5)
										FUNC_LIST[209](add_i32(loc_4, 44))
										loc_3 = add_i32(shr_i32(sub_i32(load_i32(memory_at_0, loc_4 + 48), load_i32(memory_at_0, loc_4 + 44)), 2), 1)
										loc_7 = load_i32(memory_at_0, loc_0 + 220)
										loc_2 = add_i32(loc_3, loc_7)
										if loc_2 >= 256 then
											desired = 6
											break
										end
										store_i32(memory_at_0, loc_0 + 220, loc_2)
										loc_3 = load_i32(memory_at_0, loc_0 + 224)
										store_i32(memory_at_0, loc_0 + 224, (if loc_2 < loc_3 then loc_3 else loc_2))
										loc_2 = 0
										loc_1 = band_i32(loc_7, 255)
										FUNC_LIST[208](loc_0, add_i32(loc_4, 56), loc_1, 0)
										loc_5 = load_i32(memory_at_0, loc_4 + 48)
										loc_3 = load_i32(memory_at_0, loc_4 + 44)
										if loc_5 == loc_3 then
											while true do
												loc_5 = shr_i32(sub_i32(loc_5, loc_3), 2)
												desired = 5
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_6 = add_i32(loc_7, 1)
										while true do
											FUNC_LIST[199](loc_0, load_i32(memory_at_0, add_i32(shl_i32(loc_2, 2), loc_3)), band_i32(add_i32(loc_2, loc_6), 255), 1)
											loc_2 = add_i32(loc_2, 1)
											loc_3 = load_i32(memory_at_0, loc_4 + 44)
											loc_5 = shr_i32(sub_i32(load_i32(memory_at_0, loc_4 + 48), loc_3), 2)
											if loc_2 < loc_5 then
												continue
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									store_i64(memory_at_0, loc_4 + 32, i64_from_u32(1, 255))
									FUNC_LIST[147](add_i32(loc_1, 8), 5468, add_i32(loc_4, 32))
									error("out of code bounds")
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[147](add_i32(loc_5, 8), 4438, 0)
								error("out of code bounds")
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i32(memory_at_0, loc_4 + 20, 255)
							store_i32(memory_at_0, loc_4 + 16, loc_3)
							FUNC_LIST[147](add_i32(loc_1, 8), 5468, add_i32(loc_4, 16))
							error("out of code bounds")
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[96](load_i32(memory_at_0, loc_0), 49, band_i32(loc_9, 255), loc_1, band_i32(add_i32(loc_5, loc_7), 255))
						loc_2 = load_i32(memory_at_0, loc_4 + 44)
						if loc_2 == 0 then
							desired = 1
							break
						end
						store_i32(memory_at_0, loc_4 + 48, loc_2)
						FUNC_LIST[609](loc_2)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = load_i32(memory_at_0, loc_0 + 220)
					loc_2 = add_i32(loc_3, 1)
					if loc_2 >= 256 then
						desired = 2
						break
					end
					store_i32(memory_at_0, loc_0 + 220, loc_2)
					loc_6 = load_i32(memory_at_0, loc_0 + 224)
					store_i32(memory_at_0, loc_0 + 224, (if loc_2 < loc_6 then loc_6 else loc_2))
					FUNC_LIST[199](loc_0, loc_5, band_i32(loc_3, 255), 1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = 0
				loc_5 = load_i32(memory_at_0, loc_0)
				loc_6 = load_i32(memory_at_0, loc_1 + 28)
				reg_0 = loc_5
				if loc_6 <= 6 then
					while true do
						reg_1 = load_i32(memory_at_0, add_i32(shl_i32(loc_6, 2), 12360))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_1 = loc_2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = reg_1
				loc_6 = band_i32(loc_9, 255)
				FUNC_LIST[96](reg_0, loc_2, loc_6, loc_6, band_i32(loc_3, 255))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_4, i64_from_u32(1, 255))
			FUNC_LIST[147](add_i32(loc_5, 8), 5468, loc_4)
			error("out of code bounds")
		end
		if load_i32(memory_at_0, loc_4 + 56) ~= 0 then
			while true do
				FUNC_LIST[208](loc_0, add_i32(loc_4, 56), band_i32(loc_9, 255), 1)
				break
			end
		end
		store_i32(memory_at_0, load_i32(memory_at_0, loc_4 + 88) + 220, load_i32(memory_at_0, loc_4 + 92))
		GLOBAL_LIST[0].value = add_i32(loc_4, 96)
		break
	end
end
FUNC_LIST[188] = --[[ Luau::Compiler::compileStatFunction(Luau::AstStatFunction*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_4
		loc_2 = load_i32(memory_at_0, loc_1 + 28)
		loc_3 = load_i32(memory_at_0, loc_2 + 4)
		while true do
			while true do
				while true do
					loc_7 = load_i32(memory_at_0, 47220)
					if (if loc_7 == loc_3 then loc_2 else 0) == 0 then
						while true do
							loc_6 = load_i32(memory_at_0, 47300)
							loc_5 = load_i32(memory_at_0, 47180)
							while true do
								if band_i32((if loc_3 ~= loc_5 then 1 else 0), (if loc_3 ~= loc_6 then 1 else 0)) ~= 0 then
									desired = 3
									break
								end
								loc_2 = load_i32(memory_at_0, loc_2 + 24)
								loc_3 = load_i32(memory_at_0, loc_2 + 4)
								if loc_2 == 0 then
									continue
								end
								if loc_3 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if load_i32(memory_at_0, loc_0 + 60) == 0 then
						break
					end
					loc_6 = load_i32(memory_at_0, loc_2 + 24)
					loc_9 = load_i32(memory_at_0, loc_0 + 64)
					if loc_6 == loc_9 then
						break
					end
					loc_3 = bxor_i32(shr_u32(loc_6, 4), shr_u32(loc_6, 9))
					loc_5 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
					loc_10 = load_i32(memory_at_0, loc_0 + 52)
					loc_2 = 0
					while true do
						loc_7 = band_i32(loc_3, loc_5)
						loc_8 = add_i32(mul_i32(loc_7, 12), loc_10)
						loc_3 = load_i32(memory_at_0, loc_8)
						if loc_3 ~= loc_6 then
							while true do
								if loc_3 == loc_9 then
									desired = 3
									break
								end
								loc_2 = add_i32(loc_2, 1)
								loc_3 = add_i32(loc_7, loc_2)
								if loc_2 <= loc_5 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if load_i32_u8(memory_at_0, loc_8 + 5) == 0 then
						break
					end
					FUNC_LIST[199](loc_0, load_i32(memory_at_0, loc_1 + 32), load_i32_u8(memory_at_0, loc_8 + 4), 0)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_4 + 40, loc_0)
				loc_3 = load_i32(memory_at_0, loc_0 + 220)
				store_i32(memory_at_0, loc_4 + 44, loc_3)
				loc_2 = add_i32(loc_3, 1)
				if loc_2 >= 256 then
					desired = 1
					break
				end
				store_i32(memory_at_0, loc_0 + 220, loc_2)
				loc_5 = load_i32(memory_at_0, loc_0 + 224)
				store_i32(memory_at_0, loc_0 + 224, (if loc_2 < loc_5 then loc_5 else loc_2))
				loc_2 = band_i32(loc_3, 255)
				FUNC_LIST[199](loc_0, load_i32(memory_at_0, loc_1 + 32), loc_2, 1)
				FUNC_LIST[205](add_i32(loc_4, 8), loc_0, load_i32(memory_at_0, loc_1 + 28), add_i32(loc_4, 40))
				FUNC_LIST[208](loc_0, add_i32(loc_4, 8), loc_2, 1)
				store_i32(memory_at_0, load_i32(memory_at_0, loc_4 + 40) + 220, load_i32(memory_at_0, loc_4 + 44))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = add_i32(loc_4, 48)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, loc_4, i64_from_u32(1, 255))
		FUNC_LIST[147](add_i32(loc_1, 8), 5468, loc_4)
		error("out of code bounds")
	end
end
FUNC_LIST[189] = --[[ Luau::Compiler::compileExprFunction(Luau::AstExprFunction*, unsigned char) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_11 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_11
		while true do
			if load_i32(memory_at_0, loc_0 + 40) == 0 then
				break
			end
			loc_8 = load_i32(memory_at_0, loc_0 + 44)
			if loc_1 == loc_8 then
				break
			end
			loc_5 = bxor_i32(shr_u32(loc_1, 4), shr_u32(loc_1, 9))
			loc_7 = sub_i32(load_i32(memory_at_0, loc_0 + 36), 1)
			loc_9 = load_i32(memory_at_0, loc_0 + 32)
			while true do
				loc_6 = band_i32(loc_5, loc_7)
				loc_4 = add_i32(mul_i32(loc_6, 40), loc_9)
				loc_5 = load_i32(memory_at_0, loc_4)
				if loc_1 == loc_5 then
					desired = 1
					break
				end
				loc_4 = 0
				if loc_5 == loc_8 then
					desired = 1
					break
				end
				loc_3 = add_i32(loc_3, 1)
				loc_5 = add_i32(loc_6, loc_3)
				if loc_3 <= loc_7 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_16 = load_i32(memory_at_0, loc_0 + 220)
		loc_12 = (if loc_4 ~= 0 then add_i32(loc_4, 8) else 0)
		reg_0 = FUNC_LIST[93](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_12))
		loc_17 = reg_0
		if ge_i32(loc_17, 0) then
			while true do
				loc_3 = load_i32(memory_at_0, loc_0 + 292)
				store_i32(memory_at_0, loc_0 + 296, loc_3)
				loc_10 = add_i32(loc_0, 292)
				while true do
					while true do
						while true do
							loc_5 = sub_i32(load_i32(memory_at_0, loc_12 + 8), load_i32(memory_at_0, loc_12 + 4))
							loc_4 = shr_i32(loc_5, 2)
							if loc_4 <= shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 300), loc_3), 3) then
								break
							end
							if loc_4 >= 536870912 then
								desired = 3
								break
							end
							reg_1 = FUNC_LIST[606](shl_i32(loc_5, 1))
							loc_5 = reg_1
							store_i32(memory_at_0, loc_0 + 296, loc_5)
							store_i32(memory_at_0, loc_0 + 292, loc_5)
							store_i32(memory_at_0, loc_0 + 300, add_i32(shl_i32(loc_4, 3), loc_5))
							if loc_3 == 0 then
								break
							end
							FUNC_LIST[609](loc_3)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_15 = load_i32(memory_at_0, loc_12 + 4)
						loc_18 = load_i32(memory_at_0, loc_12 + 8)
						if loc_15 ~= loc_18 then
							while true do
								while true do
									loc_3 = load_i32(memory_at_0, loc_15)
									while true do
										while true do
											if load_i32(memory_at_0, loc_0 + 60) == 0 then
												break
											end
											loc_8 = load_i32(memory_at_0, loc_0 + 64)
											if loc_3 == loc_8 then
												break
											end
											loc_5 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
											loc_9 = load_i32(memory_at_0, loc_0 + 52)
											loc_4 = 0
											loc_14 = bxor_i32(shr_u32(loc_3, 4), shr_u32(loc_3, 9))
											loc_7 = loc_14
											while true do
												loc_6 = band_i32(loc_5, loc_7)
												loc_13 = add_i32(mul_i32(loc_6, 12), loc_9)
												loc_7 = load_i32(memory_at_0, loc_13)
												if loc_7 ~= loc_3 then
													while true do
														if loc_7 == loc_8 then
															desired = 7
															break
														end
														loc_4 = add_i32(loc_4, 1)
														loc_7 = add_i32(loc_6, loc_4)
														if loc_4 <= loc_5 then
															desired = 8
															break
														end
														desired = 7
														break
													end
													if desired then
														if desired == 8 then
															desired = nil
															continue
														end
														break
													end
												end
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
											if load_i32_u8(memory_at_0, loc_13 + 5) == 0 then
												break
											end
											while true do
												if load_i32(memory_at_0, loc_0 + 100) == 0 then
													while true do
														loc_7 = 1
														desired = 8
														break
													end
													if desired then
														if desired == 8 then
															desired = nil
														end
														break
													end
												end
												loc_8 = load_i32(memory_at_0, loc_0 + 104)
												if loc_3 == loc_8 then
													while true do
														loc_7 = 1
														desired = 8
														break
													end
													if desired then
														if desired == 8 then
															desired = nil
														end
														break
													end
												end
												loc_5 = sub_i32(load_i32(memory_at_0, loc_0 + 96), 1)
												loc_9 = load_i32(memory_at_0, loc_0 + 92)
												loc_4 = 0
												while true do
													loc_6 = band_i32(loc_5, loc_14)
													loc_14 = add_i32(mul_i32(loc_6, 12), loc_9)
													loc_7 = load_i32(memory_at_0, loc_14)
													if loc_7 ~= loc_3 then
														while true do
															if loc_7 == loc_8 then
																while true do
																	loc_7 = 1
																	desired = 8
																	break
																end
																if desired then
																	break
																end
															end
															loc_7 = 1
															loc_4 = add_i32(loc_4, 1)
															loc_14 = add_i32(loc_6, loc_4)
															if loc_4 <= loc_5 then
																desired = 9
																break
															end
															desired = 8
															break
														end
														if desired then
															if desired == 9 then
																desired = nil
																continue
															end
															break
														end
													end
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
												loc_7 = (if load_i32_u8(memory_at_0, loc_14 + 8) == 0 then 1 else 0)
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
											loc_19 = load_i64_u8(memory_at_0, loc_13 + 4)
											loc_7 = bxor_i32(loc_7, 1)
											loc_3 = load_i32(memory_at_0, loc_0 + 296)
											loc_4 = load_i32(memory_at_0, loc_0 + 300)
											if loc_3 < loc_4 then
												while true do
													store_i64(memory_at_0, loc_3, bor_i64(extend_i64_u32(loc_7), shl_i64(loc_19, i64_from_u32(32, 0))))
													store_i32(memory_at_0, loc_0 + 296, add_i32(loc_3, 8))
													desired = 6
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
													end
													break
												end
											end
											loc_5 = load_i32(memory_at_0, loc_10)
											loc_9 = shr_i32(sub_i32(loc_3, loc_5), 3)
											loc_6 = add_i32(loc_9, 1)
											if loc_6 >= 536870912 then
												desired = 3
												break
											end
											loc_4 = sub_i32(loc_4, loc_5)
											loc_8 = shr_i32(loc_4, 2)
											loc_6 = (if loc_4 >= 2147483640 then 536870911 else (if loc_6 < loc_8 then loc_8 else loc_6))
											if loc_6 ~= 0 then
												while true do
													if loc_6 >= 536870912 then
														desired = 2
														break
													end
													reg_0 = FUNC_LIST[606](shl_i32(loc_6, 3))
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
													end
													break
												end
											else
												while true do
													reg_0 = 0
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
													end
													break
												end
											end
											loc_8 = reg_0
											loc_4 = add_i32(loc_8, shl_i32(loc_9, 3))
											store_i64(memory_at_0, loc_4, bor_i64(extend_i64_u32(loc_7), shl_i64(loc_19, i64_from_u32(32, 0))))
											loc_7 = add_i32(shl_i32(loc_6, 3), loc_8)
											loc_6 = add_i32(loc_4, 8)
											if loc_3 ~= loc_5 then
												while true do
													while true do
														loc_4 = sub_i32(loc_4, 8)
														loc_3 = sub_i32(loc_3, 8)
														store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_3))
														if loc_3 ~= loc_5 then
															continue
														end
														break
													end
													if desired then
														break
													end
													reg_0 = load_i32(memory_at_0, loc_10)
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
													end
													break
												end
											else
												while true do
													reg_0 = loc_3
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
													end
													break
												end
											end
											loc_3 = reg_0
											store_i32(memory_at_0, loc_0 + 300, loc_7)
											store_i32(memory_at_0, loc_0 + 296, loc_6)
											store_i32(memory_at_0, loc_0 + 292, loc_4)
											if loc_3 == 0 then
												desired = 6
												break
											end
											FUNC_LIST[609](loc_3)
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
										while true do
											if load_i32(memory_at_0, loc_0 + 140) == 0 then
												break
											end
											loc_8 = load_i32(memory_at_0, loc_0 + 144)
											if loc_8 == loc_3 then
												break
											end
											loc_5 = bxor_i32(shr_u32(loc_3, 4), shr_u32(loc_3, 9))
											loc_7 = sub_i32(load_i32(memory_at_0, loc_0 + 136), 1)
											loc_9 = load_i32(memory_at_0, loc_0 + 132)
											loc_4 = 0
											while true do
												loc_6 = band_i32(loc_5, loc_7)
												loc_13 = add_i32(shl_i32(loc_6, 5), loc_9)
												loc_5 = load_i32(memory_at_0, loc_13)
												if loc_5 ~= loc_3 then
													while true do
														if loc_5 == loc_8 then
															desired = 7
															break
														end
														loc_4 = add_i32(loc_4, 1)
														loc_5 = add_i32(loc_6, loc_4)
														if loc_4 <= loc_7 then
															desired = 8
															break
														end
														desired = 7
														break
													end
													if desired then
														if desired == 8 then
															desired = nil
															continue
														end
														break
													end
												end
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
											if load_i32(memory_at_0, loc_13 + 8) == 0 then
												break
											end
											loc_4 = load_i32(memory_at_0, loc_0 + 220)
											loc_3 = add_i32(loc_4, 1)
											if loc_3 < 256 then
												while true do
													store_i32(memory_at_0, loc_0 + 220, loc_3)
													loc_5 = load_i32(memory_at_0, loc_0 + 224)
													store_i32(memory_at_0, loc_0 + 224, (if loc_3 < loc_5 then loc_5 else loc_3))
													loc_7 = band_i32(loc_4, 255)
													FUNC_LIST[210](loc_0, loc_1, add_i32(loc_13, 8), loc_7)
													loc_3 = load_i32(memory_at_0, loc_0 + 296)
													loc_4 = load_i32(memory_at_0, loc_0 + 300)
													if loc_3 < loc_4 then
														while true do
															store_i64(memory_at_0, loc_3, shl_i64(extend_i64_u32(loc_7), i64_from_u32(32, 0)))
															store_i32(memory_at_0, loc_0 + 296, add_i32(loc_3, 8))
															desired = 6
															break
														end
														if desired then
															break
														end
													end
													loc_5 = load_i32(memory_at_0, loc_10)
													loc_9 = shr_i32(sub_i32(loc_3, loc_5), 3)
													loc_6 = add_i32(loc_9, 1)
													if loc_6 >= 536870912 then
														desired = 3
														break
													end
													loc_4 = sub_i32(loc_4, loc_5)
													loc_8 = shr_i32(loc_4, 2)
													loc_6 = (if loc_4 >= 2147483640 then 536870911 else (if loc_6 < loc_8 then loc_8 else loc_6))
													if loc_6 ~= 0 then
														while true do
															if loc_6 >= 536870912 then
																desired = 2
																break
															end
															reg_0 = FUNC_LIST[606](shl_i32(loc_6, 3))
															break
														end
														if desired then
															break
														end
													else
														while true do
															reg_0 = 0
															break
														end
														if desired then
															break
														end
													end
													loc_8 = reg_0
													loc_4 = add_i32(loc_8, shl_i32(loc_9, 3))
													store_i64(memory_at_0, loc_4, shl_i64(extend_i64_u32(loc_7), i64_from_u32(32, 0)))
													loc_7 = add_i32(shl_i32(loc_6, 3), loc_8)
													loc_6 = add_i32(loc_4, 8)
													if loc_3 ~= loc_5 then
														while true do
															while true do
																loc_4 = sub_i32(loc_4, 8)
																loc_3 = sub_i32(loc_3, 8)
																store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_3))
																if loc_3 ~= loc_5 then
																	continue
																end
																break
															end
															if desired then
																break
															end
															reg_0 = load_i32(memory_at_0, loc_10)
															break
														end
														if desired then
															break
														end
													else
														while true do
															reg_0 = loc_3
															break
														end
														if desired then
															break
														end
													end
													loc_3 = reg_0
													store_i32(memory_at_0, loc_0 + 300, loc_7)
													store_i32(memory_at_0, loc_0 + 296, loc_6)
													store_i32(memory_at_0, loc_0 + 292, loc_4)
													if loc_3 == 0 then
														desired = 6
														break
													end
													FUNC_LIST[609](loc_3)
													desired = 6
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
													end
													break
												end
											end
											store_i64(memory_at_0, loc_11 + 16, i64_from_u32(1, 255))
											FUNC_LIST[147](add_i32(loc_1, 8), 5468, add_i32(loc_11, 16))
											error("out of code bounds")
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
										reg_0 = FUNC_LIST[155](loc_0, loc_3)
										loc_7 = reg_0
										loc_3 = load_i32(memory_at_0, loc_0 + 296)
										loc_4 = load_i32(memory_at_0, loc_0 + 300)
										if loc_3 < loc_4 then
											while true do
												store_i64(memory_at_0, loc_3, bor_i64(shl_i64(extend_i64_u32(loc_7), i64_from_u32(32, 0)), i64_from_u32(2, 0)))
												store_i32(memory_at_0, loc_0 + 296, add_i32(loc_3, 8))
												desired = 6
												break
											end
											if desired then
												if desired == 6 then
													desired = nil
												end
												break
											end
										end
										loc_5 = load_i32(memory_at_0, loc_10)
										loc_9 = shr_i32(sub_i32(loc_3, loc_5), 3)
										loc_6 = add_i32(loc_9, 1)
										if loc_6 >= 536870912 then
											desired = 3
											break
										end
										loc_4 = sub_i32(loc_4, loc_5)
										loc_8 = shr_i32(loc_4, 2)
										loc_6 = (if loc_4 >= 2147483640 then 536870911 else (if loc_6 < loc_8 then loc_8 else loc_6))
										if loc_6 ~= 0 then
											while true do
												if loc_6 >= 536870912 then
													desired = 2
													break
												end
												reg_0 = FUNC_LIST[606](shl_i32(loc_6, 3))
												break
											end
											if desired then
												if desired == 6 then
													desired = nil
												end
												break
											end
										else
											while true do
												reg_0 = 0
												break
											end
											if desired then
												if desired == 6 then
													desired = nil
												end
												break
											end
										end
										loc_8 = reg_0
										loc_4 = add_i32(loc_8, shl_i32(loc_9, 3))
										store_i64(memory_at_0, loc_4, bor_i64(shl_i64(extend_i64_u32(loc_7), i64_from_u32(32, 0)), i64_from_u32(2, 0)))
										loc_7 = add_i32(shl_i32(loc_6, 3), loc_8)
										loc_6 = add_i32(loc_4, 8)
										if loc_3 ~= loc_5 then
											while true do
												while true do
													loc_4 = sub_i32(loc_4, 8)
													loc_3 = sub_i32(loc_3, 8)
													store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_3))
													if loc_3 ~= loc_5 then
														continue
													end
													break
												end
												if desired then
													break
												end
												reg_0 = load_i32(memory_at_0, loc_10)
												break
											end
											if desired then
												if desired == 6 then
													desired = nil
												end
												break
											end
										else
											while true do
												reg_0 = loc_3
												break
											end
											if desired then
												if desired == 6 then
													desired = nil
												end
												break
											end
										end
										loc_3 = reg_0
										store_i32(memory_at_0, loc_0 + 300, loc_7)
										store_i32(memory_at_0, loc_0 + 296, loc_6)
										store_i32(memory_at_0, loc_0 + 292, loc_4)
										if loc_3 == 0 then
											break
										end
										FUNC_LIST[609](loc_3)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
									loc_15 = add_i32(loc_15, 4)
									if loc_18 ~= loc_15 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						while true do
							while true do
								if le_i32(load_i32(memory_at_0, loc_0 + 4), 0) then
									break
								end
								reg_0 = FUNC_LIST[211](loc_0, loc_1)
								if reg_0 == 0 then
									break
								end
								if load_i32_u8(memory_at_0, loc_0 + 230) ~= 0 then
									break
								end
								reg_0 = FUNC_LIST[92](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_12))
								loc_3 = reg_0
								if loc_3 > 32767 then
									break
								end
								FUNC_LIST[97](load_i32(memory_at_0, loc_0), 64, loc_2, extend_i32_n16(loc_3))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_3 = load_i32(memory_at_0, loc_0)
							store_i32(memory_at_0, loc_11, shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 296), load_i32(memory_at_0, loc_0 + 292)), 3))
							FUNC_LIST[108](loc_3, 2287, loc_11)
							FUNC_LIST[97](load_i32(memory_at_0, loc_0), 19, loc_2, loc_17)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_3 = load_i32(memory_at_0, loc_0 + 292)
						loc_4 = load_i32(memory_at_0, loc_0 + 296)
						if loc_3 ~= loc_4 then
							while true do
								while true do
									FUNC_LIST[96](load_i32(memory_at_0, loc_0), 70, load_i32_u8(memory_at_0, loc_3), load_i32_u8(memory_at_0, loc_3 + 4), 0)
									loc_3 = add_i32(loc_3, 8)
									if loc_4 ~= loc_3 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						store_i32(memory_at_0, loc_0 + 220, loc_16)
						GLOBAL_LIST[0].value = add_i32(loc_11, 32)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					FUNC_LIST[40](loc_10)
					error("out of code bounds")
				end
				if desired then
					break
				end
				FUNC_LIST[163]()
				error("out of code bounds")
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[147](add_i32(loc_1, 8), 4492, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[190] = --[[ std::__2::vector<Luau::AstLocal*, std::__2::allocator<Luau::AstLocal*>>::__append(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = load_i32(memory_at_0, loc_0 + 8)
		loc_2 = load_i32(memory_at_0, loc_0 + 4)
		if shr_i32(sub_i32(loc_3, loc_2), 2) >= loc_1 then
			while true do
				reg_0 = loc_0
				if loc_1 ~= 0 then
					while true do
						loc_3 = shl_i32(loc_1, 2)
						reg_1 = FUNC_LIST[479](loc_2, 0, loc_3)
						reg_1 = add_i32(reg_1, loc_3)
						break
					end
					if desired then
						break
					end
				else
					while true do
						reg_1 = loc_2
						break
					end
					if desired then
						break
					end
				end
				loc_2 = reg_1
				store_i32(memory_at_0, reg_0 + 4, loc_2)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_6 = load_i32(memory_at_0, loc_0)
			loc_7 = shr_i32(sub_i32(loc_2, loc_6), 2)
			loc_4 = add_i32(loc_1, loc_7)
			if loc_4 < 1073741824 then
				while true do
					loc_3 = sub_i32(loc_3, loc_6)
					loc_8 = shr_i32(loc_3, 1)
					loc_4 = (if loc_3 >= 2147483644 then 1073741823 else (if loc_4 < loc_8 then loc_8 else loc_4))
					if loc_4 ~= 0 then
						while true do
							if loc_4 >= 1073741824 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](shl_i32(loc_4, 2))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_5
							break
						end
						if desired then
							break
						end
					end
					loc_5 = reg_0
					loc_3 = add_i32(loc_5, shl_i32(loc_7, 2))
					loc_1 = shl_i32(loc_1, 2)
					reg_0 = FUNC_LIST[479](loc_3, 0, loc_1)
					loc_1 = add_i32(reg_0, loc_1)
					loc_5 = add_i32(shl_i32(loc_4, 2), loc_5)
					if loc_2 ~= loc_6 then
						while true do
							while true do
								loc_3 = sub_i32(loc_3, 4)
								loc_2 = sub_i32(loc_2, 4)
								store_i32(memory_at_0, loc_3, load_i32(memory_at_0, loc_2))
								if loc_2 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = load_i32(memory_at_0, loc_0)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
						if desired then
							break
						end
					end
					loc_2 = reg_0
					store_i32(memory_at_0, loc_0 + 8, loc_5)
					store_i32(memory_at_0, loc_0 + 4, loc_1)
					store_i32(memory_at_0, loc_0, loc_3)
					if loc_2 ~= 0 then
						while true do
							FUNC_LIST[609](loc_2)
							break
						end
						if desired then
							break
						end
					end
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[40](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[191] = --[[ Luau::detail::DenseHashTable<Luau::AstExprFunction*, std::__2::pair<Luau::AstExprFunction*, Luau::Compiler::Function>, std::__2::pair<Luau::AstExprFunction* const, Luau::Compiler::Function>, Luau::detail::ItemInterfaceMap<Luau::AstExprFunction*, Luau::Compiler::Function>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprFunction*>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_11 = load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_2 = load_i32(memory_at_0, loc_0 + 4)
			loc_8 = (if loc_2 ~= 0 then shl_i32(loc_2, 1) else 16)
			if loc_8 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = band_i32(loc_8, 2)
			reg_0 = FUNC_LIST[606](mul_i32(loc_8, 40))
			loc_6 = reg_0
			loc_3 = load_i32(memory_at_0, loc_0 + 12)
			loc_2 = 0
			if loc_8 >= 4 then
				while true do
					loc_4 = band_i32(loc_8, 4294967292)
					while true do
						loc_1 = add_i32(mul_i32(loc_2, 40), loc_6)
						store_i64(memory_at_0, loc_1 + 8, i64_ZERO)
						store_i32(memory_at_0, loc_1, loc_3)
						store_i64(memory_at_0, loc_1 + 16, i64_ZERO)
						store_i64(memory_at_0, loc_1 + 24, i64_ZERO)
						store_i64(memory_at_0, loc_1 + 32, i64_ZERO)
						loc_1 = add_i32(mul_i32(bor_i32(loc_2, 1), 40), loc_6)
						store_i64(memory_at_0, loc_1 + 8, i64_ZERO)
						store_i32(memory_at_0, loc_1, loc_3)
						store_i64(memory_at_0, loc_1 + 16, i64_ZERO)
						store_i64(memory_at_0, loc_1 + 24, i64_ZERO)
						store_i64(memory_at_0, loc_1 + 32, i64_ZERO)
						loc_1 = add_i32(mul_i32(bor_i32(loc_2, 2), 40), loc_6)
						store_i64(memory_at_0, loc_1 + 8, i64_ZERO)
						store_i32(memory_at_0, loc_1, loc_3)
						store_i64(memory_at_0, loc_1 + 16, i64_ZERO)
						store_i64(memory_at_0, loc_1 + 24, i64_ZERO)
						store_i64(memory_at_0, loc_1 + 32, i64_ZERO)
						loc_1 = add_i32(mul_i32(bor_i32(loc_2, 3), 40), loc_6)
						store_i64(memory_at_0, loc_1 + 8, i64_ZERO)
						store_i32(memory_at_0, loc_1, loc_3)
						store_i64(memory_at_0, loc_1 + 16, i64_ZERO)
						store_i64(memory_at_0, loc_1 + 24, i64_ZERO)
						store_i64(memory_at_0, loc_1 + 32, i64_ZERO)
						loc_2 = add_i32(loc_2, 4)
						loc_5 = add_i32(loc_5, 4)
						if loc_4 ~= loc_5 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 ~= 0 then
				while true do
					while true do
						loc_1 = add_i32(mul_i32(loc_2, 40), loc_6)
						store_i64(memory_at_0, loc_1 + 8, i64_ZERO)
						store_i32(memory_at_0, loc_1, loc_3)
						store_i64(memory_at_0, loc_1 + 16, i64_ZERO)
						store_i64(memory_at_0, loc_1 + 24, i64_ZERO)
						store_i64(memory_at_0, loc_1 + 32, i64_ZERO)
						loc_2 = add_i32(loc_2, 1)
						loc_9 = add_i32(loc_9, 1)
						if loc_7 ~= loc_9 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				if loc_2 ~= 0 then
					while true do
						loc_9 = sub_i32(loc_8, 1)
						while true do
							loc_4 = add_i32(load_i32(memory_at_0, loc_0), mul_i32(loc_10, 40))
							loc_7 = load_i32(memory_at_0, loc_4)
							if loc_7 ~= load_i32(memory_at_0, loc_0 + 12) then
								while true do
									loc_3 = bxor_i32(shr_u32(loc_7, 4), shr_u32(loc_7, 9))
									loc_2 = 0
									while true do
										while true do
											loc_5 = band_i32(loc_3, loc_9)
											loc_1 = add_i32(mul_i32(loc_5, 40), loc_6)
											loc_3 = load_i32(memory_at_0, loc_1)
											if loc_3 == loc_11 then
												while true do
													store_i32(memory_at_0, loc_1, loc_7)
													desired = 6
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
														continue
													end
													break
												end
											end
											if loc_3 == loc_7 then
												desired = 6
												break
											end
											loc_2 = add_i32(loc_2, 1)
											loc_3 = add_i32(loc_5, loc_2)
											if loc_2 <= loc_9 then
												continue
											end
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
										loc_1 = 0
										break
									end
									if desired then
										break
									end
									store_i32(memory_at_0, loc_1, loc_7)
									store_i32(memory_at_0, loc_1 + 8, load_i32(memory_at_0, loc_4 + 8))
									loc_2 = load_i32(memory_at_0, loc_1 + 12)
									if loc_2 ~= 0 then
										while true do
											store_i32(memory_at_0, loc_1 + 16, loc_2)
											FUNC_LIST[609](loc_2)
											store_i32(memory_at_0, loc_1 + 20, 0)
											store_i64(memory_at_0, loc_1 + 12, i64_ZERO)
											break
										end
										if desired then
											break
										end
									end
									store_i32(memory_at_0, loc_1 + 12, load_i32(memory_at_0, loc_4 + 12))
									store_i32(memory_at_0, loc_1 + 16, load_i32(memory_at_0, loc_4 + 16))
									store_i32(memory_at_0, loc_1 + 20, load_i32(memory_at_0, loc_4 + 20))
									store_i32(memory_at_0, loc_4 + 20, 0)
									store_i64(memory_at_0, loc_4 + 12, i64_ZERO)
									store_i64(memory_at_0, loc_1 + 30, load_i64(memory_at_0, loc_4 + 30))
									store_i64(memory_at_0, loc_1 + 24, load_i64(memory_at_0, loc_4 + 24))
									reg_0 = load_i32(memory_at_0, loc_0 + 4)
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							else
								while true do
									reg_0 = loc_2
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_2 = reg_0
							loc_10 = add_i32(loc_10, 1)
							if loc_2 > loc_10 then
								continue
							end
							break
						end
						if desired then
							break
						end
						store_i32(memory_at_0, loc_0 + 4, loc_8)
						loc_5 = load_i32(memory_at_0, loc_0)
						store_i32(memory_at_0, loc_0, loc_6)
						if loc_5 == 0 then
							desired = 1
							break
						end
						if loc_2 == 0 then
							desired = 2
							break
						end
						loc_3 = 0
						while true do
							loc_9 = add_i32(mul_i32(loc_3, 40), loc_5)
							loc_1 = load_i32(memory_at_0, loc_9 + 12)
							if loc_1 ~= 0 then
								while true do
									store_i32(memory_at_0, loc_9 + 16, loc_1)
									FUNC_LIST[609](loc_1)
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_3 = add_i32(loc_3, 1)
							if loc_3 ~= loc_2 then
								continue
							end
							break
						end
						if desired then
							break
						end
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				store_i32(memory_at_0, loc_0 + 4, loc_8)
				loc_5 = load_i32(memory_at_0, loc_0)
				store_i32(memory_at_0, loc_0, loc_6)
				if loc_5 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[609](loc_5)
			break
		end
		break
	end
end
FUNC_LIST[192] = --[[ Luau::detail::DenseHashTable<Luau::AstLocal*, std::__2::pair<Luau::AstLocal*, Luau::Compiler::Local>, std::__2::pair<Luau::AstLocal* const, Luau::Compiler::Local>, Luau::detail::ItemInterfaceMap<Luau::AstLocal*, Luau::Compiler::Local>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_10 = load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_1 = load_i32(memory_at_0, loc_0 + 4)
			loc_6 = (if loc_1 ~= 0 then shl_i32(loc_1, 1) else 16)
			if loc_6 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = band_i32(loc_6, 2)
			reg_0 = FUNC_LIST[606](mul_i32(loc_6, 12))
			loc_4 = reg_0
			loc_5 = load_i32(memory_at_0, loc_0 + 12)
			loc_1 = 0
			if loc_6 >= 4 then
				while true do
					loc_9 = band_i32(loc_6, 4294967292)
					while true do
						loc_2 = add_i32(mul_i32(loc_1, 12), loc_4)
						store_i64(memory_at_0, loc_2 + 4, i64_ZERO)
						store_i32(memory_at_0, loc_2, loc_5)
						loc_2 = add_i32(mul_i32(bor_i32(loc_1, 1), 12), loc_4)
						store_i64(memory_at_0, loc_2 + 4, i64_ZERO)
						store_i32(memory_at_0, loc_2, loc_5)
						loc_2 = add_i32(mul_i32(bor_i32(loc_1, 2), 12), loc_4)
						store_i64(memory_at_0, loc_2 + 4, i64_ZERO)
						store_i32(memory_at_0, loc_2, loc_5)
						loc_2 = add_i32(mul_i32(bor_i32(loc_1, 3), 12), loc_4)
						store_i64(memory_at_0, loc_2 + 4, i64_ZERO)
						store_i32(memory_at_0, loc_2, loc_5)
						loc_1 = add_i32(loc_1, 4)
						loc_3 = add_i32(loc_3, 4)
						if loc_9 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 ~= 0 then
				while true do
					while true do
						loc_3 = add_i32(mul_i32(loc_1, 12), loc_4)
						store_i64(memory_at_0, loc_3 + 4, i64_ZERO)
						store_i32(memory_at_0, loc_3, loc_5)
						loc_1 = add_i32(loc_1, 1)
						loc_7 = add_i32(loc_7, 1)
						if loc_8 ~= loc_7 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		if loc_1 ~= 0 then
			while true do
				loc_8 = sub_i32(loc_6, 1)
				loc_9 = 0
				while true do
					loc_11 = add_i32(load_i32(memory_at_0, loc_0), mul_i32(loc_9, 12))
					loc_3 = load_i32(memory_at_0, loc_11)
					if loc_3 ~= load_i32(memory_at_0, loc_0 + 12) then
						while true do
							while true do
								while true do
									loc_1 = band_i32(loc_8, bxor_i32(shr_u32(loc_3, 4), shr_u32(loc_3, 9)))
									loc_2 = add_i32(mul_i32(loc_1, 12), loc_4)
									loc_7 = load_i32(memory_at_0, loc_2)
									if loc_10 == loc_7 then
										break
									end
									loc_5 = 0
									if loc_3 == loc_7 then
										desired = 4
										break
									end
									while true do
										loc_5 = add_i32(loc_5, 1)
										loc_1 = band_i32(loc_8, add_i32(loc_1, loc_5))
										loc_2 = add_i32(mul_i32(loc_1, 12), loc_4)
										loc_7 = load_i32(memory_at_0, loc_2)
										if loc_10 == loc_7 then
											desired = 5
											break
										end
										if loc_3 ~= loc_7 then
											continue
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
								store_i32(memory_at_0, loc_2, loc_3)
								break
							end
							if desired then
								break
							end
							store_i32(memory_at_0, loc_2, loc_3)
							store_i64(memory_at_0, loc_2 + 4, load_i64(memory_at_0, loc_11 + 4))
							reg_0 = load_i32(memory_at_0, loc_0 + 4)
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					else
						while true do
							reg_0 = loc_1
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_1 = reg_0
					loc_9 = add_i32(loc_9, 1)
					if loc_1 > loc_9 then
						continue
					end
					break
				end
				break
			end
		end
		store_i32(memory_at_0, loc_0 + 4, loc_6)
		loc_1 = load_i32(memory_at_0, loc_0)
		store_i32(memory_at_0, loc_0, loc_4)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[193] = --[[ Luau::Compiler::compileConditionValue(Luau::AstExpr*, unsigned char const*, std::__2::vector<unsigned long, std::__2::allocator<unsigned long>>&, bool) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_10 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_10
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								if load_i32(memory_at_0, loc_0 + 120) == 0 then
									break
								end
								loc_9 = load_i32(memory_at_0, loc_0 + 124)
								if loc_1 == loc_9 then
									break
								end
								loc_6 = bxor_i32(shr_u32(loc_1, 4), shr_u32(loc_1, 9))
								loc_8 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
								loc_11 = load_i32(memory_at_0, loc_0 + 112)
								loc_5 = 0
								while true do
									loc_7 = band_i32(loc_6, loc_8)
									loc_12 = add_i32(shl_i32(loc_7, 5), loc_11)
									loc_6 = load_i32(memory_at_0, loc_12)
									if loc_6 ~= loc_1 then
										while true do
											if loc_6 == loc_9 then
												desired = 6
												break
											end
											loc_5 = add_i32(loc_5, 1)
											loc_6 = add_i32(loc_7, loc_5)
											if loc_5 <= loc_8 then
												desired = 7
												break
											end
											desired = 6
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_5 = load_i32(memory_at_0, loc_12 + 8)
								if loc_5 == 0 then
									break
								end
								while true do
									while true do
										while true do
											while true do
												if not br_map[1] then
													br_map[1] = (function()
														return { [0] = 0, 2, }
													end)()
												end
												temp = br_map[1][sub_i32(loc_5, 1)] or 1
												if temp < 1 then
													break
												elseif temp > 1 then
													desired = 8
													break
												else
													desired = 9
													break
												end
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if band_i32(loc_4, 1) == 0 then
												desired = 7
												break
											end
											desired = 5
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if band_i32(loc_4, 1) ~= 0 then
											desired = 7
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if band_i32(bxor_i32(load_i32_u8(memory_at_0, loc_12 + 16), loc_4), 1) ~= 0 then
										desired = 5
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_2 ~= 0 then
									while true do
										FUNC_LIST[199](loc_0, loc_1, load_i32_u8(memory_at_0, loc_2), 1)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
								loc_8 = reg_0
								while true do
									loc_5 = load_i32(memory_at_0, loc_3 + 4)
									loc_1 = load_i32(memory_at_0, loc_3 + 8)
									if loc_5 < loc_1 then
										while true do
											store_i32(memory_at_0, loc_5, loc_8)
											store_i32(memory_at_0, loc_3 + 4, add_i32(loc_5, 4))
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_6 = load_i32(memory_at_0, loc_3)
									loc_11 = shr_i32(sub_i32(loc_5, loc_6), 2)
									loc_7 = add_i32(loc_11, 1)
									if loc_7 >= 1073741824 then
										desired = 4
										break
									end
									loc_1 = sub_i32(loc_1, loc_6)
									loc_9 = shr_i32(loc_1, 1)
									loc_7 = (if loc_1 >= 2147483644 then 1073741823 else (if loc_7 < loc_9 then loc_9 else loc_7))
									if loc_7 ~= 0 then
										while true do
											if loc_7 >= 1073741824 then
												desired = 3
												break
											end
											reg_0 = FUNC_LIST[606](shl_i32(loc_7, 2))
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									else
										while true do
											reg_0 = 0
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_9 = reg_0
									loc_1 = add_i32(loc_9, shl_i32(loc_11, 2))
									store_i32(memory_at_0, loc_1, loc_8)
									loc_8 = add_i32(shl_i32(loc_7, 2), loc_9)
									loc_7 = add_i32(loc_1, 4)
									if loc_5 ~= loc_6 then
										while true do
											while true do
												loc_1 = sub_i32(loc_1, 4)
												loc_5 = sub_i32(loc_5, 4)
												store_i32(memory_at_0, loc_1, load_i32(memory_at_0, loc_5))
												if loc_5 ~= loc_6 then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									store_i32(memory_at_0, loc_3 + 8, loc_8)
									store_i32(memory_at_0, loc_3 + 4, loc_7)
									store_i32(memory_at_0, loc_3, loc_1)
									if loc_6 == 0 then
										break
									end
									FUNC_LIST[609](loc_6)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[97](load_i32(memory_at_0, loc_0), 23, 0, 0)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_5 = load_i32(memory_at_0, loc_1 + 4)
							while true do
								if loc_1 == 0 then
									break
								end
								if load_i32(memory_at_0, 47292) ~= loc_5 then
									break
								end
								while true do
									while true do
										loc_6 = load_i32(memory_at_0, loc_1 + 24)
										if not br_map[2] then
											br_map[2] = (function()
												return { [0] = 1, 1, 1, 1, 1, 1, 0, 0, }
											end)()
										end
										temp = br_map[2][sub_i32(loc_6, 8)] or 2
										if temp < 1 then
											break
										elseif temp > 1 then
											desired = 6
											break
										else
											desired = 7
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_5 = band_i32(loc_4, 1)
									if loc_5 ~= (if loc_6 ~= 14 then 1 else 0) then
										while true do
											store_i32(memory_at_0, loc_10 + 12, 0)
											store_i64(memory_at_0, loc_10 + 4, i64_ZERO)
											FUNC_LIST[193](loc_0, load_i32(memory_at_0, loc_1 + 28), 0, add_i32(loc_10, 4), band_i32(bxor_i32(loc_4, 4294967295), 1))
											FUNC_LIST[193](loc_0, load_i32(memory_at_0, loc_1 + 32), loc_2, loc_3, band_i32(loc_4, 1))
											reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
											loc_6 = reg_0
											loc_5 = load_i32(memory_at_0, loc_10 + 4)
											loc_8 = load_i32(memory_at_0, loc_10 + 8)
											if loc_5 ~= loc_8 then
												while true do
													while true do
														while true do
															reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_5), loc_6)
															if reg_0 ~= 0 then
																while true do
																	loc_5 = add_i32(loc_5, 4)
																	if loc_5 ~= loc_8 then
																		desired = 11
																		break
																	end
																	desired = 10
																	break
																end
																if desired then
																	if desired == 11 then
																		desired = nil
																		continue
																	end
																	break
																end
															end
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
														FUNC_LIST[147](add_i32(loc_1, 8), 4545, 0)
														error("out of code bounds")
													end
													if desired then
														break
													end
													reg_0 = load_i32(memory_at_0, loc_10 + 4)
													break
												end
												if desired then
													break
												end
											else
												while true do
													reg_0 = loc_5
													break
												end
												if desired then
													break
												end
											end
											loc_5 = reg_0
											if loc_5 == 0 then
												desired = 5
												break
											end
											store_i32(memory_at_0, loc_10 + 8, loc_5)
											FUNC_LIST[609](loc_5)
											desired = 5
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									FUNC_LIST[193](loc_0, load_i32(memory_at_0, loc_1 + 28), loc_2, loc_3, loc_5)
									loc_6 = 32
									desired = 2
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_2 ~= 0 then
									while true do
										FUNC_LIST[96](load_i32(memory_at_0, loc_0), 3, load_i32_u8(memory_at_0, loc_2), band_i32(loc_4, 1), 0)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = FUNC_LIST[212](loc_0, loc_1, band_i32(bxor_i32(loc_4, 4294967295), 1))
								loc_8 = reg_0
								loc_5 = load_i32(memory_at_0, loc_3 + 4)
								if loc_5 ~= load_i32(memory_at_0, loc_3 + 8) then
									while true do
										store_i32(memory_at_0, loc_5, loc_8)
										store_i32(memory_at_0, loc_3 + 4, add_i32(loc_5, 4))
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_6 = load_i32(memory_at_0, loc_3)
								loc_1 = sub_i32(loc_5, loc_6)
								loc_11 = shr_i32(loc_1, 2)
								loc_7 = add_i32(loc_11, 1)
								if loc_7 >= 1073741824 then
									desired = 4
									break
								end
								loc_9 = shr_i32(loc_1, 1)
								loc_7 = (if loc_1 >= 2147483644 then 1073741823 else (if loc_7 < loc_9 then loc_9 else loc_7))
								if loc_7 ~= 0 then
									while true do
										if loc_7 >= 1073741824 then
											desired = 3
											break
										end
										reg_0 = FUNC_LIST[606](shl_i32(loc_7, 2))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = 0
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_9 = reg_0
								loc_1 = add_i32(loc_9, shl_i32(loc_11, 2))
								store_i32(memory_at_0, loc_1, loc_8)
								loc_8 = add_i32(shl_i32(loc_7, 2), loc_9)
								loc_7 = add_i32(loc_1, 4)
								if loc_5 ~= loc_6 then
									while true do
										while true do
											loc_1 = sub_i32(loc_1, 4)
											loc_5 = sub_i32(loc_5, 4)
											store_i32(memory_at_0, loc_1, load_i32(memory_at_0, loc_5))
											if loc_5 ~= loc_6 then
												continue
											end
											break
										end
										if desired then
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								store_i32(memory_at_0, loc_3 + 8, loc_8)
								store_i32(memory_at_0, loc_3 + 4, loc_7)
								store_i32(memory_at_0, loc_3, loc_1)
								if loc_6 == 0 then
									desired = 5
									break
								end
								FUNC_LIST[609](loc_6)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_2 ~= 0 then
									break
								end
								loc_6 = (if load_i32(memory_at_0, 47284) == loc_5 then loc_1 else 0)
								if loc_6 == 0 then
									break
								end
								if load_i32(memory_at_0, loc_6 + 24) ~= 0 then
									break
								end
								loc_4 = bxor_i32(loc_4, 1)
								loc_1 = load_i32(memory_at_0, loc_6 + 28)
								loc_2 = 0
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_1 ~= 0 then
								while true do
									loc_6 = 24
									if load_i32(memory_at_0, 47180) == loc_5 then
										desired = 2
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							store_i32(memory_at_0, loc_10 + 4, loc_0)
							store_i32(memory_at_0, loc_10 + 8, load_i32(memory_at_0, loc_0 + 220))
							while true do
								if loc_2 ~= 0 then
									while true do
										loc_7 = load_i32_u8(memory_at_0, loc_2)
										FUNC_LIST[199](loc_0, loc_1, loc_7, 1)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = FUNC_LIST[213](loc_0, loc_1, add_i32(loc_10, 4))
								loc_7 = reg_0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
							loc_8 = reg_0
							while true do
								loc_5 = load_i32(memory_at_0, loc_3 + 4)
								loc_1 = load_i32(memory_at_0, loc_3 + 8)
								if loc_5 < loc_1 then
									while true do
										store_i32(memory_at_0, loc_5, loc_8)
										store_i32(memory_at_0, loc_3 + 4, add_i32(loc_5, 4))
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_6 = load_i32(memory_at_0, loc_3)
								loc_12 = shr_i32(sub_i32(loc_5, loc_6), 2)
								loc_9 = add_i32(loc_12, 1)
								if loc_9 >= 1073741824 then
									desired = 4
									break
								end
								loc_1 = sub_i32(loc_1, loc_6)
								loc_11 = shr_i32(loc_1, 1)
								loc_9 = (if loc_1 >= 2147483644 then 1073741823 else (if loc_9 < loc_11 then loc_11 else loc_9))
								if loc_9 ~= 0 then
									while true do
										if loc_9 >= 1073741824 then
											desired = 3
											break
										end
										reg_0 = FUNC_LIST[606](shl_i32(loc_9, 2))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = 0
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_11 = reg_0
								loc_1 = add_i32(loc_11, shl_i32(loc_12, 2))
								store_i32(memory_at_0, loc_1, loc_8)
								loc_8 = add_i32(shl_i32(loc_9, 2), loc_11)
								loc_9 = add_i32(loc_1, 4)
								if loc_5 ~= loc_6 then
									while true do
										while true do
											loc_1 = sub_i32(loc_1, 4)
											loc_5 = sub_i32(loc_5, 4)
											store_i32(memory_at_0, loc_1, load_i32(memory_at_0, loc_5))
											if loc_5 ~= loc_6 then
												continue
											end
											break
										end
										if desired then
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								store_i32(memory_at_0, loc_3 + 8, loc_8)
								store_i32(memory_at_0, loc_3 + 4, loc_9)
								store_i32(memory_at_0, loc_3, loc_1)
								if loc_6 == 0 then
									break
								end
								FUNC_LIST[609](loc_6)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[97](load_i32(memory_at_0, loc_0), (if band_i32(loc_4, 1) ~= 0 then 25 else 26), loc_7, 0)
							store_i32(memory_at_0, load_i32(memory_at_0, loc_10 + 4) + 220, load_i32(memory_at_0, loc_10 + 8))
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						GLOBAL_LIST[0].value = add_i32(loc_10, 16)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[40](loc_3)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[163]()
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_1 = load_i32(memory_at_0, add_i32(loc_1, loc_6))
			continue
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		error("out of code bounds")
	end
end
FUNC_LIST[194] = --[[ Luau::Compiler::patchLoopJumps(Luau::AstNode*, unsigned long, unsigned long, unsigned long) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			loc_5 = load_i32(memory_at_0, loc_0 + 256)
			if shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 260), loc_5), 3) > loc_2 then
				while true do
					while true do
						while true do
							while true do
								while true do
									loc_5 = add_i32(shl_i32(loc_2, 3), loc_5)
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 0, 1, }
										end)()
									end
									temp = br_map[1][load_i32(memory_at_0, loc_5)] or 2
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 4
										break
									else
										desired = 5
										break
									end
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_5 + 4), loc_3)
								if reg_0 ~= 0 then
									desired = 4
									break
								end
								desired = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_5 + 4), loc_4)
							if reg_0 == 0 then
								desired = 1
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_2 = add_i32(loc_2, 1)
						loc_5 = load_i32(memory_at_0, loc_0 + 256)
						if loc_2 < shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 260), loc_5), 3) then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[147](add_i32(loc_1, 8), 4545, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[195] = --[[ std::__2::vector<Luau::Compiler::LoopJump, std::__2::allocator<Luau::Compiler::LoopJump>>::__append(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = load_i32(memory_at_0, loc_0 + 8)
		loc_2 = load_i32(memory_at_0, loc_0 + 4)
		if shr_i32(sub_i32(loc_3, loc_2), 3) >= loc_1 then
			while true do
				reg_0 = loc_0
				if loc_1 ~= 0 then
					while true do
						loc_3 = shl_i32(loc_1, 3)
						reg_1 = FUNC_LIST[479](loc_2, 0, loc_3)
						reg_1 = add_i32(reg_1, loc_3)
						break
					end
					if desired then
						break
					end
				else
					while true do
						reg_1 = loc_2
						break
					end
					if desired then
						break
					end
				end
				loc_2 = reg_1
				store_i32(memory_at_0, reg_0 + 4, loc_2)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_6 = load_i32(memory_at_0, loc_0)
			loc_7 = shr_i32(sub_i32(loc_2, loc_6), 3)
			loc_4 = add_i32(loc_1, loc_7)
			if loc_4 < 536870912 then
				while true do
					loc_3 = sub_i32(loc_3, loc_6)
					loc_8 = shr_i32(loc_3, 2)
					loc_4 = (if loc_3 >= 2147483640 then 536870911 else (if loc_4 < loc_8 then loc_8 else loc_4))
					if loc_4 ~= 0 then
						while true do
							if loc_4 >= 536870912 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](shl_i32(loc_4, 3))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_5
							break
						end
						if desired then
							break
						end
					end
					loc_5 = reg_0
					loc_3 = add_i32(loc_5, shl_i32(loc_7, 3))
					loc_1 = shl_i32(loc_1, 3)
					reg_0 = FUNC_LIST[479](loc_3, 0, loc_1)
					loc_1 = add_i32(reg_0, loc_1)
					loc_5 = add_i32(shl_i32(loc_4, 3), loc_5)
					if loc_2 ~= loc_6 then
						while true do
							while true do
								loc_3 = sub_i32(loc_3, 8)
								loc_2 = sub_i32(loc_2, 8)
								store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2))
								if loc_2 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = load_i32(memory_at_0, loc_0)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
						if desired then
							break
						end
					end
					loc_2 = reg_0
					store_i32(memory_at_0, loc_0 + 8, loc_5)
					store_i32(memory_at_0, loc_0 + 4, loc_1)
					store_i32(memory_at_0, loc_0, loc_3)
					if loc_2 ~= 0 then
						while true do
							FUNC_LIST[609](loc_2)
							break
						end
						if desired then
							break
						end
					end
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[40](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[196] = --[[ Luau::Compiler::validateContinueUntil(Luau::AstStat*, Luau::AstExpr*, Luau::AstStatBlock*, unsigned long) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_5
		store_i64(memory_at_0, loc_5 + 32, i64_ZERO)
		store_i32(memory_at_0, loc_5 + 40, 0)
		store_i64(memory_at_0, loc_5 + 24, i64_ZERO)
		store_i32(memory_at_0, loc_5 + 20, loc_0)
		store_i32(memory_at_0, loc_5 + 16, 11068)
		if load_i32(memory_at_0, loc_3 + 32) > loc_4 then
			while true do
				loc_7 = add_i32(loc_5, 28)
				while true do
					loc_0 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_3 + 28), shl_i32(loc_4, 2)))
					loc_6 = load_i32(memory_at_0, loc_0 + 4)
					while true do
						while true do
							if loc_0 == 0 then
								break
							end
							if load_i32(memory_at_0, 47388) ~= loc_6 then
								break
							end
							loc_6 = load_i32(memory_at_0, loc_0 + 32)
							if loc_6 == 0 then
								desired = 3
								break
							end
							loc_0 = load_i32(memory_at_0, loc_0 + 28)
							loc_6 = add_i32(loc_0, shl_i32(loc_6, 2))
							while true do
								store_i32(memory_at_0, loc_5 + 12, load_i32(memory_at_0, loc_0))
								reg_0 = FUNC_LIST[227](loc_7, add_i32(loc_5, 12))
								loc_0 = add_i32(loc_0, 4)
								if loc_6 ~= loc_0 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						if loc_0 == 0 then
							break
						end
						if load_i32(memory_at_0, 47436) ~= loc_6 then
							break
						end
						reg_0 = FUNC_LIST[227](loc_7, add_i32(loc_0, 28))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_4 = add_i32(loc_4, 1)
					if loc_4 < load_i32(memory_at_0, loc_3 + 32) then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, add_i32(loc_5, 16))
		loc_0 = load_i32(memory_at_0, loc_5 + 24)
		if loc_0 == 0 then
			while true do
				store_i32(memory_at_0, loc_5 + 16, 11068)
				loc_0 = load_i32(memory_at_0, loc_5 + 28)
				if loc_0 ~= 0 then
					while true do
						FUNC_LIST[609](loc_0)
						break
					end
					if desired then
						break
					end
				end
				GLOBAL_LIST[0].value = add_i32(loc_5, 48)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_6 = load_i32(memory_at_0, loc_1 + 8)
		store_i32(memory_at_0, loc_5, load_i32(memory_at_0, loc_0))
		store_i32(memory_at_0, loc_5 + 4, add_i32(loc_6, 1))
		FUNC_LIST[147](add_i32(loc_2, 8), 1651, loc_5)
		error("out of code bounds")
	end
end
FUNC_LIST[197] = --[[ Luau::Compiler::compileExprListTemp(Luau::AstArray<Luau::AstExpr*> const&, unsigned char, unsigned char, bool) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			loc_6 = load_i32(memory_at_0, loc_1 + 4)
			if loc_6 == loc_3 then
				while true do
					if loc_6 == 0 then
						desired = 1
						break
					end
					loc_3 = 0
					while true do
						FUNC_LIST[199](loc_0, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1), shl_i32(loc_3, 2))), band_i32(add_i32(loc_2, loc_3), 255), 1)
						loc_3 = add_i32(loc_3, 1)
						if loc_3 < load_i32(memory_at_0, loc_1 + 4) then
							continue
						end
						break
					end
					if desired then
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_3 < loc_6 then
				while true do
					if loc_3 ~= 0 then
						while true do
							while true do
								FUNC_LIST[199](loc_0, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1), shl_i32(loc_5, 2))), band_i32(add_i32(loc_2, loc_5), 255), 1)
								loc_5 = add_i32(loc_5, 1)
								if loc_3 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = load_i32(memory_at_0, loc_1 + 4)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_6
							break
						end
						if desired then
							break
						end
					end
					loc_6 = reg_0
					if loc_6 <= loc_3 then
						desired = 1
						break
					end
					while true do
						FUNC_LIST[182](loc_0, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1), shl_i32(loc_3, 2))))
						loc_3 = add_i32(loc_3, 1)
						if loc_3 < load_i32(memory_at_0, loc_1 + 4) then
							continue
						end
						break
					end
					if desired then
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = 1
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 0, 2, }
							end)()
						end
						temp = br_map[1][loc_6] or 1
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_3 == 0 then
						desired = 1
						break
					end
					loc_1 = 0
					while true do
						FUNC_LIST[96](load_i32(memory_at_0, loc_0), 2, band_i32(add_i32(loc_1, loc_2), 255), 0, 0)
						loc_1 = add_i32(loc_1, 1)
						if loc_3 ~= loc_1 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					FUNC_LIST[199](loc_0, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1), shl_i32(loc_5, 2))), band_i32(add_i32(loc_2, loc_5), 255), 1)
					loc_5 = add_i32(loc_5, 1)
					loc_7 = load_i32(memory_at_0, loc_1 + 4)
					loc_6 = sub_i32(loc_7, 1)
					if loc_5 < loc_6 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = loc_6
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[207](loc_0, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1), shl_i32(loc_5, 2))), band_i32(sub_i32(add_i32(loc_2, loc_7), 1), 255), band_i32(sub_i32(loc_3, loc_5), 255), loc_4)
			break
		end
		break
	end
end
FUNC_LIST[198] = --[[ Luau::Compiler::compileExprTempMultRet(Luau::AstExpr*, unsigned char) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_3 = load_i32(memory_at_0, loc_1 + 4)
		while true do
			if loc_1 == 0 then
				break
			end
			if load_i32(memory_at_0, 47244) ~= loc_3 then
				break
			end
			while true do
				if lt_i32(load_i32(memory_at_0, loc_0 + 4), 2) then
					break
				end
				reg_0 = FUNC_LIST[201](loc_0, loc_1)
				if reg_0 ~= 0 then
					break
				end
				FUNC_LIST[199](loc_0, loc_1, loc_2, 1)
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = load_i32(memory_at_0, loc_0 + 220)
			store_i32(memory_at_0, loc_0 + 220, loc_2)
			FUNC_LIST[181](loc_0, loc_1, loc_2, 0, 1, 1)
			store_i32(memory_at_0, loc_0 + 220, loc_3)
			reg_0 = 1
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			if loc_1 == 0 then
				break
			end
			if load_i32(memory_at_0, 47236) ~= loc_3 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_0 + 220)
			store_i32(memory_at_0, loc_0 + 220, loc_2)
			if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
				while true do
					FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, loc_1 + 8), 1))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[96](load_i32(memory_at_0, loc_0), 63, loc_2, 0, 0)
			store_i32(memory_at_0, loc_0 + 220, loc_3)
			reg_0 = 1
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[199](loc_0, loc_1, loc_2, 1)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[199] = --[[ Luau::Compiler::compileExpr(Luau::AstExpr*, unsigned char, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		while true do
			while true do
				if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
					while true do
						FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, loc_1 + 8), 1))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					if lt_i32(load_i32(memory_at_0, loc_0 + 12), 2) then
						break
					end
					loc_4 = load_i32(memory_at_0, loc_1 + 4)
					if loc_4 == load_i32(memory_at_0, 47324) then
						break
					end
					if load_i32(memory_at_0, 47444) == loc_4 then
						break
					end
					FUNC_LIST[96](load_i32(memory_at_0, loc_0), 69, 0, 0, 0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					while true do
						while true do
							if load_i32(memory_at_0, loc_0 + 120) == 0 then
								break
							end
							loc_10 = load_i32(memory_at_0, loc_0 + 124)
							if loc_1 == loc_10 then
								break
							end
							loc_6 = bxor_i32(shr_u32(loc_1, 4), shr_u32(loc_1, 9))
							loc_9 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
							loc_11 = load_i32(memory_at_0, loc_0 + 112)
							loc_4 = 0
							while true do
								loc_7 = band_i32(loc_6, loc_9)
								loc_8 = add_i32(shl_i32(loc_7, 5), loc_11)
								loc_6 = load_i32(memory_at_0, loc_8)
								if loc_6 ~= loc_1 then
									while true do
										if loc_6 == loc_10 then
											desired = 5
											break
										end
										loc_4 = add_i32(loc_4, 1)
										loc_6 = add_i32(loc_7, loc_4)
										if loc_4 <= loc_9 then
											desired = 6
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if load_i32(memory_at_0, loc_8 + 8) == 0 then
								break
							end
							FUNC_LIST[210](loc_0, loc_1, add_i32(loc_8, 8), loc_2)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = load_i32(memory_at_0, loc_1 + 4)
						if loc_1 ~= 0 then
							while true do
								if load_i32(memory_at_0, 47180) == loc_4 then
									desired = 3
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_4 == load_i32(memory_at_0, 47188) then
							while true do
								FUNC_LIST[96](load_i32(memory_at_0, loc_0), 2, loc_2, 0, 0)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if loc_1 == 0 then
								break
							end
							if load_i32(memory_at_0, 47196) ~= loc_4 then
								break
							end
							FUNC_LIST[96](load_i32(memory_at_0, loc_0), 3, loc_2, load_i32_u8(memory_at_0, loc_1 + 24), 0)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_1 == 0 then
								break
							end
							if load_i32(memory_at_0, 47204) ~= loc_4 then
								break
							end
							reg_0 = FUNC_LIST[84](load_i32(memory_at_0, loc_0), load_f64(memory_at_0, loc_1 + 24))
							loc_4 = reg_0
							if lt_i32(loc_4, 0) then
								desired = 2
								break
							end
							loc_1 = load_i32(memory_at_0, loc_0)
							if loc_4 <= 32767 then
								while true do
									FUNC_LIST[97](loc_1, 5, loc_2, extend_i32_n16(loc_4))
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[97](loc_1, 66, loc_2, 0)
							FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_4)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_1 == 0 then
								break
							end
							if load_i32(memory_at_0, 47212) ~= loc_4 then
								break
							end
							loc_4 = load_i32(memory_at_0, loc_0)
							loc_12 = load_i64(memory_at_0, loc_1 + 24)
							store_i64(memory_at_0, loc_5 + 8, loc_12)
							store_i64(memory_at_0, loc_5 + 16, loc_12)
							reg_0 = FUNC_LIST[86](loc_4, add_i32(loc_5, 8))
							loc_4 = reg_0
							if lt_i32(loc_4, 0) then
								desired = 2
								break
							end
							loc_1 = load_i32(memory_at_0, loc_0)
							if loc_4 <= 32767 then
								while true do
									FUNC_LIST[97](loc_1, 5, loc_2, extend_i32_n16(loc_4))
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[97](loc_1, 66, loc_2, 0)
							FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_4)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							while true do
								if loc_1 == 0 then
									break
								end
								if load_i32(memory_at_0, 47220) ~= loc_4 then
									break
								end
								if load_i32(memory_at_0, loc_0 + 60) == 0 then
									while true do
										loc_7 = load_i32(memory_at_0, loc_1 + 24)
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_7 = load_i32(memory_at_0, loc_1 + 24)
								loc_10 = load_i32(memory_at_0, loc_0 + 64)
								if loc_7 == loc_10 then
									desired = 5
									break
								end
								loc_4 = bxor_i32(shr_u32(loc_7, 4), shr_u32(loc_7, 9))
								loc_6 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
								loc_11 = load_i32(memory_at_0, loc_0 + 52)
								loc_1 = 0
								while true do
									loc_9 = band_i32(loc_4, loc_6)
									loc_8 = add_i32(mul_i32(loc_9, 12), loc_11)
									loc_4 = load_i32(memory_at_0, loc_8)
									if loc_4 ~= loc_7 then
										while true do
											if loc_4 == loc_10 then
												desired = 5
												break
											end
											loc_1 = add_i32(loc_1, 1)
											loc_4 = add_i32(loc_9, loc_1)
											if loc_1 <= loc_6 then
												desired = 7
												break
											end
											desired = 5
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if load_i32_u8(memory_at_0, loc_8 + 5) == 0 then
									desired = 5
									break
								end
								loc_1 = load_i32_u8(memory_at_0, loc_8 + 4)
								if loc_1 == loc_2 then
									while true do
										if load_i32(memory_at_0, loc_0 + 4) ~= 0 then
											desired = 4
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								FUNC_LIST[96](load_i32(memory_at_0, loc_0), 6, loc_2, loc_1, 0)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if load_i32(memory_at_0, 47228) ~= loc_4 then
									break
								end
								FUNC_LIST[215](loc_0, loc_1, loc_2)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if load_i32(memory_at_0, 47236) ~= loc_4 then
									break
								end
								if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
									while true do
										FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, loc_1 + 8), 1))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								FUNC_LIST[96](load_i32(memory_at_0, loc_0), 63, loc_2, 2, 0)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if load_i32(memory_at_0, 47244) ~= loc_4 then
									break
								end
								while true do
									if loc_3 == 0 then
										break
									end
									if loc_2 ~= sub_i32(load_i32(memory_at_0, loc_0 + 220), 1) then
										break
									end
									FUNC_LIST[181](loc_0, loc_1, loc_2, 1, 1, 0)
									desired = 4
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[181](loc_0, loc_1, loc_2, 1, 0, 0)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if load_i32(memory_at_0, 47252) ~= loc_4 then
									break
								end
								FUNC_LIST[216](loc_0, loc_1, loc_2)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if load_i32(memory_at_0, 47260) ~= loc_4 then
									break
								end
								FUNC_LIST[217](loc_0, loc_1, loc_2)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if load_i32(memory_at_0, 47268) ~= loc_4 then
									break
								end
								FUNC_LIST[189](loc_0, loc_1, loc_2)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if load_i32(memory_at_0, 47276) ~= loc_4 then
									break
								end
								FUNC_LIST[218](loc_0, loc_1, loc_2, loc_3)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if load_i32(memory_at_0, 47284) ~= loc_4 then
									break
								end
								store_i32(memory_at_0, loc_5 + 24, loc_0)
								store_i32(memory_at_0, loc_5 + 28, load_i32(memory_at_0, loc_0 + 220))
								reg_0 = FUNC_LIST[213](loc_0, load_i32(memory_at_0, loc_1 + 28), add_i32(loc_5, 24))
								loc_4 = reg_0
								loc_1 = load_i32(memory_at_0, loc_1 + 24)
								FUNC_LIST[96](load_i32(memory_at_0, loc_0), (if loc_1 < 3 then add_i32(loc_1, 50) else 0), loc_2, loc_4, 0)
								store_i32(memory_at_0, load_i32(memory_at_0, loc_5 + 24) + 220, load_i32(memory_at_0, loc_5 + 28))
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if load_i32(memory_at_0, 47292) ~= loc_4 then
									break
								end
								FUNC_LIST[219](loc_0, loc_1, loc_2, loc_3)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_1 ~= 0 then
								while true do
									if load_i32(memory_at_0, 47300) == loc_4 then
										desired = 3
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if load_i32(memory_at_0, 47308) ~= loc_4 then
									break
								end
								FUNC_LIST[220](loc_0, loc_1, loc_2, loc_3)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_1 == 0 then
								desired = 4
								break
							end
							if load_i32(memory_at_0, 47316) ~= loc_4 then
								desired = 4
								break
							end
							FUNC_LIST[221](loc_0, loc_1, loc_2, loc_3)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[155](loc_0, loc_7)
						loc_1 = reg_0
						FUNC_LIST[96](load_i32(memory_at_0, loc_0), 9, loc_2, loc_1, 0)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					GLOBAL_LIST[0].value = add_i32(loc_5, 32)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = load_i32(memory_at_0, loc_1 + 24)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[147](add_i32(loc_1, 8), 4438, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[200] = --[[ Luau::Compiler::tryCompileInlinedCall(Luau::AstExprCall*, Luau::AstExprFunction*, unsigned char, unsigned char, bool, int, int, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7, loc_8)
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0.0
	local reg_0
	local desired
	while true do
		loc_11 = add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_11
		while true do
			if load_i32(memory_at_0, loc_0 + 40) == 0 then
				break
			end
			loc_15 = load_i32(memory_at_0, loc_0 + 44)
			if loc_2 == loc_15 then
				break
			end
			loc_12 = bxor_i32(shr_u32(loc_2, 4), shr_u32(loc_2, 9))
			loc_16 = sub_i32(load_i32(memory_at_0, loc_0 + 36), 1)
			loc_17 = load_i32(memory_at_0, loc_0 + 32)
			while true do
				loc_13 = band_i32(loc_12, loc_16)
				loc_10 = add_i32(mul_i32(loc_13, 40), loc_17)
				loc_12 = load_i32(memory_at_0, loc_10)
				if loc_2 == loc_12 then
					desired = 1
					break
				end
				loc_10 = 0
				if loc_12 == loc_15 then
					desired = 1
					break
				end
				loc_9 = add_i32(loc_9, 1)
				loc_12 = add_i32(loc_13, loc_9)
				if loc_9 <= loc_16 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		while true do
			while true do
				if load_i32(memory_at_0, loc_0 + 220) <= 128 then
					while true do
						loc_19 = (if loc_10 ~= 0 then add_i32(loc_10, 8) else 0)
						if load_i32(memory_at_0, loc_19 + 24) < 33 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_9 = 0
				FUNC_LIST[108](load_i32(memory_at_0, loc_0), 4005, 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					loc_10 = load_i32(memory_at_0, loc_0 + 284)
					loc_9 = load_i32(memory_at_0, loc_0 + 280)
					if lt_i32(div_i32(sub_i32(loc_10, loc_9), 24), loc_8) then
						while true do
							if loc_9 == loc_10 then
								desired = 2
								break
							end
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_9 = 0
					FUNC_LIST[108](load_i32(memory_at_0, loc_0), 2377, 0)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if load_i32(memory_at_0, loc_9) ~= loc_2 then
						while true do
							loc_9 = add_i32(loc_9, 24)
							if loc_9 ~= loc_10 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_9 = 0
				FUNC_LIST[108](load_i32(memory_at_0, loc_0), 2132, 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_5 ~= 0 then
				while true do
					loc_9 = 0
					FUNC_LIST[108](load_i32(memory_at_0, loc_0), 1783, 0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			store_i64(memory_at_0, loc_11 + 56, i64_ZERO)
			loc_18 = load_i32(memory_at_0, loc_1 + 32)
			while true do
				loc_14 = load_i32(memory_at_0, loc_2 + 48)
				if loc_14 == 0 then
					break
				end
				loc_20 = (if loc_18 >= 8 then 8 else loc_18)
				loc_12 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
				loc_8 = load_i32(memory_at_0, loc_0 + 112)
				loc_17 = load_i32(memory_at_0, loc_0 + 124)
				loc_21 = load_i32(memory_at_0, loc_0 + 120)
				loc_5 = 0
				while true do
					if loc_5 == loc_20 then
						desired = 2
						break
					end
					loc_13 = 0
					while true do
						if loc_21 == 0 then
							break
						end
						loc_15 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 28), shl_i32(loc_5, 2)))
						if loc_15 == loc_17 then
							break
						end
						loc_10 = bxor_i32(shr_u32(loc_15, 4), shr_u32(loc_15, 9))
						loc_9 = 0
						while true do
							loc_16 = band_i32(loc_10, loc_12)
							loc_13 = add_i32(shl_i32(loc_16, 5), loc_8)
							loc_10 = load_i32(memory_at_0, loc_13)
							if loc_10 ~= loc_15 then
								while true do
									loc_13 = 0
									if loc_10 == loc_17 then
										desired = 4
										break
									end
									loc_9 = add_i32(loc_9, 1)
									loc_10 = add_i32(loc_16, loc_9)
									if loc_9 <= loc_12 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_13 = (if load_i32(memory_at_0, loc_13 + 8) ~= 0 then 1 else 0)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					store_i32_n8(memory_at_0, add_i32(loc_5, add_i32(loc_11, 56)), loc_13)
					loc_5 = add_i32(loc_5, 1)
					if loc_14 ~= loc_5 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_18 == 0 then
					break
				end
				reg_0 = FUNC_LIST[201](loc_0, load_i32(memory_at_0, sub_i32(add_i32(load_i32(memory_at_0, loc_1 + 28), shl_i32(loc_18, 2)), 4)))
				loc_9 = reg_0
				loc_14 = load_i32(memory_at_0, loc_2 + 48)
				if loc_9 ~= 0 then
					break
				end
				loc_10 = (if loc_14 >= 8 then 8 else loc_14)
				loc_9 = load_i32(memory_at_0, loc_1 + 32)
				if loc_10 <= loc_9 then
					break
				end
				reg_0 = FUNC_LIST[479](add_i32(loc_9, add_i32(loc_11, 56)), 1, sub_i32(loc_10, loc_9))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[128](load_i64(memory_at_0, loc_19 + 16), add_i32(loc_11, 56), (if ge_i32(loc_14, 8) then 8 else loc_14))
			loc_10 = reg_0
			reg_0 = FUNC_LIST[128](load_i64(memory_at_0, loc_19 + 16), 0, 0)
			loc_9 = reg_0
			if loc_10 ~= 0 then
				while true do
					loc_9 = div_i32(add_i32(mul_i32(loc_9, 100), 300), loc_10)
					reg_0 = (if gt_i32(loc_7, loc_9) then loc_9 else loc_7)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_7
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = reg_0
			loc_22 = (convert_f64_i32(loc_7) / 1e2)
			loc_12 = load_i32(memory_at_0, loc_0)
			loc_9 = (if ge_i32(div_i32(mul_i32(loc_6, loc_7), 100), loc_10) then 1 else 0)
			if loc_9 == 0 then
				while true do
					store_f64(memory_at_0, loc_11 + 40, loc_22)
					store_i32(memory_at_0, loc_11 + 32, loc_10)
					FUNC_LIST[108](loc_12, 6842, add_i32(loc_11, 32))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			store_i32(memory_at_0, loc_11 + 16, div_i32(sub_i32(load_i32(memory_at_0, loc_0 + 284), load_i32(memory_at_0, loc_0 + 280)), 24))
			store_f64(memory_at_0, loc_11 + 8, loc_22)
			store_i32(memory_at_0, loc_11, loc_10)
			FUNC_LIST[108](loc_12, 7108, loc_11)
			FUNC_LIST[233](loc_0, loc_1, loc_2, loc_3, loc_4)
			break
		end
		GLOBAL_LIST[0].value = sub_i32(loc_11, 4294967232)
		reg_0 = loc_9
		break
	end
	return reg_0
end
FUNC_LIST[201] = --[[ Luau::Compiler::isExprMultRet(Luau::AstExpr*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local desired
	while true do
		loc_9 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_9
		loc_2 = load_i32(memory_at_0, loc_1 + 4)
		while true do
			while true do
				if loc_1 ~= 0 then
					while true do
						if load_i32(memory_at_0, 47244) == loc_2 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = (if load_i32(memory_at_0, 47236) == loc_2 then 1 else 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = 1
			reg_0 = loc_2
			if lt_i32(load_i32(memory_at_0, loc_0 + 4), 2) then
				break
			end
			while true do
				if load_i32(memory_at_0, loc_0 + 120) == 0 then
					break
				end
				loc_6 = load_i32(memory_at_0, loc_0 + 124)
				if loc_1 == loc_6 then
					break
				end
				loc_3 = bxor_i32(shr_u32(loc_1, 4), shr_u32(loc_1, 9))
				loc_4 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
				loc_7 = load_i32(memory_at_0, loc_0 + 112)
				loc_2 = 0
				while true do
					loc_5 = band_i32(loc_3, loc_4)
					loc_8 = add_i32(shl_i32(loc_5, 5), loc_7)
					loc_3 = load_i32(memory_at_0, loc_8)
					if loc_3 ~= loc_1 then
						while true do
							if loc_3 == loc_6 then
								desired = 2
								break
							end
							loc_2 = add_i32(loc_2, 1)
							loc_3 = add_i32(loc_5, loc_2)
							if loc_2 <= loc_4 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = 0
				reg_0 = loc_2
				if load_i32(memory_at_0, loc_8 + 8) ~= 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					if load_i32(memory_at_0, loc_0 + 180) == 0 then
						break
					end
					loc_6 = load_i32(memory_at_0, loc_0 + 184)
					if loc_1 == loc_6 then
						break
					end
					loc_3 = bxor_i32(shr_u32(loc_1, 4), shr_u32(loc_1, 9))
					loc_4 = sub_i32(load_i32(memory_at_0, loc_0 + 176), 1)
					loc_7 = load_i32(memory_at_0, loc_0 + 172)
					loc_2 = 0
					while true do
						loc_5 = band_i32(loc_3, loc_4)
						loc_8 = add_i32(shl_i32(loc_5, 3), loc_7)
						loc_3 = load_i32(memory_at_0, loc_8)
						if loc_1 == loc_3 then
							desired = 2
							break
						end
						if loc_3 == loc_6 then
							desired = 3
							break
						end
						loc_2 = add_i32(loc_2, 1)
						loc_3 = add_i32(loc_5, loc_2)
						if loc_2 <= loc_4 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = sub_i32(load_i32(memory_at_0, loc_0 + 96), 1)
				loc_10 = load_i32(memory_at_0, 47300)
				loc_11 = load_i32(memory_at_0, 47180)
				loc_7 = load_i32(memory_at_0, loc_0 + 92)
				loc_6 = load_i32(memory_at_0, loc_0 + 104)
				loc_12 = load_i32(memory_at_0, loc_0 + 100)
				loc_13 = load_i32(memory_at_0, 47220)
				loc_1 = load_i32(memory_at_0, loc_1 + 24)
				while true do
					while true do
						loc_2 = load_i32(memory_at_0, loc_1 + 4)
						while true do
							if loc_1 == 0 then
								break
							end
							if loc_2 ~= loc_13 then
								break
							end
							if loc_12 == 0 then
								desired = 3
								break
							end
							loc_5 = load_i32(memory_at_0, loc_1 + 24)
							if loc_6 == loc_5 then
								desired = 3
								break
							end
							loc_2 = bxor_i32(shr_u32(loc_5, 4), shr_u32(loc_5, 9))
							loc_1 = 0
							while true do
								loc_4 = band_i32(loc_2, loc_3)
								loc_8 = add_i32(mul_i32(loc_4, 12), loc_7)
								loc_2 = load_i32(memory_at_0, loc_8)
								if loc_2 ~= loc_5 then
									while true do
										if loc_2 == loc_6 then
											desired = 3
											break
										end
										loc_1 = add_i32(loc_1, 1)
										loc_2 = add_i32(loc_4, loc_1)
										if loc_1 <= loc_3 then
											desired = 6
											break
										end
										desired = 3
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if load_i32_u8(memory_at_0, loc_8 + 8) ~= 0 then
								desired = 3
								break
							end
							loc_1 = load_i32(memory_at_0, loc_8 + 4)
							if loc_1 ~= 0 then
								desired = 4
								break
							end
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						while true do
							if loc_1 == 0 then
								break
							end
							if band_i32((if loc_2 ~= loc_11 then 1 else 0), (if loc_2 ~= loc_10 then 1 else 0)) ~= 0 then
								break
							end
							loc_1 = load_i32(memory_at_0, loc_1 + 24)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if load_i32(memory_at_0, 47268) ~= loc_2 then
						break
					end
					if load_i32(memory_at_0, loc_0 + 40) == 0 then
						break
					end
					loc_6 = load_i32(memory_at_0, loc_0 + 44)
					if loc_6 == loc_1 then
						break
					end
					loc_3 = bxor_i32(shr_u32(loc_1, 4), shr_u32(loc_1, 9))
					loc_4 = sub_i32(load_i32(memory_at_0, loc_0 + 36), 1)
					loc_0 = load_i32(memory_at_0, loc_0 + 32)
					loc_2 = 0
					while true do
						loc_5 = band_i32(loc_3, loc_4)
						loc_7 = add_i32(mul_i32(loc_5, 40), loc_0)
						loc_3 = load_i32(memory_at_0, loc_7)
						if loc_3 ~= loc_1 then
							while true do
								if loc_3 == loc_6 then
									desired = 3
									break
								end
								loc_2 = add_i32(loc_2, 1)
								loc_3 = add_i32(loc_5, loc_2)
								if loc_2 <= loc_4 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = 0
					reg_0 = loc_2
					if load_i32_u8(memory_at_0, loc_7 + 37) ~= 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = 1
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[18](add_i32(loc_9, 4), load_i32(memory_at_0, loc_8 + 4))
			reg_0 = (if load_i32(memory_at_0, loc_9 + 8) ~= 1 then 1 else 0)
			break
		end
		loc_2 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_9, 16)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[202] = --[[ Luau::Compiler::compileExprSelectVararg(Luau::AstExprCall*, unsigned char, unsigned char, bool, bool, unsigned char) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6)
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local reg_0
	local desired
	while true do
		loc_10 = load_i32(memory_at_0, 47220)
		loc_12 = load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 28))
		loc_7 = load_i32(memory_at_0, loc_12 + 4)
		while true do
			while true do
				while true do
					if loc_12 ~= 0 then
						while true do
							loc_8 = loc_12
							if loc_7 == loc_10 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_11 = load_i32(memory_at_0, 47300)
					loc_9 = load_i32(memory_at_0, 47180)
					loc_8 = loc_12
					while true do
						if band_i32((if loc_7 ~= loc_9 then 1 else 0), (if loc_7 ~= loc_11 then 1 else 0)) ~= 0 then
							desired = 2
							break
						end
						loc_8 = load_i32(memory_at_0, loc_8 + 24)
						loc_7 = load_i32(memory_at_0, loc_8 + 4)
						if loc_8 == 0 then
							continue
						end
						if loc_7 ~= loc_10 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if load_i32(memory_at_0, loc_0 + 60) == 0 then
					break
				end
				loc_11 = load_i32(memory_at_0, loc_8 + 24)
				loc_14 = load_i32(memory_at_0, loc_0 + 64)
				if loc_11 == loc_14 then
					break
				end
				loc_8 = bxor_i32(shr_u32(loc_11, 4), shr_u32(loc_11, 9))
				loc_9 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
				loc_15 = load_i32(memory_at_0, loc_0 + 52)
				loc_7 = 0
				while true do
					loc_10 = band_i32(loc_8, loc_9)
					loc_13 = add_i32(mul_i32(loc_10, 12), loc_15)
					loc_8 = load_i32(memory_at_0, loc_13)
					if loc_8 ~= loc_11 then
						while true do
							if loc_8 == loc_14 then
								desired = 2
								break
							end
							loc_7 = add_i32(loc_7, 1)
							loc_8 = add_i32(loc_10, loc_7)
							if loc_7 <= loc_9 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if load_i32_u8(memory_at_0, loc_13 + 5) == 0 then
					break
				end
				loc_7 = load_i32_u8(memory_at_0, loc_13 + 4)
				loc_8 = loc_7
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_9 = load_i32(memory_at_0, loc_0 + 220)
			loc_8 = add_i32(loc_6, 1)
			loc_7 = band_i32(loc_8, 255)
			store_i32(memory_at_0, loc_0 + 220, add_i32(loc_7, 1))
			FUNC_LIST[199](loc_0, loc_12, loc_7, 1)
			store_i32(memory_at_0, loc_0 + 220, loc_9)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
		loc_9 = reg_0
		loc_8 = band_i32(loc_8, 255)
		FUNC_LIST[96](load_i32(memory_at_0, loc_0), 73, 57, loc_8, 0)
		FUNC_LIST[199](loc_0, load_i32(memory_at_0, loc_1 + 24), loc_6, 1)
		loc_10 = add_i32(loc_6, 1)
		if loc_10 ~= loc_7 then
			while true do
				FUNC_LIST[96](load_i32(memory_at_0, loc_0), 6, band_i32(loc_10, 255), loc_8, 0)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[96](load_i32(memory_at_0, loc_0), 63, band_i32(add_i32(loc_6, 2), 255), 0, 0)
		reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
		loc_7 = reg_0
		reg_0 = FUNC_LIST[101](load_i32(memory_at_0, loc_0), loc_9, loc_7)
		if reg_0 ~= 0 then
			while true do
				loc_7 = 0
				FUNC_LIST[96](load_i32(memory_at_0, loc_0), 21, loc_6, 0, band_i32((if loc_5 ~= 0 then 0 else add_i32(loc_3, 1)), 255))
				while true do
					if loc_3 == 0 then
						break
					end
					if loc_4 ~= 0 then
						break
					end
					while true do
						FUNC_LIST[96](load_i32(memory_at_0, loc_0), 6, band_i32(add_i32(loc_2, loc_7), 255), band_i32(add_i32(loc_6, loc_7), 255), 0)
						loc_7 = add_i32(loc_7, 1)
						if loc_3 ~= loc_7 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					break
				end
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[147](add_i32(load_i32(memory_at_0, loc_1 + 24), 8), 4545, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[203] = --[[ Luau::Compiler::compileExprFastcallN(Luau::AstExprCall*, unsigned char, unsigned char, bool, bool, unsigned char, int, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7, loc_8)
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local loc_23 = 0
	local reg_0
	local desired
	while true do
		loc_14 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_14
		while true do
			while true do
				loc_13 = load_i32(memory_at_0, loc_1 + 32)
				if loc_13 == 1 then
					while true do
						store_i32(memory_at_0, loc_14 + 8, 0)
						store_i64(memory_at_0, loc_14, i64_ZERO)
						loc_17 = 73
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_17 = 75
				while true do
					if ge_i32(loc_8, 0) then
						break
					end
					loc_17 = 74
					if load_i32(memory_at_0, loc_0 + 120) == 0 then
						break
					end
					loc_16 = load_i32(memory_at_0, loc_0 + 124)
					loc_15 = load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 28) + 4)
					if loc_16 == loc_15 then
						break
					end
					loc_10 = bxor_i32(shr_u32(loc_15, 4), shr_u32(loc_15, 9))
					loc_12 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
					loc_18 = load_i32(memory_at_0, loc_0 + 112)
					while true do
						loc_11 = band_i32(loc_10, loc_12)
						loc_19 = add_i32(shl_i32(loc_11, 5), loc_18)
						loc_10 = load_i32(memory_at_0, loc_19)
						if loc_10 ~= loc_15 then
							while true do
								if loc_10 == loc_16 then
									desired = 3
									break
								end
								loc_9 = add_i32(loc_9, 1)
								loc_10 = add_i32(loc_11, loc_9)
								if loc_9 <= loc_12 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_17 = (if load_i32(memory_at_0, loc_19 + 8) ~= 0 then 75 else 74)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_14 + 8, 0)
				store_i64(memory_at_0, loc_14, i64_ZERO)
				loc_12 = 0
				reg_0 = loc_12
				if loc_13 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_21 = add_i32(loc_6, 1)
			loc_22 = (if loc_17 ~= 75 then 1 else 0)
			loc_11 = 0
			while true do
				loc_18 = shl_i32(loc_11, 2)
				loc_13 = load_i32(memory_at_0, add_i32(loc_18, load_i32(memory_at_0, loc_1 + 28)))
				while true do
					while true do
						while true do
							while true do
								if (if loc_11 ~= 0 then loc_22 else 1) ~= 0 then
									while true do
										loc_9 = load_i32(memory_at_0, loc_13 + 4)
										loc_15 = load_i32(memory_at_0, 47220)
										while true do
											if loc_13 ~= 0 then
												while true do
													loc_10 = loc_13
													if loc_9 == loc_15 then
														desired = 8
														break
													end
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
											end
											loc_16 = load_i32(memory_at_0, 47300)
											loc_12 = load_i32(memory_at_0, 47180)
											loc_10 = loc_13
											while true do
												if band_i32((if loc_9 ~= loc_12 then 1 else 0), (if loc_9 ~= loc_16 then 1 else 0)) ~= 0 then
													desired = 4
													break
												end
												loc_10 = load_i32(memory_at_0, loc_10 + 24)
												loc_9 = load_i32(memory_at_0, loc_10 + 4)
												if loc_10 == 0 then
													continue
												end
												if loc_9 ~= loc_15 then
													continue
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											break
										end
										if desired then
											break
										end
										if load_i32(memory_at_0, loc_0 + 60) == 0 then
											desired = 4
											break
										end
										loc_16 = load_i32(memory_at_0, loc_10 + 24)
										loc_19 = load_i32(memory_at_0, loc_0 + 64)
										if loc_16 == loc_19 then
											desired = 4
											break
										end
										loc_10 = bxor_i32(shr_u32(loc_16, 4), shr_u32(loc_16, 9))
										loc_12 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
										loc_23 = load_i32(memory_at_0, loc_0 + 52)
										loc_9 = 0
										while true do
											loc_15 = band_i32(loc_10, loc_12)
											loc_20 = add_i32(mul_i32(loc_15, 12), loc_23)
											loc_10 = load_i32(memory_at_0, loc_20)
											if loc_16 == loc_10 then
												desired = 6
												break
											end
											if loc_10 == loc_19 then
												desired = 4
												break
											end
											loc_9 = add_i32(loc_9, 1)
											loc_10 = add_i32(loc_15, loc_9)
											if loc_9 <= loc_12 then
												continue
											end
											break
										end
										if desired then
											break
										end
										desired = 4
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = FUNC_LIST[214](loc_0, loc_13)
								loc_9 = reg_0
								if lt_i32(loc_9, 0) then
									desired = 5
									break
								end
								store_i32(memory_at_0, add_i32(loc_14, loc_18), loc_9)
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if load_i32_u8(memory_at_0, loc_20 + 5) == 0 then
								desired = 4
								break
							end
							store_i32(memory_at_0, add_i32(loc_14, loc_18), load_i32_u8(memory_at_0, loc_20 + 4))
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[147](add_i32(loc_1, 8), 4438, 0)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_9 = band_i32(add_i32(loc_11, loc_21), 255)
					store_i32(memory_at_0, add_i32(loc_14, loc_18), loc_9)
					loc_10 = load_i32(memory_at_0, loc_0 + 220)
					store_i32(memory_at_0, loc_0 + 220, add_i32(loc_9, 1))
					FUNC_LIST[199](loc_0, loc_13, loc_9, 1)
					store_i32(memory_at_0, loc_0 + 220, loc_10)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_11 = add_i32(loc_11, 1)
				if loc_11 < load_i32(memory_at_0, loc_1 + 32) then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = load_i32(memory_at_0, loc_14)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_12 = reg_0
		reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
		loc_16 = reg_0
		FUNC_LIST[96](load_i32(memory_at_0, loc_0), loc_17, band_i32(loc_7, 255), band_i32(loc_12, 255), 0)
		if loc_17 ~= 73 then
			while true do
				FUNC_LIST[98](load_i32(memory_at_0, loc_0), (if lt_i32(loc_8, 0) then load_i32(memory_at_0, loc_14 + 4) else loc_8))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_11 = load_i32(memory_at_0, loc_1 + 32)
			if loc_11 == 0 then
				break
			end
			loc_9 = 1
			loc_10 = add_i32(loc_6, 1)
			if loc_12 ~= loc_10 then
				while true do
					FUNC_LIST[96](load_i32(memory_at_0, loc_0), 6, band_i32(loc_10, 255), band_i32(loc_12, 255), 0)
					reg_0 = load_i32(memory_at_0, loc_1 + 32)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_11
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_11 = reg_0
			if loc_11 <= 1 then
				break
			end
			loc_12 = (if loc_17 ~= 75 then 1 else 0)
			while true do
				while true do
					if loc_12 == 0 then
						while true do
							loc_11 = add_i32(loc_9, loc_10)
							loc_13 = load_i32(memory_at_0, loc_0)
							loc_15 = load_i32(memory_at_0, add_i32(shl_i32(loc_9, 2), loc_14))
							if le_i32(loc_15, 32767) then
								while true do
									FUNC_LIST[97](loc_13, 5, band_i32(loc_11, 255), extend_i32_n16(loc_15))
									desired = 3
									break
								end
								if desired then
									break
								end
							end
							FUNC_LIST[97](loc_13, 66, band_i32(loc_11, 255), 0)
							FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_15)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_11 = load_i32(memory_at_0, add_i32(shl_i32(loc_9, 2), loc_14))
					loc_13 = add_i32(loc_9, loc_10)
					if loc_11 == loc_13 then
						break
					end
					FUNC_LIST[96](load_i32(memory_at_0, loc_0), 6, band_i32(loc_13, 255), band_i32(loc_11, 255), 0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_9 = add_i32(loc_9, 1)
				if loc_9 < load_i32(memory_at_0, loc_1 + 32) then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[199](loc_0, load_i32(memory_at_0, loc_1 + 24), loc_6, 1)
		reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
		loc_9 = reg_0
		reg_0 = FUNC_LIST[101](load_i32(memory_at_0, loc_0), loc_16, loc_9)
		if reg_0 ~= 0 then
			while true do
				loc_9 = 0
				FUNC_LIST[96](load_i32(memory_at_0, loc_0), 21, loc_6, band_i32(add_i32(load_i32_u8(memory_at_0, loc_1 + 32), 1), 255), band_i32((if loc_5 ~= 0 then 0 else add_i32(loc_3, 1)), 255))
				while true do
					if loc_3 == 0 then
						break
					end
					if loc_4 ~= 0 then
						break
					end
					while true do
						FUNC_LIST[96](load_i32(memory_at_0, loc_0), 6, band_i32(add_i32(loc_2, loc_9), 255), band_i32(add_i32(loc_6, loc_9), 255), 0)
						loc_9 = add_i32(loc_9, 1)
						if loc_3 ~= loc_9 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					break
				end
				GLOBAL_LIST[0].value = add_i32(loc_14, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[147](add_i32(load_i32(memory_at_0, loc_1 + 24), 8), 4545, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[204] = --[[ Luau::Compiler::tryCompileUnrolledFor(Luau::AstStatFor*, int, int) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0.0
	local loc_17 = 0.0
	local loc_18 = 0.0
	local loc_19 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_6 = sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_6
		while true do
			while true do
				while true do
					loc_13 = load_i32(memory_at_0, loc_0 + 120)
					if loc_13 == 0 then
						break
					end
					loc_10 = load_i32(memory_at_0, loc_0 + 124)
					loc_8 = load_i32(memory_at_0, loc_1 + 32)
					if loc_10 == loc_8 then
						break
					end
					loc_5 = bxor_i32(shr_u32(loc_8, 4), shr_u32(loc_8, 9))
					loc_7 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
					loc_12 = load_i32(memory_at_0, loc_0 + 112)
					while true do
						loc_9 = band_i32(loc_5, loc_7)
						loc_11 = add_i32(shl_i32(loc_9, 5), loc_12)
						loc_5 = load_i32(memory_at_0, loc_11)
						if loc_8 == loc_5 then
							desired = 2
							break
						end
						if loc_5 == loc_10 then
							desired = 3
							break
						end
						loc_4 = add_i32(loc_4, 1)
						loc_5 = add_i32(loc_9, loc_4)
						if loc_4 <= loc_7 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_6 + 72, 0)
				reg_0 = 0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = load_i32(memory_at_0, loc_11 + 8)
			store_f64(memory_at_0, loc_6 + 72, load_f64(memory_at_0, loc_11 + 16))
			reg_0 = (if loc_4 == 3 then 1 else 0)
			break
		end
		loc_14 = reg_0
		while true do
			while true do
				while true do
					if loc_13 == 0 then
						break
					end
					loc_10 = load_i32(memory_at_0, loc_0 + 124)
					loc_8 = load_i32(memory_at_0, loc_1 + 36)
					if loc_10 == loc_8 then
						break
					end
					loc_5 = bxor_i32(shr_u32(loc_8, 4), shr_u32(loc_8, 9))
					loc_7 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
					loc_12 = load_i32(memory_at_0, loc_0 + 112)
					loc_4 = 0
					while true do
						loc_9 = band_i32(loc_5, loc_7)
						loc_11 = add_i32(shl_i32(loc_9, 5), loc_12)
						loc_5 = load_i32(memory_at_0, loc_11)
						if loc_8 == loc_5 then
							desired = 2
							break
						end
						if loc_5 == loc_10 then
							desired = 3
							break
						end
						loc_4 = add_i32(loc_4, 1)
						loc_5 = add_i32(loc_9, loc_4)
						if loc_4 <= loc_7 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_6 + 64, 0)
				reg_0 = 0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = load_i32(memory_at_0, loc_11 + 8)
			store_f64(memory_at_0, loc_6 + 64, load_f64(memory_at_0, loc_11 + 16))
			reg_0 = (if loc_4 == 3 then 1 else 0)
			break
		end
		loc_15 = reg_0
		while true do
			while true do
				while true do
					while true do
						loc_8 = load_i32(memory_at_0, loc_1 + 40)
						if loc_8 == 0 then
							while true do
								loc_16 = 1e0
								reg_0 = 1
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_13 == 0 then
							desired = 3
							break
						end
						loc_10 = load_i32(memory_at_0, loc_0 + 124)
						if loc_8 == loc_10 then
							desired = 3
							break
						end
						loc_5 = bxor_i32(shr_u32(loc_8, 4), shr_u32(loc_8, 9))
						loc_7 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
						loc_12 = load_i32(memory_at_0, loc_0 + 112)
						loc_4 = 0
						while true do
							loc_9 = band_i32(loc_5, loc_7)
							loc_11 = add_i32(shl_i32(loc_9, 5), loc_12)
							loc_5 = load_i32(memory_at_0, loc_11)
							if loc_5 ~= loc_8 then
								while true do
									if loc_5 == loc_10 then
										desired = 3
										break
									end
									loc_4 = add_i32(loc_4, 1)
									loc_5 = add_i32(loc_9, loc_4)
									if loc_4 <= loc_7 then
										desired = 5
										break
									end
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_16 = load_f64(memory_at_0, loc_11 + 16)
						reg_0 = (if load_i32(memory_at_0, loc_11 + 8) == 3 then 1 else 0)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = reg_0
					if band_i32(loc_14, loc_15) == 0 then
						break
					end
					if loc_4 == 0 then
						break
					end
					loc_18 = load_f64(memory_at_0, loc_6 + 72)
					reg_0 = FUNC_LIST[129](loc_18, load_f64(memory_at_0, loc_6 + 64), loc_16)
					loc_5 = reg_0
					if ge_i32(loc_5, 0) then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = 0
				FUNC_LIST[108](load_i32(memory_at_0, loc_0), 1460, 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if lt_i32(loc_2, loc_5) then
				while true do
					loc_4 = load_i32(memory_at_0, loc_0)
					store_i32(memory_at_0, loc_6, loc_5)
					FUNC_LIST[108](loc_4, 7063, loc_6)
					loc_4 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_10 = load_i32(memory_at_0, loc_1 + 28)
			while true do
				if load_i32(memory_at_0, loc_0 + 100) == 0 then
					break
				end
				loc_12 = load_i32(memory_at_0, loc_0 + 104)
				if loc_12 == loc_10 then
					break
				end
				loc_7 = bxor_i32(shr_u32(loc_10, 4), shr_u32(loc_10, 9))
				loc_9 = sub_i32(load_i32(memory_at_0, loc_0 + 96), 1)
				loc_11 = load_i32(memory_at_0, loc_0 + 92)
				loc_4 = 0
				while true do
					loc_8 = band_i32(loc_7, loc_9)
					loc_13 = add_i32(mul_i32(loc_8, 12), loc_11)
					loc_7 = load_i32(memory_at_0, loc_13)
					if loc_7 ~= loc_10 then
						while true do
							if loc_7 == loc_12 then
								desired = 2
								break
							end
							loc_4 = add_i32(loc_4, 1)
							loc_7 = add_i32(loc_8, loc_4)
							if loc_4 <= loc_9 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if load_i32_u8(memory_at_0, loc_13 + 8) == 0 then
					break
				end
				loc_4 = 0
				FUNC_LIST[108](load_i32(memory_at_0, loc_0), 4797, 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_6 + 60, loc_10)
			reg_0 = FUNC_LIST[124](load_i32(memory_at_0, loc_1 + 44), add_i32(loc_6, 60), 1, add_i32(loc_0, 172))
			loc_19 = reg_0
			store_i32_n8(memory_at_0, loc_6 + 59, 1)
			reg_0 = FUNC_LIST[128](loc_19, add_i32(loc_6, 59), 1)
			loc_4 = reg_0
			reg_0 = FUNC_LIST[128](loc_19, 0, 0)
			loc_9 = reg_0
			loc_7 = mul_i32(loc_4, loc_5)
			if loc_7 ~= 0 then
				while true do
					loc_4 = div_i32(mul_i32(mul_i32(add_i32(loc_9, 1), loc_5), 100), loc_7)
					reg_0 = (if gt_i32(loc_3, loc_4) then loc_4 else loc_3)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_3
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = reg_0
			loc_17 = (convert_f64_i32(loc_3) / 1e2)
			loc_9 = load_i32(memory_at_0, loc_0)
			loc_4 = (if ge_i32(div_i32(mul_i32(loc_2, loc_3), 100), loc_7) then 1 else 0)
			if loc_4 == 0 then
				while true do
					store_f64(memory_at_0, loc_6 + 40, loc_17)
					store_i32(memory_at_0, loc_6 + 36, loc_7)
					store_i32(memory_at_0, loc_6 + 32, loc_5)
					FUNC_LIST[108](loc_9, 6897, add_i32(loc_6, 32))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			store_f64(memory_at_0, loc_6 + 24, loc_17)
			store_i32(memory_at_0, loc_6 + 20, loc_7)
			store_i32(memory_at_0, loc_6 + 16, loc_5)
			FUNC_LIST[108](loc_9, 6970, add_i32(loc_6, 16))
			FUNC_LIST[235](loc_0, loc_1, loc_5, loc_18, loc_16)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_6, 80)
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[205] = --[[ Luau::Compiler::compileLValue(Luau::AstExpr*, Luau::Compiler::RegScope&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_11 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_11
		if gt_i32(load_i32(memory_at_0, loc_1 + 8), 0) then
			while true do
				FUNC_LIST[105](load_i32(memory_at_0, loc_1), add_i32(load_i32(memory_at_0, loc_2 + 8), 1))
				break
			end
		end
		loc_6 = load_i32(memory_at_0, 47220)
		loc_4 = load_i32(memory_at_0, loc_2 + 4)
		while true do
			while true do
				while true do
					if loc_2 == 0 then
						break
					end
					if loc_4 ~= loc_6 then
						break
					end
					if load_i32(memory_at_0, loc_1 + 60) == 0 then
						while true do
							loc_7 = load_i32(memory_at_0, loc_2 + 24)
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = load_i32(memory_at_0, loc_2 + 24)
					loc_8 = load_i32(memory_at_0, loc_1 + 64)
					if loc_7 == loc_8 then
						desired = 2
						break
					end
					loc_5 = bxor_i32(shr_u32(loc_7, 4), shr_u32(loc_7, 9))
					loc_6 = sub_i32(load_i32(memory_at_0, loc_1 + 56), 1)
					loc_9 = load_i32(memory_at_0, loc_1 + 52)
					loc_4 = 0
					while true do
						loc_3 = band_i32(loc_5, loc_6)
						loc_10 = add_i32(mul_i32(loc_3, 12), loc_9)
						loc_5 = load_i32(memory_at_0, loc_10)
						if loc_5 ~= loc_7 then
							while true do
								if loc_5 == loc_8 then
									desired = 2
									break
								end
								loc_4 = add_i32(loc_4, 1)
								loc_5 = add_i32(loc_3, loc_4)
								if loc_4 <= loc_6 then
									desired = 4
									break
								end
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if load_i32_u8(memory_at_0, loc_10 + 5) == 0 then
						desired = 2
						break
					end
					loc_4 = load_i32_u8(memory_at_0, loc_10 + 4)
					store_i64(memory_at_0, loc_0, i64_ZERO)
					store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
					store_i32_n8(memory_at_0, loc_0 + 4, loc_4)
					store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_2 + 8))
					store_i64(memory_at_0, loc_0 + 24, load_i64(memory_at_0, loc_2 + 16))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if loc_2 == 0 then
						break
					end
					if load_i32(memory_at_0, 47228) ~= loc_4 then
						break
					end
					store_i64(memory_at_0, loc_0, i64_from_u32(2, 0))
					loc_4 = load_i32(memory_at_0, loc_2 + 24)
					reg_1 = FUNC_LIST[504](loc_4)
					store_i32(memory_at_0, loc_0 + 12, reg_1)
					store_i32(memory_at_0, loc_0 + 8, loc_4)
					store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_2 + 8))
					store_i64(memory_at_0, loc_0 + 24, load_i64(memory_at_0, loc_2 + 16))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					while true do
						while true do
							while true do
								if loc_2 == 0 then
									break
								end
								if load_i32(memory_at_0, 47252) ~= loc_4 then
									break
								end
								store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
								loc_8 = load_i32(memory_at_0, loc_2 + 24)
								loc_4 = load_i32(memory_at_0, loc_8 + 4)
								while true do
									if loc_8 ~= 0 then
										while true do
											loc_5 = loc_8
											if loc_4 == loc_6 then
												desired = 7
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_7 = load_i32(memory_at_0, 47300)
									loc_3 = load_i32(memory_at_0, 47180)
									loc_5 = loc_8
									while true do
										if band_i32((if loc_3 ~= loc_4 then 1 else 0), (if loc_4 ~= loc_7 then 1 else 0)) ~= 0 then
											desired = 5
											break
										end
										loc_5 = load_i32(memory_at_0, loc_5 + 24)
										loc_4 = load_i32(memory_at_0, loc_5 + 4)
										if loc_5 == 0 then
											continue
										end
										if loc_4 ~= loc_6 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if load_i32(memory_at_0, loc_1 + 60) == 0 then
									desired = 5
									break
								end
								loc_7 = load_i32(memory_at_0, loc_5 + 24)
								loc_9 = load_i32(memory_at_0, loc_1 + 64)
								if loc_7 == loc_9 then
									desired = 5
									break
								end
								loc_5 = bxor_i32(shr_u32(loc_7, 4), shr_u32(loc_7, 9))
								loc_6 = sub_i32(load_i32(memory_at_0, loc_1 + 56), 1)
								loc_10 = load_i32(memory_at_0, loc_1 + 52)
								loc_4 = 0
								while true do
									loc_3 = band_i32(loc_5, loc_6)
									loc_12 = add_i32(mul_i32(loc_3, 12), loc_10)
									loc_5 = load_i32(memory_at_0, loc_12)
									if loc_5 ~= loc_7 then
										while true do
											if loc_5 == loc_9 then
												desired = 5
												break
											end
											loc_4 = add_i32(loc_4, 1)
											loc_5 = add_i32(loc_3, loc_4)
											if loc_4 <= loc_6 then
												desired = 7
												break
											end
											desired = 5
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if load_i32_u8(memory_at_0, loc_12 + 5) == 0 then
									desired = 5
									break
								end
								loc_5 = load_i32_u8(memory_at_0, loc_12 + 4)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								while true do
									while true do
										while true do
											if loc_2 == 0 then
												break
											end
											if load_i32(memory_at_0, 47260) ~= loc_4 then
												break
											end
											loc_9 = load_i32(memory_at_0, loc_2 + 24)
											loc_4 = load_i32(memory_at_0, loc_9 + 4)
											while true do
												if loc_9 ~= 0 then
													while true do
														loc_5 = loc_9
														if loc_4 == loc_6 then
															desired = 10
															break
														end
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_8 = load_i32(memory_at_0, 47300)
												loc_7 = load_i32(memory_at_0, 47180)
												loc_5 = loc_9
												while true do
													if band_i32((if loc_4 ~= loc_7 then 1 else 0), (if loc_4 ~= loc_8 then 1 else 0)) ~= 0 then
														desired = 8
														break
													end
													loc_5 = load_i32(memory_at_0, loc_5 + 24)
													loc_4 = load_i32(memory_at_0, loc_5 + 4)
													if loc_5 == 0 then
														continue
													end
													if loc_4 ~= loc_6 then
														continue
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if load_i32(memory_at_0, loc_1 + 60) == 0 then
												desired = 8
												break
											end
											loc_8 = load_i32(memory_at_0, loc_5 + 24)
											loc_10 = load_i32(memory_at_0, loc_1 + 64)
											if loc_8 == loc_10 then
												desired = 8
												break
											end
											loc_5 = bxor_i32(shr_u32(loc_8, 4), shr_u32(loc_8, 9))
											loc_6 = sub_i32(load_i32(memory_at_0, loc_1 + 56), 1)
											loc_12 = load_i32(memory_at_0, loc_1 + 52)
											loc_4 = 0
											while true do
												loc_7 = band_i32(loc_5, loc_6)
												loc_13 = add_i32(mul_i32(loc_7, 12), loc_12)
												loc_5 = load_i32(memory_at_0, loc_13)
												if loc_5 ~= loc_8 then
													while true do
														if loc_5 == loc_10 then
															desired = 8
															break
														end
														loc_4 = add_i32(loc_4, 1)
														loc_5 = add_i32(loc_7, loc_4)
														if loc_4 <= loc_6 then
															desired = 10
															break
														end
														desired = 8
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
															continue
														end
														break
													end
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if load_i32_u8(memory_at_0, loc_13 + 5) == 0 then
												desired = 8
												break
											end
											loc_5 = load_i32_u8(memory_at_0, loc_13 + 4)
											desired = 7
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										store_i64(memory_at_0, loc_0, i64_ZERO)
										store_i64(memory_at_0, loc_0 + 24, i64_ZERO)
										store_i64(memory_at_0, loc_0 + 16, i64_ZERO)
										store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_5 = load_i32(memory_at_0, loc_1 + 220)
									loc_4 = add_i32(loc_5, 1)
									if loc_4 >= 256 then
										desired = 6
										break
									end
									store_i32(memory_at_0, loc_1 + 220, loc_4)
									loc_6 = load_i32(memory_at_0, loc_1 + 224)
									store_i32(memory_at_0, loc_1 + 224, (if loc_4 < loc_6 then loc_6 else loc_4))
									FUNC_LIST[199](loc_1, loc_9, band_i32(loc_5, 255), 1)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[225](loc_0, loc_1, band_i32(loc_5, 255), load_i32(memory_at_0, loc_2 + 28), loc_3)
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i64(memory_at_0, loc_11, i64_from_u32(1, 255))
							FUNC_LIST[147](add_i32(loc_9, 8), 5468, loc_11)
							error("out of code bounds")
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = load_i32(memory_at_0, loc_1 + 220)
						loc_4 = add_i32(loc_5, 1)
						if loc_4 >= 256 then
							desired = 3
							break
						end
						store_i32(memory_at_0, loc_1 + 220, loc_4)
						loc_6 = load_i32(memory_at_0, loc_1 + 224)
						store_i32(memory_at_0, loc_1 + 224, (if loc_4 < loc_6 then loc_6 else loc_4))
						FUNC_LIST[199](loc_1, loc_8, band_i32(loc_5, 255), 1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32_n8(memory_at_0, loc_0 + 4, loc_5)
					loc_4 = load_i32(memory_at_0, loc_2 + 28)
					reg_1 = FUNC_LIST[504](loc_4)
					store_i32(memory_at_0, loc_0 + 12, reg_1)
					store_i32(memory_at_0, loc_0 + 8, loc_4)
					loc_4 = add_i32(loc_0, 16)
					store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_2 + 16))
					store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_2 + 8))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i64(memory_at_0, loc_11 + 16, i64_from_u32(1, 255))
				FUNC_LIST[147](add_i32(loc_8, 8), 5468, add_i32(loc_11, 16))
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_0 + 4, i64_ZERO)
			store_i32(memory_at_0, loc_0, 1)
			store_i32(memory_at_0, loc_0 + 12, 0)
			reg_1 = FUNC_LIST[155](loc_1, loc_7)
			store_i32_n8(memory_at_0, loc_0 + 5, reg_1)
			store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_2 + 8))
			store_i64(memory_at_0, loc_0 + 24, load_i64(memory_at_0, loc_2 + 16))
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_11, 32)
		break
	end
end
FUNC_LIST[206] = --[[ Luau::Compiler::resolveAssignConflicts(Luau::AstStat*, std::__2::vector<Luau::Compiler::Assignment, std::__2::allocator<Luau::Compiler::Assignment>>&, Luau::AstArray<Luau::AstExpr*> const&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_7 = sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_7
		store_i64(memory_at_0, loc_7 + 24, i64_ZERO)
		store_i64(memory_at_0, loc_7 + 32, i64_ZERO)
		store_i64(memory_at_0, loc_7 + 40, i64_ZERO)
		loc_9 = add_i32(loc_7, 48)
		store_i64(memory_at_0, loc_9, i64_ZERO)
		store_i64(memory_at_0, loc_7 + 56, i64_ZERO)
		store_i64(memory_at_0, sub_i32(loc_7, 4294967232), i64_ZERO)
		store_i64(memory_at_0, loc_7 + 72, i64_ZERO)
		store_i64(memory_at_0, loc_7 + 16, i64_ZERO)
		store_i32(memory_at_0, loc_7 + 12, loc_0)
		store_i32(memory_at_0, loc_7 + 8, 11360)
		while true do
			loc_8 = load_i32(memory_at_0, loc_2 + 4)
			loc_4 = load_i32(memory_at_0, loc_2)
			if loc_8 == loc_4 then
				while true do
					loc_4 = loc_8
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				loc_5 = add_i32(mul_i32(loc_6, 36), loc_4)
				if load_i32(memory_at_0, loc_5) == 0 then
					while true do
						if loc_6 < load_i32(memory_at_0, loc_3 + 4) then
							while true do
								loc_4 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_3), shl_i32(loc_6, 2)))
								TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_4))](loc_4, add_i32(loc_7, 8))
								loc_8 = load_i32(memory_at_0, loc_2 + 4)
								reg_0 = load_i32(memory_at_0, loc_2)
								break
							end
							if desired then
								break
							end
						else
							while true do
								reg_0 = loc_4
								break
							end
							if desired then
								break
							end
						end
						loc_4 = reg_0
						loc_5 = load_i32_u8(memory_at_0, loc_5 + 4)
						loc_10 = add_i32(band_i32(shr_u32(loc_5, 3), 28), loc_9)
						store_i32(memory_at_0, loc_10, bor_i32(load_i32(memory_at_0, loc_10), shl_i32(1, loc_5)))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				loc_6 = add_i32(loc_6, 1)
				loc_5 = div_i32(sub_i32(loc_8, loc_4), 36)
				if loc_6 < loc_5 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_4 == loc_8 then
				while true do
					loc_8 = loc_4
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_6 = 0
			while true do
				while true do
					if load_i32(memory_at_0, add_i32(mul_i32(loc_6, 36), loc_4)) == 0 then
						break
					end
					if load_i32(memory_at_0, loc_3 + 4) <= loc_6 then
						break
					end
					loc_4 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_3), shl_i32(loc_6, 2)))
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_4))](loc_4, add_i32(loc_7, 8))
					loc_4 = load_i32(memory_at_0, loc_2)
					loc_8 = load_i32(memory_at_0, loc_2 + 4)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_6 = add_i32(loc_6, 1)
				loc_5 = div_i32(sub_i32(loc_8, loc_4), 36)
				if loc_6 < loc_5 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			while true do
				if loc_5 < load_i32(memory_at_0, loc_3 + 4) then
					while true do
						while true do
							loc_4 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_3), shl_i32(loc_5, 2)))
							TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_4))](loc_4, add_i32(loc_7, 8))
							loc_5 = add_i32(loc_5, 1)
							if loc_5 < load_i32(memory_at_0, loc_3 + 4) then
								continue
							end
							break
						end
						if desired then
							break
						end
						loc_8 = load_i32(memory_at_0, loc_2 + 4)
						reg_0 = load_i32(memory_at_0, loc_2)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_4
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = reg_0
				loc_11 = (if loc_4 == loc_8 then 1 else 0)
				if loc_11 ~= 0 then
					break
				end
				loc_9 = add_i32(loc_7, 16)
				loc_10 = add_i32(loc_7, 48)
				loc_5 = loc_4
				while true do
					while true do
						loc_6 = load_i32(memory_at_0, loc_5)
						if sub_i32(loc_6, 3) > 2 then
							break
						end
						loc_3 = load_i32_u8(memory_at_0, loc_5 + 4)
						loc_2 = shl_i32(1, loc_3)
						loc_3 = shl_i32(shr_u32(loc_3, 5), 2)
						if band_i32(loc_2, load_i32(memory_at_0, add_i32(loc_3, loc_10))) ~= 0 then
							while true do
								loc_3 = add_i32(loc_3, loc_9)
								store_i32(memory_at_0, loc_3, bor_i32(loc_2, load_i32(memory_at_0, loc_3)))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_6 ~= 5 then
							break
						end
						loc_6 = load_i32_u8(memory_at_0, loc_5 + 6)
						loc_3 = shl_i32(1, loc_6)
						loc_6 = shl_i32(shr_u32(loc_6, 5), 2)
						if band_i32(loc_3, load_i32(memory_at_0, add_i32(loc_6, loc_10))) == 0 then
							break
						end
						loc_6 = add_i32(loc_6, loc_9)
						store_i32(memory_at_0, loc_6, bor_i32(loc_3, load_i32(memory_at_0, loc_6)))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_5 = add_i32(loc_5, 36)
					if loc_8 ~= loc_5 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_11 ~= 0 then
					break
				end
				loc_6 = load_i32(memory_at_0, loc_0 + 220)
				while true do
					while true do
						if load_i32(memory_at_0, loc_4) ~= 0 then
							break
						end
						loc_5 = load_i32_u8(memory_at_0, loc_4 + 4)
						if band_i32(shr_u32(load_i32(memory_at_0, add_i32(band_i32(shr_u32(loc_5, 3), 28), loc_9)), loc_5), 1) == 0 then
							break
						end
						loc_5 = add_i32(loc_6, 1)
						if loc_5 >= 256 then
							desired = 1
							break
						end
						store_i32(memory_at_0, loc_0 + 220, loc_5)
						loc_3 = load_i32(memory_at_0, loc_0 + 224)
						store_i32(memory_at_0, loc_0 + 224, (if loc_3 > loc_5 then loc_3 else loc_5))
						store_i32_n8(memory_at_0, loc_4 + 32, loc_6)
						loc_6 = loc_5
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_4 = add_i32(loc_4, 36)
					if loc_8 ~= loc_4 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = add_i32(loc_7, 80)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, loc_7, i64_from_u32(1, 255))
		FUNC_LIST[147](add_i32(loc_1, 8), 5468, loc_7)
		error("out of code bounds")
	end
end
FUNC_LIST[207] = --[[ Luau::Compiler::compileExprTempN(Luau::AstExpr*, unsigned char, unsigned char, bool) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local desired
	while true do
		loc_5 = load_i32(memory_at_0, loc_1 + 4)
		while true do
			if loc_1 == 0 then
				break
			end
			if load_i32(memory_at_0, 47244) ~= loc_5 then
				break
			end
			FUNC_LIST[181](loc_0, loc_1, loc_2, loc_3, loc_4, 0)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			if loc_1 == 0 then
				break
			end
			if load_i32(memory_at_0, 47236) ~= loc_5 then
				break
			end
			if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
				while true do
					FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, loc_1 + 8), 1))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[96](load_i32(memory_at_0, loc_0), 63, loc_2, band_i32(add_i32(loc_3, 1), 255), 0)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_5 = 1
		FUNC_LIST[199](loc_0, loc_1, loc_2, 1)
		if loc_3 >= 2 then
			while true do
				while true do
					FUNC_LIST[96](load_i32(memory_at_0, loc_0), 2, band_i32(add_i32(loc_2, loc_5), 255), 0, 0)
					loc_5 = add_i32(loc_5, 1)
					if loc_3 ~= loc_5 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		break
	end
end
FUNC_LIST[208] = --[[ Luau::Compiler::compileLValueUse(Luau::Compiler::LValue const&, unsigned char, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local desired
	local br_map = {}
	while true do
		loc_4 = add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = add_i32(loc_1, 16)
		if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
			while true do
				FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, loc_5), 1))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											if not br_map[1] then
												br_map[1] = (function()
													return { [0] = 0, 1, 2, 3, 4, 5, }
												end)()
											end
											temp = br_map[1][load_i32(memory_at_0, loc_1)] or 6
											if temp < 3 then
												if temp < 1 then
													break
												elseif temp > 1 then
													desired = 7
													break
												else
													desired = 8
													break
												end
											elseif temp > 3 then
												if temp < 5 then
													desired = 5
													break
												elseif temp > 5 then
													desired = 3
													break
												else
													desired = 4
													break
												end
											else
												desired = 6
												break
											end
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_1 = load_i32_u8(memory_at_0, loc_1 + 4)
										loc_0 = load_i32(memory_at_0, loc_0)
										if loc_3 ~= 0 then
											while true do
												FUNC_LIST[96](loc_0, 6, band_i32(loc_1, 255), loc_2, 0)
												desired = 3
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										FUNC_LIST[96](loc_0, 6, loc_2, band_i32(loc_1, 255), 0)
										desired = 3
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									FUNC_LIST[96](load_i32(memory_at_0, loc_0), (if loc_3 ~= 0 then 10 else 9), loc_2, load_i32_u8(memory_at_0, loc_1 + 5), 0)
									desired = 3
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_6 = load_i32(memory_at_0, loc_0)
								loc_8 = load_i64(memory_at_0, loc_1 + 8)
								store_i64(memory_at_0, loc_4 + 8, loc_8)
								store_i64(memory_at_0, loc_4 + 56, loc_8)
								reg_0 = FUNC_LIST[86](loc_6, add_i32(loc_4, 8))
								loc_6 = reg_0
								if lt_i32(loc_6, 0) then
									desired = 2
									break
								end
								loc_5 = load_i32(memory_at_0, loc_0)
								loc_8 = load_i64(memory_at_0, loc_1 + 8)
								store_i64(memory_at_0, loc_4, loc_8)
								store_i64(memory_at_0, loc_4 + 48, loc_8)
								reg_4 = FUNC_LIST[116](loc_4)
								FUNC_LIST[96](loc_5, (if loc_3 ~= 0 then 8 else 7), loc_2, 0, band_i32(reg_4, 255))
								FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_6)
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_6 = load_i32(memory_at_0, loc_0)
							loc_8 = load_i64(memory_at_0, loc_1 + 8)
							store_i64(memory_at_0, loc_4 + 24, loc_8)
							store_i64(memory_at_0, loc_4 + 40, loc_8)
							reg_0 = FUNC_LIST[86](loc_6, add_i32(loc_4, 24))
							loc_6 = reg_0
							if lt_i32(loc_6, 0) then
								desired = 1
								break
							end
							loc_5 = load_i32_u8(memory_at_0, loc_1 + 4)
							loc_7 = load_i32(memory_at_0, loc_0)
							loc_8 = load_i64(memory_at_0, loc_1 + 8)
							store_i64(memory_at_0, loc_4 + 16, loc_8)
							store_i64(memory_at_0, loc_4 + 32, loc_8)
							reg_4 = FUNC_LIST[116](add_i32(loc_4, 16))
							FUNC_LIST[96](loc_7, (if loc_3 ~= 0 then 16 else 15), loc_2, loc_5, band_i32(reg_4, 255))
							FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_6)
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[96](load_i32(memory_at_0, loc_0), (if loc_3 ~= 0 then 18 else 17), loc_2, load_i32_u8(memory_at_0, loc_1 + 4), load_i32_u8(memory_at_0, loc_1 + 7))
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[96](load_i32(memory_at_0, loc_0), (if loc_3 ~= 0 then 14 else 13), loc_2, load_i32_u8(memory_at_0, loc_1 + 4), load_i32_u8(memory_at_0, loc_1 + 6))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				GLOBAL_LIST[0].value = sub_i32(loc_4, 4294967232)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[147](loc_5, 4438, 0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[147](loc_5, 4438, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[209] = --[[ Luau::Compiler::unrollConcats(std::__2::vector<Luau::AstExpr*, std::__2::allocator<Luau::AstExpr*>>&) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_1 = sub_i32(load_i32(memory_at_0, loc_0 + 4), 4)
					loc_2 = load_i32(memory_at_0, loc_1)
					if loc_2 == 0 then
						break
					end
					loc_6 = load_i32(memory_at_0, loc_2 + 4)
					if loc_6 ~= load_i32(memory_at_0, 47292) then
						break
					end
					while true do
						if load_i32(memory_at_0, loc_2 + 24) ~= 7 then
							desired = 3
							break
						end
						store_i32(memory_at_0, loc_1, load_i32(memory_at_0, loc_2 + 28))
						while true do
							loc_1 = load_i32(memory_at_0, loc_0 + 4)
							if loc_1 ~= load_i32(memory_at_0, loc_0 + 8) then
								while true do
									store_i32(memory_at_0, loc_1, load_i32(memory_at_0, loc_2 + 32))
									loc_2 = add_i32(loc_1, 4)
									store_i32(memory_at_0, loc_0 + 4, loc_2)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_7 = load_i32(memory_at_0, loc_0)
							loc_4 = sub_i32(loc_1, loc_7)
							loc_8 = shr_i32(loc_4, 2)
							loc_3 = add_i32(loc_8, 1)
							if loc_3 >= 1073741824 then
								desired = 2
								break
							end
							loc_5 = shr_i32(loc_4, 1)
							loc_3 = (if loc_4 >= 2147483644 then 1073741823 else (if loc_3 < loc_5 then loc_5 else loc_3))
							if loc_3 ~= 0 then
								while true do
									if loc_3 >= 1073741824 then
										desired = 1
										break
									end
									reg_0 = FUNC_LIST[606](shl_i32(loc_3, 2))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = 0
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_5 = reg_0
							loc_4 = add_i32(loc_5, shl_i32(loc_8, 2))
							store_i32(memory_at_0, loc_4, load_i32(memory_at_0, loc_2 + 32))
							loc_3 = add_i32(shl_i32(loc_3, 2), loc_5)
							loc_2 = add_i32(loc_4, 4)
							if loc_1 ~= loc_7 then
								while true do
									while true do
										loc_4 = sub_i32(loc_4, 4)
										loc_1 = sub_i32(loc_1, 4)
										store_i32(memory_at_0, loc_4, load_i32(memory_at_0, loc_1))
										if loc_1 ~= loc_7 then
											continue
										end
										break
									end
									if desired then
										break
									end
									reg_0 = load_i32(memory_at_0, loc_0)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = loc_1
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_1 = reg_0
							store_i32(memory_at_0, loc_0 + 8, loc_3)
							store_i32(memory_at_0, loc_0 + 4, loc_2)
							store_i32(memory_at_0, loc_0, loc_4)
							if loc_1 == 0 then
								break
							end
							FUNC_LIST[609](loc_1)
							loc_6 = load_i32(memory_at_0, 47292)
							loc_2 = load_i32(memory_at_0, loc_0 + 4)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_1 = sub_i32(loc_2, 4)
						loc_2 = load_i32(memory_at_0, loc_1)
						if loc_2 == 0 then
							desired = 3
							break
						end
						if loc_6 == load_i32(memory_at_0, loc_2 + 4) then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[210] = --[[ Luau::Compiler::compileExprConstant(Luau::AstExpr*, Luau::Compile::Constant const*, unsigned char) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0.0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 0, 1, 2, 3, 4, }
										end)()
									end
									temp = br_map[1][sub_i32(load_i32(memory_at_0, loc_2), 1)] or 5
									if temp < 3 then
										if temp < 1 then
											break
										elseif temp > 1 then
											desired = 5
											break
										else
											desired = 6
											break
										end
									elseif temp > 3 then
										if temp < 5 then
											desired = 3
											break
										else
											desired = 2
											break
										end
									else
										desired = 4
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[96](load_i32(memory_at_0, loc_0), 2, loc_3, 0, 0)
								desired = 2
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[96](load_i32(memory_at_0, loc_0), 3, loc_3, load_i32_u8(memory_at_0, loc_2 + 8), 0)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							loc_4 = load_f64(memory_at_0, loc_2 + 8)
							if (if loc_4 >= -3.2768e4 then 1 else 0) == 0 then
								break
							end
							if (if loc_4 <= 3.2767e4 then 1 else 0) == 0 then
								break
							end
							while true do
								if abs_f64(loc_4) < 2.147483648e9 then
									while true do
										reg_0 = truncate_i32_f64(loc_4)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = 2147483648
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_2 = reg_0
							if convert_f64_i32(loc_2) ~= loc_4 then
								break
							end
							if band_i32((if lt_i64(reinterpret_i64_f64(loc_4), i64_ZERO) then 1 else 0), (if loc_4 == 0e0 then 1 else 0)) ~= 0 then
								break
							end
							FUNC_LIST[97](load_i32(memory_at_0, loc_0), 4, loc_3, loc_2)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[84](load_i32(memory_at_0, loc_0), loc_4)
						loc_2 = reg_0
						if lt_i32(loc_2, 0) then
							desired = 1
							break
						end
						loc_1 = load_i32(memory_at_0, loc_0)
						if loc_2 <= 32767 then
							while true do
								FUNC_LIST[97](loc_1, 5, loc_3, extend_i32_n16(loc_2))
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[97](loc_1, 66, loc_3, 0)
						FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_2)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[85](load_i32(memory_at_0, loc_0), load_f32(memory_at_0, loc_2 + 8), load_f32(memory_at_0, loc_2 + 12), load_f32(memory_at_0, loc_2 + 16), load_f32(memory_at_0, loc_2 + 20))
					loc_2 = reg_0
					loc_1 = load_i32(memory_at_0, loc_0)
					if le_i32(loc_2, 32767) then
						while true do
							FUNC_LIST[97](loc_1, 5, loc_3, extend_i32_n16(loc_2))
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[97](loc_1, 66, loc_3, 0)
					FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_2)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = load_i32(memory_at_0, loc_0)
				loc_7 = rotl_i64(load_i64(memory_at_0, loc_2 + 4), i64_from_u32(32, 0))
				store_i64(memory_at_0, loc_5 + 8, loc_7)
				store_i64(memory_at_0, loc_5, loc_7)
				reg_0 = FUNC_LIST[86](loc_6, loc_5)
				loc_2 = reg_0
				if lt_i32(loc_2, 0) then
					desired = 1
					break
				end
				loc_1 = load_i32(memory_at_0, loc_0)
				if loc_2 <= 32767 then
					while true do
						FUNC_LIST[97](loc_1, 5, loc_3, extend_i32_n16(loc_2))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[97](loc_1, 66, loc_3, 0)
				FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_2)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = add_i32(loc_5, 16)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[147](add_i32(loc_1, 8), 4438, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[211] = --[[ Luau::Compiler::shouldShareClosure(Luau::AstExprFunction*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		while true do
			if load_i32(memory_at_0, loc_0 + 40) == 0 then
				break
			end
			loc_5 = load_i32(memory_at_0, loc_0 + 44)
			if loc_1 == loc_5 then
				break
			end
			loc_4 = bxor_i32(shr_u32(loc_1, 4), shr_u32(loc_1, 9))
			loc_6 = sub_i32(load_i32(memory_at_0, loc_0 + 36), 1)
			loc_7 = load_i32(memory_at_0, loc_0 + 32)
			while true do
				loc_8 = band_i32(loc_4, loc_6)
				loc_3 = add_i32(mul_i32(loc_8, 40), loc_7)
				loc_4 = load_i32(memory_at_0, loc_3)
				if loc_4 ~= loc_1 then
					while true do
						loc_3 = 0
						if loc_4 == loc_5 then
							desired = 1
							break
						end
						loc_2 = add_i32(loc_2, 1)
						loc_4 = add_i32(loc_8, loc_2)
						if loc_2 <= loc_6 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_9 = load_i32(memory_at_0, loc_3 + 12)
			loc_11 = load_i32(memory_at_0, loc_3 + 16)
			if loc_9 == loc_11 then
				while true do
					reg_0 = 1
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				loc_3 = 0
				if load_i32(memory_at_0, loc_0 + 100) == 0 then
					desired = 1
					break
				end
				loc_5 = load_i32(memory_at_0, loc_9)
				loc_12 = load_i32(memory_at_0, loc_0 + 104)
				if loc_5 == loc_12 then
					desired = 1
					break
				end
				loc_4 = bxor_i32(shr_u32(loc_5, 4), shr_u32(loc_5, 9))
				loc_6 = sub_i32(load_i32(memory_at_0, loc_0 + 96), 1)
				loc_7 = load_i32(memory_at_0, loc_0 + 92)
				loc_2 = 0
				while true do
					loc_8 = band_i32(loc_4, loc_6)
					loc_10 = add_i32(mul_i32(loc_8, 12), loc_7)
					loc_4 = load_i32(memory_at_0, loc_10)
					if loc_4 ~= loc_5 then
						while true do
							if loc_4 == loc_12 then
								desired = 1
								break
							end
							loc_2 = add_i32(loc_2, 1)
							loc_4 = add_i32(loc_8, loc_2)
							if loc_2 <= loc_6 then
								desired = 3
								break
							end
							desired = 1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				if load_i32_u8(memory_at_0, loc_10 + 8) ~= 0 then
					desired = 1
					break
				end
				while true do
					if load_i32(memory_at_0, loc_5 + 24) == 0 then
						while true do
							if load_i32(memory_at_0, loc_5 + 28) == 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = load_i32(memory_at_0, loc_10 + 4)
					if loc_2 == 0 then
						desired = 1
						break
					end
					if load_i32(memory_at_0, loc_2 + 4) ~= load_i32(memory_at_0, 47268) then
						desired = 1
						break
					end
					if loc_1 == loc_2 then
						break
					end
					reg_0 = FUNC_LIST[211](loc_0, loc_2)
					if reg_0 == 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_3 = 1
				loc_9 = add_i32(loc_9, 4)
				if loc_11 ~= loc_9 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[212] = --[[ Luau::Compiler::compileCompareJump(Luau::AstExprBinary*, bool) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_12 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_12
		store_i32(memory_at_0, loc_12 + 8, loc_0)
		store_i32(memory_at_0, loc_12 + 12, load_i32(memory_at_0, loc_0 + 220))
		loc_4 = load_i32(memory_at_0, loc_1 + 32)
		loc_10 = load_i32(memory_at_0, loc_1 + 28)
		while true do
			while true do
				while true do
					if load_i32(memory_at_0, loc_0 + 120) == 0 then
						break
					end
					loc_13 = band_i32(load_i32(memory_at_0, loc_1 + 24), 4294967294)
					while true do
						while true do
							while true do
								loc_7 = load_i32(memory_at_0, loc_0 + 124)
								if loc_7 ~= loc_4 then
									while true do
										loc_5 = bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9))
										loc_14 = load_i32(memory_at_0, loc_0 + 116)
										loc_6 = sub_i32(loc_14, 1)
										loc_8 = load_i32(memory_at_0, loc_0 + 112)
										while true do
											while true do
												loc_11 = band_i32(loc_5, loc_6)
												loc_9 = add_i32(shl_i32(loc_11, 5), loc_8)
												loc_5 = load_i32(memory_at_0, loc_9)
												if loc_5 ~= loc_4 then
													while true do
														loc_9 = 0
														if loc_5 == loc_7 then
															desired = 8
															break
														end
														loc_3 = add_i32(loc_3, 1)
														loc_5 = add_i32(loc_11, loc_3)
														if loc_3 <= loc_6 then
															desired = 9
															break
														end
														desired = 8
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
															continue
														end
														break
													end
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											loc_9 = (if load_i32(memory_at_0, loc_9 + 8) ~= 0 then 1 else 0)
											break
										end
										if desired then
											break
										end
										if loc_13 ~= 8 then
											desired = 5
											break
										end
										if loc_9 ~= 0 then
											desired = 5
											break
										end
										if loc_7 ~= loc_10 then
											desired = 6
											break
										end
										desired = 3
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								if loc_13 ~= 8 then
									desired = 3
									break
								end
								if loc_7 == loc_10 then
									desired = 3
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_5 = bxor_i32(shr_u32(loc_10, 4), shr_u32(loc_10, 9))
							loc_14 = load_i32(memory_at_0, loc_0 + 116)
							loc_6 = sub_i32(loc_14, 1)
							loc_8 = load_i32(memory_at_0, loc_0 + 112)
							loc_3 = 0
							while true do
								loc_11 = band_i32(loc_5, loc_6)
								loc_9 = add_i32(shl_i32(loc_11, 5), loc_8)
								loc_5 = load_i32(memory_at_0, loc_9)
								if loc_5 ~= loc_10 then
									while true do
										if loc_5 == loc_7 then
											desired = 3
											break
										end
										loc_3 = add_i32(loc_3, 1)
										loc_5 = add_i32(loc_11, loc_3)
										if loc_3 <= loc_6 then
											desired = 6
											break
										end
										desired = 3
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if load_i32(memory_at_0, loc_9 + 8) == 0 then
								desired = 3
								break
							end
							loc_9 = loc_10
							loc_10 = loc_4
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_9 == 0 then
							desired = 3
							break
						end
						loc_9 = loc_4
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_7 == loc_9 then
							while true do
								loc_4 = 0
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_5 = bxor_i32(shr_u32(loc_9, 4), shr_u32(loc_9, 9))
						loc_6 = sub_i32(loc_14, 1)
						loc_3 = 0
						while true do
							while true do
								loc_11 = band_i32(loc_5, loc_6)
								loc_4 = add_i32(shl_i32(loc_11, 5), loc_8)
								loc_5 = load_i32(memory_at_0, loc_4)
								if loc_5 ~= loc_9 then
									while true do
										loc_4 = 0
										if loc_5 == loc_7 then
											desired = 5
											break
										end
										loc_3 = add_i32(loc_3, 1)
										loc_5 = add_i32(loc_11, loc_3)
										if loc_3 <= loc_6 then
											desired = 6
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_4 = (if load_i32(memory_at_0, loc_4 + 8) == 4 then 1 else 0)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_7 = loc_9
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[213](loc_0, loc_10, add_i32(loc_12, 8))
					loc_5 = reg_0
					if loc_13 ~= 8 then
						while true do
							loc_4 = loc_7
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_4 ~= 0 then
						while true do
							loc_4 = loc_7
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = 0
					while true do
						if load_i32(memory_at_0, loc_0 + 120) == 0 then
							break
						end
						loc_10 = load_i32(memory_at_0, loc_0 + 124)
						if loc_10 == loc_7 then
							break
						end
						loc_8 = bxor_i32(shr_u32(loc_7, 4), shr_u32(loc_7, 9))
						loc_11 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
						loc_9 = load_i32(memory_at_0, loc_0 + 112)
						loc_3 = 0
						while true do
							loc_4 = band_i32(loc_8, loc_11)
							loc_6 = add_i32(shl_i32(loc_4, 5), loc_9)
							loc_8 = load_i32(memory_at_0, loc_6)
							if loc_7 == loc_8 then
								desired = 4
								break
							end
							loc_6 = 0
							if loc_8 == loc_10 then
								desired = 4
								break
							end
							loc_3 = add_i32(loc_3, 1)
							loc_8 = add_i32(loc_4, loc_3)
							if loc_3 <= loc_11 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_11 = load_i32(memory_at_0, loc_1 + 24)
					loc_4 = 79
					loc_3 = 77
					loc_8 = 0
					while true do
						while true do
							while true do
								while true do
									while true do
										loc_6 = (if loc_6 ~= 0 then add_i32(loc_6, 8) else 0)
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 4, 3, 1, 2, 0, }
											end)()
										end
										temp = br_map[1][sub_i32(load_i32(memory_at_0, loc_6), 1)] or 2
										if temp < 2 then
											if temp < 1 then
												break
											else
												desired = 7
												break
											end
										elseif temp > 2 then
											if temp < 4 then
												desired = 5
												break
											else
												desired = 4
												break
											end
										else
											desired = 6
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_4 = 80
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_3 = loc_4
								reg_0 = FUNC_LIST[214](loc_0, loc_7)
								loc_8 = reg_0
								if ge_i32(loc_8, 0) then
									desired = 4
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[147](add_i32(loc_1, 8), 4438, 0)
							error("out of code bounds")
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_8 = load_i32_u8(memory_at_0, loc_6 + 8)
						loc_3 = 78
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
					loc_7 = reg_0
					FUNC_LIST[97](load_i32(memory_at_0, loc_0), loc_3, loc_5, 0)
					FUNC_LIST[98](load_i32(memory_at_0, loc_0), bor_i32((if bxor_i32(loc_2, (if loc_11 ~= 9 then 1 else 0)) ~= 0 then 2147483648 else 0), loc_8))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[213](loc_0, loc_10, add_i32(loc_12, 8))
				loc_5 = reg_0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = 0
			while true do
				while true do
					while true do
						while true do
							while true do
								if not br_map[2] then
									br_map[2] = (function()
										return { [0] = 0, 1, 2, 3, 2, 3, }
									end)()
								end
								temp = br_map[2][sub_i32(load_i32(memory_at_0, loc_1 + 24), 8)] or 4
								if temp < 2 then
									if temp < 1 then
										break
									else
										desired = 5
										break
									end
								elseif temp > 2 then
									if temp < 4 then
										desired = 3
										break
									else
										desired = 2
										break
									end
								else
									desired = 4
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_3 = (if loc_2 ~= 0 then 27 else 30)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_3 = (if loc_2 ~= 0 then 30 else 27)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = (if loc_2 ~= 0 then 32 else 29)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = (if loc_2 ~= 0 then 31 else 28)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[213](loc_0, loc_4, add_i32(loc_12, 8))
			loc_6 = reg_0
			reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
			loc_7 = reg_0
			loc_8 = load_i32(memory_at_0, loc_0)
			if band_i32(load_i32(memory_at_0, loc_1 + 24), 4294967294) == 12 then
				while true do
					FUNC_LIST[97](loc_8, loc_3, loc_6, 0)
					FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_5)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[97](loc_8, loc_3, loc_5, 0)
			FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_6)
			break
		end
		store_i32(memory_at_0, load_i32(memory_at_0, loc_12 + 8) + 220, load_i32(memory_at_0, loc_12 + 12))
		GLOBAL_LIST[0].value = add_i32(loc_12, 16)
		reg_0 = loc_7
		break
	end
	return reg_0
end
FUNC_LIST[213] = --[[ Luau::Compiler::compileExprAuto(Luau::AstExpr*, Luau::Compiler::RegScope&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_8 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_8
		loc_4 = load_i32(memory_at_0, loc_1 + 4)
		loc_7 = load_i32(memory_at_0, 47220)
		while true do
			while true do
				while true do
					while true do
						if loc_1 ~= 0 then
							while true do
								loc_3 = loc_1
								if loc_4 == loc_7 then
									desired = 4
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = load_i32(memory_at_0, 47300)
						loc_5 = load_i32(memory_at_0, 47180)
						loc_3 = loc_1
						while true do
							if band_i32((if loc_4 ~= loc_5 then 1 else 0), (if loc_4 ~= loc_6 then 1 else 0)) ~= 0 then
								desired = 3
								break
							end
							loc_3 = load_i32(memory_at_0, loc_3 + 24)
							loc_4 = load_i32(memory_at_0, loc_3 + 4)
							if loc_3 == 0 then
								continue
							end
							if loc_4 ~= loc_7 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if load_i32(memory_at_0, loc_0 + 60) == 0 then
						break
					end
					loc_6 = load_i32(memory_at_0, loc_3 + 24)
					loc_10 = load_i32(memory_at_0, loc_0 + 64)
					if loc_6 == loc_10 then
						break
					end
					loc_3 = bxor_i32(shr_u32(loc_6, 4), shr_u32(loc_6, 9))
					loc_5 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
					loc_11 = load_i32(memory_at_0, loc_0 + 52)
					loc_4 = 0
					while true do
						loc_7 = band_i32(loc_3, loc_5)
						loc_9 = add_i32(mul_i32(loc_7, 12), loc_11)
						loc_3 = load_i32(memory_at_0, loc_9)
						if loc_3 ~= loc_6 then
							while true do
								if loc_3 == loc_10 then
									desired = 3
									break
								end
								loc_4 = add_i32(loc_4, 1)
								loc_3 = add_i32(loc_7, loc_4)
								if loc_4 <= loc_5 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if load_i32_u8(memory_at_0, loc_9 + 5) == 0 then
						break
					end
					loc_3 = load_i32_u8(memory_at_0, loc_9 + 4)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = load_i32(memory_at_0, loc_0 + 220)
				loc_4 = add_i32(loc_3, 1)
				if loc_4 >= 256 then
					desired = 1
					break
				end
				store_i32(memory_at_0, loc_0 + 220, loc_4)
				loc_5 = load_i32(memory_at_0, loc_0 + 224)
				store_i32(memory_at_0, loc_0 + 224, (if loc_4 < loc_5 then loc_5 else loc_4))
				FUNC_LIST[199](loc_0, loc_1, band_i32(loc_3, 255), 1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = add_i32(loc_8, 16)
			reg_0 = band_i32(loc_3, 255)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, loc_8, i64_from_u32(1, 255))
		FUNC_LIST[147](add_i32(loc_1, 8), 5468, loc_8)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[214] = --[[ Luau::Compiler::getConstantIndex(Luau::AstExpr*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = 4294967295
		while true do
			if load_i32(memory_at_0, loc_0 + 120) == 0 then
				break
			end
			loc_8 = load_i32(memory_at_0, loc_0 + 124)
			if loc_1 == loc_8 then
				break
			end
			loc_6 = bxor_i32(shr_u32(loc_1, 4), shr_u32(loc_1, 9))
			loc_7 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
			loc_9 = load_i32(memory_at_0, loc_0 + 112)
			while true do
				loc_10 = band_i32(loc_6, loc_7)
				loc_2 = add_i32(shl_i32(loc_10, 5), loc_9)
				loc_6 = load_i32(memory_at_0, loc_2)
				if loc_6 ~= loc_1 then
					while true do
						if loc_6 == loc_8 then
							desired = 1
							break
						end
						loc_3 = add_i32(loc_3, 1)
						loc_6 = add_i32(loc_10, loc_3)
						if loc_3 <= loc_7 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 0, 1, 2, 3, 4, }
										end)()
									end
									temp = br_map[1][sub_i32(load_i32(memory_at_0, loc_2 + 8), 1)] or 6
									if temp < 3 then
										if temp < 1 then
											break
										elseif temp > 1 then
											desired = 5
											break
										else
											desired = 6
											break
										end
									elseif temp > 3 then
										if temp < 6 then
											desired = 3
											break
										else
											desired = 1
											break
										end
									else
										desired = 4
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[82](load_i32(memory_at_0, loc_0))
								desired = 2
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[83](load_i32(memory_at_0, loc_0), load_i32_u8(memory_at_0, loc_2 + 16))
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[84](load_i32(memory_at_0, loc_0), load_f64(memory_at_0, loc_2 + 16))
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[85](load_i32(memory_at_0, loc_0), load_f32(memory_at_0, loc_2 + 16), load_f32(memory_at_0, loc_2 + 20), load_f32(memory_at_0, loc_2 + 24), load_f32(memory_at_0, loc_2 + 28))
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = load_i32(memory_at_0, loc_0)
				loc_11 = rotl_i64(load_i64(memory_at_0, loc_2 + 12), i64_from_u32(32, 0))
				store_i64(memory_at_0, loc_4 + 8, loc_11)
				store_i64(memory_at_0, loc_4, loc_11)
				reg_0 = FUNC_LIST[86](loc_3, loc_4)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = reg_0
			if ge_i32(loc_5, 0) then
				break
			end
			FUNC_LIST[147](add_i32(loc_1, 8), 4438, 0)
			error("out of code bounds")
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		reg_0 = loc_5
		break
	end
	return reg_0
end
FUNC_LIST[215] = --[[ Luau::Compiler::compileExprGlobal(Luau::AstExprGlobal*, unsigned char) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				while true do
					if le_i32(load_i32(memory_at_0, loc_0 + 4), 0) then
						break
					end
					loc_6 = load_i32(memory_at_0, loc_1 + 24)
					while true do
						if load_i32(memory_at_0, loc_0 + 80) == 0 then
							break
						end
						loc_8 = load_i32(memory_at_0, loc_0 + 84)
						if loc_6 == loc_8 then
							break
						end
						loc_5 = bxor_i32(shr_u32(loc_6, 4), shr_u32(loc_6, 9))
						loc_7 = sub_i32(load_i32(memory_at_0, loc_0 + 76), 1)
						loc_9 = load_i32(memory_at_0, loc_0 + 72)
						while true do
							loc_10 = band_i32(loc_5, loc_7)
							loc_11 = add_i32(shl_i32(loc_10, 3), loc_9)
							loc_5 = load_i32(memory_at_0, loc_11)
							if loc_5 ~= loc_6 then
								while true do
									if loc_5 == loc_8 then
										desired = 4
										break
									end
									loc_4 = add_i32(loc_4, 1)
									loc_5 = add_i32(loc_10, loc_4)
									if loc_4 <= loc_7 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if load_i32(memory_at_0, loc_11 + 4) == 2 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = load_i32(memory_at_0, loc_0)
					store_i32(memory_at_0, loc_3 + 40, loc_6)
					reg_1 = FUNC_LIST[504](loc_6)
					store_i32(memory_at_0, loc_3 + 44, reg_1)
					store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_3 + 40))
					reg_0 = FUNC_LIST[86](loc_4, add_i32(loc_3, 16))
					loc_4 = reg_0
					if lt_i32(loc_4, 0) then
						desired = 1
						break
					end
					if loc_4 > 1023 then
						break
					end
					reg_0 = FUNC_LIST[113](loc_4)
					loc_5 = reg_0
					reg_0 = FUNC_LIST[87](load_i32(memory_at_0, loc_0), loc_5)
					loc_4 = reg_0
					if loc_4 > 32767 then
						break
					end
					FUNC_LIST[97](load_i32(memory_at_0, loc_0), 12, loc_2, extend_i32_n16(loc_4))
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = load_i32(memory_at_0, loc_0)
				loc_4 = load_i32(memory_at_0, loc_1 + 24)
				reg_1 = FUNC_LIST[504](loc_4)
				loc_7 = reg_1
				store_i32(memory_at_0, loc_3 + 36, loc_7)
				store_i32(memory_at_0, loc_3 + 32, loc_4)
				store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_3 + 32))
				reg_0 = FUNC_LIST[86](loc_5, add_i32(loc_3, 8))
				loc_5 = reg_0
				if lt_i32(loc_5, 0) then
					desired = 1
					break
				end
				loc_6 = load_i32(memory_at_0, loc_0)
				store_i32(memory_at_0, loc_3 + 28, loc_7)
				store_i32(memory_at_0, loc_3 + 24, loc_4)
				store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_3 + 24))
				reg_4 = FUNC_LIST[116](loc_3)
				FUNC_LIST[96](loc_6, 7, loc_2, 0, band_i32(reg_4, 255))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_5)
			GLOBAL_LIST[0].value = add_i32(loc_3, 48)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[147](add_i32(loc_1, 8), 4438, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[216] = --[[ Luau::Compiler::compileExprIndexName(Luau::AstExprIndexName*, unsigned char) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_3
		if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
			while true do
				FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, loc_1 + 8), 1))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_4 = load_i32(memory_at_0, loc_1 + 24)
		loc_5 = load_i32(memory_at_0, loc_4 + 4)
		while true do
			while true do
				while true do
					while true do
						while true do
							if loc_4 == 0 then
								break
							end
							if load_i32(memory_at_0, 47252) ~= loc_5 then
								break
							end
							loc_8 = loc_1
							loc_9 = loc_4
							loc_5 = load_i32(memory_at_0, loc_4 + 24)
							loc_4 = loc_5
							if load_i32(memory_at_0, loc_5 + 4) == load_i32(memory_at_0, 47228) then
								desired = 4
								break
							end
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_9 = loc_1
						if load_i32(memory_at_0, 47228) ~= loc_5 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if le_i32(load_i32(memory_at_0, loc_0 + 4), 0) then
						break
					end
					loc_7 = load_i32(memory_at_0, loc_4 + 24)
					while true do
						if load_i32(memory_at_0, loc_0 + 80) == 0 then
							break
						end
						loc_10 = load_i32(memory_at_0, loc_0 + 84)
						if loc_7 == loc_10 then
							break
						end
						loc_5 = bxor_i32(shr_u32(loc_7, 4), shr_u32(loc_7, 9))
						loc_6 = sub_i32(load_i32(memory_at_0, loc_0 + 76), 1)
						loc_11 = load_i32(memory_at_0, loc_0 + 72)
						loc_4 = 0
						while true do
							loc_12 = band_i32(loc_5, loc_6)
							loc_13 = add_i32(shl_i32(loc_12, 3), loc_11)
							loc_5 = load_i32(memory_at_0, loc_13)
							if loc_5 ~= loc_7 then
								while true do
									if loc_5 == loc_10 then
										desired = 4
										break
									end
									loc_4 = add_i32(loc_4, 1)
									loc_5 = add_i32(loc_12, loc_4)
									if loc_4 <= loc_6 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if load_i32(memory_at_0, loc_13 + 4) ~= 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = load_i32(memory_at_0, loc_0)
					store_i32(memory_at_0, loc_3 + 88, loc_7)
					reg_1 = FUNC_LIST[504](loc_7)
					store_i32(memory_at_0, loc_3 + 92, reg_1)
					store_i64(memory_at_0, loc_3 + 40, load_i64(memory_at_0, loc_3 + 88))
					reg_0 = FUNC_LIST[86](loc_4, add_i32(loc_3, 40))
					loc_4 = reg_0
					loc_5 = load_i32(memory_at_0, loc_0)
					loc_6 = load_i32(memory_at_0, loc_9 + 28)
					store_i32(memory_at_0, loc_3 + 80, loc_6)
					reg_1 = FUNC_LIST[504](loc_6)
					store_i32(memory_at_0, loc_3 + 84, reg_1)
					store_i64(memory_at_0, loc_3 + 32, load_i64(memory_at_0, loc_3 + 80))
					reg_0 = FUNC_LIST[86](loc_5, add_i32(loc_3, 32))
					loc_5 = reg_0
					if loc_8 ~= 0 then
						while true do
							loc_6 = load_i32(memory_at_0, loc_0)
							loc_7 = load_i32(memory_at_0, loc_8 + 28)
							store_i32(memory_at_0, loc_3 + 72, loc_7)
							reg_1 = FUNC_LIST[504](loc_7)
							store_i32(memory_at_0, loc_3 + 76, reg_1)
							store_i64(memory_at_0, loc_3 + 24, load_i64(memory_at_0, loc_3 + 72))
							reg_0 = FUNC_LIST[86](loc_6, add_i32(loc_3, 24))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 4294967295
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = reg_0
					while true do
						if lt_i32(bor_i32(loc_4, loc_5), 0) then
							break
						end
						if band_i32((if loc_8 ~= 0 then 1 else 0), (if lt_i32(loc_6, 0) then 1 else 0)) ~= 0 then
							break
						end
						if gt_i32(loc_4, 1023) then
							desired = 3
							break
						end
						if gt_i32(loc_5, 1023) then
							desired = 3
							break
						end
						if gt_i32(loc_6, 1023) then
							desired = 3
							break
						end
						while true do
							if loc_8 ~= 0 then
								while true do
									reg_0 = FUNC_LIST[115](loc_4, loc_5, loc_6)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = FUNC_LIST[114](loc_4, loc_5)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = reg_0
						reg_0 = FUNC_LIST[87](load_i32(memory_at_0, loc_0), loc_4)
						loc_5 = reg_0
						if loc_5 > 32767 then
							desired = 3
							break
						end
						FUNC_LIST[97](load_i32(memory_at_0, loc_0), 12, loc_2, extend_i32_n16(loc_5))
						FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_4)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_3 + 64, loc_0)
				store_i32(memory_at_0, loc_3 + 68, load_i32(memory_at_0, loc_0 + 220))
				reg_0 = FUNC_LIST[213](loc_0, load_i32(memory_at_0, loc_1 + 24), sub_i32(loc_3, 4294967232))
				loc_6 = reg_0
				if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
					while true do
						FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, loc_1 + 32), 1))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_5 = load_i32(memory_at_0, loc_0)
				loc_4 = load_i32(memory_at_0, loc_1 + 28)
				reg_1 = FUNC_LIST[504](loc_4)
				loc_7 = reg_1
				store_i32(memory_at_0, loc_3 + 60, loc_7)
				store_i32(memory_at_0, loc_3 + 56, loc_4)
				store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_3 + 56))
				reg_0 = FUNC_LIST[86](loc_5, add_i32(loc_3, 16))
				loc_5 = reg_0
				if lt_i32(loc_5, 0) then
					desired = 1
					break
				end
				loc_1 = load_i32(memory_at_0, loc_0)
				store_i32(memory_at_0, loc_3 + 52, loc_7)
				store_i32(memory_at_0, loc_3 + 48, loc_4)
				store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_3 + 48))
				reg_4 = FUNC_LIST[116](add_i32(loc_3, 8))
				FUNC_LIST[96](loc_1, 15, loc_2, loc_6, band_i32(reg_4, 255))
				FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_5)
				store_i32(memory_at_0, load_i32(memory_at_0, loc_3 + 64) + 220, load_i32(memory_at_0, loc_3 + 68))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = add_i32(loc_3, 96)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[147](add_i32(loc_1, 8), 4438, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[217] = --[[ Luau::Compiler::compileExprIndexExpr(Luau::AstExprIndexExpr*, unsigned char) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, loc_3 + 40, loc_0)
		store_i32(memory_at_0, loc_3 + 44, load_i32(memory_at_0, loc_0 + 220))
		while true do
			while true do
				if load_i32(memory_at_0, loc_0 + 120) == 0 then
					break
				end
				loc_10 = load_i32(memory_at_0, loc_0 + 124)
				loc_6 = load_i32(memory_at_0, loc_1 + 28)
				if loc_10 == loc_6 then
					break
				end
				loc_5 = bxor_i32(shr_u32(loc_6, 4), shr_u32(loc_6, 9))
				loc_7 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
				loc_11 = load_i32(memory_at_0, loc_0 + 112)
				while true do
					loc_8 = band_i32(loc_5, loc_7)
					loc_9 = add_i32(shl_i32(loc_8, 5), loc_11)
					loc_5 = load_i32(memory_at_0, loc_9)
					if loc_5 ~= loc_6 then
						while true do
							if loc_5 == loc_10 then
								desired = 2
								break
							end
							loc_4 = add_i32(loc_4, 1)
							loc_5 = add_i32(loc_8, loc_4)
							if loc_4 <= loc_7 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = load_i32(memory_at_0, loc_9 + 12)
				loc_12 = load_f64(memory_at_0, loc_9 + 16)
				while true do
					loc_4 = load_i32(memory_at_0, loc_9 + 8)
					if loc_4 ~= 3 then
						break
					end
					if (if loc_12 >= 1e0 then 1 else 0) == 0 then
						break
					end
					if (if loc_12 <= 2.56e2 then 1 else 0) == 0 then
						break
					end
					while true do
						if abs_f64(loc_12) < 2.147483648e9 then
							while true do
								reg_0 = truncate_i32_f64(loc_12)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_0 = 2147483648
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = reg_0
					if convert_f64_i32(loc_4) ~= loc_12 then
						desired = 2
						break
					end
					loc_4 = sub_i32(loc_4, 1)
					reg_0 = FUNC_LIST[213](loc_0, load_i32(memory_at_0, loc_1 + 24), add_i32(loc_3, 40))
					loc_5 = reg_0
					if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
						while true do
							FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 28) + 8), 1))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[96](load_i32(memory_at_0, loc_0), 17, loc_2, loc_5, band_i32(loc_4, 255))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_4 ~= 5 then
					break
				end
				loc_4 = load_i32(memory_at_0, loc_0)
				store_i32(memory_at_0, loc_3 + 36, loc_5)
				loc_7 = wrap_i32_i64(reinterpret_i64_f64(loc_12))
				store_i32(memory_at_0, loc_3 + 32, loc_7)
				store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_3 + 32))
				reg_0 = FUNC_LIST[86](loc_4, add_i32(loc_3, 16))
				loc_4 = reg_0
				if ge_i32(loc_4, 0) then
					while true do
						reg_0 = FUNC_LIST[213](loc_0, load_i32(memory_at_0, loc_1 + 24), add_i32(loc_3, 40))
						loc_8 = reg_0
						if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
							while true do
								FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 28) + 8), 1))
								break
							end
							if desired then
								break
							end
						end
						loc_6 = load_i32(memory_at_0, loc_0)
						store_i32(memory_at_0, loc_3 + 28, loc_5)
						store_i32(memory_at_0, loc_3 + 24, loc_7)
						store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_3 + 24))
						reg_4 = FUNC_LIST[116](add_i32(loc_3, 8))
						FUNC_LIST[96](loc_6, 15, loc_2, loc_8, band_i32(reg_4, 255))
						FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_4)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[147](add_i32(loc_1, 8), 4438, 0)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[213](loc_0, load_i32(memory_at_0, loc_1 + 24), add_i32(loc_3, 40))
			loc_4 = reg_0
			reg_0 = FUNC_LIST[213](loc_0, load_i32(memory_at_0, loc_1 + 28), add_i32(loc_3, 40))
			loc_5 = reg_0
			FUNC_LIST[96](load_i32(memory_at_0, loc_0), 13, loc_2, loc_4, loc_5)
			break
		end
		store_i32(memory_at_0, load_i32(memory_at_0, loc_3 + 40) + 220, load_i32(memory_at_0, loc_3 + 44))
		GLOBAL_LIST[0].value = add_i32(loc_3, 48)
		break
	end
end
FUNC_LIST[218] = --[[ Luau::Compiler::compileExprTable(Luau::AstExprTable*, unsigned char, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local loc_23 = 0
	local loc_24 = 0
	local loc_25 = 0
	local loc_26 = 0.0
	local loc_27 = i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_6 = sub_i32(GLOBAL_LIST[0].value, 256)
		GLOBAL_LIST[0].value = loc_6
		store_i32(memory_at_0, loc_6 + 252, loc_1)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									loc_16 = load_i32(memory_at_0, loc_1 + 28)
									if loc_16 ~= 0 then
										while true do
											loc_17 = band_i32(loc_16, 1)
											loc_12 = load_i32(memory_at_0, loc_1 + 24)
											if loc_16 ~= 1 then
												desired = 7
												break
											end
											desired = 6
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									reg_0 = FUNC_LIST[174](add_i32(loc_0, 152), add_i32(loc_6, 252))
									loc_4 = reg_0
									loc_9 = load_i32(memory_at_0, loc_4)
									loc_5 = load_i32(memory_at_0, loc_0)
									loc_7 = load_i32(memory_at_0, loc_4 + 4)
									store_i32(memory_at_0, loc_6, loc_7)
									FUNC_LIST[108](loc_5, 5681, loc_6)
									loc_11 = load_i32(memory_at_0, loc_0)
									loc_4 = 0
									while true do
										loc_5 = loc_4
										loc_4 = add_i32(loc_5, 1)
										if loc_7 > shl_i32(1, loc_5) then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									FUNC_LIST[96](loc_11, 53, loc_2, band_i32((if loc_7 ~= 0 then add_i32(loc_5, 1) else 0), 255), 0)
									FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_9)
									desired = 5
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_11 = band_i32(loc_16, 4294967294)
								while true do
									loc_5 = load_i32(memory_at_0, add_i32(mul_i32(loc_4, 12), loc_12))
									loc_7 = load_i32(memory_at_0, add_i32(mul_i32(bor_i32(loc_4, 1), 12), loc_12))
									loc_13 = add_i32(add_i32((if loc_5 == 1 then 1 else 0), loc_13), (if loc_7 == 1 then 1 else 0))
									loc_8 = add_i32(add_i32((if loc_5 ~= 0 then 1 else 0), loc_8), (if loc_7 ~= 0 then 1 else 0))
									loc_14 = add_i32((if loc_7 == 0 then 1 else 0), add_i32((if loc_5 == 0 then 1 else 0), loc_14))
									loc_4 = add_i32(loc_4, 2)
									loc_9 = add_i32(loc_9, 2)
									if loc_11 ~= loc_9 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_17 ~= 0 then
								while true do
									loc_4 = load_i32(memory_at_0, add_i32(mul_i32(loc_4, 12), loc_12))
									loc_13 = add_i32((if loc_4 == 1 then 1 else 0), loc_13)
									loc_14 = add_i32((if loc_4 == 0 then 1 else 0), loc_14)
									reg_0 = add_i32((if loc_4 ~= 0 then 1 else 0), loc_8)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = loc_8
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_8 = reg_0
							while true do
								reg_0 = 0
								if loc_14 ~= 0 then
									break
								end
								reg_0 = 0
								if loc_8 == 0 then
									break
								end
								loc_7 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
								loc_18 = load_i32(memory_at_0, loc_0 + 112)
								loc_19 = load_i32(memory_at_0, loc_0 + 124)
								loc_20 = load_i32(memory_at_0, loc_0 + 120)
								while true do
									loc_11 = 0
									while true do
										if loc_20 == 0 then
											break
										end
										loc_17 = load_i32(memory_at_0, add_i32(mul_i32(loc_10, 12), loc_12) + 4)
										if loc_19 == loc_17 then
											break
										end
										loc_5 = bxor_i32(shr_u32(loc_17, 4), shr_u32(loc_17, 9))
										loc_4 = 0
										while true do
											loc_9 = band_i32(loc_5, loc_7)
											loc_21 = add_i32(shl_i32(loc_9, 5), loc_18)
											loc_5 = load_i32(memory_at_0, loc_21)
											if loc_5 ~= loc_17 then
												while true do
													if loc_5 == loc_19 then
														desired = 8
														break
													end
													loc_4 = add_i32(loc_4, 1)
													loc_5 = add_i32(loc_9, loc_4)
													if loc_4 <= loc_7 then
														desired = 9
														break
													end
													desired = 8
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if load_i32(memory_at_0, loc_21 + 8) ~= 3 then
											break
										end
										loc_11 = (if load_f64(memory_at_0, loc_21 + 16) == convert_f64_u32(add_i32(loc_15, 1)) then 1 else 0)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									loc_15 = add_i32(loc_11, loc_15)
									loc_10 = add_i32(loc_10, 1)
									if loc_16 ~= loc_10 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_4 = (if add_i32(loc_13, loc_15) == loc_8 then 1 else 0)
								loc_8 = (if loc_4 ~= 0 then loc_13 else loc_8)
								reg_0 = (if loc_4 ~= 0 then loc_15 else 0)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_5 = reg_0
							while true do
								loc_4 = loc_22
								loc_22 = add_i32(loc_4, 1)
								if loc_8 > shl_i32(1, loc_4) then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_20 = load_i32(memory_at_0, loc_0 + 220)
							loc_10 = loc_2
							if loc_3 ~= 0 then
								while true do
									reg_0 = loc_10
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									loc_7 = add_i32(loc_20, 1)
									if loc_7 >= 256 then
										desired = 1
										break
									end
									store_i32(memory_at_0, loc_0 + 220, loc_7)
									loc_9 = load_i32(memory_at_0, loc_0 + 224)
									store_i32(memory_at_0, loc_0 + 224, (if loc_7 < loc_9 then loc_9 else loc_7))
									reg_0 = loc_20
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_10 = reg_0
							loc_9 = (if loc_8 ~= 0 then add_i32(loc_4, 1) else 0)
							while true do
								while true do
									if bor_i32(loc_5, loc_14) ~= 0 then
										break
									end
									if sub_i32(loc_13, 1) > 31 then
										break
									end
									if loc_8 ~= loc_13 then
										break
									end
									store_i32(memory_at_0, loc_6 + 248, 0)
									loc_4 = 0
									while true do
										loc_5 = load_i32(memory_at_0, loc_0)
										loc_7 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 24), mul_i32(loc_4, 12)) + 4)
										loc_7 = (if load_i32(memory_at_0, loc_7 + 4) == load_i32(memory_at_0, 47212) then loc_7 else 0)
										loc_27 = load_i64(memory_at_0, loc_7 + 24)
										store_i64(memory_at_0, loc_6 + 112, loc_27)
										store_i64(memory_at_0, loc_6 + 40, loc_27)
										reg_0 = FUNC_LIST[86](loc_5, add_i32(loc_6, 40))
										loc_5 = reg_0
										if lt_i32(loc_5, 0) then
											desired = 2
											break
										end
										loc_7 = load_i32(memory_at_0, loc_6 + 248)
										store_i32(memory_at_0, loc_6 + 248, add_i32(loc_7, 1))
										store_i32(memory_at_0, add_i32(add_i32(loc_6, 120), shl_i32(loc_7, 2)), extend_i32_n16(loc_5))
										loc_4 = add_i32(loc_4, 1)
										if loc_4 < load_i32(memory_at_0, loc_1 + 28) then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = FUNC_LIST[88](load_i32(memory_at_0, loc_0), add_i32(loc_6, 120))
									loc_4 = reg_0
									if lt_i32(loc_4, 0) then
										desired = 3
										break
									end
									loc_5 = load_i32(memory_at_0, loc_0)
									store_i32(memory_at_0, loc_6 + 32, loc_13)
									FUNC_LIST[108](loc_5, 5707, add_i32(loc_6, 32))
									loc_5 = load_i32(memory_at_0, loc_0)
									if loc_4 <= 32767 then
										while true do
											FUNC_LIST[97](loc_5, 54, band_i32(loc_10, 255), extend_i32_n16(loc_4))
											desired = 6
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									FUNC_LIST[96](loc_5, 53, band_i32(loc_10, 255), band_i32(loc_9, 255), 0)
									FUNC_LIST[98](load_i32(memory_at_0, loc_0), 0)
									desired = 6
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_4 = 0
								while true do
									loc_11 = add_i32(mul_i32(loc_16, 12), loc_12)
									loc_7 = sub_i32(loc_11, 12)
									if loc_7 == 0 then
										break
									end
									if load_i32(memory_at_0, loc_7) ~= 0 then
										break
									end
									loc_4 = (if load_i32(memory_at_0, load_i32(memory_at_0, sub_i32(loc_11, 4)) + 4) == load_i32(memory_at_0, 47236) then 4294967295 else 0)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_4 = add_i32(loc_4, add_i32(loc_5, loc_14))
								while true do
									if loc_8 == 0 then
										while true do
											loc_5 = load_i32(memory_at_0, loc_0)
											store_i32(memory_at_0, loc_6 + 48, loc_4)
											FUNC_LIST[108](loc_5, 5406, add_i32(loc_6, 48))
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_5 = load_i32(memory_at_0, loc_0)
									if loc_4 == 0 then
										while true do
											store_i32(memory_at_0, loc_6 + 64, loc_8)
											FUNC_LIST[108](loc_5, 5681, sub_i32(loc_6, 4294967232))
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									store_i32(memory_at_0, loc_6 + 84, loc_4)
									store_i32(memory_at_0, loc_6 + 80, loc_8)
									FUNC_LIST[108](loc_5, 5433, add_i32(loc_6, 80))
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[96](load_i32(memory_at_0, loc_0), 53, band_i32(loc_10, 255), band_i32(loc_9, 255), 0)
								FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_4)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_15 = load_i32(memory_at_0, loc_0 + 220)
							loc_16 = (if loc_14 >= 16 then 16 else loc_14)
							loc_4 = add_i32(loc_15, loc_16)
							if loc_4 >= 256 then
								desired = 4
								break
							end
							store_i32(memory_at_0, loc_0 + 220, loc_4)
							loc_5 = load_i32(memory_at_0, loc_0 + 224)
							store_i32(memory_at_0, loc_0 + 224, (if loc_4 < loc_5 then loc_5 else loc_4))
							while true do
								if load_i32(memory_at_0, loc_1 + 28) == 0 then
									break
								end
								loc_23 = loc_6
								loc_22 = add_i32(loc_23, 136)
								loc_24 = loc_6
								loc_14 = add_i32(loc_24, 124)
								loc_25 = loc_14
								loc_13 = add_i32(loc_25, 8)
								loc_8 = 0
								loc_3 = 0
								loc_12 = 1
								loc_4 = 0
								while true do
									loc_5 = add_i32(load_i32(memory_at_0, loc_1 + 24), mul_i32(loc_8, 12))
									loc_18 = load_i32(memory_at_0, loc_5 + 8)
									loc_5 = load_i32(memory_at_0, loc_5 + 4)
									if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
										while true do
											FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, loc_18 + 8), 1))
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									if ge_i32(load_i32(memory_at_0, loc_0 + 12), 2) then
										while true do
											FUNC_LIST[96](load_i32(memory_at_0, loc_0), 69, 0, 0, 0)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															if loc_4 ~= 0 then
																while true do
																	if band_i32((if loc_5 == 0 then 1 else 0), (if loc_4 ~= loc_16 then 1 else 0)) ~= 0 then
																		desired = 13
																		break
																	end
																	FUNC_LIST[96](load_i32(memory_at_0, loc_0), 55, band_i32(loc_10, 255), band_i32(loc_15, 255), band_i32(add_i32(loc_4, 1), 255))
																	FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_12)
																	reg_0 = add_i32(loc_4, loc_12)
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															else
																while true do
																	reg_0 = loc_12
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															loc_12 = reg_0
															if loc_5 ~= 0 then
																desired = 12
																break
															end
															loc_4 = 0
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_5 = add_i32(loc_4, loc_15)
														loc_8 = add_i32(loc_8, 1)
														if loc_8 ~= load_i32(memory_at_0, loc_1 + 28) then
															desired = 11
															break
														end
														reg_0 = FUNC_LIST[198](loc_0, loc_18, band_i32(loc_5, 255))
														loc_3 = reg_0
														desired = 10
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													store_i32(memory_at_0, loc_6 + 104, loc_0)
													store_i32(memory_at_0, loc_6 + 108, load_i32(memory_at_0, loc_0 + 220))
													if load_i32(memory_at_0, loc_0 + 120) == 0 then
														desired = 9
														break
													end
													loc_17 = load_i32(memory_at_0, loc_0 + 124)
													if loc_5 == loc_17 then
														desired = 9
														break
													end
													loc_7 = bxor_i32(shr_u32(loc_5, 4), shr_u32(loc_5, 9))
													loc_9 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
													loc_21 = load_i32(memory_at_0, loc_0 + 112)
													loc_4 = 0
													while true do
														loc_11 = band_i32(loc_7, loc_9)
														loc_19 = add_i32(shl_i32(loc_11, 5), loc_21)
														loc_7 = load_i32(memory_at_0, loc_19)
														if loc_7 ~= loc_5 then
															while true do
																if loc_7 == loc_17 then
																	desired = 9
																	break
																end
																loc_4 = add_i32(loc_4, 1)
																loc_7 = add_i32(loc_11, loc_4)
																if loc_4 <= loc_9 then
																	desired = 12
																	break
																end
																desired = 9
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																	continue
																end
																break
															end
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_7 = load_i32(memory_at_0, loc_19 + 12)
													loc_26 = load_f64(memory_at_0, loc_19 + 16)
													while true do
														while true do
															loc_4 = load_i32(memory_at_0, loc_19 + 8)
															if loc_4 ~= 3 then
																break
															end
															if (if loc_26 >= 1e0 then 1 else 0) == 0 then
																break
															end
															if (if loc_26 <= 2.56e2 then 1 else 0) == 0 then
																break
															end
															while true do
																if abs_f64(loc_26) < 2.147483648e9 then
																	while true do
																		reg_0 = truncate_i32_f64(loc_26)
																		desired = 14
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																end
																reg_0 = 2147483648
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_4 = reg_0
															if convert_f64_i32(loc_4) ~= loc_26 then
																desired = 9
																break
															end
															store_i32(memory_at_0, loc_6 + 120, 4)
															store_i32(memory_at_0, loc_25 + 8, 0)
															store_i64(memory_at_0, loc_24 + 124, i64_ZERO)
															store_i32_n8(memory_at_0, loc_6 + 127, sub_i32(loc_4, 1))
															desired = 12
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														if loc_4 ~= 5 then
															desired = 9
															break
														end
														store_i64(memory_at_0, loc_6 + 120, i64_from_u32(3, 0))
														store_i32(memory_at_0, loc_6 + 132, loc_7)
														store_i64_n32(memory_at_0, loc_6 + 128, reinterpret_i64_f64(loc_26))
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													store_i32_n8(memory_at_0, loc_6 + 124, loc_10)
													desired = 8
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_7 = load_i32(memory_at_0, loc_0 + 220)
												loc_5 = band_i32(loc_5, 255)
												store_i32(memory_at_0, loc_0 + 220, add_i32(loc_5, 1))
												FUNC_LIST[199](loc_0, loc_18, loc_5, 1)
												store_i32(memory_at_0, loc_0 + 220, loc_7)
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_4 = add_i32(loc_4, 1)
											if load_i32(memory_at_0, loc_1 + 28) > loc_8 then
												desired = 7
												break
											end
											if loc_4 == 0 then
												desired = 6
												break
											end
											FUNC_LIST[96](load_i32(memory_at_0, loc_0), 55, band_i32(loc_10, 255), band_i32(loc_15, 255), band_i32((if band_i32(loc_3, 1) ~= 0 then 0 else add_i32(loc_4, 1)), 255))
											FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_12)
											desired = 6
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										store_i32(memory_at_0, loc_6 + 120, 5)
										store_i32(memory_at_0, loc_25 + 8, 0)
										store_i64(memory_at_0, loc_24 + 124, i64_ZERO)
										store_i32_n8(memory_at_0, loc_6 + 124, loc_10)
										reg_1 = FUNC_LIST[213](loc_0, loc_5, add_i32(loc_6, 104))
										store_i32_n8(memory_at_0, loc_6 + 126, reg_1)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									store_i64(memory_at_0, loc_23 + 136, load_i64(memory_at_0, loc_5 + 8))
									store_i64(memory_at_0, loc_23 + 144, load_i64(memory_at_0, loc_5 + 16))
									reg_2 = FUNC_LIST[213](loc_0, loc_18, add_i32(loc_6, 104))
									FUNC_LIST[208](loc_0, add_i32(loc_6, 120), reg_2, 1)
									store_i32(memory_at_0, load_i32(memory_at_0, loc_6 + 104) + 220, load_i32(memory_at_0, loc_6 + 108))
									loc_4 = 0
									loc_8 = add_i32(loc_8, 1)
									if loc_8 < load_i32(memory_at_0, loc_1 + 28) then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_4 = band_i32(loc_10, 255)
							if loc_4 ~= loc_2 then
								while true do
									FUNC_LIST[96](load_i32(memory_at_0, loc_0), 6, loc_2, loc_4, 0)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							store_i32(memory_at_0, loc_0 + 220, loc_20)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						GLOBAL_LIST[0].value = add_i32(loc_6, 256)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_6 + 20, 255)
					store_i32(memory_at_0, loc_6 + 16, loc_16)
					FUNC_LIST[147](add_i32(loc_1, 8), 5468, add_i32(loc_6, 16))
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[147](add_i32(loc_1, 8), 4438, 0)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[147](add_i32(loc_7, 8), 4438, 0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, loc_6 + 96, i64_from_u32(1, 255))
		FUNC_LIST[147](add_i32(loc_1, 8), 5468, add_i32(loc_6, 96))
		error("out of code bounds")
	end
end
FUNC_LIST[219] = --[[ Luau::Compiler::compileExprBinary(Luau::AstExprBinary*, unsigned char, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		store_i32(memory_at_0, loc_5 + 24, loc_0)
		store_i32(memory_at_0, loc_5 + 28, load_i32(memory_at_0, loc_0 + 220))
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										loc_12 = load_i32(memory_at_0, loc_1 + 24)
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 3, 3, }
											end)()
										end
										temp = br_map[1][loc_12] or 6
										if temp < 2 then
											if temp < 1 then
												break
											else
												desired = 7
												break
											end
										elseif temp > 2 then
											if temp < 6 then
												desired = 5
												break
											else
												desired = 2
												break
											end
										else
											desired = 6
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									while true do
										while true do
											while true do
												if load_i32(memory_at_0, loc_0 + 120) == 0 then
													break
												end
												loc_10 = load_i32(memory_at_0, loc_0 + 124)
												loc_7 = load_i32(memory_at_0, loc_1 + 32)
												if loc_10 == loc_7 then
													break
												end
												loc_4 = bxor_i32(shr_u32(loc_7, 4), shr_u32(loc_7, 9))
												loc_6 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
												loc_11 = load_i32(memory_at_0, loc_0 + 112)
												loc_3 = 0
												while true do
													loc_8 = band_i32(loc_4, loc_6)
													loc_9 = add_i32(shl_i32(loc_8, 5), loc_11)
													loc_4 = load_i32(memory_at_0, loc_9)
													if loc_4 ~= loc_7 then
														while true do
															if loc_4 == loc_10 then
																desired = 10
																break
															end
															loc_3 = add_i32(loc_3, 1)
															loc_4 = add_i32(loc_8, loc_3)
															if loc_3 <= loc_6 then
																desired = 11
																break
															end
															desired = 10
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
																continue
															end
															break
														end
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												if load_i32(memory_at_0, loc_9 + 8) ~= 3 then
													break
												end
												reg_0 = FUNC_LIST[84](load_i32(memory_at_0, loc_0), load_f64(memory_at_0, loc_9 + 16))
												loc_3 = reg_0
												if lt_i32(loc_3, 0) then
													desired = 1
													break
												end
												if loc_3 < 256 then
													desired = 9
													break
												end
												loc_12 = load_i32(memory_at_0, loc_1 + 24)
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if not br_map[2] then
												br_map[2] = (function()
													return { [0] = 1, 6, 1, }
												end)()
											end
											temp = br_map[2][sub_i32(loc_12, 1)] or 6
											if temp < 6 then
												desired = 8
												break
											else
												desired = 3
												break
											end
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										reg_0 = FUNC_LIST[213](loc_0, load_i32(memory_at_0, loc_1 + 28), add_i32(loc_5, 24))
										loc_4 = reg_0
										loc_6 = load_i32(memory_at_0, loc_0)
										loc_0 = 0
										loc_1 = load_i32(memory_at_0, loc_1 + 24)
										reg_0 = loc_6
										if loc_1 <= 6 then
											while true do
												reg_1 = load_i32(memory_at_0, add_i32(shl_i32(loc_1, 2), 12332))
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										else
											while true do
												reg_1 = loc_0
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_0 = reg_1
										FUNC_LIST[96](reg_0, loc_0, loc_2, loc_4, band_i32(loc_3, 255))
										desired = 2
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if load_i32(memory_at_0, loc_0 + 120) == 0 then
										desired = 3
										break
									end
									loc_10 = load_i32(memory_at_0, loc_0 + 124)
									loc_7 = load_i32(memory_at_0, loc_1 + 28)
									if loc_10 == loc_7 then
										desired = 3
										break
									end
									loc_4 = bxor_i32(shr_u32(loc_7, 4), shr_u32(loc_7, 9))
									loc_6 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
									loc_11 = load_i32(memory_at_0, loc_0 + 112)
									loc_3 = 0
									while true do
										loc_8 = band_i32(loc_4, loc_6)
										loc_9 = add_i32(shl_i32(loc_8, 5), loc_11)
										loc_4 = load_i32(memory_at_0, loc_9)
										if loc_4 ~= loc_7 then
											while true do
												if loc_4 == loc_10 then
													desired = 3
													break
												end
												loc_3 = add_i32(loc_3, 1)
												loc_4 = add_i32(loc_8, loc_3)
												if loc_3 <= loc_6 then
													desired = 8
													break
												end
												desired = 3
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if load_i32(memory_at_0, loc_9 + 8) ~= 3 then
										desired = 3
										break
									end
									reg_0 = FUNC_LIST[84](load_i32(memory_at_0, loc_0), load_f64(memory_at_0, loc_9 + 16))
									loc_3 = reg_0
									if lt_i32(loc_3, 0) then
										desired = 1
										break
									end
									if loc_3 > 255 then
										desired = 3
										break
									end
									reg_0 = FUNC_LIST[213](loc_0, load_i32(memory_at_0, loc_1 + 32), add_i32(loc_5, 24))
									loc_4 = reg_0
									FUNC_LIST[96](load_i32(memory_at_0, loc_0), (if load_i32(memory_at_0, loc_1 + 24) == 1 then 71 else 72), loc_2, band_i32(loc_3, 255), loc_4)
									desired = 2
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_13 = load_i64(memory_at_0, loc_1 + 28)
								reg_1 = FUNC_LIST[606](8)
								loc_3 = reg_1
								store_i32(memory_at_0, loc_5 + 12, loc_3)
								loc_4 = add_i32(loc_3, 8)
								store_i32(memory_at_0, loc_5 + 20, loc_4)
								store_i64(memory_at_0, loc_3, loc_13)
								store_i32(memory_at_0, loc_5 + 16, loc_4)
								FUNC_LIST[209](add_i32(loc_5, 12))
								loc_7 = load_i32(memory_at_0, loc_5 + 16)
								loc_4 = load_i32(memory_at_0, loc_5 + 12)
								loc_8 = shr_i32(sub_i32(loc_7, loc_4), 2)
								loc_6 = load_i32(memory_at_0, loc_0 + 220)
								loc_3 = add_i32(loc_8, loc_6)
								if loc_3 >= 256 then
									desired = 4
									break
								end
								store_i32(memory_at_0, loc_0 + 220, loc_3)
								loc_1 = load_i32(memory_at_0, loc_0 + 224)
								store_i32(memory_at_0, loc_0 + 224, (if loc_1 > loc_3 then loc_1 else loc_3))
								if loc_4 ~= loc_7 then
									while true do
										loc_3 = 0
										while true do
											FUNC_LIST[199](loc_0, load_i32(memory_at_0, add_i32(shl_i32(loc_3, 2), loc_4)), band_i32(add_i32(loc_3, loc_6), 255), 1)
											loc_3 = add_i32(loc_3, 1)
											loc_4 = load_i32(memory_at_0, loc_5 + 12)
											loc_8 = shr_i32(sub_i32(load_i32(memory_at_0, loc_5 + 16), loc_4), 2)
											if loc_3 < loc_8 then
												continue
											end
											break
										end
										if desired then
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								FUNC_LIST[96](load_i32(memory_at_0, loc_0), 49, loc_2, band_i32(loc_6, 255), band_i32(sub_i32(add_i32(loc_6, loc_8), 1), 255))
								loc_0 = load_i32(memory_at_0, loc_5 + 12)
								if loc_0 == 0 then
									desired = 2
									break
								end
								store_i32(memory_at_0, loc_5 + 16, loc_0)
								FUNC_LIST[609](loc_0)
								desired = 2
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[212](loc_0, loc_1, 0)
							loc_3 = reg_0
							FUNC_LIST[96](load_i32(memory_at_0, loc_0), 3, loc_2, 0, 1)
							reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
							loc_4 = reg_0
							FUNC_LIST[96](load_i32(memory_at_0, loc_0), 3, loc_2, 1, 0)
							reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), loc_3, loc_4)
							if reg_0 ~= 0 then
								desired = 2
								break
							end
							FUNC_LIST[147](add_i32(loc_1, 8), 4545, 0)
							error("out of code bounds")
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[222](loc_0, loc_1, loc_2, loc_3)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_5 + 4, 255)
					store_i32(memory_at_0, loc_5, loc_8)
					FUNC_LIST[147](add_i32(loc_1, 8), 5468, loc_5)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[213](loc_0, load_i32(memory_at_0, loc_1 + 28), add_i32(loc_5, 24))
				loc_3 = reg_0
				reg_0 = FUNC_LIST[213](loc_0, load_i32(memory_at_0, loc_1 + 32), add_i32(loc_5, 24))
				loc_4 = reg_0
				loc_6 = load_i32(memory_at_0, loc_0)
				loc_0 = 0
				loc_1 = load_i32(memory_at_0, loc_1 + 24)
				reg_0 = loc_6
				if loc_1 <= 6 then
					while true do
						reg_1 = load_i32(memory_at_0, add_i32(shl_i32(loc_1, 2), 12360))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_1 = loc_0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_0 = reg_1
				FUNC_LIST[96](reg_0, loc_0, loc_2, loc_3, loc_4)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, load_i32(memory_at_0, loc_5 + 24) + 220, load_i32(memory_at_0, loc_5 + 28))
			GLOBAL_LIST[0].value = add_i32(loc_5, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[147](add_i32(loc_7, 8), 4438, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[220] = --[[ Luau::Compiler::compileExprIfElse(Luau::AstExprIfElse*, unsigned char, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_14 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_14
		loc_12 = load_i32(memory_at_0, loc_1 + 24)
		while true do
			while true do
				while true do
					loc_19 = load_i32(memory_at_0, loc_0 + 120)
					if loc_19 == 0 then
						break
					end
					loc_7 = load_i32(memory_at_0, loc_0 + 124)
					if loc_12 == loc_7 then
						break
					end
					loc_8 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
					loc_11 = load_i32(memory_at_0, loc_0 + 112)
					loc_15 = bxor_i32(shr_u32(loc_12, 4), shr_u32(loc_12, 9))
					loc_5 = loc_15
					while true do
						loc_9 = band_i32(loc_5, loc_8)
						loc_6 = add_i32(shl_i32(loc_9, 5), loc_11)
						loc_5 = load_i32(memory_at_0, loc_6)
						if loc_5 ~= loc_12 then
							while true do
								if loc_5 == loc_7 then
									desired = 3
									break
								end
								loc_4 = add_i32(loc_4, 1)
								loc_5 = add_i32(loc_9, loc_4)
								if loc_4 <= loc_8 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if load_i32(memory_at_0, loc_6 + 8) == 0 then
						break
					end
					loc_4 = 0
					while true do
						while true do
							loc_9 = band_i32(loc_8, loc_15)
							loc_6 = add_i32(shl_i32(loc_9, 5), loc_11)
							loc_5 = load_i32(memory_at_0, loc_6)
							if loc_5 ~= loc_12 then
								while true do
									if loc_5 == loc_7 then
										desired = 4
										break
									end
									loc_4 = add_i32(loc_4, 1)
									loc_15 = add_i32(loc_9, loc_4)
									if loc_4 <= loc_8 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							while true do
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 2, 2, 0, }
									end)()
								end
								temp = br_map[1][load_i32(memory_at_0, loc_6 + 8)] or 1
								if temp < 1 then
									break
								elseif temp > 1 then
									desired = 4
									break
								else
									desired = 5
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if load_i32_u8(memory_at_0, loc_6 + 16) == 0 then
								desired = 4
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[199](loc_0, load_i32(memory_at_0, loc_1 + 32), loc_2, loc_3)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[199](loc_0, load_i32(memory_at_0, loc_1 + 40), loc_2, loc_3)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = load_i32(memory_at_0, loc_12 + 4)
				loc_9 = load_i32(memory_at_0, 47220)
				while true do
					while true do
						if loc_12 ~= 0 then
							while true do
								loc_8 = loc_12
								if loc_4 == loc_9 then
									desired = 4
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_7 = load_i32(memory_at_0, 47300)
						loc_5 = load_i32(memory_at_0, 47180)
						loc_8 = loc_12
						while true do
							if band_i32((if loc_4 ~= loc_5 then 1 else 0), (if loc_4 ~= loc_7 then 1 else 0)) ~= 0 then
								desired = 3
								break
							end
							loc_8 = load_i32(memory_at_0, loc_8 + 24)
							loc_4 = load_i32(memory_at_0, loc_8 + 4)
							if loc_8 == 0 then
								continue
							end
							if loc_4 ~= loc_9 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if load_i32(memory_at_0, loc_0 + 60) == 0 then
						break
					end
					loc_6 = load_i32(memory_at_0, loc_8 + 24)
					loc_11 = load_i32(memory_at_0, loc_0 + 64)
					if loc_6 == loc_11 then
						break
					end
					loc_5 = bxor_i32(shr_u32(loc_6, 4), shr_u32(loc_6, 9))
					loc_8 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
					loc_15 = load_i32(memory_at_0, loc_0 + 52)
					loc_4 = 0
					while true do
						loc_7 = band_i32(loc_5, loc_8)
						loc_10 = add_i32(mul_i32(loc_7, 12), loc_15)
						loc_5 = load_i32(memory_at_0, loc_10)
						if loc_5 ~= loc_6 then
							while true do
								if loc_5 == loc_11 then
									desired = 3
									break
								end
								loc_4 = add_i32(loc_4, 1)
								loc_5 = add_i32(loc_7, loc_4)
								if loc_4 <= loc_8 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if load_i32_u8(memory_at_0, loc_10 + 5) == 0 then
						break
					end
					loc_17 = load_i32_u8(memory_at_0, loc_10 + 4)
					loc_13 = load_i32(memory_at_0, loc_1 + 32)
					loc_4 = loc_13
					while true do
						loc_16 = load_i32(memory_at_0, loc_13 + 4)
						loc_20 = bor_i32((if loc_13 == 0 then 1 else 0), (if loc_9 ~= loc_16 then 1 else 0))
						if loc_20 ~= 0 then
							while true do
								loc_6 = load_i32(memory_at_0, 47300)
								loc_7 = load_i32(memory_at_0, 47180)
								loc_5 = loc_16
								while true do
									if band_i32((if loc_5 ~= loc_7 then 1 else 0), (if loc_5 ~= loc_6 then 1 else 0)) ~= 0 then
										desired = 4
										break
									end
									loc_4 = load_i32(memory_at_0, loc_4 + 24)
									loc_5 = load_i32(memory_at_0, loc_4 + 4)
									if loc_4 == 0 then
										continue
									end
									if loc_5 ~= loc_9 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = load_i32(memory_at_0, loc_4 + 24)
						if loc_11 == loc_6 then
							break
						end
						loc_5 = bxor_i32(shr_u32(loc_6, 4), shr_u32(loc_6, 9))
						loc_4 = 0
						while true do
							loc_7 = band_i32(loc_5, loc_8)
							loc_10 = add_i32(mul_i32(loc_7, 12), loc_15)
							loc_5 = load_i32(memory_at_0, loc_10)
							if loc_5 ~= loc_6 then
								while true do
									if loc_5 == loc_11 then
										desired = 4
										break
									end
									loc_4 = add_i32(loc_4, 1)
									loc_5 = add_i32(loc_7, loc_4)
									if loc_4 <= loc_8 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if load_i32_u8(memory_at_0, loc_10 + 5) == 0 then
							break
						end
						if load_i32_u8(memory_at_0, loc_10 + 4) ~= loc_17 then
							break
						end
						loc_6 = load_i32(memory_at_0, loc_1 + 40)
						loc_4 = load_i32(memory_at_0, loc_6 + 4)
						while true do
							while true do
								while true do
									if loc_6 ~= 0 then
										while true do
											loc_5 = loc_6
											if loc_4 == loc_9 then
												desired = 7
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_10 = load_i32(memory_at_0, 47300)
									loc_7 = load_i32(memory_at_0, 47180)
									loc_5 = loc_6
									while true do
										if band_i32((if loc_4 ~= loc_7 then 1 else 0), (if loc_4 ~= loc_10 then 1 else 0)) ~= 0 then
											desired = 6
											break
										end
										loc_5 = load_i32(memory_at_0, loc_5 + 24)
										loc_4 = load_i32(memory_at_0, loc_5 + 4)
										if loc_5 == 0 then
											continue
										end
										if loc_4 ~= loc_9 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_10 = load_i32(memory_at_0, loc_5 + 24)
								if loc_11 == loc_10 then
									break
								end
								loc_5 = bxor_i32(shr_u32(loc_10, 4), shr_u32(loc_10, 9))
								loc_4 = 0
								while true do
									loc_7 = band_i32(loc_5, loc_8)
									loc_18 = add_i32(mul_i32(loc_7, 12), loc_15)
									loc_5 = load_i32(memory_at_0, loc_18)
									if loc_5 ~= loc_10 then
										while true do
											if loc_5 == loc_11 then
												desired = 6
												break
											end
											loc_4 = add_i32(loc_4, 1)
											loc_5 = add_i32(loc_7, loc_4)
											if loc_4 <= loc_8 then
												desired = 7
												break
											end
											desired = 6
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if load_i32_u8(memory_at_0, loc_18 + 5) ~= 0 then
									desired = 5
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_19 == 0 then
								desired = 4
								break
							end
							loc_18 = load_i32(memory_at_0, loc_0 + 124)
							if loc_6 == loc_18 then
								desired = 4
								break
							end
							loc_5 = bxor_i32(shr_u32(loc_6, 4), shr_u32(loc_6, 9))
							loc_7 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
							loc_21 = load_i32(memory_at_0, loc_0 + 112)
							loc_4 = 0
							while true do
								loc_10 = band_i32(loc_5, loc_7)
								loc_22 = add_i32(shl_i32(loc_10, 5), loc_21)
								loc_5 = load_i32(memory_at_0, loc_22)
								if loc_5 ~= loc_6 then
									while true do
										if loc_5 == loc_18 then
											desired = 4
											break
										end
										loc_4 = add_i32(loc_4, 1)
										loc_5 = add_i32(loc_10, loc_4)
										if loc_4 <= loc_7 then
											desired = 6
											break
										end
										desired = 4
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if load_i32(memory_at_0, loc_22 + 8) == 0 then
								desired = 4
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[223](loc_0, 0, loc_17, loc_6, loc_2)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = load_i32(memory_at_0, loc_1 + 40)
					loc_5 = load_i32(memory_at_0, loc_4 + 4)
					if (if loc_5 == loc_9 then loc_4 else 0) == 0 then
						while true do
							loc_6 = load_i32(memory_at_0, 47300)
							loc_7 = load_i32(memory_at_0, 47180)
							while true do
								if band_i32((if loc_5 ~= loc_7 then 1 else 0), (if loc_5 ~= loc_6 then 1 else 0)) ~= 0 then
									desired = 3
									break
								end
								loc_4 = load_i32(memory_at_0, loc_4 + 24)
								loc_5 = load_i32(memory_at_0, loc_4 + 4)
								if loc_4 == 0 then
									continue
								end
								if loc_5 ~= loc_9 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = load_i32(memory_at_0, loc_4 + 24)
					if loc_11 == loc_6 then
						break
					end
					loc_5 = bxor_i32(shr_u32(loc_6, 4), shr_u32(loc_6, 9))
					loc_4 = 0
					while true do
						loc_7 = band_i32(loc_5, loc_8)
						loc_10 = add_i32(mul_i32(loc_7, 12), loc_15)
						loc_5 = load_i32(memory_at_0, loc_10)
						if loc_5 ~= loc_6 then
							while true do
								if loc_5 == loc_11 then
									desired = 3
									break
								end
								loc_4 = add_i32(loc_4, 1)
								loc_5 = add_i32(loc_7, loc_4)
								if loc_4 <= loc_8 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if load_i32_u8(memory_at_0, loc_10 + 5) == 0 then
						break
					end
					if load_i32_u8(memory_at_0, loc_10 + 4) ~= loc_17 then
						break
					end
					loc_4 = loc_13
					while true do
						while true do
							if loc_20 ~= 0 then
								while true do
									loc_7 = load_i32(memory_at_0, 47300)
									loc_5 = load_i32(memory_at_0, 47180)
									while true do
										if band_i32((if loc_5 ~= loc_16 then 1 else 0), (if loc_7 ~= loc_16 then 1 else 0)) ~= 0 then
											desired = 5
											break
										end
										loc_4 = load_i32(memory_at_0, loc_4 + 24)
										loc_16 = load_i32(memory_at_0, loc_4 + 4)
										if loc_4 == 0 then
											continue
										end
										if loc_9 ~= loc_16 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_7 = load_i32(memory_at_0, loc_4 + 24)
							if loc_11 == loc_7 then
								break
							end
							loc_5 = bxor_i32(shr_u32(loc_7, 4), shr_u32(loc_7, 9))
							loc_4 = 0
							while true do
								loc_9 = band_i32(loc_5, loc_8)
								loc_6 = add_i32(mul_i32(loc_9, 12), loc_15)
								loc_5 = load_i32(memory_at_0, loc_6)
								if loc_5 ~= loc_7 then
									while true do
										if loc_5 == loc_11 then
											desired = 5
											break
										end
										loc_4 = add_i32(loc_4, 1)
										loc_5 = add_i32(loc_9, loc_4)
										if loc_4 <= loc_8 then
											desired = 6
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if load_i32_u8(memory_at_0, loc_6 + 5) ~= 0 then
								desired = 4
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_19 == 0 then
							desired = 3
							break
						end
						loc_7 = load_i32(memory_at_0, loc_0 + 124)
						if loc_13 == loc_7 then
							desired = 3
							break
						end
						loc_8 = bxor_i32(shr_u32(loc_13, 4), shr_u32(loc_13, 9))
						loc_5 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
						loc_11 = load_i32(memory_at_0, loc_0 + 112)
						loc_4 = 0
						while true do
							loc_9 = band_i32(loc_5, loc_8)
							loc_6 = add_i32(shl_i32(loc_9, 5), loc_11)
							loc_8 = load_i32(memory_at_0, loc_6)
							if loc_8 ~= loc_13 then
								while true do
									if loc_7 == loc_8 then
										desired = 3
										break
									end
									loc_4 = add_i32(loc_4, 1)
									loc_8 = add_i32(loc_9, loc_4)
									if loc_4 <= loc_5 then
										desired = 5
										break
									end
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if load_i32(memory_at_0, loc_6 + 8) == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[223](loc_0, 1, loc_17, loc_13, loc_2)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_14 + 12, 0)
				store_i64(memory_at_0, loc_14 + 4, i64_ZERO)
				FUNC_LIST[193](loc_0, loc_12, 0, add_i32(loc_14, 4), 0)
				FUNC_LIST[199](loc_0, load_i32(memory_at_0, loc_1 + 32), loc_2, loc_3)
				reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
				loc_5 = reg_0
				FUNC_LIST[97](load_i32(memory_at_0, loc_0), 23, 0, 0)
				reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
				loc_8 = reg_0
				FUNC_LIST[199](loc_0, load_i32(memory_at_0, loc_1 + 40), loc_2, loc_3)
				reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
				loc_9 = reg_0
				while true do
					loc_4 = load_i32(memory_at_0, loc_14 + 4)
					loc_12 = load_i32(memory_at_0, loc_14 + 8)
					if loc_4 == loc_12 then
						break
					end
					while true do
						reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_4), loc_8)
						if reg_0 ~= 0 then
							while true do
								loc_4 = add_i32(loc_4, 4)
								if loc_4 ~= loc_12 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), loc_5, loc_9)
				if reg_0 == 0 then
					desired = 1
					break
				end
				loc_4 = load_i32(memory_at_0, loc_14 + 4)
				if loc_4 == 0 then
					break
				end
				store_i32(memory_at_0, loc_14 + 8, loc_4)
				FUNC_LIST[609](loc_4)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = add_i32(loc_14, 16)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[147](add_i32(loc_1, 8), 4545, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[221] = --[[ Luau::Compiler::compileExprInterpString(Luau::AstExprInterpString*, unsigned char, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_5
		loc_4 = load_i32(memory_at_0, loc_1 + 28)
		if loc_4 ~= 0 then
			while true do
				loc_11 = load_i32(memory_at_0, loc_1 + 24)
				loc_14 = add_i32(loc_11, shl_i32(loc_4, 3))
				while true do
					while true do
						loc_13 = load_i32(memory_at_0, loc_11 + 4)
						if loc_13 == 0 then
							while true do
								loc_6 = 0
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_4 = load_i32(memory_at_0, loc_11)
						loc_9 = band_i32(loc_13, 3)
						loc_7 = 0
						while true do
							if loc_13 < 4 then
								while true do
									loc_6 = 0
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_8 = band_i32(loc_13, 4294967292)
							loc_6 = 0
							loc_10 = 0
							while true do
								loc_6 = add_i32(add_i32(add_i32(add_i32((if load_i32_u8(memory_at_0, loc_4) == 37 then 1 else 0), loc_6), (if load_i32_u8(memory_at_0, loc_4 + 1) == 37 then 1 else 0)), (if load_i32_u8(memory_at_0, loc_4 + 2) == 37 then 1 else 0)), (if load_i32_u8(memory_at_0, loc_4 + 3) == 37 then 1 else 0))
								loc_4 = add_i32(loc_4, 4)
								loc_10 = add_i32(loc_10, 4)
								if loc_8 ~= loc_10 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						if loc_9 == 0 then
							break
						end
						while true do
							loc_6 = add_i32((if load_i32_u8(memory_at_0, loc_4) == 37 then 1 else 0), loc_6)
							loc_4 = add_i32(loc_4, 1)
							loc_7 = add_i32(loc_7, 1)
							if loc_9 ~= loc_7 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_12 = add_i32(loc_6, add_i32(loc_12, loc_13))
					loc_11 = add_i32(loc_11, 8)
					if loc_14 ~= loc_11 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		store_i32(memory_at_0, loc_5 + 72, 0)
		store_i64(memory_at_0, loc_5 + 64, i64_ZERO)
		FUNC_LIST[673](sub_i32(loc_5, 4294967232), loc_12)
		loc_8 = load_i32(memory_at_0, loc_1 + 28)
		if loc_8 ~= 0 then
			while true do
				loc_9 = load_i32(memory_at_0, loc_1 + 24)
				loc_11 = add_i32(loc_9, shl_i32(loc_8, 3))
				while true do
					while true do
						loc_10 = load_i32(memory_at_0, loc_9)
						loc_7 = load_i32(memory_at_0, loc_9 + 4)
						reg_0 = FUNC_LIST[564](loc_10, 37, loc_7)
						if reg_0 ~= 0 then
							while true do
								loc_4 = 0
								if loc_7 == 0 then
									desired = 3
									break
								end
								while true do
									loc_6 = load_i32_i8(memory_at_0, add_i32(loc_4, loc_10))
									FUNC_LIST[680](sub_i32(loc_5, 4294967232), loc_6)
									if loc_6 == 37 then
										while true do
											FUNC_LIST[680](sub_i32(loc_5, 4294967232), 37)
											break
										end
										if desired then
											if desired == 5 then
												desired = nil
												continue
											end
											break
										end
									end
									loc_4 = add_i32(loc_4, 1)
									if loc_7 ~= loc_4 then
										continue
									end
									break
								end
								if desired then
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						reg_0 = FUNC_LIST[675](sub_i32(loc_5, 4294967232), loc_10, loc_7)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_8 = sub_i32(loc_8, 1)
					if loc_8 ~= 0 then
						while true do
							reg_0 = FUNC_LIST[686](sub_i32(loc_5, 4294967232), 6839)
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_9 = add_i32(loc_9, 8)
					if loc_11 ~= loc_9 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_4 = load_i32_i8(memory_at_0, loc_5 + 75)
		loc_6 = (if lt_i32(loc_4, 0) then 1 else 0)
		loc_4 = (if loc_6 ~= 0 then load_i32(memory_at_0, loc_5 + 68) else loc_4)
		reg_1 = FUNC_LIST[608](loc_4)
		loc_7 = reg_1
		store_i32(memory_at_0, loc_5 + 60, loc_7)
		reg_0 = FUNC_LIST[477](loc_7, (if loc_6 ~= 0 then load_i32(memory_at_0, loc_5 + 64) else sub_i32(loc_5, 4294967232)), loc_4)
		loc_6 = reg_0
		while true do
			loc_7 = load_i32(memory_at_0, loc_0 + 308)
			if loc_7 < load_i32(memory_at_0, loc_0 + 312) then
				while true do
					store_i32(memory_at_0, loc_5 + 60, 0)
					store_i32(memory_at_0, loc_7, loc_6)
					store_i32(memory_at_0, loc_0 + 308, add_i32(loc_7, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[224](add_i32(loc_0, 304), add_i32(loc_5, 60))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_7 = load_i32(memory_at_0, loc_0)
		store_i32(memory_at_0, loc_5 + 56, loc_4)
		store_i32(memory_at_0, loc_5 + 52, loc_6)
		store_i64(memory_at_0, loc_5 + 24, load_i64(memory_at_0, loc_5 + 52))
		while true do
			reg_0 = FUNC_LIST[86](loc_7, add_i32(loc_5, 24))
			loc_6 = reg_0
			if lt_i32(loc_6, 0) then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				loc_7 = add_i32(load_i32(memory_at_0, loc_1 + 36), 2)
				loc_8 = load_i32(memory_at_0, loc_0 + 220)
				loc_4 = add_i32(loc_7, loc_8)
				if loc_4 < 256 then
					while true do
						store_i32(memory_at_0, loc_0 + 220, loc_4)
						loc_7 = load_i32(memory_at_0, loc_0 + 224)
						store_i32(memory_at_0, loc_0 + 224, (if loc_4 < loc_7 then loc_7 else loc_4))
						loc_4 = load_i32(memory_at_0, loc_0)
						while true do
							if loc_6 <= 32767 then
								while true do
									FUNC_LIST[97](loc_4, 5, band_i32(loc_8, 255), extend_i32_n16(loc_6))
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[97](loc_4, 66, band_i32(loc_8, 255), 0)
							FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_6)
							break
						end
						if desired then
							break
						end
						if load_i32(memory_at_0, loc_1 + 36) ~= 0 then
							while true do
								loc_10 = add_i32(loc_8, 2)
								loc_9 = load_i32(memory_at_0, loc_0 + 220)
								loc_4 = 0
								while true do
									loc_6 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 32), shl_i32(loc_4, 2)))
									loc_7 = band_i32(add_i32(loc_4, loc_10), 255)
									store_i32(memory_at_0, loc_0 + 220, add_i32(loc_7, 1))
									FUNC_LIST[199](loc_0, loc_6, loc_7, 1)
									store_i32(memory_at_0, loc_0 + 220, loc_9)
									loc_4 = add_i32(loc_4, 1)
									if loc_4 < load_i32(memory_at_0, loc_1 + 36) then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								break
							end
						end
						loc_4 = load_i32(memory_at_0, loc_0)
						store_i32(memory_at_0, loc_5 + 48, 6)
						store_i32(memory_at_0, loc_5 + 44, 1891)
						store_i64(memory_at_0, loc_5 + 16, load_i64(memory_at_0, loc_5 + 44))
						reg_0 = FUNC_LIST[86](loc_4, add_i32(loc_5, 16))
						loc_6 = reg_0
						if lt_i32(loc_6, 0) then
							desired = 2
							break
						end
						loc_7 = load_i32(memory_at_0, loc_0)
						store_i32(memory_at_0, loc_5 + 40, 6)
						store_i32(memory_at_0, loc_5 + 36, 1891)
						store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_5 + 36))
						loc_4 = band_i32(loc_8, 255)
						reg_4 = FUNC_LIST[116](add_i32(loc_5, 8))
						FUNC_LIST[96](loc_7, 20, loc_4, loc_4, band_i32(reg_4, 255))
						FUNC_LIST[98](load_i32(memory_at_0, loc_0), loc_6)
						FUNC_LIST[96](load_i32(memory_at_0, loc_0), 21, loc_4, band_i32(add_i32(load_i32_u8(memory_at_0, loc_1 + 36), 2), 255), 2)
						FUNC_LIST[96](load_i32(memory_at_0, loc_0), 6, loc_2, loc_4, 0)
						store_i32(memory_at_0, loc_0 + 220, loc_8)
						loc_4 = load_i32(memory_at_0, loc_5 + 60)
						store_i32(memory_at_0, loc_5 + 60, 0)
						if loc_4 ~= 0 then
							while true do
								FUNC_LIST[8](loc_4)
								break
							end
							if desired then
								break
							end
						end
						if lt_i32(load_i32_i8(memory_at_0, loc_5 + 75), 0) then
							while true do
								FUNC_LIST[609](load_i32(memory_at_0, loc_5 + 64))
								break
							end
							if desired then
								break
							end
						end
						GLOBAL_LIST[0].value = add_i32(loc_5, 80)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				store_i32(memory_at_0, loc_5 + 4, 255)
				store_i32(memory_at_0, loc_5, loc_7)
				FUNC_LIST[147](add_i32(loc_1, 8), 5468, loc_5)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[147](add_i32(loc_1, 8), 4438, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[222] = --[[ Luau::Compiler::compileExprAndOr(Luau::AstExprBinary*, unsigned char, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_6 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_6
		loc_11 = load_i32(memory_at_0, loc_1 + 24)
		store_i32(memory_at_0, loc_6 + 24, loc_0)
		store_i32(memory_at_0, loc_6 + 28, load_i32(memory_at_0, loc_0 + 220))
		loc_7 = load_i32(memory_at_0, loc_1 + 28)
		while true do
			while true do
				while true do
					if load_i32(memory_at_0, loc_0 + 120) == 0 then
						break
					end
					loc_9 = load_i32(memory_at_0, loc_0 + 124)
					if loc_9 == loc_7 then
						break
					end
					loc_5 = bxor_i32(shr_u32(loc_7, 4), shr_u32(loc_7, 9))
					loc_8 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
					loc_13 = load_i32(memory_at_0, loc_0 + 112)
					while true do
						loc_10 = band_i32(loc_5, loc_8)
						loc_12 = add_i32(shl_i32(loc_10, 5), loc_13)
						loc_5 = load_i32(memory_at_0, loc_12)
						if loc_5 ~= loc_7 then
							while true do
								if loc_5 == loc_9 then
									desired = 3
									break
								end
								loc_4 = add_i32(loc_4, 1)
								loc_5 = add_i32(loc_10, loc_4)
								if loc_4 <= loc_8 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = 0
					while true do
						while true do
							while true do
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 3, 2, 0, }
									end)()
								end
								temp = br_map[1][load_i32(memory_at_0, loc_12 + 8)] or 1
								if temp < 2 then
									if temp < 1 then
										break
									else
										desired = 5
										break
									end
								elseif temp > 2 then
									desired = 3
									break
								else
									desired = 4
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_4 = load_i32_u8(memory_at_0, loc_12 + 16)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[199](loc_0, load_i32(memory_at_0, add_i32((if bxor_i32(loc_4, (if loc_11 == 14 then 1 else 0)) ~= 0 then 28 else 32), loc_1)), loc_2, loc_3)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					reg_0 = FUNC_LIST[226](loc_0, loc_7)
					if reg_0 ~= 0 then
						break
					end
					loc_10 = load_i32(memory_at_0, 47220)
					loc_9 = load_i32(memory_at_0, loc_1 + 32)
					loc_4 = load_i32(memory_at_0, loc_9 + 4)
					while true do
						while true do
							if loc_9 ~= 0 then
								while true do
									loc_5 = loc_9
									if loc_4 == loc_10 then
										desired = 5
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_7 = load_i32(memory_at_0, 47300)
							loc_8 = load_i32(memory_at_0, 47180)
							loc_5 = loc_9
							while true do
								if band_i32((if loc_4 ~= loc_8 then 1 else 0), (if loc_4 ~= loc_7 then 1 else 0)) ~= 0 then
									desired = 4
									break
								end
								loc_5 = load_i32(memory_at_0, loc_5 + 24)
								loc_4 = load_i32(memory_at_0, loc_5 + 4)
								if loc_5 == 0 then
									continue
								end
								if loc_4 ~= loc_10 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if load_i32(memory_at_0, loc_0 + 60) == 0 then
							break
						end
						loc_7 = load_i32(memory_at_0, loc_5 + 24)
						loc_13 = load_i32(memory_at_0, loc_0 + 64)
						if loc_7 == loc_13 then
							break
						end
						loc_5 = bxor_i32(shr_u32(loc_7, 4), shr_u32(loc_7, 9))
						loc_8 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
						loc_12 = load_i32(memory_at_0, loc_0 + 52)
						loc_4 = 0
						while true do
							loc_10 = band_i32(loc_5, loc_8)
							loc_14 = add_i32(mul_i32(loc_10, 12), loc_12)
							loc_5 = load_i32(memory_at_0, loc_14)
							if loc_5 ~= loc_7 then
								while true do
									if loc_5 == loc_13 then
										desired = 4
										break
									end
									loc_4 = add_i32(loc_4, 1)
									loc_5 = add_i32(loc_10, loc_4)
									if loc_4 <= loc_8 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if load_i32_u8(memory_at_0, loc_14 + 5) == 0 then
							break
						end
						loc_4 = load_i32_u8(memory_at_0, loc_14 + 4)
						reg_0 = FUNC_LIST[213](loc_0, load_i32(memory_at_0, loc_1 + 28), add_i32(loc_6, 24))
						loc_5 = reg_0
						FUNC_LIST[96](load_i32(memory_at_0, loc_0), (if loc_11 == 14 then 45 else 46), loc_2, loc_5, loc_4)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[214](loc_0, loc_9)
					loc_4 = reg_0
					if loc_4 > 255 then
						break
					end
					reg_0 = FUNC_LIST[213](loc_0, load_i32(memory_at_0, loc_1 + 28), add_i32(loc_6, 24))
					loc_5 = reg_0
					FUNC_LIST[96](load_i32(memory_at_0, loc_0), (if loc_11 == 14 then 47 else 48), loc_2, loc_5, band_i32(loc_4, 255))
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = loc_2
				if loc_3 == 0 then
					while true do
						loc_4 = load_i32(memory_at_0, loc_0 + 220)
						loc_5 = add_i32(loc_4, 1)
						if loc_5 >= 256 then
							desired = 1
							break
						end
						store_i32(memory_at_0, loc_0 + 220, loc_5)
						loc_8 = load_i32(memory_at_0, loc_0 + 224)
						store_i32(memory_at_0, loc_0 + 224, (if loc_5 < loc_8 then loc_8 else loc_5))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				store_i32_n8(memory_at_0, loc_6 + 23, loc_4)
				store_i32(memory_at_0, loc_6 + 16, 0)
				store_i64(memory_at_0, loc_6 + 8, i64_ZERO)
				FUNC_LIST[193](loc_0, load_i32(memory_at_0, loc_1 + 28), add_i32(loc_6, 23), add_i32(loc_6, 8), (if loc_11 ~= 14 then 1 else 0))
				FUNC_LIST[199](loc_0, load_i32(memory_at_0, loc_1 + 32), load_i32_u8(memory_at_0, loc_6 + 23), 1)
				reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
				loc_5 = reg_0
				while true do
					loc_4 = load_i32(memory_at_0, loc_6 + 8)
					loc_8 = load_i32(memory_at_0, loc_6 + 12)
					if loc_4 == loc_8 then
						break
					end
					while true do
						reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_4), loc_5)
						if reg_0 ~= 0 then
							while true do
								loc_4 = add_i32(loc_4, 4)
								if loc_4 ~= loc_8 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[147](add_i32(loc_1, 8), 4545, 0)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = load_i32_u8(memory_at_0, loc_6 + 23)
				if loc_4 ~= loc_2 then
					while true do
						FUNC_LIST[96](load_i32(memory_at_0, loc_0), 6, loc_2, loc_4, 0)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = load_i32(memory_at_0, loc_6 + 8)
				if loc_4 == 0 then
					break
				end
				store_i32(memory_at_0, loc_6 + 12, loc_4)
				FUNC_LIST[609](loc_4)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, load_i32(memory_at_0, loc_6 + 24) + 220, load_i32(memory_at_0, loc_6 + 28))
			GLOBAL_LIST[0].value = add_i32(loc_6, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, loc_6, i64_from_u32(1, 255))
		FUNC_LIST[147](add_i32(loc_1, 8), 5468, loc_6)
		error("out of code bounds")
	end
end
FUNC_LIST[223] = --[[ Luau::Compiler::compileExprIfElseAndOr(bool, unsigned char, Luau::AstExpr*, unsigned char) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		while true do
			reg_0 = FUNC_LIST[214](loc_0, loc_3)
			loc_6 = reg_0
			if loc_6 <= 255 then
				while true do
					FUNC_LIST[96](load_i32(memory_at_0, loc_0), (if loc_1 ~= 0 then 47 else 48), loc_4, loc_2, band_i32(loc_6, 255))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			store_i32(memory_at_0, loc_5 + 8, loc_0)
			store_i32(memory_at_0, loc_5 + 12, load_i32(memory_at_0, loc_0 + 220))
			reg_0 = FUNC_LIST[213](loc_0, loc_3, add_i32(loc_5, 8))
			loc_3 = reg_0
			FUNC_LIST[96](load_i32(memory_at_0, loc_0), (if loc_1 ~= 0 then 45 else 46), loc_4, loc_2, loc_3)
			store_i32(memory_at_0, load_i32(memory_at_0, loc_5 + 8) + 220, load_i32(memory_at_0, loc_5 + 12))
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_5, 16)
		break
	end
end
FUNC_LIST[224] = --[[ void std::__2::vector<std::__2::unique_ptr<char [], std::__2::default_delete<char []>>, std::__2::allocator<std::__2::unique_ptr<char [], std::__2::default_delete<char []>>>>::__emplace_back_slow_path<std::__2::unique_ptr<char [], std::__2::default_delete<char []>>>(std::__2::unique_ptr<char [], std::__2::default_delete<char []>>&&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_4 = load_i32(memory_at_0, loc_0)
					loc_5 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 4), loc_4), 2)
					loc_2 = add_i32(loc_5, 1)
					if loc_2 < 1073741824 then
						while true do
							loc_4 = sub_i32(load_i32(memory_at_0, loc_0 + 8), loc_4)
							loc_6 = shr_i32(loc_4, 1)
							loc_2 = (if loc_4 >= 2147483644 then 1073741823 else (if loc_2 < loc_6 then loc_6 else loc_2))
							if loc_2 ~= 0 then
								while true do
									if loc_2 >= 1073741824 then
										desired = 3
										break
									end
									reg_0 = FUNC_LIST[606](shl_i32(loc_2, 2))
									break
								end
								if desired then
									break
								end
							else
								while true do
									reg_0 = loc_3
									break
								end
								if desired then
									break
								end
							end
							loc_3 = reg_0
							loc_4 = load_i32(memory_at_0, loc_1)
							store_i32(memory_at_0, loc_1, 0)
							loc_1 = add_i32(shl_i32(loc_5, 2), loc_3)
							store_i32(memory_at_0, loc_1, loc_4)
							loc_5 = add_i32(shl_i32(loc_2, 2), loc_3)
							loc_6 = add_i32(loc_1, 4)
							loc_3 = load_i32(memory_at_0, loc_0 + 4)
							loc_4 = load_i32(memory_at_0, loc_0)
							if loc_3 == loc_4 then
								desired = 2
								break
							end
							while true do
								loc_3 = sub_i32(loc_3, 4)
								loc_2 = load_i32(memory_at_0, loc_3)
								store_i32(memory_at_0, loc_3, 0)
								loc_1 = sub_i32(loc_1, 4)
								store_i32(memory_at_0, loc_1, loc_2)
								if loc_3 ~= loc_4 then
									continue
								end
								break
							end
							if desired then
								break
							end
							store_i32(memory_at_0, loc_0 + 8, loc_5)
							loc_2 = load_i32(memory_at_0, loc_0 + 4)
							store_i32(memory_at_0, loc_0 + 4, loc_6)
							loc_3 = load_i32(memory_at_0, loc_0)
							store_i32(memory_at_0, loc_0, loc_1)
							if loc_2 == loc_3 then
								desired = 1
								break
							end
							while true do
								loc_2 = sub_i32(loc_2, 4)
								loc_1 = load_i32(memory_at_0, loc_2)
								store_i32(memory_at_0, loc_2, 0)
								if loc_1 ~= 0 then
									while true do
										FUNC_LIST[8](loc_1)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								end
								if loc_2 ~= loc_3 then
									continue
								end
								break
							end
							if desired then
								break
							end
							desired = 1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[40](loc_0)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[163]()
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_0 + 8, loc_5)
			store_i32(memory_at_0, loc_0 + 4, loc_6)
			store_i32(memory_at_0, loc_0, loc_1)
			break
		end
		if loc_3 ~= 0 then
			while true do
				FUNC_LIST[609](loc_3)
				break
			end
		end
		break
	end
end
FUNC_LIST[225] = --[[ Luau::Compiler::compileLValueIndex(unsigned char, Luau::AstExpr*, Luau::Compiler::RegScope&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			while true do
				if load_i32(memory_at_0, loc_1 + 120) == 0 then
					break
				end
				loc_9 = load_i32(memory_at_0, loc_1 + 124)
				if loc_3 == loc_9 then
					break
				end
				loc_6 = bxor_i32(shr_u32(loc_3, 4), shr_u32(loc_3, 9))
				loc_8 = sub_i32(load_i32(memory_at_0, loc_1 + 116), 1)
				loc_10 = load_i32(memory_at_0, loc_1 + 112)
				while true do
					loc_11 = band_i32(loc_6, loc_8)
					loc_7 = add_i32(shl_i32(loc_11, 5), loc_10)
					loc_6 = load_i32(memory_at_0, loc_7)
					if loc_6 ~= loc_3 then
						while true do
							if loc_6 == loc_9 then
								desired = 2
								break
							end
							loc_5 = add_i32(loc_5, 1)
							loc_6 = add_i32(loc_11, loc_5)
							if loc_5 <= loc_8 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = load_i32(memory_at_0, loc_7 + 12)
				loc_12 = load_f64(memory_at_0, loc_7 + 16)
				while true do
					loc_5 = load_i32(memory_at_0, loc_7 + 8)
					if loc_5 ~= 3 then
						break
					end
					if (if loc_12 >= 1e0 then 1 else 0) == 0 then
						break
					end
					if (if loc_12 <= 2.56e2 then 1 else 0) == 0 then
						break
					end
					while true do
						if abs_f64(loc_12) < 2.147483648e9 then
							while true do
								reg_0 = truncate_i32_f64(loc_12)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_0 = 2147483648
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_5 = reg_0
					if convert_f64_i32(loc_5) ~= loc_12 then
						desired = 2
						break
					end
					store_i64(memory_at_0, loc_0 + 4, i64_ZERO)
					store_i32(memory_at_0, loc_0, 4)
					store_i32_n8(memory_at_0, loc_0 + 7, sub_i32(loc_5, 1))
					store_i32_n8(memory_at_0, loc_0 + 4, loc_2)
					store_i32(memory_at_0, loc_0 + 12, 0)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_5 ~= 5 then
					break
				end
				store_i64(memory_at_0, loc_0, i64_from_u32(3, 0))
				store_i32(memory_at_0, loc_0 + 12, loc_6)
				store_i64_n32(memory_at_0, loc_0 + 8, reinterpret_i64_f64(loc_12))
				store_i32_n8(memory_at_0, loc_0 + 4, loc_2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_0 + 4, i64_ZERO)
			store_i32(memory_at_0, loc_0, 5)
			store_i32_n8(memory_at_0, loc_0 + 4, loc_2)
			store_i32(memory_at_0, loc_0 + 12, 0)
			reg_1 = FUNC_LIST[213](loc_1, loc_3, loc_4)
			store_i32_n8(memory_at_0, loc_0 + 6, reg_1)
			break
		end
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_3 + 8))
		store_i64(memory_at_0, loc_0 + 24, load_i64(memory_at_0, loc_3 + 16))
		break
	end
end
FUNC_LIST[226] = --[[ Luau::Compiler::isConditionFast(Luau::AstExpr*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				if load_i32(memory_at_0, loc_0 + 120) == 0 then
					break
				end
				loc_5 = load_i32(memory_at_0, loc_0 + 124)
				if loc_1 == loc_5 then
					break
				end
				loc_3 = bxor_i32(shr_u32(loc_1, 4), shr_u32(loc_1, 9))
				loc_4 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
				loc_6 = load_i32(memory_at_0, loc_0 + 112)
				while true do
					loc_7 = band_i32(loc_3, loc_4)
					loc_8 = add_i32(shl_i32(loc_7, 5), loc_6)
					loc_3 = load_i32(memory_at_0, loc_8)
					if loc_3 ~= loc_1 then
						while true do
							if loc_3 == loc_5 then
								desired = 2
								break
							end
							loc_2 = add_i32(loc_2, 1)
							loc_3 = add_i32(loc_7, loc_2)
							if loc_2 <= loc_4 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = 1
				reg_0 = loc_2
				if load_i32(memory_at_0, loc_8 + 8) ~= 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = load_i32(memory_at_0, loc_1 + 4)
			while true do
				if loc_1 == 0 then
					break
				end
				if load_i32(memory_at_0, 47292) ~= loc_2 then
					break
				end
				reg_0 = (if band_i32(load_i32(memory_at_0, loc_1 + 24), 4294967288) == 8 then 1 else 0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = load_i32(memory_at_0, 47180)
			if loc_2 == loc_4 then
				while true do
					reg_0 = FUNC_LIST[226](loc_0, load_i32(memory_at_0, loc_1 + 24))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_3
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = reg_0
			reg_0 = band_i32(loc_3, (if loc_2 == loc_4 then 1 else 0))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_2 = reg_0
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[227] = --[[ Luau::DenseHashSet<Luau::AstLocal*, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>::insert(Luau::AstLocal* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 8)
			loc_6 = load_i32(memory_at_0, loc_0 + 4)
			if loc_3 < shr_u32(mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_3 == 0 then
					break
				end
				loc_4 = load_i32(memory_at_0, loc_1)
				loc_8 = load_i32(memory_at_0, loc_0 + 12)
				if loc_4 == loc_8 then
					break
				end
				loc_2 = bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9))
				loc_7 = sub_i32(loc_6, 1)
				loc_9 = load_i32(memory_at_0, loc_0)
				loc_3 = 0
				while true do
					loc_5 = band_i32(loc_2, loc_7)
					loc_2 = load_i32(memory_at_0, add_i32(shl_i32(loc_5, 2), loc_9))
					if loc_4 == loc_2 then
						desired = 1
						break
					end
					if loc_2 == loc_8 then
						desired = 2
						break
					end
					loc_3 = add_i32(loc_3, 1)
					loc_2 = add_i32(loc_5, loc_3)
					if loc_3 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[228](loc_0)
			loc_6 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_8 = load_i32(memory_at_0, loc_0)
				loc_6 = sub_i32(loc_6, 1)
				loc_5 = load_i32(memory_at_0, loc_1)
				loc_3 = band_i32(loc_6, bxor_i32(shr_u32(loc_5, 4), shr_u32(loc_5, 9)))
				loc_4 = add_i32(loc_8, shl_i32(loc_3, 2))
				loc_2 = load_i32(memory_at_0, loc_4)
				loc_9 = load_i32(memory_at_0, loc_0 + 12)
				if loc_2 == loc_9 then
					break
				end
				if loc_2 == loc_5 then
					desired = 1
					break
				end
				loc_2 = 0
				while true do
					loc_2 = add_i32(loc_2, 1)
					loc_3 = band_i32(loc_6, add_i32(loc_3, loc_2))
					loc_4 = add_i32(shl_i32(loc_3, 2), loc_8)
					loc_7 = load_i32(memory_at_0, loc_4)
					if loc_9 == loc_7 then
						desired = 2
						break
					end
					if loc_5 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_4, loc_5)
			store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[228] = --[[ Luau::detail::DenseHashTable<Luau::AstLocal*, Luau::AstLocal*, Luau::AstLocal*, Luau::detail::ItemInterfaceSet<Luau::AstLocal*>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_11 = load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_10 = load_i32(memory_at_0, loc_0 + 4)
			loc_5 = (if loc_10 ~= 0 then shl_i32(loc_10, 1) else 16)
			if loc_5 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = band_i32(loc_5, 6)
			reg_0 = FUNC_LIST[606](shl_i32(loc_5, 2))
			loc_6 = reg_0
			loc_1 = load_i32(memory_at_0, loc_0 + 12)
			if loc_5 >= 8 then
				while true do
					loc_9 = band_i32(loc_5, 4294967288)
					while true do
						loc_3 = add_i32(shl_i32(loc_2, 2), loc_6)
						store_i32(memory_at_0, loc_3, loc_1)
						store_i32(memory_at_0, loc_3 + 4, loc_1)
						store_i32(memory_at_0, loc_3 + 8, loc_1)
						store_i32(memory_at_0, loc_3 + 12, loc_1)
						store_i32(memory_at_0, loc_3 + 16, loc_1)
						store_i32(memory_at_0, loc_3 + 20, loc_1)
						store_i32(memory_at_0, loc_3 + 24, loc_1)
						store_i32(memory_at_0, loc_3 + 28, loc_1)
						loc_2 = add_i32(loc_2, 8)
						loc_7 = add_i32(loc_7, 8)
						if loc_9 ~= loc_7 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 ~= 0 then
				while true do
					while true do
						store_i32(memory_at_0, add_i32(shl_i32(loc_2, 2), loc_6), loc_1)
						loc_2 = add_i32(loc_2, 1)
						loc_4 = add_i32(loc_4, 1)
						if loc_8 ~= loc_4 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_10 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		if loc_10 ~= 0 then
			while true do
				loc_8 = sub_i32(loc_5, 1)
				loc_9 = 0
				while true do
					loc_4 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_0), shl_i32(loc_9, 2)))
					if loc_4 ~= load_i32(memory_at_0, loc_0 + 12) then
						while true do
							while true do
								while true do
									loc_1 = band_i32(loc_8, bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9)))
									loc_7 = add_i32(shl_i32(loc_1, 2), loc_6)
									loc_2 = load_i32(memory_at_0, loc_7)
									if loc_11 == loc_2 then
										break
									end
									loc_3 = 0
									if loc_2 == loc_4 then
										desired = 4
										break
									end
									while true do
										loc_3 = add_i32(loc_3, 1)
										loc_1 = band_i32(loc_8, add_i32(loc_1, loc_3))
										loc_7 = add_i32(shl_i32(loc_1, 2), loc_6)
										loc_2 = load_i32(memory_at_0, loc_7)
										if loc_11 == loc_2 then
											desired = 5
											break
										end
										if loc_2 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
								store_i32(memory_at_0, loc_7, loc_4)
								break
							end
							if desired then
								break
							end
							store_i32(memory_at_0, loc_7, loc_4)
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_9 = add_i32(loc_9, 1)
					if loc_10 ~= loc_9 then
						continue
					end
					break
				end
				break
			end
		end
		store_i32(memory_at_0, loc_0 + 4, loc_5)
		loc_1 = load_i32(memory_at_0, loc_0)
		store_i32(memory_at_0, loc_0, loc_6)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[229] = --[[ Luau::Compiler::UndefinedLocalVisitor::~UndefinedLocalVisitor() ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0, 11068)
		loc_1 = load_i32(memory_at_0, loc_0 + 12)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_0 + 12, i64_ZERO)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[230] = --[[ Luau::Compiler::UndefinedLocalVisitor::~UndefinedLocalVisitor().1 ]] function(loc_0)
	local loc_1 = 0
	while true do
		store_i32(memory_at_0, loc_0, 11068)
		loc_1 = load_i32(memory_at_0, loc_0 + 12)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				break
			end
		end
		FUNC_LIST[609](loc_0)
		break
	end
end
FUNC_LIST[231] = --[[ Luau::Compiler::UndefinedLocalVisitor::visit(Luau::AstExprLocal*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		while true do
			if load_i32_u8(memory_at_0, loc_1 + 28) ~= 0 then
				break
			end
			if load_i32(memory_at_0, loc_0 + 8) ~= 0 then
				break
			end
			if load_i32(memory_at_0, loc_0 + 20) == 0 then
				break
			end
			loc_5 = load_i32(memory_at_0, loc_0 + 24)
			loc_2 = load_i32(memory_at_0, loc_1 + 24)
			if loc_5 == loc_2 then
				break
			end
			loc_3 = bxor_i32(shr_u32(loc_2, 4), shr_u32(loc_2, 9))
			loc_4 = sub_i32(load_i32(memory_at_0, loc_0 + 16), 1)
			loc_6 = load_i32(memory_at_0, loc_0 + 12)
			loc_1 = 0
			while true do
				loc_7 = band_i32(loc_3, loc_4)
				loc_3 = load_i32(memory_at_0, add_i32(shl_i32(loc_7, 2), loc_6))
				if loc_3 ~= loc_2 then
					while true do
						if loc_3 == loc_5 then
							desired = 1
							break
						end
						loc_1 = add_i32(loc_1, 1)
						loc_3 = add_i32(loc_7, loc_1)
						if loc_1 <= loc_4 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_0 + 8, loc_2)
			break
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[232] = --[[ Luau::Compiler::UndefinedLocalVisitor::visit(Luau::AstExprFunction*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_2 = load_i32(memory_at_0, loc_0 + 4)
			if load_i32(memory_at_0, loc_2 + 40) == 0 then
				break
			end
			loc_6 = load_i32(memory_at_0, loc_2 + 44)
			if loc_1 == loc_6 then
				break
			end
			loc_5 = bxor_i32(shr_u32(loc_1, 4), shr_u32(loc_1, 9))
			loc_7 = sub_i32(load_i32(memory_at_0, loc_2 + 36), 1)
			loc_8 = load_i32(memory_at_0, loc_2 + 32)
			loc_2 = 0
			while true do
				loc_4 = band_i32(loc_5, loc_7)
				loc_3 = add_i32(mul_i32(loc_4, 40), loc_8)
				loc_5 = load_i32(memory_at_0, loc_3)
				if loc_1 == loc_5 then
					desired = 1
					break
				end
				loc_3 = 0
				if loc_5 == loc_6 then
					desired = 1
					break
				end
				loc_2 = add_i32(loc_2, 1)
				loc_5 = add_i32(loc_4, loc_2)
				if loc_2 <= loc_7 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		loc_2 = (if loc_3 ~= 0 then add_i32(loc_3, 8) else 0)
		loc_9 = load_i32(memory_at_0, loc_2 + 4)
		loc_10 = load_i32(memory_at_0, loc_2 + 8)
		if loc_9 ~= loc_10 then
			while true do
				loc_5 = sub_i32(load_i32(memory_at_0, loc_0 + 16), 1)
				loc_11 = sub_i32(load_i32(memory_at_0, loc_1 + 96), 1)
				loc_1 = load_i32(memory_at_0, loc_0 + 8)
				loc_8 = load_i32(memory_at_0, loc_0 + 12)
				loc_6 = load_i32(memory_at_0, loc_0 + 24)
				loc_12 = load_i32(memory_at_0, loc_0 + 20)
				while true do
					while true do
						loc_4 = load_i32(memory_at_0, loc_9)
						if loc_11 ~= load_i32(memory_at_0, loc_4 + 24) then
							break
						end
						if loc_1 ~= 0 then
							break
						end
						if loc_12 == 0 then
							break
						end
						if loc_4 == loc_6 then
							break
						end
						loc_3 = bxor_i32(shr_u32(loc_4, 4), shr_u32(loc_4, 9))
						loc_2 = 0
						while true do
							loc_7 = band_i32(loc_3, loc_5)
							loc_3 = load_i32(memory_at_0, add_i32(shl_i32(loc_7, 2), loc_8))
							if loc_3 ~= loc_4 then
								while true do
									loc_1 = 0
									if loc_3 == loc_6 then
										desired = 3
										break
									end
									loc_2 = add_i32(loc_2, 1)
									loc_3 = add_i32(loc_7, loc_2)
									if loc_2 <= loc_5 then
										desired = 4
										break
									end
									desired = 3
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						store_i32(memory_at_0, loc_0 + 8, loc_4)
						loc_1 = loc_4
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_9 = add_i32(loc_9, 4)
					if loc_10 ~= loc_9 then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[233] = --[[ Luau::Compiler::compileInlinedCall(Luau::AstExprCall*, Luau::AstExprFunction*, unsigned char, unsigned char) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local loc_23 = 0
	local loc_24 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_7
		loc_21 = load_i32(memory_at_0, loc_0 + 220)
		loc_22 = load_i32(memory_at_0, loc_0 + 232)
		loc_23 = load_i32(memory_at_0, loc_0 + 236)
		store_i32(memory_at_0, loc_7 + 76, 0)
		store_i64(memory_at_0, loc_7 + 68, i64_ZERO)
		while true do
			while true do
				loc_5 = load_i32(memory_at_0, loc_2 + 48)
				if loc_5 == 0 then
					while true do
						loc_5 = 0
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_5 >= 134217728 then
					desired = 1
					break
				end
				loc_8 = shl_i32(loc_5, 5)
				reg_1 = FUNC_LIST[606](loc_8)
				loc_6 = reg_1
				store_i32(memory_at_0, loc_7 + 72, loc_6)
				store_i32(memory_at_0, loc_7 + 68, loc_6)
				store_i32(memory_at_0, loc_7 + 76, add_i32(loc_6, loc_8))
				loc_19 = loc_7
				loc_20 = add_i32(loc_19, 48)
				while true do
					loc_8 = loc_17
					loc_13 = shl_i32(loc_8, 2)
					loc_10 = add_i32(loc_13, load_i32(memory_at_0, loc_2 + 44))
					loc_11 = 0
					loc_9 = load_i32(memory_at_0, loc_1 + 32)
					if loc_8 < loc_9 then
						while true do
							reg_0 = load_i32(memory_at_0, add_i32(loc_13, load_i32(memory_at_0, loc_1 + 28)))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					else
						while true do
							reg_0 = loc_11
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_11 = reg_0
					loc_13 = load_i32(memory_at_0, loc_10)
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													loc_17 = add_i32(loc_8, 1)
													if loc_9 ~= loc_17 then
														break
													end
													if loc_5 <= loc_9 then
														break
													end
													reg_0 = FUNC_LIST[201](loc_0, loc_11)
													if reg_0 == 0 then
														break
													end
													loc_10 = add_i32(sub_i32(load_i32(memory_at_0, loc_2 + 48), load_i32(memory_at_0, loc_1 + 32)), 1)
													loc_14 = load_i32(memory_at_0, loc_0 + 220)
													loc_5 = add_i32(loc_10, loc_14)
													if loc_5 >= 256 then
														desired = 10
														break
													end
													store_i32(memory_at_0, loc_0 + 220, loc_5)
													loc_9 = load_i32(memory_at_0, loc_0 + 224)
													store_i32(memory_at_0, loc_0 + 224, (if loc_5 < loc_9 then loc_9 else loc_5))
													while true do
														while true do
															loc_5 = load_i32(memory_at_0, loc_11 + 4)
															if loc_5 ~= load_i32(memory_at_0, 47244) then
																break
															end
															if loc_11 == 0 then
																break
															end
															FUNC_LIST[181](loc_0, loc_11, band_i32(loc_14, 255), band_i32(loc_10, 255), 1, 0)
															desired = 12
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														if load_i32(memory_at_0, 47236) ~= loc_5 then
															break
														end
														if loc_11 == 0 then
															break
														end
														if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
															while true do
																FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, loc_11 + 8), 1))
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														FUNC_LIST[96](load_i32(memory_at_0, loc_0), 63, band_i32(loc_14, 255), band_i32(add_i32(loc_10, 1), 255), 0)
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_5 = load_i32(memory_at_0, loc_2 + 48)
													if loc_5 <= loc_8 then
														desired = 2
														break
													end
													loc_24 = loc_7
													loc_16 = add_i32(loc_24, 48)
													loc_10 = loc_8
													while true do
														loc_11 = add_i32(loc_14, sub_i32(loc_10, loc_8))
														loc_13 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_2 + 44), shl_i32(loc_10, 2)))
														while true do
															loc_5 = load_i32(memory_at_0, loc_7 + 76)
															if loc_6 < loc_5 then
																while true do
																	store_i32(memory_at_0, loc_6 + 16, 0)
																	store_i64(memory_at_0, loc_6 + 8, i64_ZERO)
																	store_i32_n8(memory_at_0, loc_6 + 4, loc_11)
																	store_i32(memory_at_0, loc_6, loc_13)
																	store_i64(memory_at_0, loc_6 + 20, load_i64(memory_at_0, loc_7 + 40))
																	store_i32(memory_at_0, loc_6 + 28, load_i32(memory_at_0, loc_24 + 48))
																	loc_6 = add_i32(loc_6, 32)
																	store_i32(memory_at_0, loc_7 + 72, loc_6)
																	desired = 13
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															loc_9 = load_i32(memory_at_0, loc_7 + 68)
															loc_17 = shr_i32(sub_i32(loc_6, loc_9), 5)
															loc_12 = add_i32(loc_17, 1)
															if loc_12 >= 134217728 then
																desired = 1
																break
															end
															loc_5 = sub_i32(loc_5, loc_9)
															loc_15 = shr_i32(loc_5, 4)
															loc_12 = (if loc_5 >= 2147483616 then 134217727 else (if loc_12 < loc_15 then loc_15 else loc_12))
															if loc_12 ~= 0 then
																while true do
																	if loc_12 >= 134217728 then
																		desired = 7
																		break
																	end
																	reg_0 = FUNC_LIST[606](shl_i32(loc_12, 5))
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															else
																while true do
																	reg_0 = 0
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															loc_15 = reg_0
															loc_5 = add_i32(loc_15, shl_i32(loc_17, 5))
															store_i32(memory_at_0, loc_5 + 16, 0)
															store_i64(memory_at_0, loc_5 + 8, i64_ZERO)
															store_i32_n8(memory_at_0, loc_5 + 4, loc_11)
															store_i32(memory_at_0, loc_5, loc_13)
															loc_13 = add_i32(shl_i32(loc_12, 5), loc_15)
															loc_11 = add_i32(loc_5, 32)
															while true do
																while true do
																	if loc_6 == loc_9 then
																		while true do
																			store_i32(memory_at_0, loc_7 + 76, loc_13)
																			store_i32(memory_at_0, loc_7 + 72, loc_11)
																			store_i32(memory_at_0, loc_7 + 68, loc_5)
																			loc_9 = loc_6
																			desired = 15
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																	end
																	while true do
																		loc_5 = sub_i32(loc_5, 32)
																		loc_6 = sub_i32(loc_6, 32)
																		store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_6))
																		store_i64(memory_at_0, loc_5 + 24, load_i64(memory_at_0, loc_6 + 24))
																		store_i64(memory_at_0, loc_5 + 16, load_i64(memory_at_0, loc_6 + 16))
																		store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_6 + 8))
																		if loc_6 ~= loc_9 then
																			continue
																		end
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	store_i32(memory_at_0, loc_7 + 76, loc_13)
																	store_i32(memory_at_0, loc_7 + 72, loc_11)
																	store_i32(memory_at_0, loc_7 + 68, loc_5)
																	if loc_9 == 0 then
																		desired = 14
																		break
																	end
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																FUNC_LIST[609](loc_9)
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_6 = loc_11
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
																continue
															end
															break
														end
														loc_10 = add_i32(loc_10, 1)
														loc_5 = load_i32(memory_at_0, loc_2 + 48)
														if loc_10 < loc_5 then
															continue
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													desired = 2
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_16 = load_i32(memory_at_0, loc_0 + 100)
												if loc_16 == 0 then
													desired = 8
													break
												end
												loc_12 = load_i32(memory_at_0, loc_0 + 104)
												if loc_12 == loc_13 then
													desired = 8
													break
												end
												loc_8 = bxor_i32(shr_u32(loc_13, 4), shr_u32(loc_13, 9))
												loc_9 = sub_i32(load_i32(memory_at_0, loc_0 + 96), 1)
												loc_15 = load_i32(memory_at_0, loc_0 + 92)
												loc_5 = 0
												while true do
													loc_10 = band_i32(loc_8, loc_9)
													loc_14 = add_i32(mul_i32(loc_10, 12), loc_15)
													loc_8 = load_i32(memory_at_0, loc_14)
													if loc_8 ~= loc_13 then
														while true do
															if loc_8 == loc_12 then
																desired = 8
																break
															end
															loc_5 = add_i32(loc_5, 1)
															loc_8 = add_i32(loc_10, loc_5)
															if loc_5 <= loc_9 then
																desired = 11
																break
															end
															desired = 8
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
																continue
															end
															break
														end
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												if load_i32_u8(memory_at_0, loc_14 + 8) == 0 then
													desired = 8
													break
												end
												loc_9 = load_i32(memory_at_0, loc_0 + 220)
												loc_5 = add_i32(loc_9, 1)
												if loc_5 >= 256 then
													desired = 9
													break
												end
												store_i32(memory_at_0, loc_0 + 220, loc_5)
												loc_8 = load_i32(memory_at_0, loc_0 + 224)
												store_i32(memory_at_0, loc_0 + 224, (if loc_5 < loc_8 then loc_8 else loc_5))
												while true do
													if loc_11 ~= 0 then
														while true do
															FUNC_LIST[199](loc_0, loc_11, band_i32(loc_9, 255), 1)
															desired = 11
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													FUNC_LIST[96](load_i32(memory_at_0, loc_0), 2, band_i32(loc_9, 255), 0, 0)
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_5 = load_i32(memory_at_0, loc_7 + 76)
												if loc_6 < loc_5 then
													while true do
														store_i32(memory_at_0, loc_6 + 16, 0)
														store_i64(memory_at_0, loc_6 + 8, i64_ZERO)
														store_i32_n8(memory_at_0, loc_6 + 4, loc_9)
														store_i32(memory_at_0, loc_6, loc_13)
														store_i64(memory_at_0, loc_6 + 20, load_i64(memory_at_0, loc_7 + 40))
														store_i32(memory_at_0, loc_6 + 28, load_i32(memory_at_0, loc_19 + 48))
														desired = 5
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_8 = load_i32(memory_at_0, loc_7 + 68)
												loc_12 = shr_i32(sub_i32(loc_6, loc_8), 5)
												loc_10 = add_i32(loc_12, 1)
												if loc_10 >= 134217728 then
													desired = 1
													break
												end
												loc_5 = sub_i32(loc_5, loc_8)
												loc_11 = shr_i32(loc_5, 4)
												loc_10 = (if loc_5 >= 2147483616 then 134217727 else (if loc_10 < loc_11 then loc_11 else loc_10))
												if loc_10 ~= 0 then
													while true do
														if loc_10 >= 134217728 then
															desired = 7
															break
														end
														reg_0 = FUNC_LIST[606](shl_i32(loc_10, 5))
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												else
													while true do
														reg_0 = 0
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_11 = reg_0
												loc_5 = add_i32(loc_11, shl_i32(loc_12, 5))
												store_i32(memory_at_0, loc_5 + 16, 0)
												store_i64(memory_at_0, loc_5 + 8, i64_ZERO)
												store_i32_n8(memory_at_0, loc_5 + 4, loc_9)
												store_i32(memory_at_0, loc_5, loc_13)
												loc_10 = add_i32(shl_i32(loc_10, 5), loc_11)
												loc_9 = add_i32(loc_5, 32)
												while true do
													while true do
														if loc_6 == loc_8 then
															while true do
																store_i32(memory_at_0, loc_7 + 76, loc_10)
																store_i32(memory_at_0, loc_7 + 72, loc_9)
																store_i32(memory_at_0, loc_7 + 68, loc_5)
																loc_8 = loc_6
																desired = 12
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														while true do
															loc_5 = sub_i32(loc_5, 32)
															loc_6 = sub_i32(loc_6, 32)
															store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_6))
															store_i64(memory_at_0, loc_5 + 24, load_i64(memory_at_0, loc_6 + 24))
															store_i64(memory_at_0, loc_5 + 16, load_i64(memory_at_0, loc_6 + 16))
															store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_6 + 8))
															if loc_6 ~= loc_8 then
																continue
															end
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														store_i32(memory_at_0, loc_7 + 76, loc_10)
														store_i32(memory_at_0, loc_7 + 72, loc_9)
														store_i32(memory_at_0, loc_7 + 68, loc_5)
														if loc_8 == 0 then
															desired = 11
															break
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													FUNC_LIST[609](loc_8)
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_6 = loc_9
												desired = 4
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											store_i32(memory_at_0, loc_7 + 4, 255)
											store_i32(memory_at_0, loc_7, loc_10)
											FUNC_LIST[147](add_i32(loc_11, 8), 5468, loc_7)
											error("out of code bounds")
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										store_i64(memory_at_0, loc_7 + 32, i64_from_u32(1, 255))
										FUNC_LIST[147](add_i32(loc_11, 8), 5468, add_i32(loc_7, 32))
										error("out of code bounds")
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_11 == 0 then
										while true do
											loc_5 = load_i32(memory_at_0, loc_7 + 76)
											if loc_6 < loc_5 then
												while true do
													store_i32(memory_at_0, loc_6 + 16, 0)
													store_i64(memory_at_0, loc_6 + 8, i64_ONE)
													store_i32_n8(memory_at_0, loc_6 + 4, 255)
													store_i32(memory_at_0, loc_6, loc_13)
													store_i64(memory_at_0, loc_6 + 20, load_i64(memory_at_0, loc_7 + 40))
													store_i32(memory_at_0, loc_6 + 28, load_i32(memory_at_0, loc_19 + 48))
													desired = 5
													break
												end
												if desired then
													break
												end
											end
											loc_8 = load_i32(memory_at_0, loc_7 + 68)
											loc_11 = shr_i32(sub_i32(loc_6, loc_8), 5)
											loc_9 = add_i32(loc_11, 1)
											if loc_9 >= 134217728 then
												desired = 1
												break
											end
											loc_5 = sub_i32(loc_5, loc_8)
											loc_10 = shr_i32(loc_5, 4)
											loc_9 = (if loc_5 >= 2147483616 then 134217727 else (if loc_9 < loc_10 then loc_10 else loc_9))
											if loc_9 ~= 0 then
												while true do
													if loc_9 >= 134217728 then
														desired = 7
														break
													end
													reg_0 = FUNC_LIST[606](shl_i32(loc_9, 5))
													break
												end
												if desired then
													break
												end
											else
												while true do
													reg_0 = 0
													break
												end
												if desired then
													break
												end
											end
											loc_10 = reg_0
											loc_5 = add_i32(loc_10, shl_i32(loc_11, 5))
											store_i32(memory_at_0, loc_5 + 16, 0)
											store_i64(memory_at_0, loc_5 + 8, i64_ONE)
											store_i32_n8(memory_at_0, loc_5 + 4, 255)
											store_i32(memory_at_0, loc_5, loc_13)
											loc_10 = add_i32(shl_i32(loc_9, 5), loc_10)
											loc_9 = add_i32(loc_5, 32)
											while true do
												while true do
													if loc_6 == loc_8 then
														while true do
															store_i32(memory_at_0, loc_7 + 76, loc_10)
															store_i32(memory_at_0, loc_7 + 72, loc_9)
															store_i32(memory_at_0, loc_7 + 68, loc_5)
															loc_8 = loc_6
															desired = 10
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													while true do
														loc_5 = sub_i32(loc_5, 32)
														loc_6 = sub_i32(loc_6, 32)
														store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_6))
														store_i64(memory_at_0, loc_5 + 24, load_i64(memory_at_0, loc_6 + 24))
														store_i64(memory_at_0, loc_5 + 16, load_i64(memory_at_0, loc_6 + 16))
														store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_6 + 8))
														if loc_6 ~= loc_8 then
															continue
														end
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													store_i32(memory_at_0, loc_7 + 76, loc_10)
													store_i32(memory_at_0, loc_7 + 72, loc_9)
													store_i32(memory_at_0, loc_7 + 68, loc_5)
													if loc_8 == 0 then
														desired = 9
														break
													end
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
												FUNC_LIST[609](loc_8)
												break
											end
											if desired then
												break
											end
											loc_6 = loc_9
											desired = 4
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									while true do
										if load_i32(memory_at_0, loc_0 + 120) == 0 then
											break
										end
										loc_12 = load_i32(memory_at_0, loc_0 + 124)
										if loc_12 == loc_11 then
											break
										end
										loc_8 = bxor_i32(shr_u32(loc_11, 4), shr_u32(loc_11, 9))
										loc_9 = sub_i32(load_i32(memory_at_0, loc_0 + 116), 1)
										loc_15 = load_i32(memory_at_0, loc_0 + 112)
										loc_5 = 0
										while true do
											loc_10 = band_i32(loc_8, loc_9)
											loc_14 = add_i32(shl_i32(loc_10, 5), loc_15)
											loc_8 = load_i32(memory_at_0, loc_14)
											if loc_8 ~= loc_11 then
												while true do
													if loc_8 == loc_12 then
														desired = 8
														break
													end
													loc_5 = add_i32(loc_5, 1)
													loc_8 = add_i32(loc_10, loc_5)
													if loc_5 <= loc_9 then
														desired = 9
														break
													end
													desired = 8
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if load_i32(memory_at_0, loc_14 + 8) == 0 then
											break
										end
										loc_5 = add_i32(loc_14, 8)
										store_i64(memory_at_0, loc_7 + 43, load_i64(memory_at_0, loc_5))
										store_i64(memory_at_0, loc_7 + 59, load_i64(memory_at_0, loc_14 + 24))
										store_i64(memory_at_0, loc_7 + 51, load_i64(memory_at_0, loc_14 + 16))
										loc_5 = load_i32(memory_at_0, loc_7 + 76)
										if loc_6 < loc_5 then
											while true do
												store_i32_n8(memory_at_0, loc_6 + 4, 255)
												store_i32(memory_at_0, loc_6, loc_13)
												store_i64(memory_at_0, loc_6 + 5, load_i64(memory_at_0, loc_7 + 40))
												store_i64(memory_at_0, loc_6 + 13, load_i64(memory_at_0, loc_19 + 48))
												store_i64(memory_at_0, loc_6 + 21, load_i64(memory_at_0, loc_7 + 56))
												store_i32(memory_at_0, loc_6 + 28, load_i32(memory_at_0, loc_7 + 63))
												desired = 5
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_8 = load_i32(memory_at_0, loc_7 + 68)
										loc_11 = shr_i32(sub_i32(loc_6, loc_8), 5)
										loc_9 = add_i32(loc_11, 1)
										if loc_9 >= 134217728 then
											desired = 1
											break
										end
										loc_5 = sub_i32(loc_5, loc_8)
										loc_10 = shr_i32(loc_5, 4)
										loc_9 = (if loc_5 >= 2147483616 then 134217727 else (if loc_9 < loc_10 then loc_10 else loc_9))
										if loc_9 ~= 0 then
											while true do
												if loc_9 >= 134217728 then
													desired = 7
													break
												end
												reg_0 = FUNC_LIST[606](shl_i32(loc_9, 5))
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										else
											while true do
												reg_0 = 0
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_10 = reg_0
										loc_5 = add_i32(loc_10, shl_i32(loc_11, 5))
										store_i32_n8(memory_at_0, loc_5 + 4, 255)
										store_i32(memory_at_0, loc_5, loc_13)
										store_i64(memory_at_0, loc_5 + 5, load_i64(memory_at_0, loc_7 + 40))
										store_i64(memory_at_0, loc_5 + 13, load_i64(memory_at_0, loc_19 + 48))
										store_i64(memory_at_0, loc_5 + 21, load_i64(memory_at_0, loc_7 + 56))
										store_i32(memory_at_0, loc_5 + 28, load_i32(memory_at_0, loc_7 + 63))
										loc_10 = add_i32(shl_i32(loc_9, 5), loc_10)
										loc_9 = add_i32(loc_5, 32)
										while true do
											while true do
												if loc_6 == loc_8 then
													while true do
														store_i32(memory_at_0, loc_7 + 76, loc_10)
														store_i32(memory_at_0, loc_7 + 72, loc_9)
														store_i32(memory_at_0, loc_7 + 68, loc_5)
														loc_8 = loc_6
														desired = 10
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												while true do
													loc_5 = sub_i32(loc_5, 32)
													loc_6 = sub_i32(loc_6, 32)
													store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_6))
													store_i64(memory_at_0, loc_5 + 24, load_i64(memory_at_0, loc_6 + 24))
													store_i64(memory_at_0, loc_5 + 16, load_i64(memory_at_0, loc_6 + 16))
													store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_6 + 8))
													if loc_6 ~= loc_8 then
														continue
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												store_i32(memory_at_0, loc_7 + 76, loc_10)
												store_i32(memory_at_0, loc_7 + 72, loc_9)
												store_i32(memory_at_0, loc_7 + 68, loc_5)
												if loc_8 == 0 then
													desired = 9
													break
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											FUNC_LIST[609](loc_8)
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_6 = loc_9
										desired = 4
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									while true do
										loc_5 = loc_11
										loc_8 = load_i32(memory_at_0, loc_5 + 4)
										loc_10 = load_i32(memory_at_0, 47220)
										if loc_8 ~= loc_10 then
											while true do
												loc_12 = load_i32(memory_at_0, 47300)
												loc_9 = load_i32(memory_at_0, 47180)
												while true do
													if band_i32((if loc_8 ~= loc_9 then 1 else 0), (if loc_8 ~= loc_12 then 1 else 0)) ~= 0 then
														desired = 8
														break
													end
													loc_5 = load_i32(memory_at_0, loc_5 + 24)
													loc_8 = load_i32(memory_at_0, loc_5 + 4)
													if loc_5 == 0 then
														continue
													end
													if loc_8 ~= loc_10 then
														continue
													end
													break
												end
												if desired then
													break
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_18 = 0
										while true do
											if loc_16 == 0 then
												break
											end
											loc_14 = load_i32(memory_at_0, loc_5 + 24)
											loc_16 = load_i32(memory_at_0, loc_0 + 104)
											if loc_14 == loc_16 then
												break
											end
											loc_10 = bxor_i32(shr_u32(loc_14, 4), shr_u32(loc_14, 9))
											loc_12 = sub_i32(load_i32(memory_at_0, loc_0 + 96), 1)
											loc_18 = load_i32(memory_at_0, loc_0 + 92)
											loc_8 = 0
											while true do
												while true do
													loc_15 = band_i32(loc_10, loc_12)
													loc_9 = add_i32(mul_i32(loc_15, 12), loc_18)
													loc_10 = load_i32(memory_at_0, loc_9)
													if loc_14 == loc_10 then
														break
													end
													loc_9 = 0
													if loc_10 == loc_16 then
														break
													end
													loc_8 = add_i32(loc_8, 1)
													loc_10 = add_i32(loc_15, loc_8)
													if loc_8 <= loc_12 then
														desired = 10
														break
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
														continue
													end
													break
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_18 = (if loc_9 ~= 0 then add_i32(loc_9, 4) else 0)
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if load_i32(memory_at_0, loc_0 + 60) == 0 then
											break
										end
										loc_12 = load_i32(memory_at_0, loc_5 + 24)
										loc_15 = load_i32(memory_at_0, loc_0 + 64)
										if loc_12 == loc_15 then
											break
										end
										loc_8 = bxor_i32(shr_u32(loc_12, 4), shr_u32(loc_12, 9))
										loc_9 = sub_i32(load_i32(memory_at_0, loc_0 + 56), 1)
										loc_14 = load_i32(memory_at_0, loc_0 + 52)
										loc_5 = 0
										while true do
											loc_10 = band_i32(loc_8, loc_9)
											loc_16 = add_i32(mul_i32(loc_10, 12), loc_14)
											loc_8 = load_i32(memory_at_0, loc_16)
											if loc_8 ~= loc_12 then
												while true do
													if loc_8 == loc_15 then
														desired = 8
														break
													end
													loc_5 = add_i32(loc_5, 1)
													loc_8 = add_i32(loc_10, loc_5)
													if loc_5 <= loc_9 then
														desired = 9
														break
													end
													desired = 8
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if load_i32_u8(memory_at_0, loc_16 + 5) == 0 then
											break
										end
										loc_9 = load_i32_u8(memory_at_0, loc_16 + 4)
										if loc_18 ~= 0 then
											while true do
												if load_i32_u8(memory_at_0, loc_18 + 4) ~= 0 then
													desired = 8
													break
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_5 = load_i32(memory_at_0, loc_7 + 76)
										if loc_6 < loc_5 then
											while true do
												store_i32(memory_at_0, loc_6 + 16, 0)
												store_i64(memory_at_0, loc_6 + 8, i64_ZERO)
												store_i32_n8(memory_at_0, loc_6 + 4, loc_9)
												store_i32(memory_at_0, loc_6, loc_13)
												store_i64(memory_at_0, loc_6 + 20, load_i64(memory_at_0, loc_7 + 40))
												store_i32(memory_at_0, loc_6 + 28, load_i32(memory_at_0, loc_19 + 48))
												desired = 5
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_8 = load_i32(memory_at_0, loc_7 + 68)
										loc_12 = shr_i32(sub_i32(loc_6, loc_8), 5)
										loc_10 = add_i32(loc_12, 1)
										if loc_10 < 134217728 then
											while true do
												loc_5 = sub_i32(loc_5, loc_8)
												loc_11 = shr_i32(loc_5, 4)
												loc_10 = (if loc_5 >= 2147483616 then 134217727 else (if loc_10 < loc_11 then loc_11 else loc_10))
												if loc_10 ~= 0 then
													while true do
														if loc_10 >= 134217728 then
															desired = 7
															break
														end
														reg_0 = FUNC_LIST[606](shl_i32(loc_10, 5))
														break
													end
													if desired then
														break
													end
												else
													while true do
														reg_0 = 0
														break
													end
													if desired then
														break
													end
												end
												loc_11 = reg_0
												loc_5 = add_i32(loc_11, shl_i32(loc_12, 5))
												store_i32(memory_at_0, loc_5 + 16, 0)
												store_i64(memory_at_0, loc_5 + 8, i64_ZERO)
												store_i32_n8(memory_at_0, loc_5 + 4, loc_9)
												store_i32(memory_at_0, loc_5, loc_13)
												loc_10 = add_i32(shl_i32(loc_10, 5), loc_11)
												loc_9 = add_i32(loc_5, 32)
												while true do
													while true do
														if loc_6 == loc_8 then
															while true do
																store_i32(memory_at_0, loc_7 + 76, loc_10)
																store_i32(memory_at_0, loc_7 + 72, loc_9)
																store_i32(memory_at_0, loc_7 + 68, loc_5)
																loc_8 = loc_6
																desired = 11
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														while true do
															loc_5 = sub_i32(loc_5, 32)
															loc_6 = sub_i32(loc_6, 32)
															store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_6))
															store_i64(memory_at_0, loc_5 + 24, load_i64(memory_at_0, loc_6 + 24))
															store_i64(memory_at_0, loc_5 + 16, load_i64(memory_at_0, loc_6 + 16))
															store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_6 + 8))
															if loc_6 ~= loc_8 then
																continue
															end
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
														store_i32(memory_at_0, loc_7 + 76, loc_10)
														store_i32(memory_at_0, loc_7 + 72, loc_9)
														store_i32(memory_at_0, loc_7 + 68, loc_5)
														if loc_8 == 0 then
															desired = 10
															break
														end
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													FUNC_LIST[609](loc_8)
													break
												end
												if desired then
													break
												end
												loc_6 = loc_9
												desired = 4
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_9 = load_i32(memory_at_0, loc_0 + 220)
									loc_5 = add_i32(loc_9, 1)
									if loc_5 >= 256 then
										desired = 6
										break
									end
									store_i32(memory_at_0, loc_0 + 220, loc_5)
									loc_8 = load_i32(memory_at_0, loc_0 + 224)
									store_i32(memory_at_0, loc_0 + 224, (if loc_5 < loc_8 then loc_8 else loc_5))
									FUNC_LIST[199](loc_0, loc_11, band_i32(loc_9, 255), 1)
									loc_5 = load_i32(memory_at_0, loc_7 + 76)
									if loc_6 < loc_5 then
										while true do
											store_i32(memory_at_0, loc_6 + 16, 0)
											store_i64(memory_at_0, loc_6 + 8, i64_ZERO)
											store_i32_n8(memory_at_0, loc_6 + 4, loc_9)
											store_i32(memory_at_0, loc_6, loc_13)
											store_i64(memory_at_0, loc_6 + 20, load_i64(memory_at_0, loc_7 + 40))
											store_i32(memory_at_0, loc_6 + 28, load_i32(memory_at_0, loc_19 + 48))
											desired = 5
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_8 = load_i32(memory_at_0, loc_7 + 68)
									loc_12 = shr_i32(sub_i32(loc_6, loc_8), 5)
									loc_10 = add_i32(loc_12, 1)
									if loc_10 >= 134217728 then
										desired = 1
										break
									end
									loc_5 = sub_i32(loc_5, loc_8)
									loc_11 = shr_i32(loc_5, 4)
									loc_10 = (if loc_5 >= 2147483616 then 134217727 else (if loc_10 < loc_11 then loc_11 else loc_10))
									if loc_10 ~= 0 then
										while true do
											if loc_10 >= 134217728 then
												desired = 7
												break
											end
											reg_0 = FUNC_LIST[606](shl_i32(loc_10, 5))
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									else
										while true do
											reg_0 = 0
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_11 = reg_0
									loc_5 = add_i32(loc_11, shl_i32(loc_12, 5))
									store_i32(memory_at_0, loc_5 + 16, 0)
									store_i64(memory_at_0, loc_5 + 8, i64_ZERO)
									store_i32_n8(memory_at_0, loc_5 + 4, loc_9)
									store_i32(memory_at_0, loc_5, loc_13)
									loc_10 = add_i32(shl_i32(loc_10, 5), loc_11)
									loc_9 = add_i32(loc_5, 32)
									while true do
										while true do
											if loc_6 == loc_8 then
												while true do
													store_i32(memory_at_0, loc_7 + 76, loc_10)
													store_i32(memory_at_0, loc_7 + 72, loc_9)
													store_i32(memory_at_0, loc_7 + 68, loc_5)
													loc_8 = loc_6
													desired = 9
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											while true do
												loc_5 = sub_i32(loc_5, 32)
												loc_6 = sub_i32(loc_6, 32)
												store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_6))
												store_i64(memory_at_0, loc_5 + 24, load_i64(memory_at_0, loc_6 + 24))
												store_i64(memory_at_0, loc_5 + 16, load_i64(memory_at_0, loc_6 + 16))
												store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_6 + 8))
												if loc_6 ~= loc_8 then
													continue
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											store_i32(memory_at_0, loc_7 + 76, loc_10)
											store_i32(memory_at_0, loc_7 + 72, loc_9)
											store_i32(memory_at_0, loc_7 + 68, loc_5)
											if loc_8 == 0 then
												desired = 8
												break
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										FUNC_LIST[609](loc_8)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_6 = loc_9
									desired = 4
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[163]()
								error("out of code bounds")
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i64(memory_at_0, loc_7 + 16, i64_from_u32(1, 255))
							FUNC_LIST[147](add_i32(loc_11, 8), 5468, add_i32(loc_7, 16))
							error("out of code bounds")
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_6 = add_i32(loc_6, 32)
						store_i32(memory_at_0, loc_7 + 72, loc_6)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_5 = load_i32(memory_at_0, loc_2 + 48)
					if loc_5 > loc_17 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = sub_i32(loc_23, loc_22)
			if loc_5 < load_i32(memory_at_0, loc_1 + 32) then
				while true do
					while true do
						FUNC_LIST[182](loc_0, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_1 + 28), shl_i32(loc_5, 2))))
						loc_5 = add_i32(loc_5, 1)
						if loc_5 < load_i32(memory_at_0, loc_1 + 32) then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_11 = shr_i32(loc_8, 2)
			while true do
				loc_5 = load_i32(memory_at_0, loc_7 + 68)
				if loc_6 == loc_5 then
					break
				end
				loc_10 = add_i32(loc_0, 132)
				while true do
					while true do
						if load_i32(memory_at_0, loc_5 + 8) == 0 then
							while true do
								FUNC_LIST[151](loc_0, load_i32(memory_at_0, loc_5), load_i32_u8(memory_at_0, loc_5 + 4))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_0 = FUNC_LIST[39](loc_10, loc_5)
						loc_8 = reg_0
						loc_9 = add_i32(loc_5, 8)
						store_i64(memory_at_0, loc_8 + 16, load_i64(memory_at_0, loc_9 + 16))
						store_i64(memory_at_0, loc_8 + 8, load_i64(memory_at_0, loc_5 + 16))
						store_i64(memory_at_0, loc_8, load_i64(memory_at_0, loc_5 + 8))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_5 = add_i32(loc_5, 32)
					if loc_6 ~= loc_5 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_7 + 60, 0)
			store_i64(memory_at_0, loc_7 + 52, i64_ZERO)
			store_i32_n8(memory_at_0, loc_7 + 49, loc_4)
			store_i32_n8(memory_at_0, loc_7 + 48, loc_3)
			store_i32(memory_at_0, loc_7 + 44, loc_11)
			store_i32(memory_at_0, loc_7 + 40, loc_2)
			while true do
				loc_6 = load_i32(memory_at_0, loc_0 + 284)
				if loc_6 < load_i32(memory_at_0, loc_0 + 288) then
					while true do
						store_i64(memory_at_0, loc_6, load_i64(memory_at_0, loc_7 + 40))
						store_i32_n16(memory_at_0, loc_6 + 8, load_i32_u16(memory_at_0, loc_7 + 48))
						store_i32(memory_at_0, loc_6 + 20, 0)
						store_i64(memory_at_0, loc_6 + 12, i64_ZERO)
						store_i32(memory_at_0, loc_6 + 12, load_i32(memory_at_0, loc_7 + 52))
						store_i32(memory_at_0, loc_6 + 16, load_i32(memory_at_0, loc_7 + 56))
						store_i32(memory_at_0, loc_6 + 20, load_i32(memory_at_0, loc_7 + 60))
						store_i32(memory_at_0, loc_0 + 284, add_i32(loc_6, 24))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[234](add_i32(loc_0, 280), add_i32(loc_7, 40))
				loc_6 = load_i32(memory_at_0, loc_7 + 52)
				if loc_6 == 0 then
					break
				end
				store_i32(memory_at_0, loc_7 + 56, loc_6)
				FUNC_LIST[609](loc_6)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_16 = add_i32(loc_0, 112)
			loc_18 = add_i32(loc_0, 92)
			loc_20 = add_i32(loc_0, 132)
			FUNC_LIST[25](loc_16, loc_18, loc_20, load_i32(memory_at_0, loc_0 + 212), load_i32_u8(memory_at_0, loc_0 + 216), load_i32(memory_at_0, loc_2 + 92))
			while true do
				while true do
					while true do
						loc_5 = load_i32(memory_at_0, loc_2 + 92)
						if load_i32(memory_at_0, loc_5 + 32) ~= 0 then
							while true do
								loc_6 = 0
								while true do
									while true do
										loc_5 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_5 + 28), shl_i32(loc_6, 2)))
										if loc_5 == 0 then
											break
										end
										if load_i32(memory_at_0, loc_5 + 4) ~= load_i32(memory_at_0, 47372) then
											break
										end
										if gt_i32(load_i32(memory_at_0, loc_0 + 8), 0) then
											while true do
												FUNC_LIST[105](load_i32(memory_at_0, loc_0), add_i32(load_i32(memory_at_0, loc_5 + 8), 1))
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										loc_8 = load_i32(memory_at_0, loc_0 + 284)
										loc_6 = sub_i32(loc_8, 24)
										store_i32_n16(memory_at_0, loc_7 + 48, load_i32_u16(memory_at_0, loc_6 + 8))
										store_i64(memory_at_0, loc_7 + 40, load_i64(memory_at_0, loc_6))
										store_i32(memory_at_0, loc_7 + 60, 0)
										store_i64(memory_at_0, loc_7 + 52, i64_ZERO)
										loc_6 = 0
										loc_9 = load_i32(memory_at_0, sub_i32(loc_8, 8))
										loc_8 = load_i32(memory_at_0, sub_i32(loc_8, 12))
										if loc_9 ~= loc_8 then
											while true do
												loc_9 = sub_i32(loc_9, loc_8)
												if lt_i32(loc_9, 0) then
													desired = 3
													break
												end
												reg_0 = FUNC_LIST[606](loc_9)
												loc_6 = reg_0
												reg_0 = FUNC_LIST[477](loc_6, loc_8, loc_9)
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										FUNC_LIST[197](loc_0, add_i32(loc_5, 28), load_i32_u8(memory_at_0, loc_7 + 48), load_i32_u8(memory_at_0, loc_7 + 49), 0)
										FUNC_LIST[154](loc_0, load_i32(memory_at_0, loc_7 + 44))
										if loc_6 == 0 then
											desired = 4
											break
										end
										FUNC_LIST[609](loc_6)
										desired = 4
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
									FUNC_LIST[152](loc_0, loc_5)
									loc_6 = add_i32(loc_6, 1)
									loc_5 = load_i32(memory_at_0, loc_2 + 92)
									if loc_6 < load_i32(memory_at_0, loc_5 + 32) then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_0 = FUNC_LIST[153](loc_0, loc_5)
						if reg_0 ~= 0 then
							break
						end
						if loc_4 ~= 0 then
							while true do
								loc_6 = 0
								while true do
									FUNC_LIST[96](load_i32(memory_at_0, loc_0), 2, band_i32(add_i32(loc_3, loc_6), 255), 0, 0)
									loc_6 = add_i32(loc_6, 1)
									if loc_4 ~= loc_6 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[154](loc_0, loc_11)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[156](loc_0, loc_11)
					reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
					loc_5 = reg_0
					loc_9 = load_i32(memory_at_0, loc_0 + 284)
					loc_6 = load_i32(memory_at_0, sub_i32(loc_9, 12))
					loc_8 = load_i32(memory_at_0, sub_i32(loc_9, 8))
					if loc_6 ~= loc_8 then
						while true do
							while true do
								while true do
									reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_6), loc_5)
									if reg_0 ~= 0 then
										while true do
											loc_6 = add_i32(loc_6, 4)
											if loc_6 ~= loc_8 then
												desired = 6
												break
											end
											desired = 5
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								FUNC_LIST[147](add_i32(loc_1, 8), 4545, 0)
								error("out of code bounds")
							end
							if desired then
								break
							end
							loc_9 = load_i32(memory_at_0, loc_0 + 284)
							reg_0 = load_i32(memory_at_0, sub_i32(loc_9, 12))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_6
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = reg_0
					if loc_6 ~= 0 then
						while true do
							store_i32(memory_at_0, sub_i32(loc_9, 8), loc_6)
							FUNC_LIST[609](loc_6)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					store_i32(memory_at_0, loc_0 + 284, sub_i32(loc_9, 24))
					loc_14 = load_i32(memory_at_0, loc_2 + 48)
					if loc_14 == 0 then
						desired = 2
						break
					end
					loc_8 = sub_i32(load_i32(memory_at_0, loc_0 + 136), 1)
					loc_12 = load_i32(memory_at_0, loc_0 + 132)
					loc_11 = load_i32(memory_at_0, loc_0 + 144)
					loc_1 = load_i32(memory_at_0, loc_0 + 140)
					loc_17 = load_i32(memory_at_0, loc_2 + 44)
					loc_15 = 0
					while true do
						while true do
							if loc_1 == 0 then
								break
							end
							loc_10 = load_i32(memory_at_0, add_i32(shl_i32(loc_15, 2), loc_17))
							if loc_11 == loc_10 then
								break
							end
							loc_5 = bxor_i32(shr_u32(loc_10, 4), shr_u32(loc_10, 9))
							loc_6 = 0
							while true do
								loc_9 = band_i32(loc_5, loc_8)
								loc_13 = add_i32(shl_i32(loc_9, 5), loc_12)
								loc_5 = load_i32(memory_at_0, loc_13)
								if loc_5 ~= loc_10 then
									while true do
										if loc_5 == loc_11 then
											desired = 5
											break
										end
										loc_6 = add_i32(loc_6, 1)
										loc_5 = add_i32(loc_9, loc_6)
										if loc_6 <= loc_8 then
											desired = 6
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i32(memory_at_0, loc_13 + 8, 0)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_15 = add_i32(loc_15, 1)
						if loc_14 ~= loc_15 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[40](add_i32(loc_7, 52))
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[25](loc_16, loc_18, loc_20, load_i32(memory_at_0, loc_0 + 212), load_i32_u8(memory_at_0, loc_0 + 216), load_i32(memory_at_0, loc_2 + 92))
			loc_6 = load_i32(memory_at_0, loc_7 + 68)
			if loc_6 ~= 0 then
				while true do
					store_i32(memory_at_0, loc_7 + 72, loc_6)
					FUNC_LIST[609](loc_6)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			store_i32(memory_at_0, loc_0 + 220, loc_21)
			GLOBAL_LIST[0].value = add_i32(loc_7, 80)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[40](add_i32(loc_7, 68))
		error("out of code bounds")
	end
end
FUNC_LIST[234] = --[[ void std::__2::vector<Luau::Compiler::InlineFrame, std::__2::allocator<Luau::Compiler::InlineFrame>>::__push_back_slow_path<Luau::Compiler::InlineFrame>(Luau::Compiler::InlineFrame&&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_3 = load_i32(memory_at_0, loc_0)
					loc_5 = div_i32(sub_i32(load_i32(memory_at_0, loc_0 + 4), loc_3), 24)
					loc_2 = add_i32(loc_5, 1)
					if loc_2 < 178956971 then
						while true do
							loc_3 = div_i32(sub_i32(load_i32(memory_at_0, loc_0 + 8), loc_3), 24)
							loc_6 = shl_i32(loc_3, 1)
							loc_3 = (if loc_3 >= 89478485 then 178956970 else (if loc_2 < loc_6 then loc_6 else loc_2))
							if loc_3 ~= 0 then
								while true do
									if loc_3 >= 178956971 then
										desired = 3
										break
									end
									reg_0 = FUNC_LIST[606](mul_i32(loc_3, 24))
									break
								end
								if desired then
									break
								end
							else
								while true do
									reg_0 = loc_4
									break
								end
								if desired then
									break
								end
							end
							loc_4 = reg_0
							loc_2 = add_i32(loc_4, mul_i32(loc_5, 24))
							store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_1))
							store_i32_n16(memory_at_0, loc_2 + 8, load_i32_u16(memory_at_0, loc_1 + 8))
							store_i32(memory_at_0, loc_2 + 12, load_i32(memory_at_0, loc_1 + 12))
							store_i32(memory_at_0, loc_2 + 16, load_i32(memory_at_0, loc_1 + 16))
							store_i32(memory_at_0, loc_2 + 20, load_i32(memory_at_0, loc_1 + 20))
							store_i32(memory_at_0, loc_1 + 20, 0)
							store_i64(memory_at_0, loc_1 + 12, i64_ZERO)
							loc_7 = add_i32(mul_i32(loc_3, 24), loc_4)
							loc_8 = add_i32(loc_2, 24)
							loc_1 = load_i32(memory_at_0, loc_0 + 4)
							loc_9 = load_i32(memory_at_0, loc_0)
							if loc_1 == loc_9 then
								desired = 2
								break
							end
							while true do
								loc_3 = sub_i32(loc_2, 24)
								loc_4 = sub_i32(loc_1, 24)
								store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_4))
								store_i32_n16(memory_at_0, loc_3 + 8, load_i32_u16(memory_at_0, loc_4 + 8))
								loc_5 = sub_i32(loc_2, 4)
								store_i32(memory_at_0, loc_5, 0)
								loc_6 = sub_i32(loc_1, 12)
								store_i32(memory_at_0, sub_i32(loc_2, 12), load_i32(memory_at_0, loc_6))
								store_i32(memory_at_0, sub_i32(loc_2, 8), load_i32(memory_at_0, sub_i32(loc_1, 8)))
								loc_1 = sub_i32(loc_1, 4)
								store_i32(memory_at_0, loc_5, load_i32(memory_at_0, loc_1))
								store_i32(memory_at_0, loc_1, 0)
								store_i64(memory_at_0, loc_6, i64_ZERO)
								loc_2 = loc_3
								loc_1 = loc_4
								if loc_1 ~= loc_9 then
									continue
								end
								break
							end
							if desired then
								break
							end
							store_i32(memory_at_0, loc_0 + 8, loc_7)
							loc_2 = load_i32(memory_at_0, loc_0 + 4)
							store_i32(memory_at_0, loc_0 + 4, loc_8)
							loc_1 = load_i32(memory_at_0, loc_0)
							store_i32(memory_at_0, loc_0, loc_3)
							if loc_1 == loc_2 then
								desired = 1
								break
							end
							while true do
								loc_4 = load_i32(memory_at_0, sub_i32(loc_2, 12))
								if loc_4 ~= 0 then
									while true do
										store_i32(memory_at_0, sub_i32(loc_2, 8), loc_4)
										FUNC_LIST[609](loc_4)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								end
								loc_2 = sub_i32(loc_2, 24)
								if loc_1 ~= loc_2 then
									continue
								end
								break
							end
							if desired then
								break
							end
							desired = 1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[40](loc_0)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[163]()
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_0 + 8, loc_7)
			store_i32(memory_at_0, loc_0 + 4, loc_8)
			store_i32(memory_at_0, loc_0, loc_2)
			break
		end
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[235] = --[[ Luau::Compiler::compileUnrolledFor(Luau::AstStatFor*, int, double, double) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local reg_0
	local desired
	while true do
		loc_12 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_12
		store_i32(memory_at_0, loc_12 + 12, load_i32(memory_at_0, loc_1 + 28))
		loc_15 = load_i32(memory_at_0, loc_0 + 256)
		loc_16 = load_i32(memory_at_0, loc_0 + 260)
		loc_7 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 236), load_i32(memory_at_0, loc_0 + 232)), 2)
		while true do
			while true do
				while true do
					while true do
						loc_5 = load_i32(memory_at_0, loc_0 + 272)
						loc_6 = load_i32(memory_at_0, loc_0 + 276)
						if loc_5 < loc_6 then
							while true do
								store_i32(memory_at_0, loc_5 + 8, 0)
								store_i32(memory_at_0, loc_5 + 4, loc_7)
								store_i32(memory_at_0, loc_5, loc_7)
								store_i32(memory_at_0, loc_0 + 272, add_i32(loc_5, 12))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_13 = add_i32(loc_0, 268)
						loc_9 = load_i32(memory_at_0, loc_13)
						loc_11 = div_i32(sub_i32(loc_5, loc_9), 12)
						loc_8 = add_i32(loc_11, 1)
						if loc_8 >= 357913942 then
							desired = 3
							break
						end
						loc_6 = div_i32(sub_i32(loc_6, loc_9), 12)
						loc_14 = shl_i32(loc_6, 1)
						loc_8 = (if loc_6 >= 178956970 then 357913941 else (if loc_8 < loc_14 then loc_14 else loc_8))
						if loc_8 ~= 0 then
							while true do
								if loc_8 >= 357913942 then
									desired = 2
									break
								end
								reg_0 = FUNC_LIST[606](mul_i32(loc_8, 12))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = loc_10
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_10 = reg_0
						loc_6 = add_i32(loc_10, mul_i32(loc_11, 12))
						store_i32(memory_at_0, loc_6 + 8, 0)
						store_i32(memory_at_0, loc_6 + 4, loc_7)
						store_i32(memory_at_0, loc_6, loc_7)
						loc_7 = add_i32(mul_i32(loc_8, 12), loc_10)
						loc_10 = add_i32(loc_6, 12)
						if loc_5 ~= loc_9 then
							while true do
								while true do
									loc_6 = sub_i32(loc_6, 12)
									loc_5 = sub_i32(loc_5, 12)
									store_i64(memory_at_0, loc_6, load_i64(memory_at_0, loc_5))
									store_i32(memory_at_0, loc_6 + 8, load_i32(memory_at_0, loc_5 + 8))
									if loc_5 ~= loc_9 then
										continue
									end
									break
								end
								if desired then
									break
								end
								reg_0 = load_i32(memory_at_0, loc_13)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = loc_5
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_5 = reg_0
						store_i32(memory_at_0, loc_0 + 276, loc_7)
						store_i32(memory_at_0, loc_0 + 272, loc_10)
						store_i32(memory_at_0, loc_0 + 268, loc_6)
						if loc_5 == 0 then
							break
						end
						FUNC_LIST[609](loc_5)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if gt_i32(loc_2, 0) then
						while true do
							loc_14 = add_i32(loc_0, 92)
							loc_13 = add_i32(loc_0, 112)
							loc_8 = add_i32(loc_0, 132)
							loc_11 = 0
							while true do
								reg_0 = FUNC_LIST[39](loc_8, add_i32(loc_12, 12))
								store_i32(memory_at_0, reg_0, 3)
								reg_0 = FUNC_LIST[39](loc_8, add_i32(loc_12, 12))
								store_f64(memory_at_0, reg_0 + 8, ((convert_f64_i32(loc_11) * loc_4) + loc_3))
								FUNC_LIST[25](loc_13, loc_14, loc_8, load_i32(memory_at_0, loc_0 + 212), load_i32_u8(memory_at_0, loc_0 + 216), loc_1)
								loc_5 = load_i32(memory_at_0, loc_0 + 256)
								loc_6 = load_i32(memory_at_0, loc_0 + 260)
								FUNC_LIST[152](loc_0, load_i32(memory_at_0, loc_1 + 44))
								reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
								loc_10 = reg_0
								loc_5 = sub_i32(loc_6, loc_5)
								loc_9 = load_i32(memory_at_0, loc_0 + 260)
								loc_6 = load_i32(memory_at_0, loc_0 + 256)
								if loc_5 < sub_i32(loc_9, loc_6) then
									while true do
										loc_5 = shr_i32(loc_5, 3)
										while true do
											loc_7 = add_i32(shl_i32(loc_5, 3), loc_6)
											if load_i32(memory_at_0, loc_7) == 1 then
												while true do
													reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_7 + 4), loc_10)
													if reg_0 == 0 then
														desired = 1
														break
													end
													loc_9 = load_i32(memory_at_0, loc_0 + 260)
													reg_0 = load_i32(memory_at_0, loc_0 + 256)
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
														continue
													end
													break
												end
											else
												while true do
													reg_0 = loc_6
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
														continue
													end
													break
												end
											end
											loc_6 = reg_0
											loc_5 = add_i32(loc_5, 1)
											if loc_5 < shr_i32(sub_i32(loc_9, loc_6), 3) then
												continue
											end
											break
										end
										if desired then
											break
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								end
								loc_11 = add_i32(loc_11, 1)
								if loc_2 ~= loc_11 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[99](load_i32(memory_at_0, loc_0))
					loc_10 = reg_0
					loc_11 = sub_i32(loc_16, loc_15)
					loc_8 = shr_i32(loc_11, 3)
					loc_9 = load_i32(memory_at_0, loc_0 + 260)
					loc_6 = load_i32(memory_at_0, loc_0 + 256)
					loc_7 = shr_i32(sub_i32(loc_9, loc_6), 3)
					if loc_8 < loc_7 then
						while true do
							loc_5 = loc_8
							while true do
								loc_7 = add_i32(shl_i32(loc_5, 3), loc_6)
								if load_i32(memory_at_0, loc_7) ~= 0 then
									while true do
										reg_0 = loc_6
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								else
									while true do
										reg_0 = FUNC_LIST[100](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_7 + 4), loc_10)
										if reg_0 == 0 then
											desired = 1
											break
										end
										loc_9 = load_i32(memory_at_0, loc_0 + 260)
										reg_0 = load_i32(memory_at_0, loc_0 + 256)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								end
								loc_6 = reg_0
								loc_5 = add_i32(loc_5, 1)
								loc_7 = shr_i32(sub_i32(loc_9, loc_6), 3)
								if loc_5 < loc_7 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						if loc_7 < loc_8 then
							while true do
								FUNC_LIST[195](add_i32(loc_0, 256), sub_i32(loc_8, loc_7))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_7 <= loc_8 then
							break
						end
						store_i32(memory_at_0, loc_0 + 260, add_i32(loc_6, loc_11))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_0 + 272, sub_i32(load_i32(memory_at_0, loc_0 + 272), 12))
					loc_5 = add_i32(loc_0, 132)
					reg_0 = FUNC_LIST[39](loc_5, add_i32(loc_12, 12))
					store_i32(memory_at_0, reg_0, 0)
					FUNC_LIST[25](add_i32(loc_0, 112), add_i32(loc_0, 92), loc_5, load_i32(memory_at_0, loc_0 + 212), load_i32_u8(memory_at_0, loc_0 + 216), loc_1)
					GLOBAL_LIST[0].value = add_i32(loc_12, 16)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[40](loc_13)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[163]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[147](add_i32(loc_1, 8), 4545, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[236] = --[[ Luau::Compiler::resolveAssignConflicts(Luau::AstStat*, std::__2::vector<Luau::Compiler::Assignment, std::__2::allocator<Luau::Compiler::Assignment>>&, Luau::AstArray<Luau::AstExpr*> const&)::Visitor::visit(Luau::AstExprLocal*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_2 = load_i32(memory_at_0, loc_0 + 4)
			if load_i32(memory_at_0, loc_2 + 60) == 0 then
				break
			end
			loc_6 = load_i32(memory_at_0, loc_2 + 64)
			loc_3 = load_i32(memory_at_0, loc_1 + 24)
			if loc_6 == loc_3 then
				break
			end
			loc_1 = bxor_i32(shr_u32(loc_3, 4), shr_u32(loc_3, 9))
			loc_4 = sub_i32(load_i32(memory_at_0, loc_2 + 56), 1)
			loc_7 = load_i32(memory_at_0, loc_2 + 52)
			loc_2 = 0
			while true do
				loc_8 = band_i32(loc_1, loc_4)
				loc_5 = add_i32(mul_i32(loc_8, 12), loc_7)
				loc_1 = load_i32(memory_at_0, loc_5)
				if loc_1 ~= loc_3 then
					while true do
						if loc_1 == loc_6 then
							desired = 1
							break
						end
						loc_2 = add_i32(loc_2, 1)
						loc_1 = add_i32(loc_8, loc_2)
						if loc_2 <= loc_4 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if load_i32_u8(memory_at_0, loc_5 + 5) == 0 then
				break
			end
			loc_2 = load_i32_u8(memory_at_0, loc_5 + 4)
			loc_1 = shl_i32(1, loc_2)
			loc_2 = add_i32(shl_i32(shr_u32(loc_2, 5), 2), loc_0)
			if band_i32(loc_1, load_i32(memory_at_0, loc_2 + 40)) == 0 then
				break
			end
			loc_9 = loc_2
			loc_2 = add_i32(loc_9, 8)
			store_i32(memory_at_0, loc_2, bor_i32(loc_1, load_i32(memory_at_0, loc_9 + 8)))
			break
		end
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[237] = --[[ Luau::Compiler::ConstUpvalueVisitor::~ConstUpvalueVisitor() ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0, 11764)
		loc_1 = load_i32(memory_at_0, loc_0 + 8)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 12, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[238] = --[[ Luau::Compiler::ConstUpvalueVisitor::~ConstUpvalueVisitor().1 ]] function(loc_0)
	local loc_1 = 0
	while true do
		store_i32(memory_at_0, loc_0, 11764)
		loc_1 = load_i32(memory_at_0, loc_0 + 8)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 12, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		FUNC_LIST[609](loc_0)
		break
	end
end
FUNC_LIST[239] = --[[ Luau::Compiler::ConstUpvalueVisitor::visit(Luau::AstExprLocal*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					if load_i32_u8(memory_at_0, loc_1 + 28) == 0 then
						break
					end
					loc_2 = load_i32(memory_at_0, loc_0 + 4)
					if load_i32(memory_at_0, loc_2 + 120) == 0 then
						break
					end
					loc_5 = load_i32(memory_at_0, loc_2 + 124)
					if loc_1 == loc_5 then
						break
					end
					loc_3 = bxor_i32(shr_u32(loc_1, 4), shr_u32(loc_1, 9))
					loc_6 = sub_i32(load_i32(memory_at_0, loc_2 + 116), 1)
					loc_8 = load_i32(memory_at_0, loc_2 + 112)
					loc_2 = 0
					while true do
						loc_4 = band_i32(loc_3, loc_6)
						loc_7 = add_i32(shl_i32(loc_4, 5), loc_8)
						loc_3 = load_i32(memory_at_0, loc_7)
						if loc_3 ~= loc_1 then
							while true do
								if loc_3 == loc_5 then
									desired = 3
									break
								end
								loc_2 = add_i32(loc_2, 1)
								loc_3 = add_i32(loc_4, loc_2)
								if loc_2 <= loc_6 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if load_i32(memory_at_0, loc_7 + 8) == 0 then
						break
					end
					loc_2 = load_i32(memory_at_0, loc_0 + 12)
					if loc_2 ~= load_i32(memory_at_0, loc_0 + 16) then
						while true do
							store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_1 + 24))
							store_i32(memory_at_0, loc_0 + 12, add_i32(loc_2, 4))
							reg_0 = 0
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = add_i32(loc_0, 8)
					loc_6 = load_i32(memory_at_0, loc_7)
					loc_3 = sub_i32(loc_2, loc_6)
					loc_8 = shr_i32(loc_3, 2)
					loc_4 = add_i32(loc_8, 1)
					if loc_4 >= 1073741824 then
						desired = 2
						break
					end
					loc_5 = shr_i32(loc_3, 1)
					loc_4 = (if loc_3 >= 2147483644 then 1073741823 else (if loc_4 < loc_5 then loc_5 else loc_4))
					if loc_4 ~= 0 then
						while true do
							if loc_4 >= 1073741824 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](shl_i32(loc_4, 2))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = reg_0
					loc_3 = add_i32(loc_5, shl_i32(loc_8, 2))
					store_i32(memory_at_0, loc_3, load_i32(memory_at_0, loc_1 + 24))
					loc_1 = add_i32(shl_i32(loc_4, 2), loc_5)
					loc_4 = add_i32(loc_3, 4)
					if loc_2 ~= loc_6 then
						while true do
							while true do
								loc_3 = sub_i32(loc_3, 4)
								loc_2 = sub_i32(loc_2, 4)
								store_i32(memory_at_0, loc_3, load_i32(memory_at_0, loc_2))
								if loc_2 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = load_i32(memory_at_0, loc_7)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = reg_0
					store_i32(memory_at_0, loc_0 + 16, loc_1)
					store_i32(memory_at_0, loc_0 + 12, loc_4)
					store_i32(memory_at_0, loc_0 + 8, loc_3)
					if loc_2 == 0 then
						break
					end
					FUNC_LIST[609](loc_2)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_7)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[240] = --[[ Luau::Compiler::ReturnVisitor::visit(Luau::AstStatReturn*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		if load_i32(memory_at_0, loc_1 + 32) == 1 then
			while true do
				reg_0 = FUNC_LIST[201](load_i32(memory_at_0, loc_0 + 4), load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 28)))
				reg_0 = bxor_i32(reg_0, 1)
				break
			end
		else
			while true do
				reg_0 = loc_2
				break
			end
		end
		loc_2 = reg_0
		store_i32_n8(memory_at_0, loc_0 + 8, band_i32(loc_2, load_i32_u8(memory_at_0, loc_0 + 8)))
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[241] = --[[ luau_compile ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_4 = add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = add_i32(loc_4, 48)
		store_i64(memory_at_0, loc_5, i64_ZERO)
		store_i32(memory_at_0, loc_4 + 56, 0)
		store_i64(memory_at_0, loc_4 + 40, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 32, i64_from_u32(1, 1))
		if loc_2 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_4 + 56, load_i32(memory_at_0, loc_2 + 24))
				store_i64(memory_at_0, loc_4 + 48, load_i64(memory_at_0, loc_2 + 16))
				store_i64(memory_at_0, loc_4 + 40, load_i64(memory_at_0, loc_2 + 8))
				store_i64(memory_at_0, loc_4 + 32, load_i64(memory_at_0, loc_2))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_1 < 2147483632 then
			while true do
				while true do
					while true do
						if loc_1 >= 11 then
							while true do
								loc_5 = add_i32(bor_i32(loc_1, 15), 1)
								reg_0 = FUNC_LIST[606](loc_5)
								loc_2 = reg_0
								store_i32(memory_at_0, loc_4 + 16, bor_i32(loc_5, 2147483648))
								store_i32(memory_at_0, loc_4 + 8, loc_2)
								store_i32(memory_at_0, loc_4 + 12, loc_1)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						store_i32_n8(memory_at_0, loc_4 + 19, loc_1)
						loc_2 = add_i32(loc_4, 8)
						if loc_1 == 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[477](loc_2, loc_0, loc_1)
					break
				end
				if desired then
					break
				end
				store_i32_n8(memory_at_0, add_i32(loc_1, loc_2), 0)
				store_i32_n16(memory_at_0, loc_4 + 6, 0)
				FUNC_LIST[160](add_i32(loc_4, 20), add_i32(loc_4, 8), add_i32(loc_4, 32), add_i32(loc_4, 6), 0)
				if lt_i32(load_i32_i8(memory_at_0, loc_4 + 19), 0) then
					while true do
						FUNC_LIST[609](load_i32(memory_at_0, loc_4 + 8))
						break
					end
					if desired then
						break
					end
				end
				loc_1 = load_i32_i8(memory_at_0, loc_4 + 31)
				loc_0 = (if lt_i32(loc_1, 0) then load_i32(memory_at_0, loc_4 + 24) else loc_1)
				reg_0 = FUNC_LIST[513](loc_0)
				loc_2 = reg_0
				if loc_2 ~= 0 then
					while true do
						reg_0 = FUNC_LIST[477](loc_2, (if lt_i32(loc_1, 0) then load_i32(memory_at_0, loc_4 + 20) else add_i32(loc_4, 20)), loc_0)
						store_i32(memory_at_0, loc_3, loc_0)
						break
					end
					if desired then
						break
					end
				end
				if lt_i32(loc_1, 0) then
					while true do
						FUNC_LIST[609](load_i32(memory_at_0, loc_4 + 20))
						break
					end
					if desired then
						break
					end
				end
				GLOBAL_LIST[0].value = sub_i32(loc_4, 4294967232)
				reg_0 = loc_2
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[242](add_i32(loc_4, 8))
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[242] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__throw_length_error[abi:ue170004]() const ]] function(loc_0)
	while true do
		FUNC_LIST[243](3709)
		error("out of code bounds")
	end
end
FUNC_LIST[243] = --[[ std::__2::__throw_length_error[abi:ue170004](char const*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[538](8)
		reg_0 = FUNC_LIST[244](reg_0, loc_0)
		FUNC_LIST[0](reg_0, 46964, 115)
		error("out of code bounds")
	end
end
FUNC_LIST[244] = --[[ std::length_error::length_error[abi:ue170004](char const*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[540](loc_0, loc_1)
		loc_1 = reg_0
		store_i32(memory_at_0, loc_1, 46932)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[245] = --[[ Luau::AstExprGroup::AstExprGroup(Luau::Location const&, Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47180))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0 + 24, loc_2)
		store_i32(memory_at_0, loc_0, 12396)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[246] = --[[ Luau::AstExprGroup::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 16)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_0 = load_i32(memory_at_0, loc_0 + 24)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[247] = --[[ Luau::AstExprConstantNil::AstExprConstantNil(Luau::Location const&) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47188))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0, 12420)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[248] = --[[ Luau::AstExprConstantNil::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 20)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[249] = --[[ Luau::AstExprConstantBool::AstExprConstantBool(Luau::Location const&, bool) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47196))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, loc_2)
		store_i32(memory_at_0, loc_0, 12444)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[250] = --[[ Luau::AstExprConstantBool::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 24)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[251] = --[[ Luau::AstExprConstantNumber::AstExprConstantNumber(Luau::Location const&, double, Luau::ConstantNumberParseResult) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47204))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0 + 32, loc_3)
		store_f64(memory_at_0, loc_0 + 24, loc_2)
		store_i32(memory_at_0, loc_0, 12468)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[252] = --[[ Luau::AstExprConstantNumber::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 28)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[253] = --[[ Luau::AstExprConstantString::AstExprConstantString(Luau::Location const&, Luau::AstArray<char> const&, Luau::AstExprConstantString::QuoteStyle) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = i64_ZERO
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47212))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0, 12492)
		loc_4 = load_i64(memory_at_0, loc_2)
		store_i32(memory_at_0, loc_0 + 32, loc_3)
		store_i64(memory_at_0, loc_0 + 24, loc_4)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[254] = --[[ Luau::AstExprConstantString::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 32)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[255] = --[[ Luau::AstExprLocal::AstExprLocal(Luau::Location const&, Luau::AstLocal*, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47220))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 28, loc_3)
		store_i32(memory_at_0, loc_0 + 24, loc_2)
		store_i32(memory_at_0, loc_0, 12516)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[256] = --[[ Luau::AstExprLocal::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 36)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[257] = --[[ Luau::AstExprGlobal::AstExprGlobal(Luau::Location const&, Luau::AstName const&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47228))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0, 12540)
		store_i32(memory_at_0, loc_0 + 24, load_i32(memory_at_0, loc_2))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[258] = --[[ Luau::AstExprGlobal::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 40)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[259] = --[[ Luau::AstExprVarargs::AstExprVarargs(Luau::Location const&) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47236))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0, 12564)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[260] = --[[ Luau::AstExprVarargs::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 44)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[261] = --[[ Luau::AstExprCall::AstExprCall(Luau::Location const&, Luau::AstExpr*, Luau::AstArray<Luau::AstExpr*> const&, bool, Luau::Location const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = i64_ZERO
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47244))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0 + 24, loc_2)
		store_i32(memory_at_0, loc_0, 12588)
		loc_6 = load_i64(memory_at_0, loc_3)
		store_i32_n8(memory_at_0, loc_0 + 36, loc_4)
		store_i64(memory_at_0, loc_0 + 28, loc_6)
		store_i64(memory_at_0, loc_0 + 40, load_i64(memory_at_0, loc_5))
		store_i64(memory_at_0, loc_0 + 48, load_i64(memory_at_0, loc_5 + 8))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[262] = --[[ Luau::AstExprCall::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 48)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_2 = load_i32(memory_at_0, loc_0 + 24)
			TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
			loc_3 = load_i32(memory_at_0, loc_0 + 32)
			if loc_3 == 0 then
				break
			end
			loc_5 = load_i32(memory_at_0, loc_0 + 28)
			loc_0 = loc_5
			loc_6 = band_i32(loc_3, 3)
			if loc_6 ~= 0 then
				while true do
					loc_2 = 0
					while true do
						loc_4 = load_i32(memory_at_0, loc_0)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_4))](loc_4, loc_1)
						loc_0 = add_i32(loc_0, 4)
						loc_2 = add_i32(loc_2, 1)
						if loc_6 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if band_i32(sub_i32(loc_3, 1), 1073741823) < 3 then
				break
			end
			loc_4 = add_i32(shl_i32(loc_3, 2), loc_5)
			while true do
				loc_2 = load_i32(memory_at_0, loc_0)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 4)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 8)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 12)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = add_i32(loc_0, 16)
				if loc_4 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[263] = --[[ Luau::AstExprIndexName::AstExprIndexName(Luau::Location const&, Luau::AstExpr*, Luau::AstName const&, Luau::Location const&, Luau::Position const&, char) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6)
	local loc_7 = i64_ZERO
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47252))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0 + 24, loc_2)
		store_i32(memory_at_0, loc_0, 12612)
		store_i32(memory_at_0, loc_0 + 28, load_i32(memory_at_0, loc_3))
		store_i64(memory_at_0, loc_0 + 32, load_i64(memory_at_0, loc_4))
		store_i64(memory_at_0, loc_0 + 40, load_i64(memory_at_0, loc_4 + 8))
		loc_7 = load_i64(memory_at_0, loc_5)
		store_i32_n8(memory_at_0, loc_0 + 56, loc_6)
		store_i64(memory_at_0, loc_0 + 48, loc_7)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[264] = --[[ Luau::AstExprIndexName::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 52)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_0 = load_i32(memory_at_0, loc_0 + 24)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[265] = --[[ Luau::AstExprIndexExpr::AstExprIndexExpr(Luau::Location const&, Luau::AstExpr*, Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47260))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0 + 28, loc_3)
		store_i32(memory_at_0, loc_0 + 24, loc_2)
		store_i32(memory_at_0, loc_0, 12636)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[266] = --[[ Luau::AstExprIndexExpr::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 56)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_2 = load_i32(memory_at_0, loc_0 + 24)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = load_i32(memory_at_0, loc_0 + 28)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[267] = --[[ Luau::AstExprFunction::AstExprFunction(Luau::Location const&, Luau::AstArray<Luau::AstGenericType> const&, Luau::AstArray<Luau::AstGenericTypePack> const&, Luau::AstLocal*, Luau::AstArray<Luau::AstLocal*> const&, bool, Luau::Location const&, Luau::AstStatBlock*, unsigned long, Luau::AstName const&, std::__2::optional<Luau::AstTypeList> const&, Luau::AstTypePack*, std::__2::optional<Luau::Location> const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7, loc_8, loc_9, loc_10, loc_11, loc_12, loc_13)
	local loc_14 = i64_ZERO
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47268))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0, 12660)
		store_i64(memory_at_0, loc_0 + 24, load_i64(memory_at_0, loc_2))
		loc_14 = load_i64(memory_at_0, loc_3)
		store_i32(memory_at_0, loc_0 + 40, loc_4)
		store_i64(memory_at_0, loc_0 + 32, loc_14)
		store_i64(memory_at_0, loc_0 + 44, load_i64(memory_at_0, loc_5))
		store_i64(memory_at_0, loc_0 + 52, load_i64(memory_at_0, loc_11))
		store_i64(memory_at_0, loc_0 + 60, load_i64(memory_at_0, loc_11 + 8))
		store_i32_n8(memory_at_0, loc_0 + 68, loc_6)
		store_i64(memory_at_0, loc_0 + 72, load_i64(memory_at_0, loc_7))
		store_i64(memory_at_0, loc_0 + 80, load_i64(memory_at_0, loc_7 + 8))
		store_i32(memory_at_0, loc_0 + 96, loc_9)
		store_i32(memory_at_0, loc_0 + 92, loc_8)
		store_i32(memory_at_0, loc_0 + 88, loc_12)
		store_i32(memory_at_0, loc_0 + 100, load_i32(memory_at_0, loc_10))
		store_i64(memory_at_0, loc_0 + 104, load_i64(memory_at_0, loc_13))
		store_i64(memory_at_0, loc_0 + 112, load_i64(memory_at_0, loc_13 + 8))
		store_i32(memory_at_0, loc_0 + 120, load_i32(memory_at_0, loc_13 + 16))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[268] = --[[ Luau::AstExprFunction::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 60)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				while true do
					loc_3 = load_i32(memory_at_0, loc_0 + 48)
					if loc_3 == 0 then
						break
					end
					loc_5 = band_i32(sub_i32(loc_3, 1), 1073741823)
					loc_4 = load_i32(memory_at_0, loc_0 + 44)
					loc_2 = loc_4
					if band_i32(loc_3, 1) ~= 0 then
						while true do
							loc_2 = load_i32(memory_at_0, load_i32(memory_at_0, loc_4) + 32)
							if loc_2 ~= 0 then
								while true do
									TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
									break
								end
							end
							reg_0 = add_i32(loc_4, 4)
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
					end
					loc_2 = reg_0
					if loc_5 == 0 then
						break
					end
					loc_4 = add_i32(shl_i32(loc_3, 2), loc_4)
					while true do
						loc_3 = load_i32(memory_at_0, load_i32(memory_at_0, loc_2) + 32)
						if loc_3 ~= 0 then
							while true do
								TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
								break
							end
						end
						loc_3 = load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 4) + 32)
						if loc_3 ~= 0 then
							while true do
								TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
								break
							end
						end
						loc_2 = add_i32(loc_2, 8)
						if loc_4 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
				loc_2 = load_i32(memory_at_0, loc_0 + 88)
				if loc_2 ~= 0 then
					while true do
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
						break
					end
				end
				while true do
					if load_i32_u8(memory_at_0, loc_0 + 64) == 0 then
						break
					end
					while true do
						loc_6 = load_i32(memory_at_0, loc_0 + 56)
						if loc_6 == 0 then
							break
						end
						loc_7 = load_i32(memory_at_0, loc_0 + 52)
						loc_2 = loc_7
						loc_5 = band_i32(loc_6, 3)
						if loc_5 ~= 0 then
							while true do
								loc_3 = 0
								while true do
									loc_4 = load_i32(memory_at_0, loc_2)
									TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_4))](loc_4, loc_1)
									loc_2 = add_i32(loc_2, 4)
									loc_3 = add_i32(loc_3, 1)
									if loc_5 ~= loc_3 then
										continue
									end
									break
								end
								break
							end
						end
						if band_i32(sub_i32(loc_6, 1), 1073741823) <= 2 then
							break
						end
						loc_4 = add_i32(shl_i32(loc_6, 2), loc_7)
						while true do
							loc_3 = load_i32(memory_at_0, loc_2)
							TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
							loc_3 = load_i32(memory_at_0, loc_2 + 4)
							TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
							loc_3 = load_i32(memory_at_0, loc_2 + 8)
							TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
							loc_3 = load_i32(memory_at_0, loc_2 + 12)
							TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
							loc_2 = add_i32(loc_2, 16)
							if loc_4 ~= loc_2 then
								continue
							end
							break
						end
						break
					end
					loc_2 = load_i32(memory_at_0, loc_0 + 60)
					if loc_2 == 0 then
						break
					end
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
					break
				end
				loc_2 = load_i32(memory_at_0, loc_0 + 92)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[269] = --[[ Luau::AstExprTable::AstExprTable(Luau::Location const&, Luau::AstArray<Luau::AstExprTable::Item> const&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47276))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0, 12684)
		store_i64(memory_at_0, loc_0 + 24, load_i64(memory_at_0, loc_2))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[270] = --[[ Luau::AstExprTable::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 64)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_2 = load_i32(memory_at_0, loc_0 + 28)
			if loc_2 == 0 then
				break
			end
			loc_0 = load_i32(memory_at_0, loc_0 + 24)
			loc_3 = add_i32(loc_0, mul_i32(loc_2, 12))
			while true do
				loc_2 = load_i32(memory_at_0, loc_0 + 4)
				if loc_2 ~= 0 then
					while true do
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
						break
					end
				end
				loc_2 = load_i32(memory_at_0, loc_0 + 8)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = add_i32(loc_0, 12)
				if loc_3 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[271] = --[[ Luau::AstExprUnary::AstExprUnary(Luau::Location const&, Luau::AstExprUnary::Op, Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47284))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0 + 28, loc_3)
		store_i32(memory_at_0, loc_0 + 24, loc_2)
		store_i32(memory_at_0, loc_0, 12708)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[272] = --[[ Luau::AstExprUnary::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 68)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_0 = load_i32(memory_at_0, loc_0 + 28)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[273] = --[[ Luau::AstExprBinary::AstExprBinary(Luau::Location const&, Luau::AstExprBinary::Op, Luau::AstExpr*, Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47292))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0 + 32, loc_4)
		store_i32(memory_at_0, loc_0 + 28, loc_3)
		store_i32(memory_at_0, loc_0 + 24, loc_2)
		store_i32(memory_at_0, loc_0, 12732)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[274] = --[[ Luau::AstExprBinary::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 72)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_2 = load_i32(memory_at_0, loc_0 + 28)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = load_i32(memory_at_0, loc_0 + 32)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[275] = --[[ Luau::AstExprTypeAssertion::AstExprTypeAssertion(Luau::Location const&, Luau::AstExpr*, Luau::AstType*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47300))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0 + 28, loc_3)
		store_i32(memory_at_0, loc_0 + 24, loc_2)
		store_i32(memory_at_0, loc_0, 12756)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[276] = --[[ Luau::AstExprTypeAssertion::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 76)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_2 = load_i32(memory_at_0, loc_0 + 24)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = load_i32(memory_at_0, loc_0 + 28)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[277] = --[[ Luau::AstExprIfElse::AstExprIfElse(Luau::Location const&, Luau::AstExpr*, bool, Luau::AstExpr*, bool, Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47308))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0 + 40, loc_6)
		store_i32_n8(memory_at_0, loc_0 + 36, loc_5)
		store_i32(memory_at_0, loc_0 + 32, loc_4)
		store_i32_n8(memory_at_0, loc_0 + 28, loc_3)
		store_i32(memory_at_0, loc_0 + 24, loc_2)
		store_i32(memory_at_0, loc_0, 12780)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[278] = --[[ Luau::AstExprIfElse::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 80)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_2 = load_i32(memory_at_0, loc_0 + 24)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 32)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = load_i32(memory_at_0, loc_0 + 40)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[279] = --[[ Luau::AstExprError::AstExprError(Luau::Location const&, Luau::AstArray<Luau::AstExpr*> const&, unsigned int) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = i64_ZERO
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47524))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0, 12804)
		loc_4 = load_i64(memory_at_0, loc_2)
		store_i32(memory_at_0, loc_0 + 32, loc_3)
		store_i64(memory_at_0, loc_0 + 24, loc_4)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[280] = --[[ Luau::AstExprInterpString::AstExprInterpString(Luau::Location const&, Luau::AstArray<Luau::AstArray<char>> const&, Luau::AstArray<Luau::AstExpr*> const&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47316))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0, 12828)
		store_i64(memory_at_0, loc_0 + 24, load_i64(memory_at_0, loc_2))
		store_i64(memory_at_0, loc_0 + 32, load_i64(memory_at_0, loc_3))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[281] = --[[ Luau::AstExprInterpString::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 84)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_0 + 36)
			if loc_3 == 0 then
				break
			end
			loc_5 = load_i32(memory_at_0, loc_0 + 32)
			loc_0 = loc_5
			loc_6 = band_i32(loc_3, 3)
			if loc_6 ~= 0 then
				while true do
					while true do
						loc_4 = load_i32(memory_at_0, loc_0)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_4))](loc_4, loc_1)
						loc_0 = add_i32(loc_0, 4)
						loc_2 = add_i32(loc_2, 1)
						if loc_6 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if band_i32(sub_i32(loc_3, 1), 1073741823) < 3 then
				break
			end
			loc_4 = add_i32(shl_i32(loc_3, 2), loc_5)
			while true do
				loc_2 = load_i32(memory_at_0, loc_0)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 4)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 8)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 12)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = add_i32(loc_0, 16)
				if loc_4 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[282] = --[[ Luau::AstExprError::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 88)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_0 + 28)
			if loc_3 == 0 then
				break
			end
			loc_5 = load_i32(memory_at_0, loc_0 + 24)
			loc_0 = loc_5
			loc_6 = band_i32(loc_3, 3)
			if loc_6 ~= 0 then
				while true do
					while true do
						loc_4 = load_i32(memory_at_0, loc_0)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_4))](loc_4, loc_1)
						loc_0 = add_i32(loc_0, 4)
						loc_2 = add_i32(loc_2, 1)
						if loc_6 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if band_i32(sub_i32(loc_3, 1), 1073741823) < 3 then
				break
			end
			loc_4 = add_i32(shl_i32(loc_3, 2), loc_5)
			while true do
				loc_2 = load_i32(memory_at_0, loc_0)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 4)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 8)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 12)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = add_i32(loc_0, 16)
				if loc_4 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[283] = --[[ Luau::AstStatBlock::AstStatBlock(Luau::Location const&, Luau::AstArray<Luau::AstStat*> const&, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = i64_ZERO
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47324))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, 0)
		store_i32(memory_at_0, loc_0, 12852)
		loc_4 = load_i64(memory_at_0, loc_2)
		store_i32_n8(memory_at_0, loc_0 + 36, loc_3)
		store_i64(memory_at_0, loc_0 + 28, loc_4)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[284] = --[[ Luau::AstStatBlock::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 96)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_0 + 32)
			if loc_3 == 0 then
				break
			end
			loc_5 = load_i32(memory_at_0, loc_0 + 28)
			loc_0 = loc_5
			loc_6 = band_i32(loc_3, 3)
			if loc_6 ~= 0 then
				while true do
					while true do
						loc_4 = load_i32(memory_at_0, loc_0)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_4))](loc_4, loc_1)
						loc_0 = add_i32(loc_0, 4)
						loc_2 = add_i32(loc_2, 1)
						if loc_6 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if band_i32(sub_i32(loc_3, 1), 1073741823) < 3 then
				break
			end
			loc_4 = add_i32(shl_i32(loc_3, 2), loc_5)
			while true do
				loc_2 = load_i32(memory_at_0, loc_0)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 4)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 8)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 12)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = add_i32(loc_0, 16)
				if loc_4 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[285] = --[[ Luau::AstStatIf::AstStatIf(Luau::Location const&, Luau::AstExpr*, Luau::AstStatBlock*, Luau::AstStat*, std::__2::optional<Luau::Location> const&, std::__2::optional<Luau::Location> const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47332))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, 0)
		store_i32(memory_at_0, loc_0 + 36, loc_4)
		store_i32(memory_at_0, loc_0 + 32, loc_3)
		store_i32(memory_at_0, loc_0 + 28, loc_2)
		store_i32(memory_at_0, loc_0, 12876)
		store_i64(memory_at_0, loc_0 + 40, load_i64(memory_at_0, loc_5))
		store_i64(memory_at_0, loc_0 + 48, load_i64(memory_at_0, loc_5 + 8))
		store_i32(memory_at_0, loc_0 + 56, load_i32(memory_at_0, loc_5 + 16))
		store_i64(memory_at_0, loc_0 + 60, load_i64(memory_at_0, loc_6))
		store_i64(memory_at_0, loc_0 + 68, load_i64(memory_at_0, loc_6 + 8))
		store_i32(memory_at_0, loc_0 + 76, load_i32(memory_at_0, loc_6 + 16))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[286] = --[[ Luau::AstStatIf::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 100)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_2 = load_i32(memory_at_0, loc_0 + 28)
			TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
			loc_2 = load_i32(memory_at_0, loc_0 + 32)
			TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
			loc_0 = load_i32(memory_at_0, loc_0 + 36)
			if loc_0 == 0 then
				break
			end
			TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0))](loc_0, loc_1)
			break
		end
		break
	end
end
FUNC_LIST[287] = --[[ Luau::AstStatWhile::AstStatWhile(Luau::Location const&, Luau::AstExpr*, Luau::AstStatBlock*, bool, Luau::Location const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47340))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, 0)
		store_i32_n8(memory_at_0, loc_0 + 36, loc_4)
		store_i32(memory_at_0, loc_0 + 32, loc_3)
		store_i32(memory_at_0, loc_0 + 28, loc_2)
		store_i32(memory_at_0, loc_0, 12900)
		store_i64(memory_at_0, loc_0 + 40, load_i64(memory_at_0, loc_5))
		store_i64(memory_at_0, loc_0 + 48, load_i64(memory_at_0, loc_5 + 8))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[288] = --[[ Luau::AstStatWhile::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 104)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_2 = load_i32(memory_at_0, loc_0 + 28)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = load_i32(memory_at_0, loc_0 + 32)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[289] = --[[ Luau::AstStatRepeat::AstStatRepeat(Luau::Location const&, Luau::AstExpr*, Luau::AstStatBlock*, bool) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47348))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, 0)
		store_i32_n8(memory_at_0, loc_0 + 36, loc_4)
		store_i32(memory_at_0, loc_0 + 32, loc_3)
		store_i32(memory_at_0, loc_0 + 28, loc_2)
		store_i32(memory_at_0, loc_0, 12924)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[290] = --[[ Luau::AstStatRepeat::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 108)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_2 = load_i32(memory_at_0, loc_0 + 32)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = load_i32(memory_at_0, loc_0 + 28)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[291] = --[[ Luau::AstStatBreak::AstStatBreak(Luau::Location const&) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47356))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, 0)
		store_i32(memory_at_0, loc_0, 12948)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[292] = --[[ Luau::AstStatBreak::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 112)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[293] = --[[ Luau::AstStatContinue::AstStatContinue(Luau::Location const&) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47364))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, 0)
		store_i32(memory_at_0, loc_0, 12972)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[294] = --[[ Luau::AstStatContinue::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 116)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[295] = --[[ Luau::AstStatReturn::AstStatReturn(Luau::Location const&, Luau::AstArray<Luau::AstExpr*> const&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47372))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, 0)
		store_i32(memory_at_0, loc_0, 12996)
		store_i64(memory_at_0, loc_0 + 28, load_i64(memory_at_0, loc_2))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[296] = --[[ Luau::AstStatReturn::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 120)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_0 + 32)
			if loc_3 == 0 then
				break
			end
			loc_5 = load_i32(memory_at_0, loc_0 + 28)
			loc_0 = loc_5
			loc_6 = band_i32(loc_3, 3)
			if loc_6 ~= 0 then
				while true do
					while true do
						loc_4 = load_i32(memory_at_0, loc_0)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_4))](loc_4, loc_1)
						loc_0 = add_i32(loc_0, 4)
						loc_2 = add_i32(loc_2, 1)
						if loc_6 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if band_i32(sub_i32(loc_3, 1), 1073741823) < 3 then
				break
			end
			loc_4 = add_i32(shl_i32(loc_3, 2), loc_5)
			while true do
				loc_2 = load_i32(memory_at_0, loc_0)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 4)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 8)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 12)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = add_i32(loc_0, 16)
				if loc_4 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[297] = --[[ Luau::AstStatExpr::AstStatExpr(Luau::Location const&, Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47380))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, 0)
		store_i32(memory_at_0, loc_0 + 28, loc_2)
		store_i32(memory_at_0, loc_0, 13020)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[298] = --[[ Luau::AstStatExpr::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 124)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_0 = load_i32(memory_at_0, loc_0 + 28)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[299] = --[[ Luau::AstStatLocal::AstStatLocal(Luau::Location const&, Luau::AstArray<Luau::AstLocal*> const&, Luau::AstArray<Luau::AstExpr*> const&, std::__2::optional<Luau::Location> const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47388))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, 0)
		store_i32(memory_at_0, loc_0, 13044)
		store_i64(memory_at_0, loc_0 + 28, load_i64(memory_at_0, loc_2))
		store_i64(memory_at_0, loc_0 + 36, load_i64(memory_at_0, loc_3))
		store_i64(memory_at_0, loc_0 + 44, load_i64(memory_at_0, loc_4))
		store_i64(memory_at_0, loc_0 + 52, load_i64(memory_at_0, loc_4 + 8))
		store_i32(memory_at_0, loc_0 + 60, load_i32(memory_at_0, loc_4 + 16))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[300] = --[[ Luau::AstStatLocal::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 128)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			while true do
				loc_2 = load_i32(memory_at_0, loc_0 + 32)
				if loc_2 == 0 then
					break
				end
				loc_5 = band_i32(sub_i32(loc_2, 1), 1073741823)
				loc_4 = load_i32(memory_at_0, loc_0 + 28)
				loc_3 = loc_4
				if band_i32(loc_2, 1) ~= 0 then
					while true do
						loc_3 = load_i32(memory_at_0, load_i32(memory_at_0, loc_4) + 32)
						if loc_3 ~= 0 then
							while true do
								TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
								break
							end
						end
						reg_0 = add_i32(loc_4, 4)
						break
					end
				else
					while true do
						reg_0 = loc_3
						break
					end
				end
				loc_3 = reg_0
				if loc_5 == 0 then
					break
				end
				loc_4 = add_i32(shl_i32(loc_2, 2), loc_4)
				while true do
					loc_2 = load_i32(memory_at_0, load_i32(memory_at_0, loc_3) + 32)
					if loc_2 ~= 0 then
						while true do
							TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
							break
						end
					end
					loc_2 = load_i32(memory_at_0, load_i32(memory_at_0, loc_3 + 4) + 32)
					if loc_2 ~= 0 then
						while true do
							TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
							break
						end
					end
					loc_3 = add_i32(loc_3, 8)
					if loc_4 ~= loc_3 then
						continue
					end
					break
				end
				break
			end
			loc_5 = load_i32(memory_at_0, loc_0 + 40)
			if loc_5 == 0 then
				break
			end
			loc_6 = load_i32(memory_at_0, loc_0 + 36)
			loc_3 = loc_6
			loc_0 = band_i32(loc_5, 3)
			if loc_0 ~= 0 then
				while true do
					loc_2 = 0
					while true do
						loc_4 = load_i32(memory_at_0, loc_3)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_4))](loc_4, loc_1)
						loc_3 = add_i32(loc_3, 4)
						loc_2 = add_i32(loc_2, 1)
						if loc_0 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if band_i32(sub_i32(loc_5, 1), 1073741823) < 3 then
				break
			end
			loc_4 = add_i32(shl_i32(loc_5, 2), loc_6)
			while true do
				loc_2 = load_i32(memory_at_0, loc_3)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_3 + 4)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_3 + 8)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_3 + 12)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_3 = add_i32(loc_3, 16)
				if loc_4 ~= loc_3 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[301] = --[[ Luau::AstStatFor::AstStatFor(Luau::Location const&, Luau::AstLocal*, Luau::AstExpr*, Luau::AstExpr*, Luau::AstExpr*, Luau::AstStatBlock*, bool, Luau::Location const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7, loc_8)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47396))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, 0)
		store_i32_n8(memory_at_0, loc_0 + 48, loc_7)
		store_i32(memory_at_0, loc_0 + 44, loc_6)
		store_i32(memory_at_0, loc_0 + 40, loc_5)
		store_i32(memory_at_0, loc_0 + 36, loc_4)
		store_i32(memory_at_0, loc_0 + 32, loc_3)
		store_i32(memory_at_0, loc_0 + 28, loc_2)
		store_i32(memory_at_0, loc_0, 13068)
		store_i64(memory_at_0, loc_0 + 52, load_i64(memory_at_0, loc_8))
		store_i64(memory_at_0, loc_0 + 60, load_i64(memory_at_0, loc_8 + 8))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[302] = --[[ Luau::AstStatFor::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 132)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_2 = load_i32(memory_at_0, load_i32(memory_at_0, loc_0 + 28) + 32)
				if loc_2 ~= 0 then
					while true do
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
						break
					end
				end
				loc_2 = load_i32(memory_at_0, loc_0 + 32)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 36)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 40)
				if loc_2 ~= 0 then
					while true do
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
						break
					end
				end
				loc_0 = load_i32(memory_at_0, loc_0 + 44)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[303] = --[[ Luau::AstStatForIn::AstStatForIn(Luau::Location const&, Luau::AstArray<Luau::AstLocal*> const&, Luau::AstArray<Luau::AstExpr*> const&, Luau::AstStatBlock*, bool, Luau::Location const&, bool, Luau::Location const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7, loc_8)
	local loc_9 = i64_ZERO
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47404))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, 0)
		store_i32(memory_at_0, loc_0, 13092)
		store_i64(memory_at_0, loc_0 + 28, load_i64(memory_at_0, loc_2))
		loc_9 = load_i64(memory_at_0, loc_3)
		store_i32_n8(memory_at_0, loc_0 + 48, loc_5)
		store_i32(memory_at_0, loc_0 + 44, loc_4)
		store_i64(memory_at_0, loc_0 + 36, loc_9)
		store_i64(memory_at_0, loc_0 + 52, load_i64(memory_at_0, loc_6))
		store_i64(memory_at_0, loc_0 + 60, load_i64(memory_at_0, loc_6 + 8))
		store_i32_n8(memory_at_0, loc_0 + 68, loc_7)
		store_i64(memory_at_0, loc_0 + 72, load_i64(memory_at_0, loc_8))
		store_i64(memory_at_0, loc_0 + 80, load_i64(memory_at_0, loc_8 + 8))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[304] = --[[ Luau::AstStatForIn::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 136)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				while true do
					loc_3 = load_i32(memory_at_0, loc_0 + 32)
					if loc_3 == 0 then
						break
					end
					loc_5 = band_i32(sub_i32(loc_3, 1), 1073741823)
					loc_4 = load_i32(memory_at_0, loc_0 + 28)
					loc_2 = loc_4
					if band_i32(loc_3, 1) ~= 0 then
						while true do
							loc_2 = load_i32(memory_at_0, load_i32(memory_at_0, loc_4) + 32)
							if loc_2 ~= 0 then
								while true do
									TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
									break
								end
							end
							reg_0 = add_i32(loc_4, 4)
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
					end
					loc_2 = reg_0
					if loc_5 == 0 then
						break
					end
					loc_4 = add_i32(shl_i32(loc_3, 2), loc_4)
					while true do
						loc_3 = load_i32(memory_at_0, load_i32(memory_at_0, loc_2) + 32)
						if loc_3 ~= 0 then
							while true do
								TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
								break
							end
						end
						loc_3 = load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 4) + 32)
						if loc_3 ~= 0 then
							while true do
								TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
								break
							end
						end
						loc_2 = add_i32(loc_2, 8)
						if loc_4 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
				while true do
					loc_6 = load_i32(memory_at_0, loc_0 + 40)
					if loc_6 == 0 then
						break
					end
					loc_7 = load_i32(memory_at_0, loc_0 + 36)
					loc_2 = loc_7
					loc_5 = band_i32(loc_6, 3)
					if loc_5 ~= 0 then
						while true do
							loc_3 = 0
							while true do
								loc_4 = load_i32(memory_at_0, loc_2)
								TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_4))](loc_4, loc_1)
								loc_2 = add_i32(loc_2, 4)
								loc_3 = add_i32(loc_3, 1)
								if loc_5 ~= loc_3 then
									continue
								end
								break
							end
							break
						end
					end
					if band_i32(sub_i32(loc_6, 1), 1073741823) < 3 then
						break
					end
					loc_4 = add_i32(shl_i32(loc_6, 2), loc_7)
					while true do
						loc_3 = load_i32(memory_at_0, loc_2)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
						loc_3 = load_i32(memory_at_0, loc_2 + 4)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
						loc_3 = load_i32(memory_at_0, loc_2 + 8)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
						loc_3 = load_i32(memory_at_0, loc_2 + 12)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
						loc_2 = add_i32(loc_2, 16)
						if loc_4 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
				loc_2 = load_i32(memory_at_0, loc_0 + 44)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[305] = --[[ Luau::AstStatAssign::AstStatAssign(Luau::Location const&, Luau::AstArray<Luau::AstExpr*> const&, Luau::AstArray<Luau::AstExpr*> const&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47412))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, 0)
		store_i32(memory_at_0, loc_0, 13116)
		store_i64(memory_at_0, loc_0 + 28, load_i64(memory_at_0, loc_2))
		store_i64(memory_at_0, loc_0 + 36, load_i64(memory_at_0, loc_3))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[306] = --[[ Luau::AstStatAssign::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 140)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			while true do
				loc_4 = load_i32(memory_at_0, loc_0 + 32)
				if loc_4 == 0 then
					break
				end
				loc_6 = load_i32(memory_at_0, loc_0 + 28)
				loc_2 = loc_6
				loc_7 = band_i32(loc_4, 3)
				if loc_7 ~= 0 then
					while true do
						while true do
							loc_5 = load_i32(memory_at_0, loc_2)
							TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_5))](loc_5, loc_1)
							loc_2 = add_i32(loc_2, 4)
							loc_3 = add_i32(loc_3, 1)
							if loc_7 ~= loc_3 then
								continue
							end
							break
						end
						break
					end
				end
				if band_i32(sub_i32(loc_4, 1), 1073741823) <= 2 then
					break
				end
				loc_5 = add_i32(shl_i32(loc_4, 2), loc_6)
				while true do
					loc_3 = load_i32(memory_at_0, loc_2)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 4)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 8)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 12)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_2 = add_i32(loc_2, 16)
					if loc_5 ~= loc_2 then
						continue
					end
					break
				end
				break
			end
			loc_4 = load_i32(memory_at_0, loc_0 + 40)
			if loc_4 == 0 then
				break
			end
			loc_6 = band_i32(sub_i32(loc_4, 1), 1073741823)
			loc_0 = load_i32(memory_at_0, loc_0 + 36)
			loc_2 = loc_0
			loc_7 = band_i32(loc_4, 3)
			if loc_7 ~= 0 then
				while true do
					loc_3 = 0
					while true do
						loc_5 = load_i32(memory_at_0, loc_2)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_5))](loc_5, loc_1)
						loc_2 = add_i32(loc_2, 4)
						loc_3 = add_i32(loc_3, 1)
						if loc_7 ~= loc_3 then
							continue
						end
						break
					end
					break
				end
			end
			if loc_6 < 3 then
				break
			end
			loc_5 = add_i32(shl_i32(loc_4, 2), loc_0)
			while true do
				loc_3 = load_i32(memory_at_0, loc_2)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
				loc_3 = load_i32(memory_at_0, loc_2 + 4)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
				loc_3 = load_i32(memory_at_0, loc_2 + 8)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
				loc_3 = load_i32(memory_at_0, loc_2 + 12)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
				loc_2 = add_i32(loc_2, 16)
				if loc_5 ~= loc_2 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[307] = --[[ Luau::AstStatCompoundAssign::AstStatCompoundAssign(Luau::Location const&, Luau::AstExprBinary::Op, Luau::AstExpr*, Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47420))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, 0)
		store_i32(memory_at_0, loc_0 + 36, loc_4)
		store_i32(memory_at_0, loc_0 + 32, loc_3)
		store_i32(memory_at_0, loc_0 + 28, loc_2)
		store_i32(memory_at_0, loc_0, 13140)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[308] = --[[ Luau::AstStatCompoundAssign::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 144)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_2 = load_i32(memory_at_0, loc_0 + 32)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = load_i32(memory_at_0, loc_0 + 36)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[309] = --[[ Luau::AstStatFunction::AstStatFunction(Luau::Location const&, Luau::AstExpr*, Luau::AstExprFunction*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47428))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, 0)
		store_i32(memory_at_0, loc_0 + 32, loc_3)
		store_i32(memory_at_0, loc_0 + 28, loc_2)
		store_i32(memory_at_0, loc_0, 13164)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[310] = --[[ Luau::AstStatFunction::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 148)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_2 = load_i32(memory_at_0, loc_0 + 28)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = load_i32(memory_at_0, loc_0 + 32)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[311] = --[[ Luau::AstStatLocalFunction::AstStatLocalFunction(Luau::Location const&, Luau::AstLocal*, Luau::AstExprFunction*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47436))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, 0)
		store_i32(memory_at_0, loc_0 + 32, loc_3)
		store_i32(memory_at_0, loc_0 + 28, loc_2)
		store_i32(memory_at_0, loc_0, 13188)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[312] = --[[ Luau::AstStatLocalFunction::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 152)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_0 = load_i32(memory_at_0, loc_0 + 32)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[313] = --[[ Luau::AstStatTypeAlias::AstStatTypeAlias(Luau::Location const&, Luau::AstName const&, Luau::Location const&, Luau::AstArray<Luau::AstGenericType> const&, Luau::AstArray<Luau::AstGenericTypePack> const&, Luau::AstType*, bool) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7)
	local loc_8 = i64_ZERO
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47444))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, 0)
		store_i32(memory_at_0, loc_0, 13212)
		store_i32(memory_at_0, loc_0 + 28, load_i32(memory_at_0, loc_2))
		store_i64(memory_at_0, loc_0 + 32, load_i64(memory_at_0, loc_3))
		store_i64(memory_at_0, loc_0 + 40, load_i64(memory_at_0, loc_3 + 8))
		store_i64(memory_at_0, loc_0 + 48, load_i64(memory_at_0, loc_4))
		loc_8 = load_i64(memory_at_0, loc_5)
		store_i32_n8(memory_at_0, loc_0 + 68, loc_7)
		store_i32(memory_at_0, loc_0 + 64, loc_6)
		store_i64(memory_at_0, loc_0 + 56, loc_8)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[314] = --[[ Luau::AstStatTypeAlias::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 156)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				while true do
					loc_3 = load_i32(memory_at_0, loc_0 + 52)
					if loc_3 == 0 then
						break
					end
					loc_5 = band_i32(sub_i32(loc_3, 1), 536870911)
					loc_4 = load_i32(memory_at_0, loc_0 + 48)
					loc_2 = loc_4
					if band_i32(loc_3, 1) ~= 0 then
						while true do
							loc_2 = load_i32(memory_at_0, loc_4 + 20)
							if loc_2 ~= 0 then
								while true do
									TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
									break
								end
							end
							reg_0 = add_i32(loc_4, 24)
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
					end
					loc_2 = reg_0
					if loc_5 == 0 then
						break
					end
					loc_4 = add_i32(mul_i32(loc_3, 24), loc_4)
					while true do
						loc_3 = load_i32(memory_at_0, loc_2 + 20)
						if loc_3 ~= 0 then
							while true do
								TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
								break
							end
						end
						loc_3 = load_i32(memory_at_0, loc_2 + 44)
						if loc_3 ~= 0 then
							while true do
								TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
								break
							end
						end
						loc_2 = add_i32(loc_2, 48)
						if loc_4 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
				while true do
					loc_3 = load_i32(memory_at_0, loc_0 + 60)
					if loc_3 == 0 then
						break
					end
					loc_5 = band_i32(sub_i32(loc_3, 1), 536870911)
					loc_4 = load_i32(memory_at_0, loc_0 + 56)
					loc_2 = loc_4
					if band_i32(loc_3, 1) ~= 0 then
						while true do
							loc_2 = load_i32(memory_at_0, loc_4 + 20)
							if loc_2 ~= 0 then
								while true do
									TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
									break
								end
							end
							reg_0 = add_i32(loc_4, 24)
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
					end
					loc_2 = reg_0
					if loc_5 == 0 then
						break
					end
					loc_4 = add_i32(mul_i32(loc_3, 24), loc_4)
					while true do
						loc_3 = load_i32(memory_at_0, loc_2 + 20)
						if loc_3 ~= 0 then
							while true do
								TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
								break
							end
						end
						loc_3 = load_i32(memory_at_0, loc_2 + 44)
						if loc_3 ~= 0 then
							while true do
								TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
								break
							end
						end
						loc_2 = add_i32(loc_2, 48)
						if loc_4 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
				loc_2 = load_i32(memory_at_0, loc_0 + 64)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[315] = --[[ Luau::AstStatDeclareGlobal::AstStatDeclareGlobal(Luau::Location const&, Luau::AstName const&, Luau::AstType*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47452))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, 0)
		store_i32(memory_at_0, loc_0, 13236)
		loc_1 = load_i32(memory_at_0, loc_2)
		store_i32(memory_at_0, loc_0 + 32, loc_3)
		store_i32(memory_at_0, loc_0 + 28, loc_1)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[316] = --[[ Luau::AstStatDeclareGlobal::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 164)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_0 = load_i32(memory_at_0, loc_0 + 32)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[317] = --[[ Luau::AstStatDeclareFunction::AstStatDeclareFunction(Luau::Location const&, Luau::AstName const&, Luau::AstArray<Luau::AstGenericType> const&, Luau::AstArray<Luau::AstGenericTypePack> const&, Luau::AstTypeList const&, Luau::AstArray<std::__2::pair<Luau::AstName, Luau::Location>> const&, Luau::AstTypeList const&, bool) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7, loc_8)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47460))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, 0)
		store_i32(memory_at_0, loc_0, 13260)
		store_i32(memory_at_0, loc_0 + 28, load_i32(memory_at_0, loc_2))
		store_i64(memory_at_0, loc_0 + 32, load_i64(memory_at_0, loc_3))
		store_i64(memory_at_0, loc_0 + 40, load_i64(memory_at_0, loc_4))
		store_i64(memory_at_0, loc_0 + 48, load_i64(memory_at_0, loc_5))
		store_i32(memory_at_0, loc_0 + 56, load_i32(memory_at_0, loc_5 + 8))
		store_i64(memory_at_0, loc_0 + 60, load_i64(memory_at_0, loc_6))
		store_i32(memory_at_0, loc_0 + 76, load_i32(memory_at_0, loc_7 + 8))
		store_i64(memory_at_0, loc_0 + 68, load_i64(memory_at_0, loc_7))
		store_i32_n8(memory_at_0, loc_0 + 80, loc_8)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[318] = --[[ Luau::AstStatDeclareFunction::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 160)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			while true do
				loc_4 = load_i32(memory_at_0, loc_0 + 52)
				if loc_4 == 0 then
					break
				end
				loc_7 = band_i32(sub_i32(loc_4, 1), 1073741823)
				loc_6 = load_i32(memory_at_0, loc_0 + 48)
				loc_2 = loc_6
				loc_8 = band_i32(loc_4, 3)
				if loc_8 ~= 0 then
					while true do
						while true do
							loc_5 = load_i32(memory_at_0, loc_2)
							TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_5))](loc_5, loc_1)
							loc_2 = add_i32(loc_2, 4)
							loc_3 = add_i32(loc_3, 1)
							if loc_8 ~= loc_3 then
								continue
							end
							break
						end
						break
					end
				end
				if loc_7 <= 2 then
					break
				end
				loc_5 = add_i32(shl_i32(loc_4, 2), loc_6)
				while true do
					loc_3 = load_i32(memory_at_0, loc_2)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 4)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 8)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 12)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_2 = add_i32(loc_2, 16)
					if loc_5 ~= loc_2 then
						continue
					end
					break
				end
				break
			end
			loc_2 = load_i32(memory_at_0, loc_0 + 56)
			if loc_2 ~= 0 then
				while true do
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
					break
				end
			end
			while true do
				loc_4 = load_i32(memory_at_0, loc_0 + 72)
				if loc_4 == 0 then
					break
				end
				loc_7 = band_i32(sub_i32(loc_4, 1), 1073741823)
				loc_6 = load_i32(memory_at_0, loc_0 + 68)
				loc_2 = loc_6
				loc_8 = band_i32(loc_4, 3)
				if loc_8 ~= 0 then
					while true do
						loc_3 = 0
						while true do
							loc_5 = load_i32(memory_at_0, loc_2)
							TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_5))](loc_5, loc_1)
							loc_2 = add_i32(loc_2, 4)
							loc_3 = add_i32(loc_3, 1)
							if loc_8 ~= loc_3 then
								continue
							end
							break
						end
						break
					end
				end
				if loc_7 <= 2 then
					break
				end
				loc_5 = add_i32(shl_i32(loc_4, 2), loc_6)
				while true do
					loc_3 = load_i32(memory_at_0, loc_2)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 4)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 8)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 12)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_2 = add_i32(loc_2, 16)
					if loc_5 ~= loc_2 then
						continue
					end
					break
				end
				break
			end
			loc_2 = load_i32(memory_at_0, loc_0 + 76)
			if loc_2 == 0 then
				break
			end
			TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
			break
		end
		break
	end
end
FUNC_LIST[319] = --[[ Luau::AstStatDeclareClass::AstStatDeclareClass(Luau::Location const&, Luau::AstName const&, std::__2::optional<Luau::AstName>, Luau::AstArray<Luau::AstDeclaredClassProp> const&, Luau::AstTableIndexer*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = i64_ZERO
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47468))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, 0)
		store_i32(memory_at_0, loc_0, 13284)
		store_i32(memory_at_0, loc_0 + 28, load_i32(memory_at_0, loc_2))
		store_i64(memory_at_0, loc_0 + 32, load_i64(memory_at_0, loc_3))
		loc_6 = load_i64(memory_at_0, loc_4)
		store_i32(memory_at_0, loc_0 + 48, loc_5)
		store_i64(memory_at_0, loc_0 + 40, loc_6)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[320] = --[[ Luau::AstStatDeclareClass::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 168)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_0 + 44)
			if loc_3 == 0 then
				break
			end
			loc_5 = load_i32(memory_at_0, loc_0 + 40)
			loc_0 = loc_5
			loc_6 = band_i32(loc_3, 3)
			if loc_6 ~= 0 then
				while true do
					while true do
						loc_4 = load_i32(memory_at_0, loc_0 + 4)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_4))](loc_4, loc_1)
						loc_0 = add_i32(loc_0, 12)
						loc_2 = add_i32(loc_2, 1)
						if loc_6 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if band_i32(sub_i32(loc_3, 1), 1073741823) < 3 then
				break
			end
			loc_4 = add_i32(mul_i32(loc_3, 12), loc_5)
			while true do
				loc_2 = load_i32(memory_at_0, loc_0 + 4)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 16)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 28)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 40)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = add_i32(loc_0, 48)
				if loc_4 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[321] = --[[ Luau::AstStatError::AstStatError(Luau::Location const&, Luau::AstArray<Luau::AstExpr*> const&, Luau::AstArray<Luau::AstStat*> const&, unsigned int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = i64_ZERO
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47532))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, 0)
		store_i32(memory_at_0, loc_0, 13308)
		store_i64(memory_at_0, loc_0 + 28, load_i64(memory_at_0, loc_2))
		loc_5 = load_i64(memory_at_0, loc_3)
		store_i32(memory_at_0, loc_0 + 44, loc_4)
		store_i64(memory_at_0, loc_0 + 36, loc_5)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[322] = --[[ Luau::AstStatError::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 172)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			while true do
				loc_4 = load_i32(memory_at_0, loc_0 + 32)
				if loc_4 == 0 then
					break
				end
				loc_6 = load_i32(memory_at_0, loc_0 + 28)
				loc_2 = loc_6
				loc_7 = band_i32(loc_4, 3)
				if loc_7 ~= 0 then
					while true do
						while true do
							loc_5 = load_i32(memory_at_0, loc_2)
							TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_5))](loc_5, loc_1)
							loc_2 = add_i32(loc_2, 4)
							loc_3 = add_i32(loc_3, 1)
							if loc_7 ~= loc_3 then
								continue
							end
							break
						end
						break
					end
				end
				if band_i32(sub_i32(loc_4, 1), 1073741823) <= 2 then
					break
				end
				loc_5 = add_i32(shl_i32(loc_4, 2), loc_6)
				while true do
					loc_3 = load_i32(memory_at_0, loc_2)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 4)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 8)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 12)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_2 = add_i32(loc_2, 16)
					if loc_5 ~= loc_2 then
						continue
					end
					break
				end
				break
			end
			loc_4 = load_i32(memory_at_0, loc_0 + 40)
			if loc_4 == 0 then
				break
			end
			loc_6 = band_i32(sub_i32(loc_4, 1), 1073741823)
			loc_0 = load_i32(memory_at_0, loc_0 + 36)
			loc_2 = loc_0
			loc_7 = band_i32(loc_4, 3)
			if loc_7 ~= 0 then
				while true do
					loc_3 = 0
					while true do
						loc_5 = load_i32(memory_at_0, loc_2)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_5))](loc_5, loc_1)
						loc_2 = add_i32(loc_2, 4)
						loc_3 = add_i32(loc_3, 1)
						if loc_7 ~= loc_3 then
							continue
						end
						break
					end
					break
				end
			end
			if loc_6 < 3 then
				break
			end
			loc_5 = add_i32(shl_i32(loc_4, 2), loc_0)
			while true do
				loc_3 = load_i32(memory_at_0, loc_2)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
				loc_3 = load_i32(memory_at_0, loc_2 + 4)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
				loc_3 = load_i32(memory_at_0, loc_2 + 8)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
				loc_3 = load_i32(memory_at_0, loc_2 + 12)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
				loc_2 = add_i32(loc_2, 16)
				if loc_5 ~= loc_2 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[323] = --[[ Luau::AstTypeReference::AstTypeReference(Luau::Location const&, std::__2::optional<Luau::AstName>, Luau::AstName, std::__2::optional<Luau::Location>, Luau::Location const&, bool, Luau::AstArray<Luau::AstTypeOrPack> const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47476))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, loc_6)
		store_i32(memory_at_0, loc_0, 13332)
		store_i64(memory_at_0, loc_0 + 28, load_i64(memory_at_0, loc_2))
		store_i64(memory_at_0, loc_0 + 36, load_i64(memory_at_0, loc_4))
		store_i64(memory_at_0, loc_0 + 44, load_i64(memory_at_0, loc_4 + 8))
		store_i32(memory_at_0, loc_0 + 52, load_i32(memory_at_0, loc_4 + 16))
		store_i32(memory_at_0, loc_0 + 56, loc_3)
		store_i64(memory_at_0, loc_0 + 60, load_i64(memory_at_0, loc_5))
		store_i64(memory_at_0, loc_0 + 68, load_i64(memory_at_0, loc_5 + 8))
		store_i64(memory_at_0, loc_0 + 76, load_i64(memory_at_0, loc_7))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[324] = --[[ Luau::AstTypeReference::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 180)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_2 = load_i32(memory_at_0, loc_0 + 80)
			if loc_2 == 0 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_0 + 76)
			loc_0 = loc_3
			if band_i32(loc_2, 1) ~= 0 then
				while true do
					loc_0 = load_i32(memory_at_0, loc_3)
					if loc_0 ~= 0 then
						while true do
							reg_0 = loc_0
							break
						end
					else
						while true do
							reg_0 = load_i32(memory_at_0, loc_3 + 4)
							break
						end
					end
					loc_0 = reg_0
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0))](loc_0, loc_1)
					reg_0 = add_i32(loc_3, 8)
					break
				end
			else
				while true do
					reg_0 = loc_0
					break
				end
			end
			loc_0 = reg_0
			if band_i32(sub_i32(loc_2, 1), 536870911) == 0 then
				break
			end
			loc_3 = add_i32(shl_i32(loc_2, 3), loc_3)
			while true do
				loc_2 = load_i32(memory_at_0, loc_0)
				if loc_2 ~= 0 then
					while true do
						reg_0 = loc_2
						break
					end
				else
					while true do
						reg_0 = load_i32(memory_at_0, loc_0 + 4)
						break
					end
				end
				loc_2 = reg_0
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 8)
				if loc_2 ~= 0 then
					while true do
						reg_0 = loc_2
						break
					end
				else
					while true do
						reg_0 = load_i32(memory_at_0, loc_0 + 12)
						break
					end
				end
				loc_2 = reg_0
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = add_i32(loc_0, 16)
				if loc_3 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[325] = --[[ Luau::AstTypeTable::AstTypeTable(Luau::Location const&, Luau::AstArray<Luau::AstTableProp> const&, Luau::AstTableIndexer*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = i64_ZERO
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47484))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0, 13356)
		loc_4 = load_i64(memory_at_0, loc_2)
		store_i32(memory_at_0, loc_0 + 32, loc_3)
		store_i64(memory_at_0, loc_0 + 24, loc_4)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[326] = --[[ Luau::AstTypeTable::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 184)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			while true do
				loc_4 = load_i32(memory_at_0, loc_0 + 28)
				if loc_4 == 0 then
					break
				end
				loc_6 = load_i32(memory_at_0, loc_0 + 24)
				loc_2 = loc_6
				loc_7 = band_i32(loc_4, 3)
				if loc_7 ~= 0 then
					while true do
						while true do
							loc_5 = load_i32(memory_at_0, loc_2 + 20)
							TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_5))](loc_5, loc_1)
							loc_2 = add_i32(loc_2, 48)
							loc_3 = add_i32(loc_3, 1)
							if loc_7 ~= loc_3 then
								continue
							end
							break
						end
						break
					end
				end
				if band_i32(sub_i32(loc_4, 1), 268435455) <= 2 then
					break
				end
				loc_5 = add_i32(mul_i32(loc_4, 48), loc_6)
				while true do
					loc_3 = load_i32(memory_at_0, loc_2 + 20)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 68)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 116)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 164)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_2 = add_i32(loc_2, 192)
					if loc_5 ~= loc_2 then
						continue
					end
					break
				end
				break
			end
			loc_2 = load_i32(memory_at_0, loc_0 + 32)
			if loc_2 == 0 then
				break
			end
			loc_2 = load_i32(memory_at_0, loc_2)
			TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
			loc_2 = load_i32(memory_at_0, load_i32(memory_at_0, loc_0 + 32) + 4)
			TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
			break
		end
		break
	end
end
FUNC_LIST[327] = --[[ Luau::AstTypeFunction::AstTypeFunction(Luau::Location const&, Luau::AstArray<Luau::AstGenericType> const&, Luau::AstArray<Luau::AstGenericTypePack> const&, Luau::AstTypeList const&, Luau::AstArray<std::__2::optional<std::__2::pair<Luau::AstName, Luau::Location>>> const&, Luau::AstTypeList const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47492))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0, 13380)
		store_i64(memory_at_0, loc_0 + 24, load_i64(memory_at_0, loc_2))
		store_i64(memory_at_0, loc_0 + 32, load_i64(memory_at_0, loc_3))
		store_i64(memory_at_0, loc_0 + 40, load_i64(memory_at_0, loc_4))
		store_i32(memory_at_0, loc_0 + 48, load_i32(memory_at_0, loc_4 + 8))
		store_i64(memory_at_0, loc_0 + 52, load_i64(memory_at_0, loc_5))
		store_i32(memory_at_0, loc_0 + 68, load_i32(memory_at_0, loc_6 + 8))
		store_i64(memory_at_0, loc_0 + 60, load_i64(memory_at_0, loc_6))
		store_i32_n8(memory_at_0, loc_0 + 72, 0)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[328] = --[[ Luau::AstTypeFunction::AstTypeFunction(Luau::Location const&, Luau::AstArray<Luau::AstGenericType> const&, Luau::AstArray<Luau::AstGenericTypePack> const&, Luau::AstTypeList const&, Luau::AstArray<std::__2::optional<std::__2::pair<Luau::AstName, Luau::Location>>> const&, Luau::AstTypeList const&, bool) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47492))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0, 13380)
		store_i64(memory_at_0, loc_0 + 24, load_i64(memory_at_0, loc_2))
		store_i64(memory_at_0, loc_0 + 32, load_i64(memory_at_0, loc_3))
		store_i64(memory_at_0, loc_0 + 40, load_i64(memory_at_0, loc_4))
		store_i32(memory_at_0, loc_0 + 48, load_i32(memory_at_0, loc_4 + 8))
		store_i64(memory_at_0, loc_0 + 52, load_i64(memory_at_0, loc_5))
		store_i32(memory_at_0, loc_0 + 68, load_i32(memory_at_0, loc_6 + 8))
		store_i64(memory_at_0, loc_0 + 60, load_i64(memory_at_0, loc_6))
		store_i32_n8(memory_at_0, loc_0 + 72, loc_7)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[329] = --[[ Luau::AstTypeFunction::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 188)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			while true do
				loc_4 = load_i32(memory_at_0, loc_0 + 44)
				if loc_4 == 0 then
					break
				end
				loc_7 = band_i32(sub_i32(loc_4, 1), 1073741823)
				loc_6 = load_i32(memory_at_0, loc_0 + 40)
				loc_2 = loc_6
				loc_8 = band_i32(loc_4, 3)
				if loc_8 ~= 0 then
					while true do
						while true do
							loc_5 = load_i32(memory_at_0, loc_2)
							TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_5))](loc_5, loc_1)
							loc_2 = add_i32(loc_2, 4)
							loc_3 = add_i32(loc_3, 1)
							if loc_8 ~= loc_3 then
								continue
							end
							break
						end
						break
					end
				end
				if loc_7 <= 2 then
					break
				end
				loc_5 = add_i32(shl_i32(loc_4, 2), loc_6)
				while true do
					loc_3 = load_i32(memory_at_0, loc_2)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 4)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 8)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 12)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_2 = add_i32(loc_2, 16)
					if loc_5 ~= loc_2 then
						continue
					end
					break
				end
				break
			end
			loc_2 = load_i32(memory_at_0, loc_0 + 48)
			if loc_2 ~= 0 then
				while true do
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
					break
				end
			end
			while true do
				loc_4 = load_i32(memory_at_0, loc_0 + 64)
				if loc_4 == 0 then
					break
				end
				loc_7 = band_i32(sub_i32(loc_4, 1), 1073741823)
				loc_6 = load_i32(memory_at_0, loc_0 + 60)
				loc_2 = loc_6
				loc_8 = band_i32(loc_4, 3)
				if loc_8 ~= 0 then
					while true do
						loc_3 = 0
						while true do
							loc_5 = load_i32(memory_at_0, loc_2)
							TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_5))](loc_5, loc_1)
							loc_2 = add_i32(loc_2, 4)
							loc_3 = add_i32(loc_3, 1)
							if loc_8 ~= loc_3 then
								continue
							end
							break
						end
						break
					end
				end
				if loc_7 <= 2 then
					break
				end
				loc_5 = add_i32(shl_i32(loc_4, 2), loc_6)
				while true do
					loc_3 = load_i32(memory_at_0, loc_2)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 4)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 8)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 12)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_2 = add_i32(loc_2, 16)
					if loc_5 ~= loc_2 then
						continue
					end
					break
				end
				break
			end
			loc_2 = load_i32(memory_at_0, loc_0 + 68)
			if loc_2 == 0 then
				break
			end
			TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
			break
		end
		break
	end
end
FUNC_LIST[330] = --[[ Luau::AstTypeTypeof::AstTypeTypeof(Luau::Location const&, Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47500))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0 + 24, loc_2)
		store_i32(memory_at_0, loc_0, 13404)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[331] = --[[ Luau::AstTypeTypeof::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 192)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_0 = load_i32(memory_at_0, loc_0 + 24)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[332] = --[[ Luau::AstTypeUnion::AstTypeUnion(Luau::Location const&, Luau::AstArray<Luau::AstType*> const&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47508))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0, 13428)
		store_i64(memory_at_0, loc_0 + 24, load_i64(memory_at_0, loc_2))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[333] = --[[ Luau::AstTypeUnion::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 196)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_0 + 28)
			if loc_3 == 0 then
				break
			end
			loc_5 = load_i32(memory_at_0, loc_0 + 24)
			loc_0 = loc_5
			loc_6 = band_i32(loc_3, 3)
			if loc_6 ~= 0 then
				while true do
					while true do
						loc_4 = load_i32(memory_at_0, loc_0)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_4))](loc_4, loc_1)
						loc_0 = add_i32(loc_0, 4)
						loc_2 = add_i32(loc_2, 1)
						if loc_6 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if band_i32(sub_i32(loc_3, 1), 1073741823) < 3 then
				break
			end
			loc_4 = add_i32(shl_i32(loc_3, 2), loc_5)
			while true do
				loc_2 = load_i32(memory_at_0, loc_0)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 4)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 8)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 12)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = add_i32(loc_0, 16)
				if loc_4 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[334] = --[[ Luau::AstTypeIntersection::AstTypeIntersection(Luau::Location const&, Luau::AstArray<Luau::AstType*> const&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47516))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0, 13452)
		store_i64(memory_at_0, loc_0 + 24, load_i64(memory_at_0, loc_2))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[335] = --[[ Luau::AstTypeIntersection::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 200)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_0 + 28)
			if loc_3 == 0 then
				break
			end
			loc_5 = load_i32(memory_at_0, loc_0 + 24)
			loc_0 = loc_5
			loc_6 = band_i32(loc_3, 3)
			if loc_6 ~= 0 then
				while true do
					while true do
						loc_4 = load_i32(memory_at_0, loc_0)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_4))](loc_4, loc_1)
						loc_0 = add_i32(loc_0, 4)
						loc_2 = add_i32(loc_2, 1)
						if loc_6 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if band_i32(sub_i32(loc_3, 1), 1073741823) < 3 then
				break
			end
			loc_4 = add_i32(shl_i32(loc_3, 2), loc_5)
			while true do
				loc_2 = load_i32(memory_at_0, loc_0)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 4)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 8)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 12)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = add_i32(loc_0, 16)
				if loc_4 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[336] = --[[ Luau::AstTypeSingletonBool::AstTypeSingletonBool(Luau::Location const&, bool) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47548))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32_n8(memory_at_0, loc_0 + 24, loc_2)
		store_i32(memory_at_0, loc_0, 13476)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[337] = --[[ Luau::AstTypeSingletonBool::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 204)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[338] = --[[ Luau::AstTypeSingletonString::AstTypeSingletonString(Luau::Location const&, Luau::AstArray<char> const&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47556))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0, 13500)
		store_i64(memory_at_0, loc_0 + 24, load_i64(memory_at_0, loc_2))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[339] = --[[ Luau::AstTypeSingletonString::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 208)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[340] = --[[ Luau::AstTypeError::AstTypeError(Luau::Location const&, Luau::AstArray<Luau::AstType*> const&, bool, unsigned int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = i64_ZERO
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47540))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0, 13524)
		loc_5 = load_i64(memory_at_0, loc_2)
		store_i32(memory_at_0, loc_0 + 36, loc_4)
		store_i32_n8(memory_at_0, loc_0 + 32, loc_3)
		store_i64(memory_at_0, loc_0 + 24, loc_5)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[341] = --[[ Luau::AstTypeError::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 212)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_0 + 28)
			if loc_3 == 0 then
				break
			end
			loc_5 = load_i32(memory_at_0, loc_0 + 24)
			loc_0 = loc_5
			loc_6 = band_i32(loc_3, 3)
			if loc_6 ~= 0 then
				while true do
					while true do
						loc_4 = load_i32(memory_at_0, loc_0)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_4))](loc_4, loc_1)
						loc_0 = add_i32(loc_0, 4)
						loc_2 = add_i32(loc_2, 1)
						if loc_6 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if band_i32(sub_i32(loc_3, 1), 1073741823) < 3 then
				break
			end
			loc_4 = add_i32(shl_i32(loc_3, 2), loc_5)
			while true do
				loc_2 = load_i32(memory_at_0, loc_0)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 4)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 8)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = load_i32(memory_at_0, loc_0 + 12)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = add_i32(loc_0, 16)
				if loc_4 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[342] = --[[ Luau::AstTypePackExplicit::AstTypePackExplicit(Luau::Location const&, Luau::AstTypeList) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47564))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0, 13548)
		store_i64(memory_at_0, loc_0 + 24, load_i64(memory_at_0, loc_2))
		store_i32(memory_at_0, loc_0 + 32, load_i32(memory_at_0, loc_2 + 8))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[343] = --[[ Luau::AstTypePackExplicit::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 220)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			while true do
				loc_4 = load_i32(memory_at_0, loc_0 + 28)
				if loc_4 == 0 then
					break
				end
				loc_6 = load_i32(memory_at_0, loc_0 + 24)
				loc_2 = loc_6
				loc_7 = band_i32(loc_4, 3)
				if loc_7 ~= 0 then
					while true do
						while true do
							loc_5 = load_i32(memory_at_0, loc_2)
							TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_5))](loc_5, loc_1)
							loc_2 = add_i32(loc_2, 4)
							loc_3 = add_i32(loc_3, 1)
							if loc_7 ~= loc_3 then
								continue
							end
							break
						end
						break
					end
				end
				if band_i32(sub_i32(loc_4, 1), 1073741823) <= 2 then
					break
				end
				loc_5 = add_i32(shl_i32(loc_4, 2), loc_6)
				while true do
					loc_3 = load_i32(memory_at_0, loc_2)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 4)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 8)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = load_i32(memory_at_0, loc_2 + 12)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_2 = add_i32(loc_2, 16)
					if loc_5 ~= loc_2 then
						continue
					end
					break
				end
				break
			end
			loc_2 = load_i32(memory_at_0, loc_0 + 32)
			if loc_2 == 0 then
				break
			end
			TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_2))](loc_2, loc_1)
			break
		end
		break
	end
end
FUNC_LIST[344] = --[[ Luau::AstTypePackVariadic::AstTypePackVariadic(Luau::Location const&, Luau::AstType*) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47572))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0 + 24, loc_2)
		store_i32(memory_at_0, loc_0, 13572)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[345] = --[[ Luau::AstTypePackVariadic::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 224)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_0 = load_i32(memory_at_0, loc_0 + 24)
				TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[346] = --[[ Luau::AstTypePackGeneric::AstTypePackGeneric(Luau::Location const&, Luau::AstName) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, 47580))
		store_i32(memory_at_0, loc_0, 15748)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0 + 24, loc_2)
		store_i32(memory_at_0, loc_0, 13596)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[347] = --[[ Luau::AstTypePackGeneric::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 228)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[348] = --[[ Luau::getIdentifier(Luau::AstExpr*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_2 = load_i32(memory_at_0, loc_0 + 4)
		while true do
			while true do
				while true do
					if loc_0 == 0 then
						break
					end
					if load_i32(memory_at_0, 47228) ~= loc_2 then
						break
					end
					reg_0 = add_i32(loc_0, 24)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_0 == 0 then
					desired = 1
					break
				end
				if load_i32(memory_at_0, 47220) ~= loc_2 then
					desired = 1
					break
				end
				reg_0 = load_i32(memory_at_0, loc_0 + 24)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_0 = reg_0
			loc_1 = load_i32(memory_at_0, loc_0)
			break
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[349] = --[[ Luau::AstNode::asStat() ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[350] = --[[ Luau::findConfusable(unsigned int) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_3 = 1786
		loc_1 = 15776
		while true do
			loc_4 = shr_u32(loc_3, 1)
			loc_2 = add_i32(shl_i32(loc_4, 3), loc_1)
			reg_0 = add_i32(loc_2, 8)
			loc_2 = (if loc_0 > bor_i32(load_i32_u16(memory_at_0, loc_2), shl_i32(load_i32_u8(memory_at_0, loc_2 + 2), 16)) then 1 else 0)
			loc_1 = (if loc_2 ~= 0 then reg_0 else loc_1)
			loc_3 = (if loc_2 ~= 0 then add_i32(bxor_i32(loc_4, 4294967295), loc_3) else loc_4)
			if loc_3 ~= 0 then
				continue
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		if loc_1 == 30064 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = (if loc_0 == bor_i32(load_i32_u16(memory_at_0, loc_1), shl_i32(load_i32_u8(memory_at_0, loc_1 + 2), 16)) then add_i32(loc_1, 3) else 0)
		break
	end
	return reg_0
end
FUNC_LIST[351] = --[[ Luau::Allocator::Allocator() ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[606](8196)
		loc_1 = reg_0
		store_i32(memory_at_0, loc_0 + 4, 0)
		store_i32(memory_at_0, loc_0, loc_1)
		store_i32(memory_at_0, loc_1, 0)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[352] = --[[ Luau::Allocator::~Allocator() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	while true do
		loc_1 = load_i32(memory_at_0, loc_0)
		if loc_1 ~= 0 then
			while true do
				while true do
					loc_2 = load_i32(memory_at_0, loc_1)
					FUNC_LIST[609](loc_1)
					loc_1 = loc_2
					if loc_1 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[353] = --[[ Luau::Allocator::allocate(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_2 = load_i32(memory_at_0, loc_0)
			if loc_2 == 0 then
				break
			end
			loc_4 = add_i32(loc_2, 4)
			loc_3 = band_i32(add_i32(add_i32(loc_4, load_i32(memory_at_0, loc_0 + 4)), 7), 4294967288)
			if add_i32(loc_1, loc_3) > add_i32(loc_2, 8196) then
				break
			end
			store_i32(memory_at_0, loc_0 + 4, add_i32(loc_3, sub_i32(loc_1, loc_4)))
			reg_0 = loc_3
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = FUNC_LIST[606](add_i32((if loc_1 <= 8192 then 8192 else loc_1), 4))
		loc_2 = reg_0
		store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_0))
		store_i32(memory_at_0, loc_0 + 4, loc_1)
		store_i32(memory_at_0, loc_0, loc_2)
		reg_0 = add_i32(loc_2, 4)
		break
	end
	return reg_0
end
FUNC_LIST[354] = --[[ Luau::Lexeme::Lexeme(Luau::Location const&, Luau::Lexeme::Type) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0, loc_2)
		store_i64(memory_at_0, loc_0 + 4, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 12, load_i64(memory_at_0, loc_1 + 8))
		store_i64(memory_at_0, loc_0 + 20, i64_ZERO)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[355] = --[[ Luau::Lexeme::Lexeme(Luau::Location const&, char) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0, band_i32(loc_2, 255))
		store_i64(memory_at_0, loc_0 + 4, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 12, load_i64(memory_at_0, loc_1 + 8))
		store_i64(memory_at_0, loc_0 + 20, i64_ZERO)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[356] = --[[ Luau::Lexeme::Lexeme(Luau::Location const&, Luau::Lexeme::Type, char const*, unsigned long) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0, loc_2)
		store_i64(memory_at_0, loc_0 + 4, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 12, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0 + 24, loc_3)
		store_i32(memory_at_0, loc_0 + 20, loc_4)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[357] = --[[ Luau::Lexeme::Lexeme(Luau::Location const&, Luau::Lexeme::Type, char const*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0, loc_2)
		store_i64(memory_at_0, loc_0 + 4, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_0 + 12, load_i64(memory_at_0, loc_1 + 8))
		store_i32(memory_at_0, loc_0 + 24, loc_3)
		store_i32(memory_at_0, loc_0 + 20, 0)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[358] = --[[ Luau::Lexeme::toString() const ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 176)
		GLOBAL_LIST[0].value = loc_2
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									while true do
																										while true do
																											while true do
																												while true do
																													while true do
																														while true do
																															while true do
																																while true do
																																	while true do
																																		loc_3 = load_i32(memory_at_0, loc_1)
																																		if not br_map[1] then
																																			br_map[1] = (function()
																																				return { [0] = 0, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 2, 3, 4, 5, 6, 7, 8, 9, 19, 20, 21, 22, 10, 11, 12, 13, 14, 15, 16, 17, 18, 18, 23, 24, 25, 30, 26, 27, 29, 28, }
																																			end)()
																																		end
																																		temp = br_map[1][loc_3] or 30
																																		if temp < 15 then
																																			if temp < 7 then
																																				if temp < 3 then
																																					if temp < 1 then
																																						break
																																					elseif temp > 1 then
																																						desired = 30
																																						break
																																					else
																																						desired = 31
																																						break
																																					end
																																				elseif temp > 3 then
																																					if temp < 5 then
																																						desired = 28
																																						break
																																					elseif temp > 5 then
																																						desired = 26
																																						break
																																					else
																																						desired = 27
																																						break
																																					end
																																				else
																																					desired = 29
																																					break
																																				end
																																			elseif temp > 7 then
																																				if temp < 11 then
																																					if temp < 9 then
																																						desired = 24
																																						break
																																					elseif temp > 9 then
																																						desired = 22
																																						break
																																					else
																																						desired = 23
																																						break
																																					end
																																				elseif temp > 11 then
																																					if temp < 13 then
																																						desired = 20
																																						break
																																					elseif temp > 13 then
																																						desired = 18
																																						break
																																					else
																																						desired = 19
																																						break
																																					end
																																				else
																																					desired = 21
																																					break
																																				end
																																			else
																																				desired = 25
																																				break
																																			end
																																		elseif temp > 15 then
																																			if temp < 23 then
																																				if temp < 19 then
																																					if temp < 17 then
																																						desired = 16
																																						break
																																					elseif temp > 17 then
																																						desired = 14
																																						break
																																					else
																																						desired = 15
																																						break
																																					end
																																				elseif temp > 19 then
																																					if temp < 21 then
																																						desired = 12
																																						break
																																					elseif temp > 21 then
																																						desired = 10
																																						break
																																					else
																																						desired = 11
																																						break
																																					end
																																				else
																																					desired = 13
																																					break
																																				end
																																			elseif temp > 23 then
																																				if temp < 27 then
																																					if temp < 25 then
																																						desired = 8
																																						break
																																					elseif temp > 25 then
																																						desired = 6
																																						break
																																					else
																																						desired = 7
																																						break
																																					end
																																				elseif temp > 27 then
																																					if temp < 29 then
																																						desired = 4
																																						break
																																					elseif temp > 29 then
																																						desired = 2
																																						break
																																					else
																																						desired = 3
																																						break
																																					end
																																				else
																																					desired = 5
																																					break
																																				end
																																			else
																																				desired = 9
																																				break
																																			end
																																		else
																																			desired = 17
																																			break
																																		end
																																	end
																																	if desired then
																																		if desired == 31 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	store_i32_n8(memory_at_0, loc_0 + 11, 5)
																																	store_i32_n8(memory_at_0, loc_0 + 5, 0)
																																	store_i32(memory_at_0, loc_0, load_i32(memory_at_0, 6479))
																																	store_i32_n8(memory_at_0, loc_0 + 4, load_i32_u8(memory_at_0, 6483))
																																	desired = 1
																																	break
																																end
																																if desired then
																																	if desired == 30 then
																																		desired = nil
																																	end
																																	break
																																end
																																store_i32_n8(memory_at_0, loc_0 + 4, 0)
																																store_i32(memory_at_0, loc_0, 658324775)
																																store_i32_n8(memory_at_0, loc_0 + 11, 4)
																																desired = 1
																																break
																															end
																															if desired then
																																if desired == 29 then
																																	desired = nil
																																end
																																break
																															end
																															store_i32_n8(memory_at_0, loc_0 + 4, 0)
																															store_i32(memory_at_0, loc_0, 658324519)
																															store_i32_n8(memory_at_0, loc_0 + 11, 4)
																															desired = 1
																															break
																														end
																														if desired then
																															if desired == 28 then
																																desired = nil
																															end
																															break
																														end
																														store_i32_n8(memory_at_0, loc_0 + 4, 0)
																														store_i32(memory_at_0, loc_0, 658325031)
																														store_i32_n8(memory_at_0, loc_0 + 11, 4)
																														desired = 1
																														break
																													end
																													if desired then
																														if desired == 27 then
																															desired = nil
																														end
																														break
																													end
																													store_i32_n8(memory_at_0, loc_0 + 4, 0)
																													store_i32(memory_at_0, loc_0, 658341415)
																													store_i32_n8(memory_at_0, loc_0 + 11, 4)
																													desired = 1
																													break
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																													end
																													break
																												end
																												store_i32_n8(memory_at_0, loc_0 + 4, 0)
																												store_i32(memory_at_0, loc_0, 657337895)
																												store_i32_n8(memory_at_0, loc_0 + 11, 4)
																												desired = 1
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											store_i32_n8(memory_at_0, loc_0 + 11, 5)
																											store_i32_n8(memory_at_0, loc_0 + 5, 0)
																											store_i32(memory_at_0, loc_0, load_i32(memory_at_0, 7691))
																											store_i32_n8(memory_at_0, loc_0 + 4, load_i32_u8(memory_at_0, 7695))
																											desired = 1
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										store_i32_n8(memory_at_0, loc_0 + 4, 0)
																										store_i32(memory_at_0, loc_0, 658386215)
																										store_i32_n8(memory_at_0, loc_0 + 11, 4)
																										desired = 1
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									store_i32_n8(memory_at_0, loc_0 + 4, 0)
																									store_i32(memory_at_0, loc_0, 658127399)
																									store_i32_n8(memory_at_0, loc_0 + 11, 4)
																									desired = 1
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								store_i32_n8(memory_at_0, loc_0 + 4, 0)
																								store_i32(memory_at_0, loc_0, 657403687)
																								store_i32_n8(memory_at_0, loc_0 + 11, 4)
																								desired = 1
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							store_i32_n8(memory_at_0, loc_0 + 4, 0)
																							store_i32(memory_at_0, loc_0, 658320167)
																							store_i32_n8(memory_at_0, loc_0 + 11, 4)
																							desired = 1
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						store_i32_n8(memory_at_0, loc_0 + 4, 0)
																						store_i32(memory_at_0, loc_0, 658320679)
																						store_i32_n8(memory_at_0, loc_0 + 11, 4)
																						desired = 1
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					store_i32_n8(memory_at_0, loc_0 + 4, 0)
																					store_i32(memory_at_0, loc_0, 658319911)
																					store_i32_n8(memory_at_0, loc_0 + 11, 4)
																					desired = 1
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				store_i32_n8(memory_at_0, loc_0 + 4, 0)
																				store_i32(memory_at_0, loc_0, 658321191)
																				store_i32_n8(memory_at_0, loc_0 + 11, 4)
																				desired = 1
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			store_i32_n8(memory_at_0, loc_0 + 11, 5)
																			store_i32_n8(memory_at_0, loc_0 + 5, 0)
																			store_i32(memory_at_0, loc_0, load_i32(memory_at_0, 7599))
																			store_i32_n8(memory_at_0, loc_0 + 4, load_i32_u8(memory_at_0, 7603))
																			desired = 1
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		store_i32_n8(memory_at_0, loc_0 + 4, 0)
																		store_i32(memory_at_0, loc_0, 658318631)
																		store_i32_n8(memory_at_0, loc_0 + 11, 4)
																		desired = 1
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	store_i32_n8(memory_at_0, loc_0 + 4, 0)
																	store_i32(memory_at_0, loc_0, 658333223)
																	store_i32_n8(memory_at_0, loc_0 + 11, 4)
																	desired = 1
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																store_i32_n8(memory_at_0, loc_0 + 11, 5)
																store_i32_n8(memory_at_0, loc_0 + 5, 0)
																store_i32(memory_at_0, loc_0, load_i32(memory_at_0, 7605))
																store_i32_n8(memory_at_0, loc_0 + 4, load_i32_u8(memory_at_0, 7609))
																desired = 1
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_3 = load_i32(memory_at_0, loc_1 + 24)
															if loc_3 ~= 0 then
																while true do
																	loc_1 = load_i32(memory_at_0, loc_1 + 20)
																	store_i32(memory_at_0, loc_2 + 36, loc_3)
																	store_i32(memory_at_0, loc_2 + 32, loc_1)
																	FUNC_LIST[473](loc_0, 7751, add_i32(loc_2, 32))
																	desired = 1
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															store_i32_n8(memory_at_0, loc_0 + 11, 6)
															store_i32_n8(memory_at_0, loc_0 + 6, 0)
															store_i32(memory_at_0, loc_0, load_i32(memory_at_0, 3843))
															store_i32_n16(memory_at_0, loc_0 + 4, load_i32_u16(memory_at_0, 3847))
															desired = 1
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_3 = load_i32(memory_at_0, loc_1 + 24)
														if loc_3 ~= 0 then
															while true do
																loc_1 = load_i32(memory_at_0, loc_1 + 20)
																store_i32(memory_at_0, loc_2 + 52, loc_3)
																store_i32(memory_at_0, loc_2 + 48, loc_1)
																FUNC_LIST[473](loc_0, 1031, add_i32(loc_2, 48))
																desired = 1
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														reg_0 = FUNC_LIST[359](loc_0, 3722)
														desired = 1
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_3 = load_i32(memory_at_0, loc_1 + 24)
													if loc_3 ~= 0 then
														while true do
															loc_1 = load_i32(memory_at_0, loc_1 + 20)
															store_i32(memory_at_0, loc_2 + 68, loc_3)
															store_i32(memory_at_0, loc_2 + 64, loc_1)
															FUNC_LIST[473](loc_0, 1024, sub_i32(loc_2, 4294967232))
															desired = 1
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[359](loc_0, 3762)
													desired = 1
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_3 = load_i32(memory_at_0, loc_1 + 24)
												if loc_3 ~= 0 then
													while true do
														loc_1 = load_i32(memory_at_0, loc_1 + 20)
														store_i32(memory_at_0, loc_2 + 84, loc_3)
														store_i32(memory_at_0, loc_2 + 80, loc_1)
														FUNC_LIST[473](loc_0, 5794, add_i32(loc_2, 80))
														desired = 1
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												reg_0 = FUNC_LIST[359](loc_0, 3799)
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_3 = load_i32(memory_at_0, loc_1 + 24)
											if loc_3 ~= 0 then
												while true do
													loc_1 = load_i32(memory_at_0, loc_1 + 20)
													store_i32(memory_at_0, loc_2 + 100, loc_3)
													store_i32(memory_at_0, loc_2 + 96, loc_1)
													FUNC_LIST[473](loc_0, 5801, add_i32(loc_2, 96))
													desired = 1
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											reg_0 = FUNC_LIST[359](loc_0, 3813)
											desired = 1
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_3 = load_i32(memory_at_0, loc_1 + 24)
										if loc_3 ~= 0 then
											while true do
												loc_1 = load_i32(memory_at_0, loc_1 + 20)
												store_i32(memory_at_0, loc_2 + 116, loc_3)
												store_i32(memory_at_0, loc_2 + 112, loc_1)
												FUNC_LIST[473](loc_0, 7511, add_i32(loc_2, 112))
												desired = 1
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										reg_0 = FUNC_LIST[359](loc_0, 3034)
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_1 = load_i32(memory_at_0, loc_1 + 24)
									if loc_1 ~= 0 then
										while true do
											store_i32(memory_at_0, loc_2 + 128, loc_1)
											FUNC_LIST[473](loc_0, 7518, add_i32(loc_2, 128))
											desired = 1
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									reg_0 = FUNC_LIST[359](loc_0, 2997)
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								store_i32_n8(memory_at_0, loc_0 + 11, 7)
								store_i32_n8(memory_at_0, loc_0 + 7, 0)
								store_i32(memory_at_0, loc_0, load_i32(memory_at_0, 1526))
								store_i32(memory_at_0, loc_0 + 3, load_i32(memory_at_0, 1529))
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_1 = FUNC_LIST[606](32)
							loc_1 = reg_1
							store_i32(memory_at_0, loc_0, loc_1)
							store_i64(memory_at_0, loc_0 + 4, i64_from_u32(16, 2147483680))
							store_i64(memory_at_0, loc_1 + 8, load_i64(memory_at_0, 3841))
							store_i64(memory_at_0, loc_1, load_i64(memory_at_0, 3833))
							store_i32_n8(memory_at_0, loc_1 + 16, 0)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_1 = FUNC_LIST[606](32)
						loc_1 = reg_1
						store_i32(memory_at_0, loc_0, loc_1)
						store_i64(memory_at_0, loc_0 + 4, i64_from_u32(18, 2147483680))
						store_i32_n16(memory_at_0, loc_1 + 16, load_i32_u16(memory_at_0, 1531))
						store_i64(memory_at_0, loc_1 + 8, load_i64(memory_at_0, 1523))
						store_i64(memory_at_0, loc_1, load_i64(memory_at_0, 1515))
						store_i32_n8(memory_at_0, loc_1 + 18, 0)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_1 = FUNC_LIST[606](48)
					loc_1 = reg_1
					store_i32(memory_at_0, loc_0, loc_1)
					store_i64(memory_at_0, loc_0 + 4, i64_from_u32(43, 2147483696))
					store_i32(memory_at_0, loc_1 + 39, load_i32(memory_at_0, 7200))
					store_i64(memory_at_0, loc_1 + 32, load_i64(memory_at_0, 7193))
					store_i64(memory_at_0, loc_1 + 24, load_i64(memory_at_0, 7185))
					store_i64(memory_at_0, loc_1 + 16, load_i64(memory_at_0, 7177))
					store_i64(memory_at_0, loc_1 + 8, load_i64(memory_at_0, 7169))
					store_i64(memory_at_0, loc_1, load_i64(memory_at_0, 7161))
					store_i32_n8(memory_at_0, loc_1 + 43, 0)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = load_i32(memory_at_0, loc_1 + 24)
				if loc_3 ~= 0 then
					while true do
						reg_0 = FUNC_LIST[350](loc_3)
						loc_3 = reg_0
						loc_1 = load_i32(memory_at_0, loc_1 + 24)
						if loc_3 ~= 0 then
							while true do
								store_i32(memory_at_0, loc_2 + 164, loc_3)
								store_i32(memory_at_0, loc_2 + 160, loc_1)
								FUNC_LIST[473](loc_0, 7205, add_i32(loc_2, 160))
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						store_i32(memory_at_0, loc_2 + 144, loc_1)
						FUNC_LIST[473](loc_0, 1154, add_i32(loc_2, 144))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[359](loc_0, 4969)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if le_i32(loc_3, 255) then
				while true do
					store_i32(memory_at_0, loc_2, loc_3)
					FUNC_LIST[473](loc_0, 7523, loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = sub_i32(loc_3, 289)
			if loc_1 <= 21 then
				while true do
					store_i32(memory_at_0, loc_2 + 16, load_i32(memory_at_0, add_i32(shl_i32(loc_1, 2), 30064)))
					FUNC_LIST[473](loc_0, 7518, add_i32(loc_2, 16))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[359](loc_0, 6469)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 176)
		break
	end
end
FUNC_LIST[359] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::basic_string[abi:ue170004]<0>(char const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[504](loc_1)
		loc_2 = reg_0
		if loc_2 < 2147483632 then
			while true do
				while true do
					while true do
						if loc_2 >= 11 then
							while true do
								loc_4 = add_i32(bor_i32(loc_2, 15), 1)
								reg_0 = FUNC_LIST[606](loc_4)
								loc_3 = reg_0
								store_i32(memory_at_0, loc_0 + 8, bor_i32(loc_4, 2147483648))
								store_i32(memory_at_0, loc_0, loc_3)
								store_i32(memory_at_0, loc_0 + 4, loc_2)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						store_i32_n8(memory_at_0, loc_0 + 11, loc_2)
						loc_3 = loc_0
						if loc_2 == 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[478](loc_3, loc_1, loc_2)
					break
				end
				if desired then
					break
				end
				store_i32_n8(memory_at_0, add_i32(loc_2, loc_3), 0)
				reg_0 = loc_0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[242](loc_0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[360] = --[[ Luau::AstNameTable::AstNameTable(Luau::Allocator&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		store_i64(memory_at_0, loc_0 + 16, i64_ZERO)
		store_i32(memory_at_0, loc_0 + 12, 7767)
		store_i32(memory_at_0, loc_0 + 8, 0)
		store_i64(memory_at_0, loc_0, i64_ZERO)
		reg_0 = FUNC_LIST[606](1536)
		loc_3 = reg_0
		store_i32(memory_at_0, loc_0 + 4, 128)
		store_i32(memory_at_0, loc_0, loc_3)
		while true do
			loc_4 = add_i32(mul_i32(loc_2, 12), loc_3)
			store_i64(memory_at_0, loc_4 + 4, i64_ZERO)
			store_i32(memory_at_0, loc_4, 7767)
			loc_4 = add_i32(mul_i32(bor_i32(loc_2, 1), 12), loc_3)
			store_i64(memory_at_0, loc_4 + 4, i64_ZERO)
			store_i32(memory_at_0, loc_4, 7767)
			loc_4 = add_i32(mul_i32(bor_i32(loc_2, 2), 12), loc_3)
			store_i64(memory_at_0, loc_4 + 4, i64_ZERO)
			store_i32(memory_at_0, loc_4, 7767)
			loc_4 = add_i32(mul_i32(bor_i32(loc_2, 3), 12), loc_3)
			store_i64(memory_at_0, loc_4 + 4, i64_ZERO)
			store_i32(memory_at_0, loc_4, 7767)
			loc_2 = add_i32(loc_2, 4)
			if loc_2 ~= 128 then
				continue
			end
			break
		end
		store_i32(memory_at_0, loc_0 + 28, loc_1)
		loc_2 = 289
		while true do
			loc_3 = load_i32(memory_at_0, add_i32(shl_i32(loc_2, 2), 28908))
			store_i32(memory_at_0, loc_5 + 4, loc_3)
			reg_0 = FUNC_LIST[504](loc_3)
			loc_3 = reg_0
			store_i32(memory_at_0, loc_5 + 12, loc_2)
			store_i32(memory_at_0, loc_5 + 8, loc_3)
			while true do
				if load_i32(memory_at_0, loc_0 + 8) < shr_u32(mul_i32(load_i32(memory_at_0, loc_0 + 4), 3), 2) then
					break
				end
				reg_0 = FUNC_LIST[361](loc_0, add_i32(loc_5, 4))
				if reg_0 ~= 0 then
					break
				end
				FUNC_LIST[362](loc_0)
				break
			end
			reg_0 = FUNC_LIST[363](loc_0, add_i32(loc_5, 4))
			loc_2 = add_i32(loc_2, 1)
			if loc_2 ~= 311 then
				continue
			end
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_5, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[361] = --[[ Luau::detail::DenseHashTable<Luau::AstNameTable::Entry, Luau::AstNameTable::Entry, Luau::AstNameTable::Entry, Luau::detail::ItemInterfaceSet<Luau::AstNameTable::Entry>, Luau::AstNameTable::EntryHash, std::__2::equal_to<Luau::AstNameTable::Entry>>::find(Luau::AstNameTable::Entry const&) const ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		while true do
			if load_i32(memory_at_0, loc_0 + 8) == 0 then
				break
			end
			loc_5 = load_i32(memory_at_0, loc_1)
			loc_3 = load_i32(memory_at_0, loc_1 + 4)
			loc_10 = load_i32(memory_at_0, loc_0 + 16)
			if loc_3 == loc_10 then
				while true do
					reg_0 = FUNC_LIST[535](loc_5, load_i32(memory_at_0, loc_0 + 12), loc_3)
					if reg_0 == 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_11 = load_i32(memory_at_0, loc_0 + 4)
			while true do
				if loc_3 == 0 then
					while true do
						loc_2 = 2166136261
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_6 = band_i32(loc_3, 3)
				while true do
					if loc_3 < 4 then
						while true do
							loc_2 = 2166136261
							loc_1 = 0
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_9 = band_i32(loc_3, 4294967292)
					loc_2 = 2166136261
					loc_1 = 0
					while true do
						loc_4 = add_i32(loc_1, loc_5)
						loc_2 = mul_i32(bxor_i32(mul_i32(bxor_i32(mul_i32(bxor_i32(mul_i32(bxor_i32(load_i32_u8(memory_at_0, loc_4), loc_2), 16777619), load_i32_u8(memory_at_0, loc_4 + 1)), 16777619), load_i32_u8(memory_at_0, loc_4 + 2)), 16777619), load_i32_u8(memory_at_0, loc_4 + 3)), 16777619)
						loc_1 = add_i32(loc_1, 4)
						loc_8 = add_i32(loc_8, 4)
						if loc_9 ~= loc_8 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_6 == 0 then
					break
				end
				while true do
					loc_2 = mul_i32(bxor_i32(load_i32_u8(memory_at_0, add_i32(loc_1, loc_5)), loc_2), 16777619)
					loc_1 = add_i32(loc_1, 1)
					loc_7 = add_i32(loc_7, 1)
					if loc_6 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = sub_i32(loc_11, 1)
			loc_9 = load_i32(memory_at_0, loc_0 + 12)
			loc_6 = load_i32(memory_at_0, loc_0)
			loc_1 = 0
			while true do
				loc_8 = band_i32(loc_2, loc_4)
				loc_2 = add_i32(mul_i32(loc_8, 12), loc_6)
				loc_7 = load_i32(memory_at_0, loc_2 + 4)
				if loc_7 == loc_3 then
					while true do
						reg_0 = FUNC_LIST[535](load_i32(memory_at_0, loc_2), loc_5, loc_3)
						if reg_0 == 0 then
							desired = 1
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				while true do
					if loc_7 == loc_10 then
						while true do
							reg_0 = FUNC_LIST[535](load_i32(memory_at_0, loc_2), loc_9, loc_10)
							if reg_0 == 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_1 = add_i32(loc_1, 1)
					loc_2 = add_i32(loc_8, loc_1)
					if loc_1 <= loc_4 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = 0
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[362] = --[[ Luau::detail::DenseHashTable<Luau::AstNameTable::Entry, Luau::AstNameTable::Entry, Luau::AstNameTable::Entry, Luau::detail::ItemInterfaceSet<Luau::AstNameTable::Entry>, Luau::AstNameTable::EntryHash, std::__2::equal_to<Luau::AstNameTable::Entry>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local reg_0
	local desired
	while true do
		loc_4 = add_i32(loc_0, 12)
		loc_15 = load_i32(memory_at_0, loc_0 + 16)
		loc_17 = load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_11 = load_i32(memory_at_0, loc_0 + 4)
			loc_7 = (if loc_11 ~= 0 then shl_i32(loc_11, 1) else 16)
			if loc_7 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = band_i32(loc_7, 2)
			reg_0 = FUNC_LIST[606](mul_i32(loc_7, 12))
			loc_5 = reg_0
			if loc_7 >= 4 then
				while true do
					loc_13 = band_i32(loc_7, 4294967292)
					while true do
						loc_2 = add_i32(mul_i32(loc_1, 12), loc_5)
						store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_4))
						reg_0 = loc_2
						loc_2 = add_i32(loc_4, 8)
						store_i32(memory_at_0, reg_0 + 8, load_i32(memory_at_0, loc_2))
						loc_3 = add_i32(mul_i32(bor_i32(loc_1, 1), 12), loc_5)
						store_i32(memory_at_0, loc_3 + 8, load_i32(memory_at_0, loc_4 + 8))
						store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_4))
						loc_3 = add_i32(mul_i32(bor_i32(loc_1, 2), 12), loc_5)
						store_i32(memory_at_0, loc_3 + 8, load_i32(memory_at_0, loc_4 + 8))
						store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_4))
						loc_3 = add_i32(mul_i32(bor_i32(loc_1, 3), 12), loc_5)
						store_i32(memory_at_0, loc_3 + 8, load_i32(memory_at_0, loc_4 + 8))
						store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_4))
						loc_1 = add_i32(loc_1, 4)
						loc_9 = add_i32(loc_9, 4)
						if loc_13 ~= loc_9 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 ~= 0 then
				while true do
					while true do
						loc_2 = add_i32(mul_i32(loc_1, 12), loc_5)
						store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_4))
						store_i32(memory_at_0, loc_2 + 8, load_i32(memory_at_0, loc_4 + 8))
						loc_1 = add_i32(loc_1, 1)
						loc_6 = add_i32(loc_6, 1)
						if loc_8 ~= loc_6 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_11 = load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				if loc_11 ~= 0 then
					while true do
						loc_13 = sub_i32(loc_7, 1)
						loc_12 = load_i32(memory_at_0, loc_0)
						while true do
							loc_10 = add_i32(mul_i32(loc_14, 12), loc_12)
							loc_8 = load_i32(memory_at_0, loc_10)
							while true do
								loc_3 = load_i32(memory_at_0, loc_10 + 4)
								if loc_3 == load_i32(memory_at_0, loc_0 + 16) then
									while true do
										reg_0 = FUNC_LIST[535](loc_8, load_i32(memory_at_0, loc_4), loc_3)
										if reg_0 == 0 then
											desired = 5
											break
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								while true do
									if loc_3 == 0 then
										while true do
											loc_1 = 2166136261
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									loc_1 = 2166136261
									loc_9 = 0
									loc_2 = 0
									if loc_3 >= 4 then
										while true do
											loc_18 = band_i32(loc_3, 4294967292)
											loc_16 = 0
											while true do
												loc_6 = add_i32(loc_2, loc_8)
												loc_1 = mul_i32(bxor_i32(mul_i32(bxor_i32(mul_i32(bxor_i32(mul_i32(bxor_i32(load_i32_u8(memory_at_0, loc_6), loc_1), 16777619), load_i32_u8(memory_at_0, loc_6 + 1)), 16777619), load_i32_u8(memory_at_0, loc_6 + 2)), 16777619), load_i32_u8(memory_at_0, loc_6 + 3)), 16777619)
												loc_2 = add_i32(loc_2, 4)
												loc_16 = add_i32(loc_16, 4)
												if loc_18 ~= loc_16 then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									loc_19 = band_i32(loc_3, 3)
									if loc_19 == 0 then
										break
									end
									while true do
										loc_1 = mul_i32(bxor_i32(load_i32_u8(memory_at_0, add_i32(loc_2, loc_8)), loc_1), 16777619)
										loc_2 = add_i32(loc_2, 1)
										loc_9 = add_i32(loc_9, 1)
										if loc_19 ~= loc_9 then
											continue
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								loc_6 = 0
								while true do
									while true do
										while true do
											loc_9 = band_i32(loc_1, loc_13)
											loc_1 = add_i32(mul_i32(loc_9, 12), loc_5)
											loc_2 = load_i32(memory_at_0, loc_1 + 4)
											if loc_15 ~= loc_2 then
												break
											end
											reg_0 = FUNC_LIST[535](load_i32(memory_at_0, loc_1), loc_17, loc_15)
											if reg_0 ~= 0 then
												break
											end
											store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_10))
											store_i32(memory_at_0, loc_1 + 8, load_i32(memory_at_0, loc_10 + 8))
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										if loc_2 == loc_3 then
											while true do
												reg_0 = FUNC_LIST[535](load_i32(memory_at_0, loc_1), loc_8, loc_3)
												if reg_0 == 0 then
													desired = 7
													break
												end
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										loc_6 = add_i32(loc_6, 1)
										loc_1 = add_i32(loc_9, loc_6)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_10))
								store_i32(memory_at_0, loc_1 + 8, load_i32(memory_at_0, loc_10 + 8))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							loc_14 = add_i32(loc_14, 1)
							if loc_11 > loc_14 then
								continue
							end
							break
						end
						if desired then
							break
						end
						store_i32(memory_at_0, loc_0 + 4, loc_7)
						store_i32(memory_at_0, loc_0, loc_5)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				store_i32(memory_at_0, loc_0 + 4, loc_7)
				loc_12 = load_i32(memory_at_0, loc_0)
				store_i32(memory_at_0, loc_0, loc_5)
				if loc_12 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[609](loc_12)
			break
		end
		break
	end
end
FUNC_LIST[363] = --[[ Luau::detail::DenseHashTable<Luau::AstNameTable::Entry, Luau::AstNameTable::Entry, Luau::AstNameTable::Entry, Luau::detail::ItemInterfaceSet<Luau::AstNameTable::Entry>, Luau::AstNameTable::EntryHash, std::__2::equal_to<Luau::AstNameTable::Entry>>::insert_unsafe(Luau::AstNameTable::Entry const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_9 = load_i32(memory_at_0, loc_0 + 4)
		loc_10 = load_i32(memory_at_0, loc_1)
		while true do
			loc_5 = load_i32(memory_at_0, loc_1 + 4)
			if loc_5 == 0 then
				while true do
					loc_2 = 2166136261
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_6 = band_i32(loc_5, 3)
			while true do
				if loc_5 < 4 then
					while true do
						loc_2 = 2166136261
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_11 = band_i32(loc_5, 4294967292)
				loc_2 = 2166136261
				while true do
					loc_4 = add_i32(loc_3, loc_10)
					loc_2 = mul_i32(bxor_i32(mul_i32(bxor_i32(mul_i32(bxor_i32(mul_i32(bxor_i32(load_i32_u8(memory_at_0, loc_4), loc_2), 16777619), load_i32_u8(memory_at_0, loc_4 + 1)), 16777619), load_i32_u8(memory_at_0, loc_4 + 2)), 16777619), load_i32_u8(memory_at_0, loc_4 + 3)), 16777619)
					loc_3 = add_i32(loc_3, 4)
					loc_8 = add_i32(loc_8, 4)
					if loc_11 ~= loc_8 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_6 == 0 then
				break
			end
			while true do
				loc_2 = mul_i32(bxor_i32(load_i32_u8(memory_at_0, add_i32(loc_3, loc_10)), loc_2), 16777619)
				loc_3 = add_i32(loc_3, 1)
				loc_7 = add_i32(loc_7, 1)
				if loc_6 ~= loc_7 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_4 = sub_i32(loc_9, 1)
		loc_9 = load_i32(memory_at_0, loc_0 + 12)
		loc_6 = load_i32(memory_at_0, loc_0 + 16)
		loc_11 = load_i32(memory_at_0, loc_0)
		loc_3 = 0
		while true do
			while true do
				while true do
					loc_8 = band_i32(loc_2, loc_4)
					loc_2 = add_i32(mul_i32(loc_8, 12), loc_11)
					loc_7 = load_i32(memory_at_0, loc_2 + 4)
					if loc_6 ~= loc_7 then
						break
					end
					reg_0 = FUNC_LIST[535](load_i32(memory_at_0, loc_2), loc_9, loc_6)
					if reg_0 ~= 0 then
						break
					end
					store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_1))
					store_i32(memory_at_0, loc_2 + 8, load_i32(memory_at_0, loc_1 + 8))
					store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
					reg_0 = loc_2
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				if loc_5 == loc_7 then
					while true do
						reg_0 = FUNC_LIST[535](load_i32(memory_at_0, loc_2), loc_10, loc_5)
						if reg_0 == 0 then
							desired = 1
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				loc_3 = add_i32(loc_3, 1)
				loc_2 = add_i32(loc_8, loc_3)
				if loc_3 <= loc_4 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[364] = --[[ Luau::AstNameTable::addStatic(char const*, Luau::Lexeme::Type) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, loc_3 + 4, loc_1)
		reg_0 = FUNC_LIST[504](loc_1)
		loc_1 = reg_0
		store_i32(memory_at_0, loc_3 + 12, loc_2)
		store_i32(memory_at_0, loc_3 + 8, loc_1)
		while true do
			if load_i32(memory_at_0, loc_0 + 8) < shr_u32(mul_i32(load_i32(memory_at_0, loc_0 + 4), 3), 2) then
				break
			end
			reg_0 = FUNC_LIST[361](loc_0, add_i32(loc_3, 4))
			if reg_0 ~= 0 then
				break
			end
			FUNC_LIST[362](loc_0)
			break
		end
		reg_0 = FUNC_LIST[363](loc_0, add_i32(loc_3, 4))
		loc_0 = load_i32(memory_at_0, loc_3 + 4)
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[365] = --[[ Luau::AstNameTable::getOrAddWithType(char const*, unsigned long) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		store_i32(memory_at_0, loc_5 + 12, 0)
		store_i32(memory_at_0, loc_5 + 8, loc_3)
		store_i32(memory_at_0, loc_5 + 4, loc_2)
		while true do
			if load_i32(memory_at_0, loc_1 + 8) < shr_u32(mul_i32(load_i32(memory_at_0, loc_1 + 4), 3), 2) then
				break
			end
			reg_0 = FUNC_LIST[361](loc_1, add_i32(loc_5, 4))
			if reg_0 ~= 0 then
				break
			end
			FUNC_LIST[362](loc_1)
			break
		end
		while true do
			reg_0 = FUNC_LIST[363](loc_1, add_i32(loc_5, 4))
			loc_7 = reg_0
			loc_4 = load_i32(memory_at_0, loc_7 + 8)
			if loc_4 ~= 0 then
				while true do
					loc_1 = load_i32(memory_at_0, loc_7)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = add_i32(loc_3, 1)
			while true do
				while true do
					loc_6 = load_i32(memory_at_0, loc_1 + 28)
					loc_8 = load_i32(memory_at_0, loc_6)
					if loc_8 == 0 then
						break
					end
					loc_9 = add_i32(loc_8, 4)
					loc_1 = band_i32(add_i32(add_i32(loc_9, load_i32(memory_at_0, loc_6 + 4)), 7), 4294967288)
					if add_i32(loc_4, loc_1) > add_i32(loc_8, 8196) then
						break
					end
					store_i32(memory_at_0, loc_6 + 4, add_i32(loc_1, sub_i32(loc_4, loc_9)))
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[606](add_i32((if loc_4 <= 8192 then 8192 else loc_4), 4))
				loc_1 = reg_0
				store_i32(memory_at_0, loc_1, load_i32(memory_at_0, loc_6))
				store_i32(memory_at_0, loc_6 + 4, loc_4)
				store_i32(memory_at_0, loc_6, loc_1)
				loc_1 = add_i32(loc_1, 4)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_1 = FUNC_LIST[477](loc_1, loc_2, loc_3)
			loc_2 = reg_1
			store_i32_n8(memory_at_0, add_i32(loc_3, loc_2), 0)
			loc_4 = 281
			store_i32(memory_at_0, loc_7 + 8, 281)
			store_i32(memory_at_0, loc_7, loc_2)
			break
		end
		store_i32(memory_at_0, loc_0 + 4, loc_4)
		store_i32(memory_at_0, loc_0, loc_1)
		GLOBAL_LIST[0].value = add_i32(loc_5, 16)
		break
	end
end
FUNC_LIST[366] = --[[ Luau::AstNameTable::getOrAdd(char const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		reg_3 = FUNC_LIST[504](loc_1)
		FUNC_LIST[365](add_i32(loc_2, 8), loc_0, loc_1, reg_3)
		loc_1 = load_i32(memory_at_0, loc_2 + 8)
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[367] = --[[ Luau::AstNameTable::get(char const*) const ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		reg_0 = FUNC_LIST[504](loc_1)
		loc_4 = reg_0
		store_i32(memory_at_0, loc_2 + 12, 0)
		store_i32(memory_at_0, loc_2 + 8, loc_4)
		store_i32(memory_at_0, loc_2 + 4, loc_1)
		reg_0 = FUNC_LIST[361](loc_0, add_i32(loc_2, 4))
		loc_1 = reg_0
		if loc_1 ~= 0 then
			while true do
				reg_0 = load_i32(memory_at_0, loc_1)
				break
			end
		else
			while true do
				reg_0 = loc_3
				break
			end
		end
		loc_3 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[368] = --[[ Luau::Lexer::Lexer(char const*, unsigned long, Luau::AstNameTable&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local reg_0
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		store_i32(memory_at_0, loc_0 + 16, 0)
		store_i64(memory_at_0, loc_0 + 8, i64_ZERO)
		store_i32(memory_at_0, loc_0 + 4, loc_2)
		store_i32(memory_at_0, loc_0, loc_1)
		store_i64(memory_at_0, loc_4 + 8, i64_ZERO)
		store_i64(memory_at_0, loc_4, i64_ZERO)
		reg_0 = FUNC_LIST[354](add_i32(loc_0, 20), loc_4, 0)
		store_i64(memory_at_0, loc_0 + 56, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 48, i64_ZERO)
		store_i32(memory_at_0, loc_0 + 80, 0)
		store_i64(memory_at_0, loc_0 + 72, i64_ZERO)
		store_i32_n16(memory_at_0, loc_0 + 68, 256)
		store_i32(memory_at_0, loc_0 + 64, loc_3)
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[369] = --[[ Luau::Lexer::setSkipComments(bool) ]] function(loc_0, loc_1)
	while true do
		store_i32_n8(memory_at_0, loc_0 + 68, loc_1)
		break
	end
end
FUNC_LIST[370] = --[[ Luau::Lexer::next() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = add_i32(loc_0, 20)
		loc_4 = add_i32(loc_0, 48)
		loc_5 = add_i32(loc_0, 24)
		loc_9 = load_i32_u8(memory_at_0, loc_0 + 68)
		loc_6 = 1
		while true do
			while true do
				loc_1 = load_i32(memory_at_0, loc_0 + 8)
				loc_10 = load_i32(memory_at_0, loc_0 + 4)
				if loc_1 >= loc_10 then
					break
				end
				loc_7 = load_i32(memory_at_0, loc_0 + 12)
				loc_11 = load_i32(memory_at_0, loc_0)
				while true do
					loc_8 = sub_i32(load_i32_u8(memory_at_0, add_i32(loc_1, loc_11)), 9)
					if loc_8 > 23 then
						desired = 2
						break
					end
					while true do
						if band_i32(shl_i32(1, loc_8), 8388637) == 0 then
							while true do
								if loc_8 ~= 1 then
									desired = 2
									break
								end
								loc_1 = add_i32(loc_1, 1)
								store_i32(memory_at_0, loc_0 + 16, loc_1)
								loc_7 = add_i32(loc_7, 1)
								store_i32(memory_at_0, loc_0 + 12, loc_7)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_1 = add_i32(loc_1, 1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					store_i32(memory_at_0, loc_0 + 8, loc_1)
					if loc_1 ~= loc_10 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			if loc_6 ~= 0 then
				while true do
					store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_5))
					store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_5 + 8))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			FUNC_LIST[371](add_i32(loc_2, 4), loc_0)
			store_i32(memory_at_0, loc_3 + 24, load_i32(memory_at_0, loc_2 + 28))
			store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_2 + 20))
			store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_2 + 12))
			store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2 + 4))
			if loc_9 ~= 0 then
				while true do
					loc_6 = 0
					if band_i32(load_i32(memory_at_0, loc_3), 4294967294) == 282 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 32)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[371] = --[[ Luau::Lexer::readNext() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_2 = add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_2
		loc_4 = load_i32(memory_at_0, loc_1 + 16)
		loc_3 = load_i32(memory_at_0, loc_1 + 8)
		loc_10 = load_i32(memory_at_0, loc_1 + 12)
		store_i32(memory_at_0, loc_2 + 56, loc_10)
		loc_5 = sub_i32(loc_3, loc_4)
		store_i32(memory_at_0, loc_2 + 60, loc_5)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									loc_6 = load_i32(memory_at_0, loc_1 + 4)
																									if loc_6 <= loc_3 then
																										break
																									end
																									loc_7 = load_i32(memory_at_0, loc_1)
																									loc_8 = load_i32_u8(memory_at_0, add_i32(loc_3, loc_7))
																									loc_9 = extend_i32_n8(loc_8)
																									if not br_map[1] then
																										br_map[1] = (function()
																											return { [0] = 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 9, 18, 20, 15, 18, 9, 18, 18, 14, 12, 18, 1, 11, 13, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17, 18, 6, 5, 7, 18, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2, 20, 18, 16, 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 3, 18, 4, 8, }
																										end)()
																									end
																									temp = br_map[1][loc_8] or 20
																									if temp < 10 then
																										if temp < 5 then
																											if temp < 2 then
																												if temp < 1 then
																													break
																												else
																													desired = 22
																													break
																												end
																											elseif temp > 2 then
																												if temp < 4 then
																													desired = 20
																													break
																												else
																													desired = 19
																													break
																												end
																											else
																												desired = 21
																												break
																											end
																										elseif temp > 5 then
																											if temp < 8 then
																												if temp < 7 then
																													desired = 17
																													break
																												else
																													desired = 16
																													break
																												end
																											elseif temp > 8 then
																												desired = 14
																												break
																											else
																												desired = 15
																												break
																											end
																										else
																											desired = 18
																											break
																										end
																									elseif temp > 10 then
																										if temp < 16 then
																											if temp < 13 then
																												if temp < 12 then
																													desired = 12
																													break
																												else
																													desired = 11
																													break
																												end
																											elseif temp > 13 then
																												if temp < 15 then
																													desired = 9
																													break
																												else
																													desired = 8
																													break
																												end
																											else
																												desired = 10
																												break
																											end
																										elseif temp > 16 then
																											if temp < 19 then
																												if temp < 18 then
																													desired = 6
																													break
																												else
																													desired = 5
																													break
																												end
																											elseif temp > 19 then
																												desired = 3
																												break
																											else
																												desired = 4
																												break
																											end
																										else
																											desired = 7
																											break
																										end
																									else
																										desired = 13
																										break
																									end
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								store_i32(memory_at_0, loc_2 + 52, loc_5)
																								loc_11 = load_i64(memory_at_0, loc_2 + 56)
																								store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
																								store_i64(memory_at_0, loc_2 + 40, loc_11)
																								reg_0 = FUNC_LIST[354](loc_0, add_i32(loc_2, 40), 0)
																								desired = 1
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							while true do
																								loc_4 = add_i32(loc_3, 1)
																								if loc_6 <= loc_4 then
																									break
																								end
																								while true do
																									while true do
																										while true do
																											if not br_map[2] then
																												br_map[2] = (function()
																													return { [0] = 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, }
																												end)()
																											end
																											temp = br_map[2][sub_i32(load_i32_u8(memory_at_0, add_i32(loc_4, loc_7)), 45)] or 3
																											if temp < 2 then
																												if temp < 1 then
																													break
																												else
																													desired = 24
																													break
																												end
																											elseif temp > 2 then
																												desired = 22
																												break
																											else
																												desired = 23
																												break
																											end
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										store_i32(memory_at_0, loc_1 + 8, add_i32(loc_3, 2))
																										store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 2))
																										loc_11 = load_i64(memory_at_0, loc_2 + 56)
																										store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
																										store_i64(memory_at_0, loc_2 + 40, loc_11)
																										reg_0 = FUNC_LIST[354](loc_0, add_i32(loc_2, 40), 263)
																										desired = 1
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									store_i32(memory_at_0, loc_1 + 8, add_i32(loc_3, 2))
																									store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 2))
																									loc_11 = load_i64(memory_at_0, loc_2 + 56)
																									store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
																									store_i64(memory_at_0, loc_2 + 40, loc_11)
																									reg_0 = FUNC_LIST[354](loc_0, add_i32(loc_2, 40), 271)
																									desired = 1
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								FUNC_LIST[373](loc_0, loc_1)
																								desired = 1
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							store_i32(memory_at_0, loc_1 + 8, loc_4)
																							store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 1))
																							loc_11 = load_i64(memory_at_0, loc_2 + 56)
																							store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
																							store_i64(memory_at_0, loc_2 + 40, loc_11)
																							reg_0 = FUNC_LIST[355](loc_0, add_i32(loc_2, 40), 45)
																							desired = 1
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						loc_8 = add_i32(loc_3, 1)
																						store_i32(memory_at_0, loc_1 + 8, loc_8)
																						while true do
																							if loc_6 > loc_8 then
																								while true do
																									loc_6 = add_i32(bxor_i32(loc_3, 4294967295), loc_6)
																									loc_3 = 0
																									while true do
																										while true do
																											loc_9 = load_i32_u8(memory_at_0, add_i32(loc_7, loc_8))
																											if loc_9 ~= 61 then
																												while true do
																													loc_6 = loc_3
																													desired = 23
																													break
																												end
																												if desired then
																													if desired == 24 then
																														desired = nil
																														continue
																													end
																													break
																												end
																											end
																											loc_8 = add_i32(loc_8, 1)
																											store_i32(memory_at_0, loc_1 + 8, loc_8)
																											loc_3 = add_i32(loc_3, 1)
																											if loc_6 ~= loc_3 then
																												continue
																											end
																											break
																										end
																										if desired then
																											if desired == 23 then
																												desired = nil
																											end
																											break
																										end
																										loc_9 = 0
																										break
																									end
																									if desired then
																										break
																									end
																									loc_3 = bxor_i32((if loc_9 ~= 91 then 4294967295 else 0), loc_6)
																									if ge_i32(loc_3, 0) then
																										while true do
																											FUNC_LIST[374](loc_0, loc_1, add_i32(loc_2, 56), loc_3, 278, 284)
																											desired = 1
																											break
																										end
																										if desired then
																											break
																										end
																									end
																									if loc_3 ~= 4294967295 then
																										desired = 21
																										break
																									end
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																							end
																							loc_11 = load_i64(memory_at_0, loc_2 + 56)
																							store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
																							store_i64(memory_at_0, loc_2 + 40, loc_11)
																							store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 1))
																							reg_0 = FUNC_LIST[355](loc_0, add_i32(loc_2, 40), 91)
																							desired = 1
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						store_i64(memory_at_0, loc_2 + 40, load_i64(memory_at_0, loc_2 + 56))
																						store_i64(memory_at_0, loc_2 + 48, bor_i64(extend_i64_u32(loc_10), shl_i64(extend_i64_u32(sub_i32(loc_8, loc_4)), i64_from_u32(32, 0))))
																						reg_0 = FUNC_LIST[354](loc_0, add_i32(loc_2, 40), 284)
																						desired = 1
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					store_i32(memory_at_0, loc_1 + 8, add_i32(loc_3, 1))
																					if load_i32(memory_at_0, loc_1 + 72) ~= load_i32(memory_at_0, loc_1 + 76) then
																						while true do
																							store_i32(memory_at_0, loc_2 + 40, 1)
																							FUNC_LIST[375](add_i32(loc_1, 72), add_i32(loc_2, 40))
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					loc_11 = load_i64(memory_at_0, loc_2 + 56)
																					store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
																					store_i64(memory_at_0, loc_2 + 40, loc_11)
																					store_i32(memory_at_0, loc_2 + 52, add_i32(wrap_i32_i64(shr_u64(loc_11, i64_from_u32(32, 0))), 1))
																					reg_0 = FUNC_LIST[355](loc_0, add_i32(loc_2, 40), 123)
																					desired = 1
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				loc_8 = add_i32(loc_3, 1)
																				store_i32(memory_at_0, loc_1 + 8, loc_8)
																				loc_3 = load_i32(memory_at_0, loc_1 + 76)
																				if loc_3 == load_i32(memory_at_0, loc_1 + 72) then
																					while true do
																						loc_11 = load_i64(memory_at_0, loc_2 + 56)
																						store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
																						store_i64(memory_at_0, loc_2 + 40, loc_11)
																						store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 1))
																						reg_0 = FUNC_LIST[355](loc_0, add_i32(loc_2, 40), 125)
																						desired = 1
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																				end
																				loc_3 = sub_i32(loc_3, 4)
																				loc_6 = load_i32(memory_at_0, loc_3)
																				store_i32(memory_at_0, loc_1 + 76, loc_3)
																				if loc_6 ~= 0 then
																					while true do
																						loc_11 = load_i64(memory_at_0, loc_2 + 56)
																						store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
																						store_i64(memory_at_0, loc_2 + 40, loc_11)
																						store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 1))
																						reg_0 = FUNC_LIST[355](loc_0, add_i32(loc_2, 40), 125)
																						desired = 1
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																				end
																				store_i32(memory_at_0, loc_2 + 32, loc_10)
																				store_i32(memory_at_0, loc_2 + 36, sub_i32(loc_8, loc_4))
																				store_i64(memory_at_0, loc_2 + 8, load_i64(memory_at_0, loc_2 + 32))
																				FUNC_LIST[376](loc_0, loc_1, add_i32(loc_2, 8), 267, 268)
																				desired = 1
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			loc_4 = add_i32(loc_3, 1)
																			store_i32(memory_at_0, loc_1 + 8, loc_4)
																			while true do
																				if loc_4 >= loc_6 then
																					break
																				end
																				if load_i32_u8(memory_at_0, add_i32(loc_4, loc_7)) ~= 61 then
																					break
																				end
																				store_i32(memory_at_0, loc_1 + 8, add_i32(loc_3, 2))
																				store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 2))
																				loc_11 = load_i64(memory_at_0, loc_2 + 56)
																				store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
																				store_i64(memory_at_0, loc_2 + 40, loc_11)
																				reg_0 = FUNC_LIST[354](loc_0, add_i32(loc_2, 40), 257)
																				desired = 1
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			loc_11 = load_i64(memory_at_0, loc_2 + 56)
																			store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
																			store_i64(memory_at_0, loc_2 + 40, loc_11)
																			store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 1))
																			reg_0 = FUNC_LIST[355](loc_0, add_i32(loc_2, 40), 61)
																			desired = 1
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		loc_4 = add_i32(loc_3, 1)
																		store_i32(memory_at_0, loc_1 + 8, loc_4)
																		while true do
																			if loc_4 >= loc_6 then
																				break
																			end
																			if load_i32_u8(memory_at_0, add_i32(loc_4, loc_7)) ~= 61 then
																				break
																			end
																			store_i32(memory_at_0, loc_1 + 8, add_i32(loc_3, 2))
																			store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 2))
																			loc_11 = load_i64(memory_at_0, loc_2 + 56)
																			store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
																			store_i64(memory_at_0, loc_2 + 40, loc_11)
																			reg_0 = FUNC_LIST[354](loc_0, add_i32(loc_2, 40), 258)
																			desired = 1
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		loc_11 = load_i64(memory_at_0, loc_2 + 56)
																		store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
																		store_i64(memory_at_0, loc_2 + 40, loc_11)
																		store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 1))
																		reg_0 = FUNC_LIST[355](loc_0, add_i32(loc_2, 40), 60)
																		desired = 1
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_4 = add_i32(loc_3, 1)
																	store_i32(memory_at_0, loc_1 + 8, loc_4)
																	while true do
																		if loc_4 >= loc_6 then
																			break
																		end
																		if load_i32_u8(memory_at_0, add_i32(loc_4, loc_7)) ~= 61 then
																			break
																		end
																		store_i32(memory_at_0, loc_1 + 8, add_i32(loc_3, 2))
																		store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 2))
																		loc_11 = load_i64(memory_at_0, loc_2 + 56)
																		store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
																		store_i64(memory_at_0, loc_2 + 40, loc_11)
																		reg_0 = FUNC_LIST[354](loc_0, add_i32(loc_2, 40), 259)
																		desired = 1
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_11 = load_i64(memory_at_0, loc_2 + 56)
																	store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
																	store_i64(memory_at_0, loc_2 + 40, loc_11)
																	store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 1))
																	reg_0 = FUNC_LIST[355](loc_0, add_i32(loc_2, 40), 62)
																	desired = 1
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																loc_4 = add_i32(loc_3, 1)
																store_i32(memory_at_0, loc_1 + 8, loc_4)
																while true do
																	if loc_4 >= loc_6 then
																		break
																	end
																	if load_i32_u8(memory_at_0, add_i32(loc_4, loc_7)) ~= 61 then
																		break
																	end
																	store_i32(memory_at_0, loc_1 + 8, add_i32(loc_3, 2))
																	store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 2))
																	loc_11 = load_i64(memory_at_0, loc_2 + 56)
																	store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
																	store_i64(memory_at_0, loc_2 + 40, loc_11)
																	reg_0 = FUNC_LIST[354](loc_0, add_i32(loc_2, 40), 260)
																	desired = 1
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																loc_11 = load_i64(memory_at_0, loc_2 + 56)
																store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
																store_i64(memory_at_0, loc_2 + 40, loc_11)
																store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 1))
																reg_0 = FUNC_LIST[355](loc_0, add_i32(loc_2, 40), 126)
																desired = 1
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															FUNC_LIST[377](loc_0, loc_1)
															desired = 1
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														store_i32(memory_at_0, loc_1 + 8, add_i32(loc_3, 1))
														loc_11 = bor_i64(extend_i64_u32(loc_10), shl_i64(extend_i64_u32(loc_5), i64_from_u32(32, 0)))
														store_i64(memory_at_0, loc_2 + 16, loc_11)
														store_i64(memory_at_0, loc_2 + 40, loc_11)
														FUNC_LIST[376](loc_0, loc_1, add_i32(loc_2, 16), 266, 269)
														desired = 1
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_4 = add_i32(loc_3, 1)
													store_i32(memory_at_0, loc_1 + 8, loc_4)
													while true do
														if loc_4 >= loc_6 then
															break
														end
														loc_4 = load_i32_i8(memory_at_0, add_i32(loc_4, loc_7))
														if loc_4 == 46 then
															while true do
																loc_4 = add_i32(loc_3, 2)
																store_i32(memory_at_0, loc_1 + 8, loc_4)
																while true do
																	if loc_4 >= loc_6 then
																		break
																	end
																	while true do
																		while true do
																			if not br_map[3] then
																				br_map[3] = (function()
																					return { [0] = 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, }
																				end)()
																			end
																			temp = br_map[3][sub_i32(load_i32_u8(memory_at_0, add_i32(loc_4, loc_7)), 46)] or 2
																			if temp < 1 then
																				break
																			elseif temp > 1 then
																				desired = 14
																				break
																			else
																				desired = 15
																				break
																			end
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																		store_i32(memory_at_0, loc_1 + 8, add_i32(loc_3, 3))
																		store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 3))
																		loc_11 = load_i64(memory_at_0, loc_2 + 56)
																		store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
																		store_i64(memory_at_0, loc_2 + 40, loc_11)
																		reg_0 = FUNC_LIST[354](loc_0, add_i32(loc_2, 40), 262)
																		desired = 1
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																	store_i32(memory_at_0, loc_1 + 8, add_i32(loc_3, 3))
																	store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 3))
																	loc_11 = load_i64(memory_at_0, loc_2 + 56)
																	store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
																	store_i64(memory_at_0, loc_2 + 40, loc_11)
																	reg_0 = FUNC_LIST[354](loc_0, add_i32(loc_2, 40), 277)
																	desired = 1
																	break
																end
																if desired then
																	break
																end
																loc_11 = load_i64(memory_at_0, loc_2 + 56)
																store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
																store_i64(memory_at_0, loc_2 + 40, loc_11)
																store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 2))
																reg_0 = FUNC_LIST[354](loc_0, add_i32(loc_2, 40), 261)
																desired = 1
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														if sub_i32(loc_4, 48) > 9 then
															break
														end
														FUNC_LIST[378](loc_0, loc_1, add_i32(loc_2, 56), loc_3)
														desired = 1
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_11 = load_i64(memory_at_0, loc_2 + 56)
													store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
													store_i64(memory_at_0, loc_2 + 40, loc_11)
													store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 1))
													reg_0 = FUNC_LIST[355](loc_0, add_i32(loc_2, 40), 46)
													desired = 1
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_4 = add_i32(loc_3, 1)
												store_i32(memory_at_0, loc_1 + 8, loc_4)
												while true do
													if loc_4 >= loc_6 then
														break
													end
													if load_i32_u8(memory_at_0, add_i32(loc_4, loc_7)) ~= 61 then
														break
													end
													store_i32(memory_at_0, loc_1 + 8, add_i32(loc_3, 2))
													store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 2))
													loc_11 = load_i64(memory_at_0, loc_2 + 56)
													store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
													store_i64(memory_at_0, loc_2 + 40, loc_11)
													reg_0 = FUNC_LIST[354](loc_0, add_i32(loc_2, 40), 270)
													desired = 1
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_11 = load_i64(memory_at_0, loc_2 + 56)
												store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
												store_i64(memory_at_0, loc_2 + 40, loc_11)
												store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 1))
												reg_0 = FUNC_LIST[355](loc_0, add_i32(loc_2, 40), 43)
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_4 = add_i32(loc_3, 1)
											store_i32(memory_at_0, loc_1 + 8, loc_4)
											while true do
												if loc_4 >= loc_6 then
													break
												end
												while true do
													while true do
														if not br_map[4] then
															br_map[4] = (function()
																return { [0] = 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, }
															end)()
														end
														temp = br_map[4][sub_i32(load_i32_u8(memory_at_0, add_i32(loc_4, loc_7)), 47)] or 2
														if temp < 1 then
															break
														elseif temp > 1 then
															desired = 10
															break
														else
															desired = 11
															break
														end
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													store_i32(memory_at_0, loc_1 + 8, add_i32(loc_3, 2))
													store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 2))
													loc_11 = load_i64(memory_at_0, loc_2 + 56)
													store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
													store_i64(memory_at_0, loc_2 + 40, loc_11)
													reg_0 = FUNC_LIST[354](loc_0, add_i32(loc_2, 40), 273)
													desired = 1
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_4 = add_i32(loc_3, 2)
												store_i32(memory_at_0, loc_1 + 8, loc_4)
												while true do
													if loc_4 >= loc_6 then
														break
													end
													if load_i32_u8(memory_at_0, add_i32(loc_4, loc_7)) ~= 61 then
														break
													end
													store_i32(memory_at_0, loc_1 + 8, add_i32(loc_3, 3))
													store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 3))
													loc_11 = load_i64(memory_at_0, loc_2 + 56)
													store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
													store_i64(memory_at_0, loc_2 + 40, loc_11)
													reg_0 = FUNC_LIST[354](loc_0, add_i32(loc_2, 40), 274)
													desired = 1
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_11 = load_i64(memory_at_0, loc_2 + 56)
												store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
												store_i64(memory_at_0, loc_2 + 40, loc_11)
												store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 2))
												reg_0 = FUNC_LIST[354](loc_0, add_i32(loc_2, 40), 265)
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_11 = load_i64(memory_at_0, loc_2 + 56)
											store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
											store_i64(memory_at_0, loc_2 + 40, loc_11)
											store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 1))
											reg_0 = FUNC_LIST[355](loc_0, add_i32(loc_2, 40), 47)
											desired = 1
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_4 = add_i32(loc_3, 1)
										store_i32(memory_at_0, loc_1 + 8, loc_4)
										while true do
											if loc_4 >= loc_6 then
												break
											end
											if load_i32_u8(memory_at_0, add_i32(loc_4, loc_7)) ~= 61 then
												break
											end
											store_i32(memory_at_0, loc_1 + 8, add_i32(loc_3, 2))
											store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 2))
											loc_11 = load_i64(memory_at_0, loc_2 + 56)
											store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
											store_i64(memory_at_0, loc_2 + 40, loc_11)
											reg_0 = FUNC_LIST[354](loc_0, add_i32(loc_2, 40), 272)
											desired = 1
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_11 = load_i64(memory_at_0, loc_2 + 56)
										store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
										store_i64(memory_at_0, loc_2 + 40, loc_11)
										store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 1))
										reg_0 = FUNC_LIST[355](loc_0, add_i32(loc_2, 40), 42)
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_4 = add_i32(loc_3, 1)
									store_i32(memory_at_0, loc_1 + 8, loc_4)
									while true do
										if loc_4 >= loc_6 then
											break
										end
										if load_i32_u8(memory_at_0, add_i32(loc_4, loc_7)) ~= 61 then
											break
										end
										store_i32(memory_at_0, loc_1 + 8, add_i32(loc_3, 2))
										store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 2))
										loc_11 = load_i64(memory_at_0, loc_2 + 56)
										store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
										store_i64(memory_at_0, loc_2 + 40, loc_11)
										reg_0 = FUNC_LIST[354](loc_0, add_i32(loc_2, 40), 275)
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_11 = load_i64(memory_at_0, loc_2 + 56)
									store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
									store_i64(memory_at_0, loc_2 + 40, loc_11)
									store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 1))
									reg_0 = FUNC_LIST[355](loc_0, add_i32(loc_2, 40), 37)
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_4 = add_i32(loc_3, 1)
								store_i32(memory_at_0, loc_1 + 8, loc_4)
								while true do
									if loc_4 >= loc_6 then
										break
									end
									if load_i32_u8(memory_at_0, add_i32(loc_4, loc_7)) ~= 61 then
										break
									end
									store_i32(memory_at_0, loc_1 + 8, add_i32(loc_3, 2))
									store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 2))
									loc_11 = load_i64(memory_at_0, loc_2 + 56)
									store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
									store_i64(memory_at_0, loc_2 + 40, loc_11)
									reg_0 = FUNC_LIST[354](loc_0, add_i32(loc_2, 40), 276)
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_11 = load_i64(memory_at_0, loc_2 + 56)
								store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
								store_i64(memory_at_0, loc_2 + 40, loc_11)
								store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 1))
								reg_0 = FUNC_LIST[355](loc_0, add_i32(loc_2, 40), 94)
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_4 = add_i32(loc_3, 1)
							store_i32(memory_at_0, loc_1 + 8, loc_4)
							while true do
								if loc_4 >= loc_6 then
									break
								end
								if load_i32_u8(memory_at_0, add_i32(loc_4, loc_7)) ~= 58 then
									break
								end
								store_i32(memory_at_0, loc_1 + 8, add_i32(loc_3, 2))
								store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 2))
								loc_11 = load_i64(memory_at_0, loc_2 + 56)
								store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
								store_i64(memory_at_0, loc_2 + 40, loc_11)
								reg_0 = FUNC_LIST[354](loc_0, add_i32(loc_2, 40), 264)
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_11 = load_i64(memory_at_0, loc_2 + 56)
							store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
							store_i64(memory_at_0, loc_2 + 40, loc_11)
							store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 1))
							reg_0 = FUNC_LIST[355](loc_0, add_i32(loc_2, 40), 58)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32(memory_at_0, loc_1 + 8, add_i32(loc_3, 1))
						store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 1))
						loc_11 = load_i64(memory_at_0, loc_2 + 56)
						store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
						store_i64(memory_at_0, loc_2 + 40, loc_11)
						reg_0 = FUNC_LIST[355](loc_0, add_i32(loc_2, 40), loc_9)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if load_i32_u8(memory_at_0, 47700) == 0 then
						desired = 2
						break
					end
					FUNC_LIST[379](add_i32(loc_2, 24), loc_1)
					if load_i32(memory_at_0, loc_2 + 28) ~= 310 then
						while true do
							loc_11 = load_i64_u32(memory_at_0, loc_1 + 12)
							loc_3 = load_i32(memory_at_0, loc_1 + 16)
							loc_1 = load_i32(memory_at_0, loc_1 + 8)
							store_i64(memory_at_0, loc_2 + 40, load_i64(memory_at_0, loc_2 + 56))
							store_i64(memory_at_0, loc_2 + 48, bor_i64(shl_i64(extend_i64_u32(sub_i32(loc_1, loc_3)), i64_from_u32(32, 0)), loc_11))
							reg_0 = FUNC_LIST[354](loc_0, add_i32(loc_2, 40), 288)
							desired = 1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_11 = load_i64_u32(memory_at_0, loc_1 + 12)
					loc_3 = load_i32(memory_at_0, loc_1 + 16)
					loc_1 = load_i32(memory_at_0, loc_1 + 8)
					store_i64(memory_at_0, loc_2 + 40, load_i64(memory_at_0, loc_2 + 56))
					store_i64(memory_at_0, loc_2 + 48, bor_i64(shl_i64(extend_i64_u32(sub_i32(loc_1, loc_3)), i64_from_u32(32, 0)), loc_11))
					reg_0 = FUNC_LIST[357](loc_0, add_i32(loc_2, 40), 310, load_i32(memory_at_0, loc_2 + 24))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if sub_i32(loc_9, 48) <= 9 then
					while true do
						FUNC_LIST[378](loc_0, loc_1, add_i32(loc_2, 56), loc_3)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if band_i32((if loc_9 ~= 95 then 1 else 0), (if sub_i32(bor_i32(loc_9, 32), 97) >= 26 then 1 else 0)) == 0 then
					while true do
						FUNC_LIST[379](add_i32(loc_2, 24), loc_1)
						loc_11 = load_i64_u32(memory_at_0, loc_1 + 12)
						loc_3 = load_i32(memory_at_0, loc_1 + 16)
						loc_1 = load_i32(memory_at_0, loc_1 + 8)
						store_i64(memory_at_0, loc_2 + 40, load_i64(memory_at_0, loc_2 + 56))
						store_i64(memory_at_0, loc_2 + 48, bor_i64(shl_i64(extend_i64_u32(sub_i32(loc_1, loc_3)), i64_from_u32(32, 0)), loc_11))
						reg_0 = FUNC_LIST[357](loc_0, add_i32(loc_2, 40), load_i32(memory_at_0, loc_2 + 28), load_i32(memory_at_0, loc_2 + 24))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if ge_i32(loc_9, 0) then
					break
				end
				FUNC_LIST[380](loc_0, loc_1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_1 + 8, add_i32(loc_3, 1))
			store_i32(memory_at_0, loc_2 + 52, add_i32(loc_5, 1))
			loc_11 = load_i64(memory_at_0, loc_2 + 56)
			store_i64_n32(memory_at_0, loc_2 + 48, loc_11)
			store_i64(memory_at_0, loc_2 + 40, loc_11)
			reg_0 = FUNC_LIST[355](loc_0, add_i32(loc_2, 40), loc_9)
			break
		end
		GLOBAL_LIST[0].value = sub_i32(loc_2, 4294967232)
		break
	end
end
FUNC_LIST[372] = --[[ Luau::Lexer::next(bool, bool) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = add_i32(loc_0, 20)
		loc_6 = add_i32(loc_0, 48)
		loc_7 = add_i32(loc_0, 24)
		while true do
			while true do
				loc_3 = load_i32(memory_at_0, loc_0 + 8)
				loc_10 = load_i32(memory_at_0, loc_0 + 4)
				if loc_3 >= loc_10 then
					break
				end
				loc_8 = load_i32(memory_at_0, loc_0 + 12)
				loc_11 = load_i32(memory_at_0, loc_0)
				while true do
					loc_9 = sub_i32(load_i32_u8(memory_at_0, add_i32(loc_3, loc_11)), 9)
					if loc_9 > 23 then
						desired = 2
						break
					end
					while true do
						if band_i32(shl_i32(1, loc_9), 8388637) == 0 then
							while true do
								if loc_9 ~= 1 then
									desired = 2
									break
								end
								loc_3 = add_i32(loc_3, 1)
								store_i32(memory_at_0, loc_0 + 16, loc_3)
								loc_8 = add_i32(loc_8, 1)
								store_i32(memory_at_0, loc_0 + 12, loc_8)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_3 = add_i32(loc_3, 1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					store_i32(memory_at_0, loc_0 + 8, loc_3)
					if loc_3 ~= loc_10 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			if band_i32(loc_2, 1) ~= 0 then
				while true do
					store_i64(memory_at_0, loc_6, load_i64(memory_at_0, loc_7))
					store_i64(memory_at_0, loc_6 + 8, load_i64(memory_at_0, loc_7 + 8))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			FUNC_LIST[371](add_i32(loc_4, 4), loc_0)
			store_i32(memory_at_0, loc_5 + 24, load_i32(memory_at_0, loc_4 + 28))
			store_i64(memory_at_0, loc_5 + 16, load_i64(memory_at_0, loc_4 + 20))
			store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_4 + 12))
			store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_4 + 4))
			if loc_1 ~= 0 then
				while true do
					loc_2 = 0
					if band_i32(load_i32(memory_at_0, loc_5), 4294967294) == 282 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		reg_0 = loc_5
		break
	end
	return reg_0
end
FUNC_LIST[373] = --[[ Luau::Lexer::readCommentBody() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_9 = load_i32(memory_at_0, loc_1 + 16)
		loc_3 = load_i32(memory_at_0, loc_1 + 8)
		loc_11 = load_i32(memory_at_0, loc_1 + 12)
		store_i32(memory_at_0, loc_4 + 24, loc_11)
		store_i32(memory_at_0, loc_4 + 28, sub_i32(loc_3, loc_9))
		loc_7 = add_i32(loc_3, 2)
		store_i32(memory_at_0, loc_1 + 8, loc_7)
		loc_6 = load_i32(memory_at_0, loc_1)
		while true do
			while true do
				loc_5 = load_i32(memory_at_0, loc_1 + 4)
				loc_2 = loc_7
				if loc_5 <= loc_2 then
					break
				end
				if load_i32_u8(memory_at_0, add_i32(loc_2, loc_6)) ~= 91 then
					break
				end
				loc_2 = add_i32(loc_3, 3)
				store_i32(memory_at_0, loc_1 + 8, loc_2)
				if loc_2 >= loc_5 then
					break
				end
				loc_8 = sub_i32(sub_i32(loc_5, loc_3), 3)
				loc_3 = 0
				while true do
					while true do
						loc_10 = load_i32_u8(memory_at_0, add_i32(loc_2, loc_6))
						if loc_10 ~= 61 then
							while true do
								loc_8 = loc_3
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						loc_2 = add_i32(loc_2, 1)
						store_i32(memory_at_0, loc_1 + 8, loc_2)
						loc_3 = add_i32(loc_3, 1)
						if loc_8 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_10 = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = bxor_i32((if loc_10 ~= 91 then 4294967295 else 0), loc_8)
				if lt_i32(loc_3, 0) then
					break
				end
				FUNC_LIST[374](loc_0, loc_1, add_i32(loc_4, 24), loc_3, 283, 285)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_2 >= loc_5 then
					break
				end
				while true do
					loc_3 = load_i32_u8(memory_at_0, add_i32(loc_2, loc_6))
					if (if band_i32(shl_i32(1, loc_3), 9217) ~= 0 then (if loc_3 <= 13 then 1 else 0) else 0) ~= 0 then
						desired = 2
						break
					end
					loc_2 = add_i32(loc_2, 1)
					store_i32(memory_at_0, loc_1 + 8, loc_2)
					if loc_2 ~= loc_5 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = loc_5
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_4 + 24))
			store_i64(memory_at_0, loc_4 + 16, bor_i64(extend_i64_u32(loc_11), shl_i64(extend_i64_u32(sub_i32(loc_2, loc_9)), i64_from_u32(32, 0))))
			reg_0 = FUNC_LIST[356](loc_0, add_i32(loc_4, 8), 282, add_i32(loc_6, loc_7), sub_i32(loc_2, loc_7))
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[374] = --[[ Luau::Lexer::readLongString(Luau::Position const&, int, Luau::Lexeme::Type, Luau::Lexeme::Type) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_8 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_8
		loc_9 = add_i32(load_i32(memory_at_0, loc_1 + 8), 1)
		store_i32(memory_at_0, loc_1 + 8, loc_9)
		while true do
			while true do
				loc_11 = load_i32(memory_at_0, loc_1 + 4)
				if loc_9 >= loc_11 then
					while true do
						loc_10 = load_i32(memory_at_0, loc_1 + 12)
						loc_6 = loc_9
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_10 = load_i32(memory_at_0, loc_1 + 12)
				loc_13 = load_i32(memory_at_0, loc_1)
				loc_6 = loc_9
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										loc_7 = load_i32_u8(memory_at_0, add_i32(loc_6, loc_13))
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, }
											end)()
										end
										temp = br_map[1][loc_7] or 0
										if temp < 2 then
											if temp < 1 then
												break
											else
												desired = 7
												break
											end
										elseif temp > 2 then
											desired = 2
											break
										else
											desired = 6
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_7 ~= 93 then
										break
									end
									loc_7 = add_i32(loc_6, 1)
									store_i32(memory_at_0, loc_1 + 8, loc_7)
									loc_12 = 0
									while true do
										if loc_7 >= loc_11 then
											while true do
												loc_14 = 0
												reg_0 = loc_7
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_12 = add_i32(bxor_i32(loc_6, 4294967295), loc_11)
										loc_15 = 0
										while true do
											loc_14 = load_i32_u8(memory_at_0, add_i32(loc_7, loc_13))
											if loc_14 ~= 61 then
												while true do
													loc_12 = loc_15
													reg_0 = loc_7
													desired = 8
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
											end
											loc_7 = add_i32(loc_7, 1)
											store_i32(memory_at_0, loc_1 + 8, loc_7)
											loc_15 = add_i32(loc_15, 1)
											if loc_12 ~= loc_15 then
												continue
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_14 = 0
										reg_0 = loc_11
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_6 = reg_0
									if loc_3 ~= bxor_i32((if loc_14 ~= 93 then 4294967295 else 0), loc_12) then
										desired = 4
										break
									end
									loc_6 = add_i32(loc_7, 1)
									store_i32(memory_at_0, loc_1 + 8, loc_6)
									loc_1 = load_i32(memory_at_0, loc_1 + 16)
									store_i64(memory_at_0, loc_8, load_i64(memory_at_0, loc_2))
									store_i64(memory_at_0, loc_8 + 8, bor_i64(extend_i64_u32(loc_10), shl_i64(extend_i64_u32(sub_i32(loc_6, loc_1)), i64_from_u32(32, 0))))
									reg_0 = FUNC_LIST[356](loc_0, loc_8, loc_4, add_i32(loc_9, loc_13), add_i32(bxor_i32(add_i32(loc_3, loc_9), 4294967295), loc_7))
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_6 = add_i32(loc_6, 1)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_6 = add_i32(loc_6, 1)
							store_i32(memory_at_0, loc_1 + 16, loc_6)
							loc_10 = add_i32(loc_10, 1)
							store_i32(memory_at_0, loc_1 + 12, loc_10)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32(memory_at_0, loc_1 + 8, loc_6)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					if loc_6 < loc_11 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = load_i32(memory_at_0, loc_1 + 16)
			store_i64(memory_at_0, loc_8, load_i64(memory_at_0, loc_2))
			store_i64(memory_at_0, loc_8 + 8, bor_i64(extend_i64_u32(loc_10), shl_i64(extend_i64_u32(sub_i32(loc_6, loc_7)), i64_from_u32(32, 0))))
			reg_0 = FUNC_LIST[354](loc_0, loc_8, loc_5)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_8, 16)
		break
	end
end
FUNC_LIST[375] = --[[ std::__2::vector<Luau::Lexer::BraceType, std::__2::allocator<Luau::Lexer::BraceType>>::push_back[abi:ue170004](Luau::Lexer::BraceType&&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_4 = load_i32(memory_at_0, loc_0 + 4)
		loc_2 = load_i32(memory_at_0, loc_0 + 8)
		if loc_4 < loc_2 then
			while true do
				store_i32(memory_at_0, loc_4, load_i32(memory_at_0, loc_1))
				store_i32(memory_at_0, loc_0 + 4, add_i32(loc_4, 4))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_5 = load_i32(memory_at_0, loc_0)
			loc_7 = shr_i32(sub_i32(loc_4, loc_5), 2)
			loc_3 = add_i32(loc_7, 1)
			if loc_3 < 1073741824 then
				while true do
					loc_2 = sub_i32(loc_2, loc_5)
					loc_6 = shr_i32(loc_2, 1)
					loc_3 = (if loc_2 >= 2147483644 then 1073741823 else (if loc_3 < loc_6 then loc_6 else loc_3))
					if loc_3 ~= 0 then
						while true do
							if loc_3 >= 1073741824 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](shl_i32(loc_3, 2))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							break
						end
					end
					loc_6 = reg_0
					loc_2 = add_i32(loc_6, shl_i32(loc_7, 2))
					store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_1))
					loc_1 = add_i32(shl_i32(loc_3, 2), loc_6)
					loc_3 = add_i32(loc_2, 4)
					if loc_4 ~= loc_5 then
						while true do
							while true do
								loc_2 = sub_i32(loc_2, 4)
								loc_4 = sub_i32(loc_4, 4)
								store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_4))
								if loc_4 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					store_i32(memory_at_0, loc_0 + 8, loc_1)
					store_i32(memory_at_0, loc_0 + 4, loc_3)
					store_i32(memory_at_0, loc_0, loc_2)
					if loc_5 ~= 0 then
						while true do
							FUNC_LIST[609](loc_5)
							break
						end
						if desired then
							break
						end
					end
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[40](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[376] = --[[ Luau::Lexer::readInterpolatedStringSection(Luau::Position, Luau::Lexeme::Type, Luau::Lexeme::Type) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_7 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_7
		while true do
			while true do
				loc_9 = load_i32(memory_at_0, loc_1 + 8)
				loc_8 = load_i32(memory_at_0, loc_1 + 4)
				if loc_9 >= loc_8 then
					while true do
						loc_6 = loc_9
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_6 = loc_9
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												loc_11 = load_i32(memory_at_0, loc_1)
												loc_5 = load_i32_u8(memory_at_0, add_i32(loc_6, loc_11))
												if not br_map[1] then
													br_map[1] = (function()
														return { [0] = 1, 4, 4, 4, 2, }
													end)()
												end
												temp = br_map[1][sub_i32(loc_5, 92)] or 0
												if temp < 2 then
													if temp < 1 then
														break
													else
														desired = 9
														break
													end
												elseif temp > 2 then
													desired = 6
													break
												else
													desired = 8
													break
												end
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if loc_5 > 13 then
												desired = 7
												break
											end
											if band_i32(shl_i32(1, loc_5), 9217) == 0 then
												desired = 7
												break
											end
											desired = 2
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										while true do
											loc_5 = add_i32(loc_6, 1)
											if loc_8 <= loc_5 then
												break
											end
											if load_i32_u8(memory_at_0, add_i32(loc_5, loc_11)) ~= 117 then
												break
											end
											loc_5 = add_i32(loc_6, 2)
											if loc_8 <= loc_5 then
												break
											end
											if load_i32_u8(memory_at_0, add_i32(loc_5, loc_11)) ~= 123 then
												break
											end
											loc_6 = add_i32(loc_6, 3)
											store_i32(memory_at_0, loc_1 + 8, loc_6)
											desired = 5
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										FUNC_LIST[382](loc_1)
										loc_8 = load_i32(memory_at_0, loc_1 + 4)
										loc_6 = load_i32(memory_at_0, loc_1 + 8)
										desired = 5
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_8 = add_i32(loc_6, 1)
									store_i32(memory_at_0, loc_1 + 8, loc_8)
									loc_16 = load_i64_u32(memory_at_0, loc_1 + 12)
									loc_1 = load_i32(memory_at_0, loc_1 + 16)
									store_i64(memory_at_0, loc_7, load_i64(memory_at_0, loc_2))
									store_i64(memory_at_0, loc_7 + 8, bor_i64(shl_i64(extend_i64_u32(sub_i32(loc_8, loc_1)), i64_from_u32(32, 0)), loc_16))
									reg_0 = FUNC_LIST[356](loc_0, loc_7, loc_4, add_i32(loc_9, loc_11), sub_i32(loc_6, loc_9))
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_5 == 123 then
									desired = 4
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_6 = add_i32(loc_6, 1)
							store_i32(memory_at_0, loc_1 + 8, loc_6)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_6 < loc_8 then
							desired = 3
							break
						end
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					while true do
						while true do
							loc_5 = load_i32(memory_at_0, loc_1 + 76)
							loc_4 = load_i32(memory_at_0, loc_1 + 80)
							if loc_5 < loc_4 then
								while true do
									store_i32(memory_at_0, loc_5, 0)
									store_i32(memory_at_0, loc_1 + 76, add_i32(loc_5, 4))
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_12 = add_i32(loc_1, 72)
							loc_13 = load_i32(memory_at_0, loc_12)
							loc_14 = shr_i32(sub_i32(loc_5, loc_13), 2)
							loc_10 = add_i32(loc_14, 1)
							if loc_10 >= 1073741824 then
								desired = 4
								break
							end
							loc_12 = 0
							loc_4 = sub_i32(loc_4, loc_13)
							loc_15 = shr_i32(loc_4, 1)
							loc_10 = (if loc_4 >= 2147483644 then 1073741823 else (if loc_10 < loc_15 then loc_15 else loc_10))
							if loc_10 ~= 0 then
								while true do
									if loc_10 >= 1073741824 then
										desired = 3
										break
									end
									reg_0 = FUNC_LIST[606](shl_i32(loc_10, 2))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = loc_12
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_12 = reg_0
							loc_4 = add_i32(loc_12, shl_i32(loc_14, 2))
							store_i32(memory_at_0, loc_4, 0)
							loc_12 = add_i32(shl_i32(loc_10, 2), loc_12)
							loc_10 = add_i32(loc_4, 4)
							if loc_5 ~= loc_13 then
								while true do
									while true do
										loc_4 = sub_i32(loc_4, 4)
										loc_5 = sub_i32(loc_5, 4)
										store_i32(memory_at_0, loc_4, load_i32(memory_at_0, loc_5))
										if loc_5 ~= loc_13 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							store_i32(memory_at_0, loc_1 + 80, loc_12)
							store_i32(memory_at_0, loc_1 + 76, loc_10)
							store_i32(memory_at_0, loc_1 + 72, loc_4)
							if loc_13 == 0 then
								break
							end
							FUNC_LIST[609](loc_13)
							loc_11 = load_i32(memory_at_0, loc_1)
							loc_8 = load_i32(memory_at_0, loc_1 + 4)
							loc_6 = load_i32(memory_at_0, loc_1 + 8)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							loc_5 = add_i32(loc_6, 1)
							if loc_8 <= loc_5 then
								break
							end
							if load_i32_u8(memory_at_0, add_i32(loc_5, loc_11)) ~= 123 then
								break
							end
							loc_16 = load_i64_u32(memory_at_0, loc_1 + 12)
							loc_8 = load_i32(memory_at_0, loc_1 + 16)
							store_i64(memory_at_0, loc_7, load_i64(memory_at_0, loc_2))
							store_i64(memory_at_0, loc_7 + 8, bor_i64(shl_i64(extend_i64_u32(sub_i32(loc_6, loc_8)), i64_from_u32(32, 0)), loc_16))
							reg_0 = FUNC_LIST[356](loc_0, loc_7, 287, add_i32(loc_9, loc_11), sub_i32(loc_6, loc_9))
							store_i32(memory_at_0, loc_1 + 8, add_i32(load_i32(memory_at_0, loc_1 + 8), 2))
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32(memory_at_0, loc_1 + 8, loc_5)
						loc_16 = load_i64_u32(memory_at_0, loc_1 + 12)
						loc_1 = load_i32(memory_at_0, loc_1 + 16)
						store_i64(memory_at_0, loc_7, load_i64(memory_at_0, loc_2))
						store_i64(memory_at_0, loc_7 + 8, bor_i64(shl_i64(extend_i64_u32(sub_i32(loc_5, loc_1)), i64_from_u32(32, 0)), loc_16))
						reg_0 = FUNC_LIST[356](loc_0, loc_7, loc_3, add_i32(loc_9, loc_11), sub_i32(loc_6, loc_9))
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[40](loc_12)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[163]()
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_16 = load_i64_u32(memory_at_0, loc_1 + 12)
			loc_1 = load_i32(memory_at_0, loc_1 + 16)
			store_i64(memory_at_0, loc_7, load_i64(memory_at_0, loc_2))
			store_i64(memory_at_0, loc_7 + 8, bor_i64(shl_i64(extend_i64_u32(sub_i32(loc_6, loc_1)), i64_from_u32(32, 0)), loc_16))
			reg_0 = FUNC_LIST[354](loc_0, loc_7, 284)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_7, 16)
		break
	end
end
FUNC_LIST[377] = --[[ Luau::Lexer::readQuotedString() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		loc_2 = load_i32(memory_at_0, loc_1 + 16)
		loc_6 = load_i32(memory_at_0, loc_1 + 8)
		loc_7 = load_i32(memory_at_0, loc_1 + 4)
		if loc_6 < loc_7 then
			while true do
				reg_0 = load_i32_u8(memory_at_0, add_i32(loc_6, load_i32(memory_at_0, loc_1)))
				break
			end
		else
			while true do
				reg_0 = loc_5
				break
			end
		end
		loc_5 = reg_0
		loc_8 = sub_i32(loc_6, loc_2)
		loc_9 = load_i32(memory_at_0, loc_1 + 12)
		loc_10 = add_i32(loc_6, 1)
		store_i32(memory_at_0, loc_1 + 8, loc_10)
		while true do
			while true do
				while true do
					loc_2 = loc_10
					if loc_7 > loc_2 then
						while true do
							loc_12 = loc_5
							while true do
								loc_11 = load_i32(memory_at_0, loc_1)
								loc_4 = load_i32_u8(memory_at_0, add_i32(loc_2, loc_11))
								if loc_12 == loc_4 then
									desired = 3
									break
								end
								while true do
									while true do
										if loc_4 ~= 92 then
											while true do
												if loc_4 > 13 then
													desired = 7
													break
												end
												if band_i32(shl_i32(1, loc_4), 9217) == 0 then
													desired = 7
													break
												end
												desired = 2
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										FUNC_LIST[382](loc_1)
										loc_7 = load_i32(memory_at_0, loc_1 + 4)
										loc_2 = load_i32(memory_at_0, loc_1 + 8)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									loc_2 = add_i32(loc_2, 1)
									store_i32(memory_at_0, loc_1 + 8, loc_2)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
								if loc_2 < loc_7 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_5 ~= 0 then
						desired = 2
						break
					end
					loc_11 = load_i32(memory_at_0, loc_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = add_i32(loc_2, 1)
				store_i32(memory_at_0, loc_1 + 8, loc_4)
				loc_13 = load_i64_u32(memory_at_0, loc_1 + 12)
				loc_1 = load_i32(memory_at_0, loc_1 + 16)
				store_i64(memory_at_0, loc_3, bor_i64(extend_i64_u32(loc_9), shl_i64(extend_i64_u32(loc_8), i64_from_u32(32, 0))))
				store_i64(memory_at_0, loc_3 + 8, bor_i64(shl_i64(extend_i64_u32(sub_i32(loc_4, loc_1)), i64_from_u32(32, 0)), loc_13))
				reg_0 = FUNC_LIST[356](loc_0, loc_3, 279, add_i32(loc_10, loc_11), add_i32(bxor_i32(loc_6, 4294967295), loc_2))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_13 = load_i64_u32(memory_at_0, loc_1 + 12)
			loc_1 = load_i32(memory_at_0, loc_1 + 16)
			store_i64(memory_at_0, loc_3, bor_i64(extend_i64_u32(loc_9), shl_i64(extend_i64_u32(loc_8), i64_from_u32(32, 0))))
			store_i64(memory_at_0, loc_3 + 8, bor_i64(shl_i64(extend_i64_u32(sub_i32(loc_2, loc_1)), i64_from_u32(32, 0)), loc_13))
			reg_0 = FUNC_LIST[354](loc_0, loc_3, 284)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[378] = --[[ Luau::Lexer::readNumber(Luau::Position const&, unsigned int) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_7 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_7
		loc_4 = load_i32(memory_at_0, loc_1 + 8)
		loc_5 = add_i32(loc_4, 1)
		store_i32(memory_at_0, loc_1 + 8, loc_5)
		loc_8 = load_i32(memory_at_0, loc_1)
		while true do
			while true do
				while true do
					loc_6 = load_i32(memory_at_0, loc_1 + 4)
					if loc_5 >= loc_6 then
						while true do
							loc_4 = loc_5
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						while true do
							loc_9 = loc_4
							while true do
								loc_4 = loc_5
								loc_5 = load_i32_u8(memory_at_0, add_i32(loc_4, loc_8))
								if sub_i32(extend_i32_n8(loc_5), 48) < 10 then
									break
								end
								while true do
									while true do
										loc_5 = band_i32(loc_5, 255)
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 2, 5, 5, 5, 5, 5, 1, }
											end)()
										end
										temp = br_map[1][sub_i32(loc_5, 95)] or 0
										if temp < 2 then
											if temp < 1 then
												break
											else
												desired = 7
												break
											end
										elseif temp > 2 then
											desired = 3
											break
										else
											desired = 6
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_5 == 46 then
										desired = 6
										break
									end
									if loc_5 ~= 69 then
										desired = 3
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_4 = add_i32(loc_9, 2)
								store_i32(memory_at_0, loc_1 + 8, loc_4)
								if loc_4 >= loc_6 then
									desired = 3
									break
								end
								if not br_map[2] then
									br_map[2] = (function()
										return { [0] = 1, 3, 1, }
									end)()
								end
								temp = br_map[2][sub_i32(load_i32_u8(memory_at_0, add_i32(loc_4, loc_8)), 43)] or 3
								if temp < 3 then
									desired = 5
									break
								else
									desired = 3
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_5 = add_i32(loc_4, 1)
							store_i32(memory_at_0, loc_1 + 8, loc_5)
							if loc_5 ~= loc_6 then
								desired = 4
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = add_i32(loc_9, 3)
					store_i32(memory_at_0, loc_1 + 8, loc_4)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_4 >= loc_6 then
					desired = 1
					break
				end
				while true do
					while true do
						loc_5 = load_i32_i8(memory_at_0, add_i32(loc_4, loc_8))
						if sub_i32(bor_i32(loc_5, 32), 97) < 26 then
							break
						end
						if sub_i32(loc_5, 48) < 10 then
							break
						end
						if loc_5 ~= 95 then
							desired = 1
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_4 = add_i32(loc_4, 1)
					store_i32(memory_at_0, loc_1 + 8, loc_4)
					if loc_4 ~= loc_6 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = loc_6
			break
		end
		loc_10 = load_i64_u32(memory_at_0, loc_1 + 12)
		loc_5 = load_i32(memory_at_0, loc_1 + 16)
		store_i64(memory_at_0, loc_7, load_i64(memory_at_0, loc_2))
		store_i64(memory_at_0, loc_7 + 8, bor_i64(shl_i64(extend_i64_u32(sub_i32(loc_4, loc_5)), i64_from_u32(32, 0)), loc_10))
		reg_0 = FUNC_LIST[356](loc_0, loc_7, 280, add_i32(loc_3, loc_8), sub_i32(loc_4, loc_3))
		GLOBAL_LIST[0].value = add_i32(loc_7, 16)
		break
	end
end
FUNC_LIST[379] = --[[ Luau::Lexer::readName() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_6 = load_i32(memory_at_0, loc_1 + 8)
		loc_2 = add_i32(loc_6, 1)
		store_i32(memory_at_0, loc_1 + 8, loc_2)
		while true do
			loc_5 = load_i32(memory_at_0, loc_1 + 4)
			if loc_5 <= loc_2 then
				break
			end
			loc_7 = load_i32(memory_at_0, loc_1)
			while true do
				while true do
					loc_3 = load_i32_i8(memory_at_0, add_i32(loc_2, loc_7))
					if sub_i32(bor_i32(loc_3, 32), 97) < 26 then
						break
					end
					if sub_i32(loc_3, 48) < 10 then
						break
					end
					if loc_3 ~= 95 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_2 = add_i32(loc_2, 1)
				store_i32(memory_at_0, loc_1 + 8, loc_2)
				if loc_2 ~= loc_5 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = loc_5
			break
		end
		loc_2 = sub_i32(loc_2, loc_6)
		loc_3 = add_i32(loc_6, load_i32(memory_at_0, loc_1))
		loc_5 = load_i32(memory_at_0, loc_1 + 64)
		while true do
			if load_i32_u8(memory_at_0, loc_1 + 69) ~= 0 then
				while true do
					FUNC_LIST[365](loc_0, loc_5, loc_3, loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = 0
			store_i32(memory_at_0, loc_4 + 12, 0)
			store_i32(memory_at_0, loc_4 + 8, loc_2)
			store_i32(memory_at_0, loc_4 + 4, loc_3)
			reg_1 = FUNC_LIST[361](loc_5, add_i32(loc_4, 4))
			loc_2 = reg_1
			reg_0 = loc_0
			if loc_2 ~= 0 then
				while true do
					loc_1 = load_i32(memory_at_0, loc_2)
					reg_1 = load_i32(memory_at_0, loc_2 + 8)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_1 = 281
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = reg_1
			store_i32(memory_at_0, reg_0 + 4, loc_3)
			store_i32(memory_at_0, loc_0, loc_1)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[380] = --[[ Luau::Lexer::readUtf8Error() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		loc_3 = load_i32(memory_at_0, loc_1 + 8)
		loc_8 = load_i32(memory_at_0, loc_1 + 16)
		loc_9 = sub_i32(loc_3, loc_8)
		loc_10 = load_i32(memory_at_0, loc_1 + 12)
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_6 = load_i32(memory_at_0, loc_1 + 4)
							if loc_6 <= loc_3 then
								break
							end
							loc_2 = load_i32_i8(memory_at_0, add_i32(loc_3, load_i32(memory_at_0, loc_1)))
							if ge_i32(loc_2, 0) then
								break
							end
							loc_7 = 31
							if band_i32(loc_2, 4294967264) == 4294967232 then
								desired = 4
								break
							end
							if band_i32(loc_2, 4294967280) == 4294967264 then
								while true do
									loc_11 = 1
									loc_7 = 15
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_7 = 7
							if band_i32(loc_2, 4294967288) == 4294967280 then
								desired = 4
								break
							end
							loc_3 = add_i32(loc_3, 1)
							store_i32(memory_at_0, loc_1 + 8, loc_3)
							loc_15 = extend_i64_u32(loc_10)
							store_i64(memory_at_0, loc_5, bor_i64(loc_15, shl_i64(extend_i64_u32(loc_9), i64_from_u32(32, 0))))
							store_i64(memory_at_0, loc_5 + 8, bor_i64(loc_15, shl_i64(extend_i64_u32(sub_i32(loc_3, loc_8)), i64_from_u32(32, 0))))
							reg_0 = FUNC_LIST[354](loc_0, loc_5, 286)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = add_i32(loc_3, 1)
						store_i32(memory_at_0, loc_1 + 8, loc_4)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = add_i32(loc_3, 1)
					store_i32(memory_at_0, loc_1 + 8, loc_4)
					loc_6 = sub_i32((if loc_4 > loc_6 then loc_4 else loc_6), loc_3)
					if loc_6 == 1 then
						desired = 2
						break
					end
					loc_12 = load_i32(memory_at_0, loc_1)
					loc_13 = load_i32_u8(memory_at_0, add_i32(loc_4, loc_12))
					if band_i32(loc_13, 192) ~= 128 then
						desired = 2
						break
					end
					loc_14 = band_i32(loc_2, 224)
					loc_4 = add_i32(loc_3, 2)
					store_i32(memory_at_0, loc_1 + 8, loc_4)
					loc_2 = bor_i32(band_i32(loc_13, 63), shl_i32(band_i32(loc_2, loc_7), 6))
					if loc_14 == 192 then
						break
					end
					if loc_6 == 2 then
						desired = 2
						break
					end
					loc_7 = load_i32_u8(memory_at_0, add_i32(loc_4, loc_12))
					if band_i32(loc_7, 192) ~= 128 then
						desired = 2
						break
					end
					loc_4 = add_i32(loc_3, 3)
					store_i32(memory_at_0, loc_1 + 8, loc_4)
					loc_2 = bor_i32(band_i32(loc_7, 63), shl_i32(loc_2, 6))
					if loc_11 ~= 0 then
						break
					end
					if loc_6 == 3 then
						desired = 2
						break
					end
					loc_6 = load_i32_u8(memory_at_0, add_i32(loc_4, loc_12))
					if band_i32(loc_6, 192) ~= 128 then
						desired = 2
						break
					end
					loc_4 = add_i32(loc_3, 4)
					store_i32(memory_at_0, loc_1 + 8, loc_4)
					loc_2 = bor_i32(band_i32(loc_6, 63), shl_i32(loc_2, 6))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_15 = extend_i64_u32(loc_10)
				store_i64(memory_at_0, loc_5, bor_i64(loc_15, shl_i64(extend_i64_u32(loc_9), i64_from_u32(32, 0))))
				store_i64(memory_at_0, loc_5 + 8, bor_i64(loc_15, shl_i64(extend_i64_u32(sub_i32(loc_4, loc_8)), i64_from_u32(32, 0))))
				reg_0 = FUNC_LIST[354](loc_0, loc_5, 286)
				store_i32(memory_at_0, loc_0 + 24, loc_2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_15 = extend_i64_u32(loc_10)
			store_i64(memory_at_0, loc_5, bor_i64(loc_15, shl_i64(extend_i64_u32(loc_9), i64_from_u32(32, 0))))
			store_i64(memory_at_0, loc_5 + 8, bor_i64(loc_15, shl_i64(extend_i64_u32(sub_i32(loc_4, loc_8)), i64_from_u32(32, 0))))
			reg_0 = FUNC_LIST[354](loc_0, loc_5, 286)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_5, 16)
		break
	end
end
FUNC_LIST[381] = --[[ Luau::Lexer::lookahead() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local reg_0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_4
		loc_12 = load_i32(memory_at_0, loc_1 + 16)
		loc_13 = load_i32(memory_at_0, loc_1 + 12)
		loc_14 = load_i32(memory_at_0, loc_1 + 8)
		store_i32(memory_at_0, loc_4 + 48, load_i32(memory_at_0, loc_1 + 44))
		store_i64(memory_at_0, loc_4 + 40, load_i64(memory_at_0, loc_1 + 36))
		store_i64(memory_at_0, loc_4 + 32, load_i64(memory_at_0, loc_1 + 28))
		store_i64(memory_at_0, loc_4 + 24, load_i64(memory_at_0, loc_1 + 20))
		store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_1 + 56))
		store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_1 + 48))
		loc_2 = load_i32(memory_at_0, loc_1 + 76)
		loc_5 = load_i32(memory_at_0, loc_1 + 72)
		loc_7 = sub_i32(loc_2, loc_5)
		loc_8 = 1
		if loc_2 ~= loc_5 then
			while true do
				reg_0 = load_i32(memory_at_0, sub_i32(loc_2, 4))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_8
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_8 = reg_0
		loc_15 = add_i32(loc_1, 72)
		loc_3 = add_i32(loc_1, 20)
		loc_10 = shr_i32(loc_7, 2)
		loc_16 = load_i32_u8(memory_at_0, loc_1 + 68)
		loc_11 = 1
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_1 + 8)
				loc_7 = load_i32(memory_at_0, loc_1 + 4)
				if loc_2 >= loc_7 then
					break
				end
				loc_9 = load_i32(memory_at_0, loc_1 + 12)
				loc_6 = load_i32(memory_at_0, loc_1)
				while true do
					loc_5 = sub_i32(load_i32_u8(memory_at_0, add_i32(loc_2, loc_6)), 9)
					if loc_5 > 23 then
						desired = 2
						break
					end
					while true do
						if band_i32(shl_i32(1, loc_5), 8388637) == 0 then
							while true do
								if loc_5 ~= 1 then
									desired = 2
									break
								end
								loc_2 = add_i32(loc_2, 1)
								store_i32(memory_at_0, loc_1 + 16, loc_2)
								loc_9 = add_i32(loc_9, 1)
								store_i32(memory_at_0, loc_1 + 12, loc_9)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_2 = add_i32(loc_2, 1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					store_i32(memory_at_0, loc_1 + 8, loc_2)
					if loc_2 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			if loc_11 ~= 0 then
				while true do
					store_i64(memory_at_0, loc_1 + 48, load_i64(memory_at_0, loc_1 + 24))
					store_i64(memory_at_0, loc_1 + 56, load_i64(memory_at_0, loc_1 + 32))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			FUNC_LIST[371](add_i32(loc_4, 52), loc_1)
			store_i32(memory_at_0, loc_3 + 24, load_i32(memory_at_0, loc_4 + 76))
			store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_4 + 68))
			store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_4 + 60))
			store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_4 + 52))
			if loc_16 ~= 0 then
				while true do
					loc_11 = 0
					if band_i32(load_i32(memory_at_0, loc_3), 4294967294) == 282 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_3))
		loc_2 = add_i32(loc_3, 24)
		store_i32(memory_at_0, loc_0 + 24, load_i32(memory_at_0, loc_2))
		loc_5 = add_i32(loc_3, 16)
		store_i64(memory_at_0, loc_0 + 16, load_i64(memory_at_0, loc_5))
		loc_7 = add_i32(loc_3, 8)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_7))
		store_i32(memory_at_0, loc_1 + 16, loc_12)
		store_i32(memory_at_0, loc_1 + 12, loc_13)
		store_i32(memory_at_0, loc_1 + 8, loc_14)
		store_i32(memory_at_0, loc_3 + 24, load_i32(memory_at_0, loc_4 + 48))
		store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_4 + 40))
		store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_4 + 32))
		store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_4 + 24))
		store_i64(memory_at_0, loc_1 + 56, load_i64(memory_at_0, loc_4 + 16))
		store_i64(memory_at_0, loc_1 + 48, load_i64(memory_at_0, loc_4 + 8))
		while true do
			while true do
				while true do
					if load_i32_u8(memory_at_0, 47688) == 0 then
						break
					end
					loc_2 = load_i32(memory_at_0, loc_1 + 76)
					loc_7 = load_i32(memory_at_0, loc_1 + 72)
					loc_6 = sub_i32(loc_2, loc_7)
					loc_5 = shr_i32(loc_6, 2)
					if loc_5 < loc_10 then
						while true do
							if loc_2 ~= load_i32(memory_at_0, loc_1 + 80) then
								while true do
									store_i32(memory_at_0, loc_2, loc_8)
									store_i32(memory_at_0, loc_1 + 76, add_i32(loc_2, 4))
									desired = 3
									break
								end
								if desired then
									break
								end
							end
							loc_3 = add_i32(loc_5, 1)
							if loc_3 >= 1073741824 then
								desired = 2
								break
							end
							loc_9 = shr_i32(loc_6, 1)
							loc_6 = (if loc_6 >= 2147483644 then 1073741823 else (if loc_3 < loc_9 then loc_9 else loc_3))
							if loc_6 ~= 0 then
								while true do
									if loc_6 >= 1073741824 then
										desired = 1
										break
									end
									reg_0 = FUNC_LIST[606](shl_i32(loc_6, 2))
									break
								end
								if desired then
									break
								end
							else
								while true do
									reg_0 = 0
									break
								end
								if desired then
									break
								end
							end
							loc_3 = reg_0
							loc_5 = add_i32(loc_3, shl_i32(loc_5, 2))
							store_i32(memory_at_0, loc_5, loc_8)
							loc_6 = add_i32(shl_i32(loc_6, 2), loc_3)
							loc_3 = add_i32(loc_5, 4)
							if loc_2 ~= loc_7 then
								while true do
									while true do
										loc_5 = sub_i32(loc_5, 4)
										loc_2 = sub_i32(loc_2, 4)
										store_i32(memory_at_0, loc_5, load_i32(memory_at_0, loc_2))
										if loc_2 ~= loc_7 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									break
								end
							end
							store_i32(memory_at_0, loc_1 + 80, loc_6)
							store_i32(memory_at_0, loc_1 + 76, loc_3)
							store_i32(memory_at_0, loc_1 + 72, loc_5)
							if loc_7 == 0 then
								desired = 3
								break
							end
							FUNC_LIST[609](loc_7)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_5 <= loc_10 then
						break
					end
					store_i32(memory_at_0, loc_1 + 76, sub_i32(loc_2, 4))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				GLOBAL_LIST[0].value = add_i32(loc_4, 80)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_15)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[382] = --[[ Luau::Lexer::readBackslashInString() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local desired
	local br_map = {}
	while true do
		loc_2 = load_i32(memory_at_0, loc_0 + 8)
		loc_1 = add_i32(loc_2, 1)
		store_i32(memory_at_0, loc_0 + 8, loc_1)
		while true do
			loc_3 = load_i32(memory_at_0, loc_0 + 4)
			if loc_3 <= loc_1 then
				break
			end
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									loc_4 = load_i32(memory_at_0, loc_0)
									loc_1 = load_i32_u8(memory_at_0, add_i32(loc_1, loc_4))
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 0, }
										end)()
									end
									temp = br_map[1][loc_1] or 1
									if temp < 2 then
										if temp < 1 then
											break
										else
											desired = 6
											break
										end
									elseif temp > 2 then
										if temp < 6 then
											desired = 4
											break
										else
											desired = 1
											break
										end
									else
										desired = 5
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_1 = add_i32(loc_2, 2)
								store_i32(memory_at_0, loc_0 + 8, loc_1)
								if loc_1 >= loc_3 then
									desired = 1
									break
								end
								if load_i32_u8(memory_at_0, add_i32(loc_1, loc_4)) ~= 10 then
									desired = 1
									break
								end
								loc_1 = add_i32(loc_2, 3)
								store_i32(memory_at_0, loc_0 + 16, loc_1)
								store_i32(memory_at_0, loc_0 + 12, add_i32(load_i32(memory_at_0, loc_0 + 12), 1))
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_1 == 122 then
								desired = 2
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_1 = add_i32(loc_2, 2)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = add_i32(loc_2, 2)
					store_i32(memory_at_0, loc_0 + 16, loc_1)
					store_i32(memory_at_0, loc_0 + 12, add_i32(load_i32(memory_at_0, loc_0 + 12), 1))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 8, loc_1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = add_i32(loc_2, 2)
			store_i32(memory_at_0, loc_0 + 8, loc_1)
			if loc_1 >= loc_3 then
				break
			end
			loc_5 = load_i32(memory_at_0, loc_0 + 12)
			while true do
				loc_2 = sub_i32(load_i32_u8(memory_at_0, add_i32(loc_1, loc_4)), 9)
				if loc_2 > 23 then
					desired = 1
					break
				end
				while true do
					if band_i32(shl_i32(1, loc_2), 8388637) == 0 then
						while true do
							if loc_2 ~= 1 then
								desired = 1
								break
							end
							loc_1 = add_i32(loc_1, 1)
							store_i32(memory_at_0, loc_0 + 16, loc_1)
							loc_5 = add_i32(loc_5, 1)
							store_i32(memory_at_0, loc_0 + 12, loc_5)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_1 = add_i32(loc_1, 1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 8, loc_1)
				if loc_1 ~= loc_3 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[383] = --[[ Luau::Lexer::fixupQuotedString(std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>&) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_10 = 1
		while true do
			loc_1 = load_i32_i8(memory_at_0, loc_0 + 11)
			if (if lt_i32(loc_1, 0) then load_i32(memory_at_0, loc_0 + 4) else loc_1) == 0 then
				break
			end
			reg_0 = FUNC_LIST[676](loc_0, 92, 0)
			if reg_0 == 4294967295 then
				break
			end
			while true do
				loc_1 = load_i32_i8(memory_at_0, loc_0 + 11)
				loc_6 = (if lt_i32(loc_1, 0) then load_i32(memory_at_0, loc_0 + 4) else loc_1)
				if loc_6 == 0 then
					break
				end
				loc_1 = 0
				while true do
					while true do
						while true do
							loc_3 = (if lt_i32(load_i32_i8(memory_at_0, loc_0 + 11), 0) then load_i32(memory_at_0, loc_0) else loc_0)
							loc_2 = loc_1
							loc_1 = load_i32_u8(memory_at_0, add_i32(loc_3, loc_2))
							if loc_1 ~= 92 then
								while true do
									store_i32_n8(memory_at_0, add_i32(loc_3, loc_4), loc_1)
									loc_1 = add_i32(loc_2, 1)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_10 = 0
							loc_5 = add_i32(loc_2, 1)
							if loc_6 == loc_5 then
								desired = 1
								break
							end
							loc_1 = add_i32(loc_2, 2)
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														loc_8 = load_i32_i8(memory_at_0, add_i32(loc_3, loc_5))
														loc_5 = band_i32(loc_8, 255)
														if not br_map[1] then
															br_map[1] = (function()
																return { [0] = 5, 6, 6, 4, 6, 1, }
															end)()
														end
														temp = br_map[1][sub_i32(loc_5, 117)] or 0
														if temp < 4 then
															if temp < 1 then
																break
															else
																desired = 11
																break
															end
														elseif temp > 4 then
															if temp < 6 then
																desired = 7
																break
															else
																desired = 6
																break
															end
														else
															desired = 8
															break
														end
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													if not br_map[2] then
														br_map[2] = (function()
															return { [0] = 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 2, }
														end)()
													end
													temp = br_map[2][loc_5] or 5
													if temp < 5 then
														if temp < 2 then
															desired = 10
															break
														else
															desired = 9
															break
														end
													elseif temp > 5 then
														desired = 1
														break
													else
														desired = 6
														break
													end
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												if loc_1 >= loc_6 then
													desired = 4
													break
												end
												while true do
													loc_2 = load_i32_u8(memory_at_0, add_i32(loc_1, loc_3))
													if band_i32((if sub_i32(loc_2, 9) >= 5 then 1 else 0), (if loc_2 ~= 32 then 1 else 0)) ~= 0 then
														desired = 4
														break
													end
													loc_1 = add_i32(loc_1, 1)
													if loc_1 ~= loc_6 then
														continue
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												desired = 2
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											store_i32_n8(memory_at_0, add_i32(loc_3, loc_4), 10)
											desired = 5
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										store_i32_n8(memory_at_0, add_i32(loc_3, loc_4), 10)
										loc_4 = add_i32(loc_4, 1)
										if loc_1 >= loc_6 then
											desired = 4
											break
										end
										loc_1 = (if load_i32_u8(memory_at_0, add_i32(loc_1, (if lt_i32(load_i32_i8(memory_at_0, loc_0 + 11), 0) then load_i32(memory_at_0, loc_0) else loc_0))) == 10 then add_i32(loc_2, 3) else loc_1)
										desired = 4
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_5 = add_i32(loc_2, 4)
									if loc_6 < loc_5 then
										desired = 1
										break
									end
									loc_2 = add_i32(loc_1, loc_3)
									loc_1 = load_i32_i8(memory_at_0, loc_2)
									loc_8 = sub_i32(loc_1, 48)
									loc_7 = (if loc_8 < 10 then 1 else 0)
									if loc_7 == 0 then
										while true do
											if sub_i32(bor_i32(loc_1, 32), 97) > 5 then
												desired = 1
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_9 = load_i32_i8(memory_at_0, loc_2 + 1)
									loc_2 = bor_i32(loc_9, 32)
									loc_9 = sub_i32(loc_9, 48)
									loc_11 = (if loc_9 < 10 then 1 else 0)
									if band_i32((if loc_11 == 0 then 1 else 0), (if sub_i32(loc_2, 97) > 5 then 1 else 0)) ~= 0 then
										desired = 1
										break
									end
									store_i32_n8(memory_at_0, add_i32(loc_3, loc_4), add_i32(shl_i32((if loc_7 ~= 0 then loc_8 else sub_i32(loc_1, 87)), 4), (if loc_11 ~= 0 then loc_9 else add_i32(loc_2, 169))))
									loc_4 = add_i32(loc_4, 1)
									loc_1 = loc_5
									desired = 4
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_6 < add_i32(loc_2, 5) then
									desired = 1
									break
								end
								if load_i32_u8(memory_at_0, add_i32(loc_1, loc_3)) ~= 123 then
									desired = 1
									break
								end
								loc_1 = add_i32(loc_2, 3)
								if load_i32_u8(memory_at_0, add_i32(loc_1, loc_3)) == 125 then
									desired = 1
									break
								end
								loc_11 = add_i32(loc_2, 19)
								loc_7 = 0
								loc_8 = 0
								while true do
									while true do
										if loc_1 == loc_6 then
											desired = 1
											break
										end
										loc_2 = load_i32_i8(memory_at_0, add_i32(loc_1, loc_3))
										if loc_2 == 125 then
											desired = 7
											break
										end
										loc_5 = bor_i32(loc_2, 32)
										loc_2 = sub_i32(loc_2, 48)
										loc_9 = (if loc_2 < 10 then 1 else 0)
										if band_i32((if loc_9 == 0 then 1 else 0), (if sub_i32(loc_5, 97) > 5 then 1 else 0)) ~= 0 then
											desired = 1
											break
										end
										loc_8 = add_i32(shl_i32(loc_8, 4), (if loc_9 ~= 0 then loc_2 else sub_i32(loc_5, 87)))
										loc_1 = add_i32(loc_1, 1)
										loc_7 = add_i32(loc_7, 1)
										if loc_7 ~= 16 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_1 = loc_11
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_1 == loc_6 then
									desired = 1
									break
								end
								if load_i32_u8(memory_at_0, add_i32(loc_1, loc_3)) ~= 125 then
									desired = 1
									break
								end
								reg_0 = FUNC_LIST[384](add_i32(loc_3, loc_4), loc_8)
								loc_3 = reg_0
								if loc_3 == 0 then
									desired = 1
									break
								end
								loc_1 = add_i32(loc_1, 1)
								loc_4 = add_i32(loc_3, loc_4)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_7 = sub_i32(loc_8, 48)
							if loc_7 <= 9 then
								while true do
									while true do
										if loc_1 == loc_6 then
											while true do
												loc_1 = loc_6
												desired = 7
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										while true do
											loc_5 = sub_i32(load_i32_i8(memory_at_0, add_i32(loc_1, loc_3)), 48)
											if loc_5 > 9 then
												break
											end
											loc_7 = add_i32(mul_i32(loc_7, 10), loc_5)
											loc_1 = add_i32(loc_2, 3)
											if loc_6 == loc_1 then
												break
											end
											loc_5 = sub_i32(load_i32_i8(memory_at_0, add_i32(loc_1, loc_3)), 48)
											if loc_5 > 9 then
												break
											end
											loc_1 = add_i32(loc_2, 4)
											loc_7 = add_i32(mul_i32(loc_7, 10), loc_5)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										if loc_7 > 255 then
											desired = 1
											break
										end
										break
									end
									if desired then
										break
									end
									store_i32_n8(memory_at_0, add_i32(loc_3, loc_4), loc_7)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_2 = 7
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															if not br_map[3] then
																br_map[3] = (function()
																	return { [0] = 7, 0, 6, 6, 6, 1, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 3, 6, 4, 6, 5, }
																end)()
															end
															temp = br_map[3][sub_i32(loc_5, 97)] or 6
															if temp < 4 then
																if temp < 2 then
																	if temp < 1 then
																		break
																	else
																		desired = 12
																		break
																	end
																elseif temp > 2 then
																	desired = 10
																	break
																else
																	desired = 11
																	break
																end
															elseif temp > 4 then
																if temp < 6 then
																	desired = 8
																	break
																elseif temp > 6 then
																	desired = 6
																	break
																else
																	desired = 7
																	break
																end
															else
																desired = 9
																break
															end
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_2 = 8
														desired = 6
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_2 = 12
													desired = 6
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_2 = 10
												desired = 6
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_2 = 13
											desired = 6
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_2 = 9
										desired = 6
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_2 = 11
									desired = 6
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_2 = loc_8
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i32_n8(memory_at_0, add_i32(loc_3, loc_4), loc_2)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = add_i32(loc_4, 1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					if loc_1 < loc_6 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[687](loc_0, loc_4, 0)
			loc_10 = 1
			break
		end
		reg_0 = loc_10
		break
	end
	return reg_0
end
FUNC_LIST[384] = --[[ Luau::toUtf8(char*, unsigned int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		if loc_1 <= 127 then
			while true do
				store_i32_n8(memory_at_0, loc_0, loc_1)
				reg_0 = 1
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_1 <= 2047 then
			while true do
				store_i32_n8(memory_at_0, loc_0 + 1, bor_i32(band_i32(loc_1, 63), 128))
				store_i32_n8(memory_at_0, loc_0, bor_i32(shr_u32(loc_1, 6), 192))
				reg_0 = 2
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_1 <= 65535 then
			while true do
				store_i32_n8(memory_at_0, loc_0 + 2, bor_i32(band_i32(loc_1, 63), 128))
				store_i32_n8(memory_at_0, loc_0, bor_i32(shr_u32(loc_1, 12), 224))
				store_i32_n8(memory_at_0, loc_0 + 1, bor_i32(band_i32(shr_u32(loc_1, 6), 63), 128))
				reg_0 = 3
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_1 <= 1114111 then
			while true do
				store_i32_n8(memory_at_0, loc_0 + 3, bor_i32(band_i32(loc_1, 63), 128))
				store_i32_n8(memory_at_0, loc_0, bor_i32(shr_u32(loc_1, 18), 240))
				store_i32_n8(memory_at_0, loc_0 + 2, bor_i32(band_i32(shr_u32(loc_1, 6), 63), 128))
				store_i32_n8(memory_at_0, loc_0 + 1, bor_i32(band_i32(shr_u32(loc_1, 12), 63), 128))
				reg_0 = 4
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_2
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = reg_0
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[385] = --[[ Luau::Lexer::fixupMultilineString(std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>&) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_1 = load_i32_i8(memory_at_0, loc_0 + 11)
		reg_1 = loc_1
		loc_1 = (if lt_i32(loc_1, 0) then 1 else 0)
		if (if loc_1 ~= 0 then load_i32(memory_at_0, loc_0 + 4) else reg_1) ~= 0 then
			while true do
				while true do
					loc_2 = (if loc_1 ~= 0 then load_i32(memory_at_0, loc_0) else loc_0)
					loc_3 = load_i32_u8(memory_at_0, loc_2)
					if loc_3 == 13 then
						while true do
							loc_1 = 2
							reg_0 = loc_1
							if load_i32_u8(memory_at_0, loc_2 + 1) == 10 then
								desired = 2
								break
							end
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					reg_0 = (if loc_3 == 10 then 1 else 0)
					break
				end
				loc_1 = reg_0
				loc_1 = add_i32(loc_1, loc_2)
				while true do
					while true do
						reg_0 = loc_2
						while true do
							while true do
								while true do
									loc_5 = load_i32_u8(memory_at_0, loc_1)
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, }
										end)()
									end
									temp = br_map[1][loc_5] or 1
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 3
										break
									else
										desired = 5
										break
									end
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								loc_4 = 2
								loc_3 = 10
								reg_1 = loc_3
								if load_i32_u8(memory_at_0, loc_1 + 1) == 10 then
									desired = 4
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_4 = 1
							reg_1 = loc_5
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_3 = reg_1
						store_i32_n8(memory_at_0, reg_0, loc_3)
						loc_2 = add_i32(loc_2, 1)
						loc_1 = add_i32(loc_1, loc_4)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				FUNC_LIST[687](loc_0, sub_i32(loc_2, (if lt_i32(load_i32_i8(memory_at_0, loc_0 + 11), 0) then load_i32(memory_at_0, loc_0) else loc_0)), 0)
				break
			end
		end
		break
	end
end
FUNC_LIST[386] = --[[ Luau::Position::operator==(Luau::Position const&) const ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = band_i32((if load_i32(memory_at_0, loc_0 + 4) == load_i32(memory_at_0, loc_1 + 4) then 1 else 0), (if load_i32(memory_at_0, loc_0) == load_i32(memory_at_0, loc_1) then 1 else 0))
		break
	end
	return reg_0
end
FUNC_LIST[387] = --[[ Luau::Location::operator==(Luau::Location const&) const ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		while true do
			if load_i32(memory_at_0, loc_0 + 4) ~= load_i32(memory_at_0, loc_1 + 4) then
				break
			end
			if load_i32(memory_at_0, loc_0) ~= load_i32(memory_at_0, loc_1) then
				break
			end
			loc_2 = band_i32((if load_i32(memory_at_0, loc_0 + 12) == load_i32(memory_at_0, loc_1 + 12) then 1 else 0), (if load_i32(memory_at_0, loc_0 + 8) == load_i32(memory_at_0, loc_1 + 8) then 1 else 0))
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[388] = --[[ Luau::ParseError::ParseError(Luau::Location const&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>> const&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local desired
	while true do
		store_i32(memory_at_0, loc_0, 30160)
		store_i64(memory_at_0, loc_0 + 12, load_i64(memory_at_0, loc_1 + 8))
		store_i64(memory_at_0, loc_0 + 4, load_i64(memory_at_0, loc_1))
		loc_1 = add_i32(loc_0, 20)
		if ge_i32(load_i32_i8(memory_at_0, loc_2 + 11), 0) then
			while true do
				store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_2))
				store_i32(memory_at_0, loc_1 + 8, load_i32(memory_at_0, loc_2 + 8))
				reg_0 = loc_0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[671](loc_1, load_i32(memory_at_0, loc_2), load_i32(memory_at_0, loc_2 + 4))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[389] = --[[ Luau::ParseError::getLocation() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = add_i32(loc_0, 4)
		break
	end
	return reg_0
end
FUNC_LIST[390] = --[[ Luau::ParseError::raise(Luau::Location const&, char const*, ...) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, loc_3 + 12, loc_2)
		FUNC_LIST[474](loc_3, loc_1, loc_2)
		reg_0 = FUNC_LIST[538](32)
		loc_2 = reg_0
		reg_0 = FUNC_LIST[388](loc_2, loc_0, loc_3)
		FUNC_LIST[0](loc_2, 30192, 174)
		error("out of code bounds")
	end
end
FUNC_LIST[391] = --[[ Luau::ParseError::~ParseError() ]] function(loc_0)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0, 30160)
		if lt_i32(load_i32_i8(memory_at_0, loc_0 + 31), 0) then
			while true do
				FUNC_LIST[609](load_i32(memory_at_0, loc_0 + 20))
				break
			end
		end
		reg_0 = FUNC_LIST[159](loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[392] = --[[ Luau::Parser::parse(char const*, unsigned long, Luau::AstNameTable&, Luau::Allocator&, Luau::ParseOptions) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local reg_0
	while true do
		loc_6 = sub_i32(GLOBAL_LIST[0].value, 448)
		GLOBAL_LIST[0].value = loc_6
		reg_0 = FUNC_LIST[396](add_i32(loc_6, 12), loc_1, loc_2, loc_3, loc_4, loc_5)
		reg_0 = FUNC_LIST[393](add_i32(loc_6, 12))
		loc_4 = reg_0
		if load_i32(memory_at_0, loc_6 + 36) ~= 0 then
			while true do
				FUNC_LIST[394](add_i32(loc_6, 12), 0, 0)
				break
			end
		end
		loc_3 = load_i32(memory_at_0, loc_6 + 48)
		loc_5 = 0
		if loc_2 ~= 0 then
			while true do
				reg_0 = (if load_i32_u8(memory_at_0, sub_i32(add_i32(loc_1, loc_2), 1)) ~= 10 then 1 else 0)
				break
			end
		else
			while true do
				reg_0 = loc_5
				break
			end
		end
		loc_5 = reg_0
		store_i32(memory_at_0, loc_0, loc_4)
		store_i32(memory_at_0, loc_0 + 4, add_i32(loc_3, loc_5))
		store_i32(memory_at_0, loc_0 + 8, load_i32(memory_at_0, loc_6 + 116))
		store_i32(memory_at_0, loc_0 + 12, load_i32(memory_at_0, loc_6 + 120))
		store_i32(memory_at_0, loc_0 + 16, load_i32(memory_at_0, loc_6 + 124))
		store_i32(memory_at_0, loc_6 + 124, 0)
		store_i64(memory_at_0, loc_6 + 116, i64_ZERO)
		store_i32(memory_at_0, loc_0 + 20, load_i32(memory_at_0, loc_6 + 208))
		store_i32(memory_at_0, loc_0 + 24, load_i32(memory_at_0, loc_6 + 212))
		store_i32(memory_at_0, loc_0 + 28, load_i32(memory_at_0, loc_6 + 216))
		store_i32(memory_at_0, loc_6 + 216, 0)
		store_i64(memory_at_0, loc_6 + 208, i64_ZERO)
		store_i32(memory_at_0, loc_0 + 32, load_i32(memory_at_0, loc_6 + 104))
		store_i32(memory_at_0, loc_0 + 36, load_i32(memory_at_0, loc_6 + 108))
		store_i32(memory_at_0, loc_0 + 40, load_i32(memory_at_0, loc_6 + 112))
		store_i32(memory_at_0, loc_6 + 112, 0)
		store_i64(memory_at_0, loc_6 + 104, i64_ZERO)
		reg_0 = FUNC_LIST[395](add_i32(loc_6, 12))
		GLOBAL_LIST[0].value = add_i32(loc_6, 448)
		break
	end
end
FUNC_LIST[393] = --[[ Luau::Parser::parseBlock() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_4 = load_i32(memory_at_0, loc_0 + 184)
		loc_5 = load_i32(memory_at_0, loc_0 + 188)
		reg_0 = FUNC_LIST[400](loc_0)
		loc_6 = reg_0
		loc_7 = add_i32(loc_0, 184)
		loc_3 = load_i32(memory_at_0, loc_0 + 184)
		loc_1 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 188), loc_3), 2)
		loc_2 = shr_i32(sub_i32(loc_5, loc_4), 2)
		if loc_1 > loc_2 then
			while true do
				loc_3 = add_i32(loc_0, 164)
				while true do
					loc_1 = sub_i32(loc_1, 1)
					loc_4 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_7), shl_i32(loc_1, 2)))
					loc_5 = load_i32(memory_at_0, loc_4 + 20)
					reg_0 = FUNC_LIST[5](loc_3, loc_4)
					store_i32(memory_at_0, reg_0, loc_5)
					if loc_1 > loc_2 then
						continue
					end
					break
				end
				if desired then
					break
				end
				loc_3 = load_i32(memory_at_0, loc_0 + 184)
				reg_0 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 188), loc_3), 2)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_1
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_1 = reg_0
		if loc_1 < loc_2 then
			while true do
				FUNC_LIST[190](loc_7, sub_i32(loc_2, loc_1))
				reg_0 = loc_6
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_1 > loc_2 then
			while true do
				store_i32(memory_at_0, loc_0 + 188, add_i32(shl_i32(loc_2, 2), loc_3))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[394] = --[[ Luau::Parser::expectAndConsumeFail(Luau::Lexeme::Type, char const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_3
		store_i64(memory_at_0, loc_3 + 48, i64_ZERO)
		store_i64(memory_at_0, loc_3 + 40, i64_ZERO)
		reg_1 = FUNC_LIST[354](add_i32(loc_3, 56), add_i32(loc_3, 40), loc_1)
		FUNC_LIST[358](add_i32(loc_3, 84), reg_1)
		FUNC_LIST[358](add_i32(loc_3, 56), add_i32(loc_0, 24))
		loc_1 = add_i32(loc_0, 28)
		loc_4 = (if lt_i32(load_i32_i8(memory_at_0, loc_3 + 67), 0) then load_i32(memory_at_0, loc_3 + 56) else add_i32(loc_3, 56))
		loc_5 = (if lt_i32(load_i32_i8(memory_at_0, loc_3 + 95), 0) then load_i32(memory_at_0, loc_3 + 84) else add_i32(loc_3, 84))
		while true do
			if loc_2 ~= 0 then
				while true do
					store_i32(memory_at_0, loc_3 + 24, loc_4)
					store_i32(memory_at_0, loc_3 + 20, loc_2)
					store_i32(memory_at_0, loc_3 + 16, loc_5)
					FUNC_LIST[401](loc_0, loc_1, 2572, add_i32(loc_3, 16))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			store_i32(memory_at_0, loc_3 + 4, loc_4)
			store_i32(memory_at_0, loc_3, loc_5)
			FUNC_LIST[401](loc_0, loc_1, 2652, loc_3)
			break
		end
		if lt_i32(load_i32_i8(memory_at_0, loc_3 + 67), 0) then
			while true do
				FUNC_LIST[609](load_i32(memory_at_0, loc_3 + 56))
				break
			end
		end
		if lt_i32(load_i32_i8(memory_at_0, loc_3 + 95), 0) then
			while true do
				FUNC_LIST[609](load_i32(memory_at_0, loc_3 + 84))
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 96)
		break
	end
end
FUNC_LIST[395] = --[[ Luau::Parser::~Parser() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		if lt_i32(load_i32_i8(memory_at_0, loc_0 + 435), 0) then
			while true do
				FUNC_LIST[609](load_i32(memory_at_0, loc_0 + 424))
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 412)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 416, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 400)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 404, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 388)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 392, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 376)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 380, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 364)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 368, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 352)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 356, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 340)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 344, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 328)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 332, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 316)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 320, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 304)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 308, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 292)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 296, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 280)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 284, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 268)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 272, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 256)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 260, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 244)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 248, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 232)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 236, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 220)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 224, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 208)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 212, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_2 = load_i32(memory_at_0, loc_0 + 196)
		if loc_2 ~= 0 then
			while true do
				loc_3 = loc_2
				loc_1 = load_i32(memory_at_0, loc_0 + 200)
				if loc_1 ~= loc_2 then
					while true do
						while true do
							loc_1 = sub_i32(loc_1, 32)
							reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1))](loc_1)
							if loc_1 ~= loc_2 then
								continue
							end
							break
						end
						reg_0 = load_i32(memory_at_0, loc_0 + 196)
						break
					end
				else
					while true do
						reg_0 = loc_3
						break
					end
				end
				loc_3 = reg_0
				store_i32(memory_at_0, loc_0 + 200, loc_2)
				FUNC_LIST[609](loc_3)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 184)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 188, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 164)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[609](loc_1)
				store_i64(memory_at_0, loc_0 + 164, i64_ZERO)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 152)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 156, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_2 = load_i32(memory_at_0, loc_0 + 104)
		if loc_2 ~= 0 then
			while true do
				loc_3 = loc_2
				loc_1 = load_i32(memory_at_0, loc_0 + 108)
				if loc_1 ~= loc_2 then
					while true do
						while true do
							if lt_i32(load_i32_i8(memory_at_0, sub_i32(loc_1, 1)), 0) then
								while true do
									FUNC_LIST[609](load_i32(memory_at_0, sub_i32(loc_1, 12)))
									break
								end
							end
							loc_1 = sub_i32(loc_1, 32)
							if loc_2 ~= loc_1 then
								continue
							end
							break
						end
						reg_0 = load_i32(memory_at_0, loc_0 + 104)
						break
					end
				else
					while true do
						reg_0 = loc_3
						break
					end
				end
				loc_3 = reg_0
				store_i32(memory_at_0, loc_0 + 108, loc_2)
				FUNC_LIST[609](loc_3)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 92)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 96, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 76)
		if loc_1 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 80, loc_1)
				FUNC_LIST[609](loc_1)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[396] = --[[ Luau::Parser::Parser(char const*, unsigned long, Luau::AstNameTable&, Luau::Allocator&, Luau::ParseOptions const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local reg_0
	local reg_1
	while true do
		loc_6 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_6
		store_i32_n16(memory_at_0, loc_0, load_i32_u16(memory_at_0, loc_5))
		reg_0 = FUNC_LIST[368](add_i32(loc_0, 4), loc_1, loc_2, loc_3)
		loc_2 = reg_0
		store_i64(memory_at_0, loc_0 + 92, i64_ZERO)
		store_i32(memory_at_0, loc_0 + 88, loc_4)
		store_i64(memory_at_0, loc_0 + 100, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 108, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 120, i64_ZERO)
		store_i32_n8(memory_at_0, loc_0 + 116, 1)
		loc_1 = add_i32(loc_0, 128)
		store_i64(memory_at_0, loc_1, i64_ZERO)
		loc_4 = add_i32(loc_0, 136)
		store_i32(memory_at_0, loc_4, 0)
		store_i64(memory_at_0, loc_6 + 8, i64_ZERO)
		store_i64(memory_at_0, loc_6, i64_ZERO)
		reg_1 = FUNC_LIST[354](add_i32(loc_6, 20), loc_6, 0)
		loc_5 = reg_1
		store_i32(memory_at_0, loc_0 + 140, load_i32(memory_at_0, loc_5))
		store_i64(memory_at_0, loc_0 + 144, load_i64(memory_at_0, loc_5 + 4))
		store_i32(memory_at_0, loc_0 + 176, 0)
		store_i64(memory_at_0, loc_0 + 168, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 160, i64_ZERO)
		store_i64(memory_at_0, loc_0 + 152, i64_ZERO)
		reg_0 = FUNC_LIST[479](add_i32(loc_0, 184), 0, 252)
		reg_1 = FUNC_LIST[606](64)
		loc_5 = reg_1
		store_i32(memory_at_0, loc_0 + 152, loc_5)
		store_i32(memory_at_0, loc_0 + 160, sub_i32(loc_5, 4294967232))
		store_i64(memory_at_0, loc_5, i64_ONE)
		store_i32(memory_at_0, loc_0 + 156, add_i32(loc_5, 8))
		reg_1 = FUNC_LIST[364](loc_3, 3924, 281)
		store_i32(memory_at_0, loc_0 + 124, reg_1)
		reg_1 = FUNC_LIST[364](loc_3, 3034, 281)
		store_i32(memory_at_0, loc_0 + 128, reg_1)
		reg_1 = FUNC_LIST[364](loc_3, 7740, 281)
		store_i32(memory_at_0, loc_0 + 132, reg_1)
		reg_1 = FUNC_LIST[366](loc_3, 3572)
		store_i32(memory_at_0, loc_0 + 136, reg_1)
		store_i32(memory_at_0, loc_6 + 20, 0)
		FUNC_LIST[397](add_i32(loc_0, 208), 311, add_i32(loc_6, 20))
		store_i32(memory_at_0, load_i32(memory_at_0, loc_0 + 208), 1)
		FUNC_LIST[369](loc_2, 1)
		FUNC_LIST[398](loc_0)
		store_i32_n8(memory_at_0, loc_0 + 116, 0)
		while true do
			loc_2 = load_i32(memory_at_0, loc_0 + 184)
			if sub_i32(load_i32(memory_at_0, loc_0 + 192), loc_2) > 63 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_0 + 188)
			reg_0 = FUNC_LIST[606](64)
			loc_5 = reg_0
			loc_4 = sub_i32(loc_5, 4294967232)
			loc_1 = add_i32(sub_i32(loc_3, loc_2), loc_5)
			loc_5 = loc_1
			if loc_2 ~= loc_3 then
				while true do
					while true do
						loc_5 = sub_i32(loc_5, 4)
						loc_3 = sub_i32(loc_3, 4)
						store_i32(memory_at_0, loc_5, load_i32(memory_at_0, loc_3))
						if loc_2 ~= loc_3 then
							continue
						end
						break
					end
					break
				end
			end
			store_i32(memory_at_0, loc_0 + 192, loc_4)
			store_i32(memory_at_0, loc_0 + 188, loc_1)
			store_i32(memory_at_0, loc_0 + 184, loc_5)
			if loc_2 == 0 then
				break
			end
			FUNC_LIST[609](loc_2)
			break
		end
		while true do
			loc_2 = load_i32(memory_at_0, loc_0 + 220)
			if sub_i32(load_i32(memory_at_0, loc_0 + 228), loc_2) > 63 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_0 + 224)
			reg_0 = FUNC_LIST[606](64)
			loc_5 = reg_0
			loc_4 = sub_i32(loc_5, 4294967232)
			loc_1 = add_i32(sub_i32(loc_3, loc_2), loc_5)
			loc_5 = loc_1
			if loc_2 ~= loc_3 then
				while true do
					while true do
						loc_5 = sub_i32(loc_5, 4)
						loc_3 = sub_i32(loc_3, 4)
						store_i32(memory_at_0, loc_5, load_i32(memory_at_0, loc_3))
						if loc_2 ~= loc_3 then
							continue
						end
						break
					end
					break
				end
			end
			store_i32(memory_at_0, loc_0 + 228, loc_4)
			store_i32(memory_at_0, loc_0 + 224, loc_1)
			store_i32(memory_at_0, loc_0 + 220, loc_5)
			if loc_2 == 0 then
				break
			end
			FUNC_LIST[609](loc_2)
			break
		end
		while true do
			loc_2 = load_i32(memory_at_0, loc_0 + 244)
			if sub_i32(load_i32(memory_at_0, loc_0 + 252), loc_2) > 63 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_0 + 248)
			reg_0 = FUNC_LIST[606](64)
			loc_5 = reg_0
			loc_4 = sub_i32(loc_5, 4294967232)
			loc_1 = add_i32(sub_i32(loc_3, loc_2), loc_5)
			loc_5 = loc_1
			if loc_2 ~= loc_3 then
				while true do
					while true do
						loc_5 = sub_i32(loc_5, 4)
						loc_3 = sub_i32(loc_3, 4)
						store_i32(memory_at_0, loc_5, load_i32(memory_at_0, loc_3))
						if loc_2 ~= loc_3 then
							continue
						end
						break
					end
					break
				end
			end
			store_i32(memory_at_0, loc_0 + 252, loc_4)
			store_i32(memory_at_0, loc_0 + 248, loc_1)
			store_i32(memory_at_0, loc_0 + 244, loc_5)
			if loc_2 == 0 then
				break
			end
			FUNC_LIST[609](loc_2)
			break
		end
		while true do
			loc_2 = load_i32(memory_at_0, loc_0 + 304)
			if sub_i32(load_i32(memory_at_0, loc_0 + 312), loc_2) > 63 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_0 + 308)
			reg_0 = FUNC_LIST[606](64)
			loc_5 = reg_0
			loc_4 = sub_i32(loc_5, 4294967232)
			loc_1 = add_i32(sub_i32(loc_3, loc_2), loc_5)
			loc_5 = loc_1
			if loc_2 ~= loc_3 then
				while true do
					while true do
						loc_5 = sub_i32(loc_5, 4)
						loc_3 = sub_i32(loc_3, 4)
						store_i32(memory_at_0, loc_5, load_i32(memory_at_0, loc_3))
						if loc_2 ~= loc_3 then
							continue
						end
						break
					end
					break
				end
			end
			store_i32(memory_at_0, loc_0 + 312, loc_4)
			store_i32(memory_at_0, loc_0 + 308, loc_1)
			store_i32(memory_at_0, loc_0 + 304, loc_5)
			if loc_2 == 0 then
				break
			end
			FUNC_LIST[609](loc_2)
			break
		end
		while true do
			loc_2 = load_i32(memory_at_0, loc_0 + 292)
			if div_i32(sub_i32(load_i32(memory_at_0, loc_0 + 300), loc_2), 24) > 15 then
				break
			end
			loc_3 = load_i32(memory_at_0, loc_0 + 296)
			reg_0 = FUNC_LIST[606](384)
			loc_5 = reg_0
			loc_4 = add_i32(loc_5, 384)
			loc_1 = add_i32(sub_i32(loc_3, loc_2), loc_5)
			loc_5 = loc_1
			if loc_2 ~= loc_3 then
				while true do
					while true do
						loc_5 = sub_i32(loc_5, 24)
						loc_3 = sub_i32(loc_3, 24)
						store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_3))
						store_i64(memory_at_0, loc_5 + 16, load_i64(memory_at_0, loc_3 + 16))
						store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_3 + 8))
						if loc_2 ~= loc_3 then
							continue
						end
						break
					end
					break
				end
			end
			store_i32(memory_at_0, loc_0 + 300, loc_4)
			store_i32(memory_at_0, loc_0 + 296, loc_1)
			store_i32(memory_at_0, loc_0 + 292, loc_5)
			if loc_2 == 0 then
				break
			end
			FUNC_LIST[609](loc_2)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_6, 48)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[397] = --[[ std::__2::vector<unsigned int, std::__2::allocator<unsigned int>>::assign(unsigned long, unsigned int const&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = load_i32(memory_at_0, loc_0 + 8)
		loc_6 = load_i32(memory_at_0, loc_0)
		if shr_i32(sub_i32(loc_3, loc_6), 2) >= loc_1 then
			while true do
				while true do
					loc_5 = load_i32(memory_at_0, loc_0 + 4)
					loc_9 = shr_i32(sub_i32(loc_5, loc_6), 2)
					loc_10 = (if loc_1 > loc_9 then loc_9 else loc_1)
					if loc_10 == 0 then
						break
					end
					loc_4 = load_i32(memory_at_0, loc_2)
					loc_3 = loc_6
					loc_7 = loc_10
					loc_11 = band_i32(loc_7, 7)
					if loc_11 ~= 0 then
						while true do
							while true do
								store_i32(memory_at_0, loc_3, loc_4)
								loc_7 = sub_i32(loc_7, 1)
								loc_3 = add_i32(loc_3, 4)
								loc_8 = add_i32(loc_8, 1)
								if loc_11 ~= loc_8 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					if loc_10 < 8 then
						break
					end
					while true do
						store_i32(memory_at_0, loc_3 + 28, loc_4)
						store_i32(memory_at_0, loc_3 + 24, loc_4)
						store_i32(memory_at_0, loc_3 + 20, loc_4)
						store_i32(memory_at_0, loc_3 + 16, loc_4)
						store_i32(memory_at_0, loc_3 + 12, loc_4)
						store_i32(memory_at_0, loc_3 + 8, loc_4)
						store_i32(memory_at_0, loc_3 + 4, loc_4)
						store_i32(memory_at_0, loc_3, loc_4)
						loc_3 = add_i32(loc_3, 32)
						loc_7 = sub_i32(loc_7, 8)
						if loc_7 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					break
				end
				if loc_1 > loc_9 then
					while true do
						loc_3 = add_i32(shl_i32(sub_i32(loc_1, loc_9), 2), loc_5)
						loc_4 = load_i32(memory_at_0, loc_2)
						while true do
							store_i32(memory_at_0, loc_5, loc_4)
							loc_5 = add_i32(loc_5, 4)
							if loc_3 ~= loc_5 then
								continue
							end
							break
						end
						if desired then
							break
						end
						store_i32(memory_at_0, loc_0 + 4, loc_3)
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				store_i32(memory_at_0, loc_0 + 4, add_i32(shl_i32(loc_1, 2), loc_6))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_6 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 4, loc_6)
				FUNC_LIST[609](loc_6)
				store_i32(memory_at_0, loc_0 + 8, 0)
				store_i64(memory_at_0, loc_0, i64_ZERO)
				reg_0 = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_3
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = reg_0
		while true do
			if loc_1 >= 1073741824 then
				break
			end
			loc_4 = shr_i32(loc_3, 1)
			loc_3 = (if loc_3 >= 2147483644 then 1073741823 else (if loc_1 < loc_4 then loc_4 else loc_1))
			if loc_3 >= 1073741824 then
				break
			end
			loc_3 = shl_i32(loc_3, 2)
			reg_1 = FUNC_LIST[606](loc_3)
			loc_8 = reg_1
			store_i32(memory_at_0, loc_0, loc_8)
			store_i32(memory_at_0, loc_0 + 8, add_i32(loc_3, loc_8))
			loc_11 = shl_i32(loc_1, 2)
			loc_6 = band_i32(sub_i32(loc_1, 1), 1073741823)
			loc_4 = load_i32(memory_at_0, loc_2)
			loc_3 = loc_8
			loc_7 = band_i32(loc_1, 7)
			if loc_7 ~= 0 then
				while true do
					while true do
						store_i32(memory_at_0, loc_3, loc_4)
						loc_3 = add_i32(loc_3, 4)
						loc_5 = add_i32(loc_5, 1)
						if loc_7 ~= loc_5 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_5 = add_i32(loc_8, loc_11)
			if loc_6 >= 7 then
				while true do
					while true do
						store_i32(memory_at_0, loc_3 + 28, loc_4)
						store_i32(memory_at_0, loc_3 + 24, loc_4)
						store_i32(memory_at_0, loc_3 + 20, loc_4)
						store_i32(memory_at_0, loc_3 + 16, loc_4)
						store_i32(memory_at_0, loc_3 + 12, loc_4)
						store_i32(memory_at_0, loc_3 + 8, loc_4)
						store_i32(memory_at_0, loc_3 + 4, loc_4)
						store_i32(memory_at_0, loc_3, loc_4)
						loc_3 = add_i32(loc_3, 32)
						if loc_5 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			store_i32(memory_at_0, loc_0 + 4, loc_5)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[40](loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[398] = --[[ Luau::Parser::nextLexeme() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_3
		loc_13 = add_i32(loc_0, 104)
		loc_7 = add_i32(loc_0, 28)
		loc_11 = add_i32(loc_0, 92)
		loc_9 = add_i32(loc_3, 20)
		loc_12 = add_i32(loc_0, 4)
		reg_0 = FUNC_LIST[372](loc_12, 0, 1)
		loc_1 = reg_0
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_1 = sub_i32(load_i32(memory_at_0, loc_1), 282)
							if loc_1 > 3 then
								break
							end
							if loc_1 == 2 then
								break
							end
							loc_6 = load_i32(memory_at_0, loc_0 + 24)
							while true do
								while true do
									if load_i32_u8(memory_at_0, loc_0 + 1) ~= 0 then
										while true do
											loc_2 = add_i32(loc_3, 8)
											loc_14 = loc_7
											loc_10 = add_i32(loc_14, 8)
											store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_10))
											store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_7))
											while true do
												loc_1 = load_i32(memory_at_0, loc_0 + 96)
												loc_4 = load_i32(memory_at_0, loc_0 + 100)
												if loc_1 < loc_4 then
													while true do
														store_i32(memory_at_0, loc_1, loc_6)
														store_i64(memory_at_0, loc_1 + 4, load_i64(memory_at_0, loc_3))
														store_i64(memory_at_0, loc_1 + 12, load_i64(memory_at_0, loc_3 + 8))
														store_i32(memory_at_0, loc_0 + 96, add_i32(loc_1, 20))
														desired = 9
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												end
												loc_5 = load_i32(memory_at_0, loc_11)
												loc_15 = div_i32(sub_i32(loc_1, loc_5), 20)
												loc_2 = add_i32(loc_15, 1)
												if loc_2 >= 214748365 then
													desired = 3
													break
												end
												loc_4 = div_i32(sub_i32(loc_4, loc_5), 20)
												loc_8 = shl_i32(loc_4, 1)
												loc_4 = (if loc_4 >= 107374182 then 214748364 else (if loc_2 < loc_8 then loc_8 else loc_2))
												if loc_4 ~= 0 then
													while true do
														if loc_4 >= 214748365 then
															desired = 2
															break
														end
														reg_0 = FUNC_LIST[606](mul_i32(loc_4, 20))
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												else
													while true do
														reg_0 = 0
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												end
												loc_8 = reg_0
												loc_2 = add_i32(loc_8, mul_i32(loc_15, 20))
												store_i32(memory_at_0, loc_2, loc_6)
												store_i64(memory_at_0, loc_2 + 4, load_i64(memory_at_0, loc_7))
												store_i64(memory_at_0, loc_2 + 12, load_i64(memory_at_0, loc_14 + 8))
												loc_6 = add_i32(mul_i32(loc_4, 20), loc_8)
												loc_4 = add_i32(loc_2, 20)
												if loc_1 ~= loc_5 then
													while true do
														while true do
															loc_2 = sub_i32(loc_2, 20)
															loc_1 = sub_i32(loc_1, 20)
															store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_1))
															store_i32(memory_at_0, loc_2 + 16, load_i32(memory_at_0, loc_1 + 16))
															store_i64(memory_at_0, loc_2 + 8, load_i64(memory_at_0, loc_1 + 8))
															if loc_1 ~= loc_5 then
																continue
															end
															break
														end
														if desired then
															break
														end
														reg_0 = load_i32(memory_at_0, loc_11)
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												else
													while true do
														reg_0 = loc_1
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												end
												loc_1 = reg_0
												store_i32(memory_at_0, loc_0 + 100, loc_6)
												store_i32(memory_at_0, loc_0 + 96, loc_4)
												store_i32(memory_at_0, loc_0 + 92, loc_2)
												if loc_1 == 0 then
													break
												end
												FUNC_LIST[609](loc_1)
												break
											end
											if desired then
												break
											end
											reg_0 = load_i32(memory_at_0, loc_0 + 24)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									else
										while true do
											reg_0 = loc_6
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_6 = reg_0
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 0, 1, 1, 2, }
										end)()
									end
									temp = br_map[1][sub_i32(loc_6, 282)] or 1
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 5
										break
									else
										desired = 6
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_5 = load_i32(memory_at_0, loc_0 + 44)
								if loc_5 == 0 then
									break
								end
								loc_10 = load_i32(memory_at_0, loc_0 + 48)
								if load_i32_u8(memory_at_0, loc_10) ~= 33 then
									break
								end
								loc_2 = sub_i32(loc_10, 1)
								while true do
									while true do
										loc_1 = load_i32_u8(memory_at_0, add_i32(loc_2, loc_5))
										if band_i32((if sub_i32(loc_1, 9) >= 5 then 1 else 0), (if loc_1 ~= 32 then 1 else 0)) ~= 0 then
											desired = 7
											break
										end
										loc_5 = sub_i32(loc_5, 1)
										if loc_5 ~= 0 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_5 = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								store_i32_n8(memory_at_0, loc_3, load_i32_u8(memory_at_0, loc_0 + 116))
								store_i64(memory_at_0, loc_3 + 12, load_i64(memory_at_0, loc_7 + 8))
								store_i64(memory_at_0, loc_3 + 4, load_i64(memory_at_0, loc_7))
								loc_4 = sub_i32(loc_5, 1)
								if loc_4 >= 2147483632 then
									desired = 1
									break
								end
								while true do
									while true do
										if loc_4 >= 11 then
											while true do
												loc_2 = add_i32(bor_i32(loc_4, 15), 1)
												reg_0 = FUNC_LIST[606](loc_2)
												loc_1 = reg_0
												store_i32(memory_at_0, loc_3 + 28, bor_i32(loc_2, 2147483648))
												store_i32(memory_at_0, loc_3 + 20, loc_1)
												store_i32(memory_at_0, loc_3 + 24, loc_4)
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										store_i32_n8(memory_at_0, loc_3 + 31, loc_4)
										loc_1 = loc_9
										if loc_5 == 1 then
											desired = 7
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_2 = add_i32(loc_10, 1)
									loc_8 = sub_i32(loc_5, 2)
									loc_6 = 0
									loc_4 = band_i32(loc_4, 7)
									if loc_4 ~= 0 then
										while true do
											while true do
												store_i32_n8(memory_at_0, loc_1, load_i32_u8(memory_at_0, loc_2))
												loc_1 = add_i32(loc_1, 1)
												loc_2 = add_i32(loc_2, 1)
												loc_6 = add_i32(loc_6, 1)
												if loc_4 ~= loc_6 then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									if loc_8 < 7 then
										break
									end
									loc_5 = add_i32(loc_5, loc_10)
									while true do
										store_i32_n8(memory_at_0, loc_1, load_i32_u8(memory_at_0, loc_2))
										store_i32_n8(memory_at_0, loc_1 + 1, load_i32_u8(memory_at_0, loc_2 + 1))
										store_i32_n8(memory_at_0, loc_1 + 2, load_i32_u8(memory_at_0, loc_2 + 2))
										store_i32_n8(memory_at_0, loc_1 + 3, load_i32_u8(memory_at_0, loc_2 + 3))
										store_i32_n8(memory_at_0, loc_1 + 4, load_i32_u8(memory_at_0, loc_2 + 4))
										store_i32_n8(memory_at_0, loc_1 + 5, load_i32_u8(memory_at_0, loc_2 + 5))
										store_i32_n8(memory_at_0, loc_1 + 6, load_i32_u8(memory_at_0, loc_2 + 6))
										store_i32_n8(memory_at_0, loc_1 + 7, load_i32_u8(memory_at_0, loc_2 + 7))
										loc_1 = add_i32(loc_1, 8)
										loc_2 = add_i32(loc_2, 8)
										if loc_5 ~= loc_2 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								store_i32_n8(memory_at_0, loc_1, 0)
								loc_1 = load_i32(memory_at_0, loc_0 + 108)
								if loc_1 < load_i32(memory_at_0, loc_0 + 112) then
									while true do
										store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_3))
										store_i32(memory_at_0, loc_1 + 16, load_i32(memory_at_0, loc_3 + 16))
										store_i64(memory_at_0, loc_1 + 8, load_i64(memory_at_0, loc_3 + 8))
										store_i64(memory_at_0, loc_1 + 20, load_i64(memory_at_0, loc_9))
										store_i32(memory_at_0, loc_1 + 28, load_i32(memory_at_0, loc_9 + 8))
										store_i32(memory_at_0, loc_0 + 108, add_i32(loc_1, 32))
										reg_0 = FUNC_LIST[372](loc_12, 0, 0)
										loc_1 = reg_0
										desired = 4
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								FUNC_LIST[399](loc_13, loc_3)
								if ge_i32(load_i32_i8(memory_at_0, loc_3 + 31), 0) then
									break
								end
								FUNC_LIST[609](load_i32(memory_at_0, loc_3 + 20))
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[372](loc_12, 0, 0)
							loc_1 = reg_0
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					GLOBAL_LIST[0].value = add_i32(loc_3, 32)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[40](loc_11)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[163]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[242](loc_9)
		error("out of code bounds")
	end
end
FUNC_LIST[399] = --[[ void std::__2::vector<Luau::HotComment, std::__2::allocator<Luau::HotComment>>::__push_back_slow_path<Luau::HotComment>(Luau::HotComment&&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_3 = load_i32(memory_at_0, loc_0)
					loc_5 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 4), loc_3), 5)
					loc_2 = add_i32(loc_5, 1)
					if loc_2 < 134217728 then
						while true do
							loc_3 = sub_i32(load_i32(memory_at_0, loc_0 + 8), loc_3)
							loc_6 = shr_i32(loc_3, 4)
							loc_2 = (if loc_3 >= 2147483616 then 134217727 else (if loc_2 < loc_6 then loc_6 else loc_2))
							if loc_2 ~= 0 then
								while true do
									if loc_2 >= 134217728 then
										desired = 3
										break
									end
									reg_0 = FUNC_LIST[606](shl_i32(loc_2, 5))
									break
								end
								if desired then
									break
								end
							else
								while true do
									reg_0 = loc_4
									break
								end
								if desired then
									break
								end
							end
							loc_4 = reg_0
							loc_3 = add_i32(loc_4, shl_i32(loc_5, 5))
							store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_1))
							store_i32(memory_at_0, loc_3 + 16, load_i32(memory_at_0, loc_1 + 16))
							store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_1 + 8))
							loc_5 = add_i32(loc_1, 28)
							store_i32(memory_at_0, loc_3 + 28, load_i32(memory_at_0, loc_5))
							store_i64(memory_at_0, loc_3 + 20, load_i64(memory_at_0, loc_1 + 20))
							store_i64(memory_at_0, loc_1 + 20, i64_ZERO)
							store_i32(memory_at_0, loc_1 + 28, 0)
							loc_7 = add_i32(shl_i32(loc_2, 5), loc_4)
							loc_8 = add_i32(loc_3, 32)
							loc_2 = load_i32(memory_at_0, loc_0 + 4)
							loc_6 = load_i32(memory_at_0, loc_0)
							if loc_2 == loc_6 then
								desired = 2
								break
							end
							while true do
								loc_4 = sub_i32(loc_3, 32)
								loc_1 = sub_i32(loc_2, 32)
								store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_1))
								store_i32(memory_at_0, loc_4 + 16, load_i32(memory_at_0, loc_1 + 16))
								store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_1 + 8))
								loc_3 = sub_i32(loc_3, 12)
								loc_2 = sub_i32(loc_2, 12)
								loc_9 = loc_2
								loc_5 = add_i32(loc_9, 8)
								store_i32(memory_at_0, loc_3 + 8, load_i32(memory_at_0, loc_5))
								store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2))
								store_i64(memory_at_0, loc_2, i64_ZERO)
								store_i32(memory_at_0, loc_9 + 8, 0)
								loc_2 = loc_1
								loc_3 = loc_4
								if loc_1 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								break
							end
							store_i32(memory_at_0, loc_0 + 8, loc_7)
							loc_1 = load_i32(memory_at_0, loc_0 + 4)
							store_i32(memory_at_0, loc_0 + 4, loc_8)
							loc_2 = load_i32(memory_at_0, loc_0)
							store_i32(memory_at_0, loc_0, loc_3)
							if loc_1 == loc_2 then
								desired = 1
								break
							end
							while true do
								if lt_i32(load_i32_i8(memory_at_0, sub_i32(loc_1, 1)), 0) then
									while true do
										FUNC_LIST[609](load_i32(memory_at_0, sub_i32(loc_1, 12)))
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								end
								loc_1 = sub_i32(loc_1, 32)
								if loc_2 ~= loc_1 then
									continue
								end
								break
							end
							if desired then
								break
							end
							desired = 1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[40](loc_0)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[163]()
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_0 + 8, loc_7)
			store_i32(memory_at_0, loc_0 + 4, loc_8)
			store_i32(memory_at_0, loc_0, loc_3)
			break
		end
		if loc_2 ~= 0 then
			while true do
				FUNC_LIST[609](loc_2)
				break
			end
		end
		break
	end
end
FUNC_LIST[400] = --[[ Luau::Parser::parseBlockNoScope() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_1
		store_i32(memory_at_0, loc_1 + 36, add_i32(loc_0, 220))
		loc_2 = load_i32(memory_at_0, loc_0 + 220)
		loc_3 = load_i32(memory_at_0, loc_0 + 224)
		store_i32(memory_at_0, loc_1 + 44, 0)
		store_i32(memory_at_0, loc_1 + 40, shr_i32(sub_i32(loc_3, loc_2), 2))
		loc_11 = load_i64(memory_at_0, loc_0 + 60)
		while true do
			while true do
				while true do
					loc_2 = load_i32(memory_at_0, loc_0 + 24)
					loc_3 = sub_i32(loc_2, 292)
					if (if band_i32(shl_i32(1, loc_3), 65543) ~= 0 then (if loc_3 <= 16 then 1 else 0) else 0) ~= 0 then
						break
					end
					if loc_2 == 0 then
						break
					end
					loc_3 = load_i32(memory_at_0, loc_0 + 120)
					loc_2 = add_i32(loc_3, 1)
					store_i32(memory_at_0, loc_0 + 120, loc_2)
					if load_i32(memory_at_0, 47712) < loc_2 then
						desired = 1
						break
					end
					reg_1 = FUNC_LIST[402](loc_0)
					store_i32(memory_at_0, loc_1 + 16, reg_1)
					store_i32(memory_at_0, loc_0 + 120, loc_3)
					if load_i32(memory_at_0, loc_0 + 24) == 59 then
						while true do
							FUNC_LIST[398](loc_0)
							store_i32_n8(memory_at_0, load_i32(memory_at_0, loc_1 + 16) + 24, 1)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[403](add_i32(loc_1, 36), add_i32(loc_1, 16))
					loc_2 = load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 16) + 4)
					if loc_2 == load_i32(memory_at_0, 47356) then
						break
					end
					if load_i32(memory_at_0, 47364) == loc_2 then
						break
					end
					if load_i32(memory_at_0, 47372) ~= loc_2 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_1 + 16, loc_11)
			store_i64(memory_at_0, loc_1 + 24, load_i64(memory_at_0, loc_0 + 28))
			loc_6 = load_i32(memory_at_0, loc_0 + 88)
			while true do
				loc_4 = load_i32(memory_at_0, loc_1 + 44)
				if loc_4 == 0 then
					while true do
						store_i64(memory_at_0, loc_1 + 8, i64_ZERO)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_0 = load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 36))
				loc_3 = load_i32(memory_at_0, loc_1 + 40)
				reg_0 = FUNC_LIST[353](loc_6, shl_i32(loc_4, 2))
				loc_2 = reg_0
				store_i32(memory_at_0, loc_1 + 12, loc_4)
				store_i32(memory_at_0, loc_1 + 8, loc_2)
				loc_7 = band_i32(loc_4, 3)
				loc_3 = add_i32(shl_i32(loc_3, 2), loc_0)
				loc_0 = 0
				if loc_4 >= 4 then
					while true do
						loc_10 = band_i32(loc_4, 4294967292)
						while true do
							loc_4 = shl_i32(loc_0, 2)
							store_i32(memory_at_0, add_i32(loc_4, loc_2), load_i32(memory_at_0, add_i32(loc_3, loc_4)))
							loc_5 = bor_i32(loc_4, 4)
							store_i32(memory_at_0, add_i32(loc_5, loc_2), load_i32(memory_at_0, add_i32(loc_3, loc_5)))
							loc_5 = bor_i32(loc_4, 8)
							store_i32(memory_at_0, add_i32(loc_5, loc_2), load_i32(memory_at_0, add_i32(loc_3, loc_5)))
							loc_4 = bor_i32(loc_4, 12)
							store_i32(memory_at_0, add_i32(loc_4, loc_2), load_i32(memory_at_0, add_i32(loc_3, loc_4)))
							loc_0 = add_i32(loc_0, 4)
							loc_9 = add_i32(loc_9, 4)
							if loc_10 ~= loc_9 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_7 == 0 then
					break
				end
				while true do
					loc_4 = shl_i32(loc_0, 2)
					store_i32(memory_at_0, add_i32(loc_4, loc_2), load_i32(memory_at_0, add_i32(loc_3, loc_4)))
					loc_0 = add_i32(loc_0, 1)
					loc_8 = add_i32(loc_8, 1)
					if loc_7 ~= loc_8 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[353](loc_6, 40)
			reg_0 = FUNC_LIST[283](reg_0, add_i32(loc_1, 16), add_i32(loc_1, 8), 1)
			loc_2 = reg_0
			loc_0 = load_i32(memory_at_0, loc_1 + 36)
			loc_3 = add_i32(load_i32(memory_at_0, loc_0), shl_i32(load_i32(memory_at_0, loc_1 + 40), 2))
			if loc_3 ~= load_i32(memory_at_0, loc_0 + 4) then
				while true do
					store_i32(memory_at_0, loc_0 + 4, loc_3)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			GLOBAL_LIST[0].value = add_i32(loc_1, 48)
			reg_0 = loc_2
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32(memory_at_0, loc_1, 3610)
		FUNC_LIST[390](add_i32(loc_0, 28), 4604, loc_1)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[401] = --[[ Luau::Parser::report(Luau::Location const&, char const*, ...) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		store_i32(memory_at_0, loc_4 + 12, loc_3)
		FUNC_LIST[443](loc_0, loc_1, loc_2, loc_3)
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[402] = --[[ Luau::Parser::parseStat() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_2
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													if not br_map[1] then
														br_map[1] = (function()
															return { [0] = 8, 2, 9, 9, 9, 9, 3, 5, 0, 9, 6, 9, 9, 9, 4, 7, 9, 9, 9, 1, }
														end)()
													end
													temp = br_map[1][sub_i32(load_i32(memory_at_0, loc_0 + 24), 290)] or 9
													if temp < 5 then
														if temp < 2 then
															if temp < 1 then
																break
															else
																desired = 10
																break
															end
														elseif temp > 2 then
															if temp < 4 then
																desired = 8
																break
															else
																desired = 7
																break
															end
														else
															desired = 9
															break
														end
													elseif temp > 5 then
														if temp < 8 then
															if temp < 7 then
																desired = 5
																break
															else
																desired = 4
																break
															end
														elseif temp > 8 then
															desired = 2
															break
														else
															desired = 3
															break
														end
													else
														desired = 6
														break
													end
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												reg_0 = FUNC_LIST[404](loc_0)
												loc_1 = reg_0
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											reg_0 = FUNC_LIST[405](loc_0)
											loc_1 = reg_0
											desired = 1
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_5 = load_i64(memory_at_0, loc_0 + 28)
										FUNC_LIST[398](loc_0)
										reg_0 = FUNC_LIST[393](loc_0)
										loc_1 = reg_0
										store_i64(memory_at_0, loc_1 + 8, loc_5)
										store_i64(memory_at_0, loc_2 + 20, loc_5)
										store_i32(memory_at_0, loc_2 + 16, 291)
										reg_1 = FUNC_LIST[406](loc_0, 294, add_i32(loc_2, 16))
										store_i32_n8(memory_at_0, loc_1 + 36, reg_1)
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = FUNC_LIST[407](loc_0)
									loc_1 = reg_0
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[408](loc_0)
								loc_1 = reg_0
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[409](loc_0)
							loc_1 = reg_0
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[410](loc_0)
						loc_1 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[411](loc_0)
					loc_1 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[412](loc_0)
				loc_1 = reg_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_2 + 24, load_i64(memory_at_0, loc_0 + 36))
			store_i64(memory_at_0, loc_2 + 16, load_i64(memory_at_0, loc_0 + 28))
			reg_0 = FUNC_LIST[413](loc_0, 1)
			loc_1 = reg_0
			if load_i32(memory_at_0, loc_1 + 4) == load_i32(memory_at_0, 47244) then
				while true do
					reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 32)
					reg_0 = FUNC_LIST[297](reg_0, add_i32(loc_1, 8), loc_1)
					loc_1 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													loc_4 = load_i32(memory_at_0, loc_0 + 24)
													if not br_map[2] then
														br_map[2] = (function()
															return { [0] = 8, 1, 2, 3, 4, 5, 6, 7, }
														end)()
													end
													temp = br_map[2][sub_i32(loc_4, 270)] or 0
													if temp < 4 then
														if temp < 2 then
															if temp < 1 then
																break
															else
																desired = 10
																break
															end
														elseif temp > 2 then
															desired = 8
															break
														else
															desired = 9
															break
														end
													elseif temp > 4 then
														if temp < 7 then
															if temp < 6 then
																desired = 6
																break
															else
																desired = 5
																break
															end
														elseif temp > 7 then
															desired = 3
															break
														else
															desired = 4
															break
														end
													else
														desired = 7
														break
													end
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												while true do
													if not br_map[3] then
														br_map[3] = (function()
															return { [0] = 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, }
														end)()
													end
													temp = br_map[3][sub_i32(loc_4, 44)] or 9
													if temp < 9 then
														break
													else
														desired = 2
														break
													end
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												reg_0 = FUNC_LIST[414](loc_0, loc_1)
												loc_1 = reg_0
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											reg_0 = FUNC_LIST[415](loc_0, loc_1, 1)
											loc_1 = reg_0
											desired = 1
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										reg_0 = FUNC_LIST[415](loc_0, loc_1, 2)
										loc_1 = reg_0
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = FUNC_LIST[415](loc_0, loc_1, 3)
									loc_1 = reg_0
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[415](loc_0, loc_1, 4)
								loc_1 = reg_0
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[415](loc_0, loc_1, 5)
							loc_1 = reg_0
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[415](loc_0, loc_1, 6)
						loc_1 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = 7
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[415](loc_0, loc_1, loc_3)
				loc_1 = reg_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				reg_0 = FUNC_LIST[348](loc_1)
				loc_3 = reg_0
				if loc_3 == 0 then
					break
				end
				reg_0 = FUNC_LIST[544](loc_3, 4124)
				if reg_0 == 0 then
					while true do
						reg_0 = FUNC_LIST[416](loc_0, add_i32(loc_1, 8), 0)
						loc_1 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					reg_0 = FUNC_LIST[544](loc_3, 1404)
					if reg_0 ~= 0 then
						break
					end
					if load_i32(memory_at_0, loc_0 + 24) ~= 281 then
						break
					end
					loc_4 = load_i32(memory_at_0, loc_0 + 48)
					if loc_4 == 0 then
						break
					end
					reg_0 = FUNC_LIST[544](loc_4, 4124)
					if reg_0 ~= 0 then
						break
					end
					FUNC_LIST[398](loc_0)
					reg_0 = FUNC_LIST[416](loc_0, add_i32(loc_1, 8), 1)
					loc_1 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[544](loc_3, 3958)
				if reg_0 == 0 then
					while true do
						reg_0 = FUNC_LIST[417](loc_0, add_i32(loc_1, 8))
						loc_1 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if load_i32_u8(memory_at_0, loc_0) == 0 then
					break
				end
				reg_0 = FUNC_LIST[544](loc_3, 4045)
				if reg_0 ~= 0 then
					break
				end
				reg_0 = FUNC_LIST[418](loc_0, add_i32(loc_1, 8))
				loc_1 = reg_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[387](add_i32(loc_2, 16), add_i32(loc_0, 28))
			if reg_0 ~= 0 then
				while true do
					FUNC_LIST[398](loc_0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 4)
			loc_3 = reg_0
			store_i32(memory_at_0, loc_2 + 12, 1)
			store_i32(memory_at_0, loc_2 + 8, loc_3)
			store_i32(memory_at_0, loc_3, loc_1)
			store_i64(memory_at_0, loc_2, i64_ZERO)
			reg_0 = FUNC_LIST[419](loc_0, add_i32(loc_1, 8), add_i32(loc_2, 8), loc_2, 3505, 0)
			loc_1 = reg_0
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 32)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[403] = --[[ Luau::TempVector<Luau::AstStat*>::push_back(Luau::AstStat* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_3 = load_i32(memory_at_0, loc_0)
					loc_2 = load_i32(memory_at_0, loc_3 + 4)
					if loc_2 ~= load_i32(memory_at_0, loc_3 + 8) then
						while true do
							store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_1))
							store_i32(memory_at_0, loc_3 + 4, add_i32(loc_2, 4))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = load_i32(memory_at_0, loc_3)
					loc_5 = sub_i32(loc_2, loc_7)
					loc_8 = shr_i32(loc_5, 2)
					loc_4 = add_i32(loc_8, 1)
					if loc_4 >= 1073741824 then
						desired = 2
						break
					end
					loc_6 = shr_i32(loc_5, 1)
					loc_4 = (if loc_5 >= 2147483644 then 1073741823 else (if loc_4 < loc_6 then loc_6 else loc_4))
					if loc_4 ~= 0 then
						while true do
							if loc_4 >= 1073741824 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](shl_i32(loc_4, 2))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = reg_0
					loc_5 = add_i32(loc_6, shl_i32(loc_8, 2))
					store_i32(memory_at_0, loc_5, load_i32(memory_at_0, loc_1))
					loc_1 = add_i32(shl_i32(loc_4, 2), loc_6)
					loc_4 = add_i32(loc_5, 4)
					if loc_2 ~= loc_7 then
						while true do
							while true do
								loc_5 = sub_i32(loc_5, 4)
								loc_2 = sub_i32(loc_2, 4)
								store_i32(memory_at_0, loc_5, load_i32(memory_at_0, loc_2))
								if loc_2 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = load_i32(memory_at_0, loc_3)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = reg_0
					store_i32(memory_at_0, loc_3 + 8, loc_1)
					store_i32(memory_at_0, loc_3 + 4, loc_4)
					store_i32(memory_at_0, loc_3, loc_5)
					if loc_2 == 0 then
						break
					end
					FUNC_LIST[609](loc_2)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_3)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[404] = --[[ Luau::Parser::parseIf() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local loc_8 = i64_ZERO
	local loc_9 = i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_1
		loc_9 = load_i64(memory_at_0, loc_0 + 28)
		FUNC_LIST[398](loc_0)
		reg_0 = FUNC_LIST[420](loc_0, 0)
		loc_6 = reg_0
		loc_7 = load_i64(memory_at_0, loc_0 + 36)
		loc_8 = load_i64(memory_at_0, loc_0 + 28)
		loc_3 = load_i32(memory_at_0, loc_0 + 24)
		store_i32_n8(memory_at_0, loc_1 + 40, 0)
		store_i32_n8(memory_at_0, loc_1 + 24, 0)
		while true do
			if loc_3 ~= 306 then
				while true do
					FUNC_LIST[394](loc_0, 306, 1534)
					FUNC_LIST[381](add_i32(loc_1, 48), add_i32(loc_0, 4))
					if load_i32(memory_at_0, loc_1 + 48) ~= 306 then
						desired = 1
						break
					end
					FUNC_LIST[398](loc_0)
					FUNC_LIST[398](loc_0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[398](loc_0)
			store_i32_n8(memory_at_0, loc_1 + 40, 1)
			store_i64(memory_at_0, loc_1 + 32, loc_7)
			store_i64(memory_at_0, loc_1 + 24, loc_8)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_4 = add_i32(loc_0, 28)
		reg_0 = FUNC_LIST[393](loc_0)
		loc_5 = reg_0
		store_i32_n8(memory_at_0, loc_1 + 64, 0)
		store_i32_n8(memory_at_0, loc_1 + 48, 0)
		while true do
			while true do
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 0, }
								end)()
							end
							temp = br_map[1][sub_i32(load_i32(memory_at_0, loc_0 + 24), 292)] or 2
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32_n8(memory_at_0, loc_5 + 36, 1)
						loc_3 = load_i32(memory_at_0, loc_0 + 120)
						loc_2 = add_i32(loc_3, 1)
						store_i32(memory_at_0, loc_0 + 120, loc_2)
						if load_i32(memory_at_0, 47712) < loc_2 then
							desired = 1
							break
						end
						store_i64(memory_at_0, loc_1 + 56, load_i64(memory_at_0, loc_4 + 8))
						store_i64(memory_at_0, loc_1 + 48, load_i64(memory_at_0, loc_4))
						store_i32_n8(memory_at_0, loc_1 + 64, 1)
						reg_0 = FUNC_LIST[404](loc_0)
						loc_2 = reg_0
						loc_7 = load_i64(memory_at_0, loc_2 + 16)
						store_i32(memory_at_0, loc_0 + 120, loc_3)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32_n8(memory_at_0, loc_5 + 36, 1)
					store_i64(memory_at_0, loc_1 + 56, load_i64(memory_at_0, loc_4 + 8))
					store_i64(memory_at_0, loc_1 + 48, load_i64(memory_at_0, loc_4))
					store_i32_n8(memory_at_0, loc_1 + 64, 1)
					loc_8 = load_i64(memory_at_0, loc_0 + 28)
					loc_7 = load_i64(memory_at_0, loc_0 + 36)
					FUNC_LIST[398](loc_0)
					reg_0 = FUNC_LIST[393](loc_0)
					loc_2 = reg_0
					store_i64(memory_at_0, loc_2 + 8, loc_7)
					loc_3 = 292
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_7 = load_i64(memory_at_0, loc_0 + 36)
				store_i64(memory_at_0, loc_1 + 12, loc_8)
				store_i32(memory_at_0, loc_1 + 8, loc_3)
				reg_0 = FUNC_LIST[406](loc_0, 294, add_i32(loc_1, 8))
				loc_3 = reg_0
				if loc_2 ~= 0 then
					while true do
						if load_i32(memory_at_0, loc_2 + 4) ~= load_i32(memory_at_0, 47324) then
							desired = 2
							break
						end
						store_i32_n8(memory_at_0, loc_2 + 36, loc_3)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				store_i32_n8(memory_at_0, loc_5 + 36, loc_3)
				loc_2 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_0 = load_i32(memory_at_0, loc_0 + 88)
			store_i64(memory_at_0, loc_1 + 16, loc_7)
			store_i64(memory_at_0, loc_1 + 8, loc_9)
			reg_0 = FUNC_LIST[353](loc_0, 80)
			reg_0 = FUNC_LIST[285](reg_0, add_i32(loc_1, 8), loc_6, loc_5, loc_2, add_i32(loc_1, 24), add_i32(loc_1, 48))
			loc_0 = reg_0
			GLOBAL_LIST[0].value = add_i32(loc_1, 80)
			reg_0 = loc_0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32(memory_at_0, loc_1, 3929)
		FUNC_LIST[390](loc_4, 4604, loc_1)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[405] = --[[ Luau::Parser::parseWhile() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local loc_7 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_1 = add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_1
		loc_6 = load_i64(memory_at_0, loc_0 + 28)
		FUNC_LIST[398](loc_0)
		reg_0 = FUNC_LIST[420](loc_0, 0)
		loc_3 = reg_0
		store_i32(memory_at_0, loc_1 + 24, load_i32(memory_at_0, loc_0 + 48))
		store_i64(memory_at_0, loc_1 + 16, load_i64(memory_at_0, loc_0 + 40))
		store_i64(memory_at_0, loc_1 + 8, load_i64(memory_at_0, loc_0 + 32))
		store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_0 + 24))
		while true do
			loc_4 = load_i32(memory_at_0, loc_0 + 24)
			if loc_4 ~= 291 then
				while true do
					FUNC_LIST[394](loc_0, 291, 3067)
					FUNC_LIST[381](add_i32(loc_1, 32), add_i32(loc_0, 4))
					if load_i32(memory_at_0, loc_1 + 32) ~= 291 then
						desired = 1
						break
					end
					FUNC_LIST[398](loc_0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[398](loc_0)
			break
		end
		loc_2 = sub_i32(load_i32(memory_at_0, loc_0 + 156), 4)
		store_i32(memory_at_0, loc_2, add_i32(load_i32(memory_at_0, loc_2), 1))
		reg_0 = FUNC_LIST[393](loc_0)
		loc_2 = reg_0
		loc_5 = sub_i32(load_i32(memory_at_0, loc_0 + 156), 4)
		store_i32(memory_at_0, loc_5, sub_i32(load_i32(memory_at_0, loc_5), 1))
		loc_7 = load_i64(memory_at_0, loc_0 + 36)
		store_i32(memory_at_0, loc_1 + 32, load_i32(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_1 + 36, load_i64(memory_at_0, loc_1 + 4))
		reg_1 = FUNC_LIST[406](loc_0, 294, add_i32(loc_1, 32))
		store_i32_n8(memory_at_0, loc_2 + 36, reg_1)
		loc_0 = load_i32(memory_at_0, loc_0 + 88)
		store_i64(memory_at_0, loc_1 + 40, loc_7)
		store_i64(memory_at_0, loc_1 + 32, loc_6)
		reg_0 = FUNC_LIST[353](loc_0, 56)
		reg_0 = FUNC_LIST[287](reg_0, add_i32(loc_1, 32), loc_3, loc_2, (if loc_4 == 291 then 1 else 0), bor_i32(loc_1, 4))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = sub_i32(loc_1, 4294967232)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[406] = --[[ Luau::Parser::expectMatchEndAndConsume(Luau::Lexeme::Type, Luau::Parser::MatchLexeme const&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				if load_i32(memory_at_0, loc_0 + 24) ~= loc_1 then
					while true do
						FUNC_LIST[446](loc_0, loc_1, loc_2)
						FUNC_LIST[381](add_i32(loc_3, 4), add_i32(loc_0, 4))
						loc_2 = 0
						reg_0 = loc_2
						if loc_1 ~= load_i32(memory_at_0, loc_3 + 4) then
							desired = 1
							break
						end
						FUNC_LIST[398](loc_0)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = load_i32(memory_at_0, loc_2 + 4)
				if loc_1 == load_i32(memory_at_0, loc_0 + 28) then
					break
				end
				if load_i32(memory_at_0, loc_0 + 32) == load_i32(memory_at_0, loc_2 + 8) then
					break
				end
				if loc_1 <= load_i32(memory_at_0, loc_0 + 144) then
					break
				end
				store_i64(memory_at_0, loc_0 + 140, load_i64(memory_at_0, loc_2))
				store_i32(memory_at_0, loc_0 + 148, load_i32(memory_at_0, loc_2 + 8))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[398](loc_0)
			reg_0 = 1
			break
		end
		loc_2 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_3, 32)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[407] = --[[ Luau::Parser::parseFor() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = i64_ZERO
	local loc_16 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 160)
		GLOBAL_LIST[0].value = loc_1
		loc_16 = load_i64(memory_at_0, loc_0 + 28)
		FUNC_LIST[398](loc_0)
		FUNC_LIST[421](add_i32(loc_1, 104), loc_0)
		loc_2 = add_i32(loc_0, 24)
		loc_4 = add_i32(loc_0, 4)
		while true do
			if load_i32(memory_at_0, loc_0 + 24) == 61 then
				while true do
					FUNC_LIST[398](loc_0)
					reg_0 = FUNC_LIST[420](loc_0, 0)
					loc_11 = reg_0
					while true do
						if load_i32(memory_at_0, loc_0 + 24) ~= 44 then
							while true do
								FUNC_LIST[394](loc_0, 44, 4844)
								FUNC_LIST[381](add_i32(loc_1, 128), loc_4)
								if load_i32(memory_at_0, loc_1 + 128) ~= 44 then
									desired = 3
									break
								end
								FUNC_LIST[398](loc_0)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[398](loc_0)
						break
					end
					if desired then
						break
					end
					reg_0 = FUNC_LIST[420](loc_0, 0)
					loc_12 = reg_0
					loc_8 = load_i32(memory_at_0, loc_0 + 24)
					if loc_8 == 44 then
						while true do
							FUNC_LIST[398](loc_0)
							reg_0 = FUNC_LIST[420](loc_0, 0)
							loc_9 = reg_0
							reg_0 = load_i32(memory_at_0, loc_0 + 24)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_8
							break
						end
						if desired then
							break
						end
					end
					loc_8 = reg_0
					store_i32(memory_at_0, loc_1 + 96, load_i32(memory_at_0, loc_2 + 24))
					store_i64(memory_at_0, loc_1 + 88, load_i64(memory_at_0, loc_2 + 16))
					store_i64(memory_at_0, loc_1 + 80, load_i64(memory_at_0, loc_2 + 8))
					store_i64(memory_at_0, loc_1 + 72, load_i64(memory_at_0, loc_2))
					while true do
						if loc_8 ~= 291 then
							while true do
								FUNC_LIST[394](loc_0, 291, 3058)
								FUNC_LIST[381](add_i32(loc_1, 128), loc_4)
								if load_i32(memory_at_0, loc_1 + 128) ~= 291 then
									desired = 3
									break
								end
								FUNC_LIST[398](loc_0)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[398](loc_0)
						break
					end
					if desired then
						break
					end
					loc_4 = load_i32(memory_at_0, loc_0 + 184)
					loc_5 = load_i32(memory_at_0, loc_0 + 188)
					loc_2 = sub_i32(load_i32(memory_at_0, loc_0 + 156), 4)
					store_i32(memory_at_0, loc_2, add_i32(load_i32(memory_at_0, loc_2), 1))
					reg_0 = FUNC_LIST[422](loc_0, add_i32(loc_1, 104))
					loc_13 = reg_0
					reg_0 = FUNC_LIST[393](loc_0)
					loc_10 = reg_0
					loc_2 = sub_i32(load_i32(memory_at_0, loc_0 + 156), 4)
					store_i32(memory_at_0, loc_2, sub_i32(load_i32(memory_at_0, loc_2), 1))
					loc_6 = add_i32(loc_0, 184)
					while true do
						loc_7 = load_i32(memory_at_0, loc_0 + 184)
						loc_2 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 188), loc_7), 2)
						loc_3 = shr_i32(sub_i32(loc_5, loc_4), 2)
						if loc_2 > loc_3 then
							while true do
								loc_7 = add_i32(loc_0, 164)
								while true do
									loc_2 = sub_i32(loc_2, 1)
									loc_4 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_6), shl_i32(loc_2, 2)))
									loc_5 = load_i32(memory_at_0, loc_4 + 20)
									reg_0 = FUNC_LIST[5](loc_7, loc_4)
									store_i32(memory_at_0, reg_0, loc_5)
									if loc_2 > loc_3 then
										continue
									end
									break
								end
								if desired then
									break
								end
								loc_7 = load_i32(memory_at_0, loc_0 + 184)
								reg_0 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 188), loc_7), 2)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = loc_2
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_2 = reg_0
						if loc_2 < loc_3 then
							while true do
								FUNC_LIST[190](loc_6, sub_i32(loc_3, loc_2))
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if loc_2 <= loc_3 then
							break
						end
						store_i32(memory_at_0, loc_0 + 188, add_i32(shl_i32(loc_3, 2), loc_7))
						break
					end
					if desired then
						break
					end
					loc_15 = load_i64(memory_at_0, loc_0 + 36)
					store_i32(memory_at_0, loc_1 + 128, load_i32(memory_at_0, loc_1 + 72))
					store_i64(memory_at_0, loc_1 + 132, load_i64(memory_at_0, loc_1 + 76))
					reg_1 = FUNC_LIST[406](loc_0, 294, add_i32(loc_1, 128))
					store_i32_n8(memory_at_0, loc_10 + 36, reg_1)
					loc_0 = load_i32(memory_at_0, loc_0 + 88)
					store_i64(memory_at_0, loc_1 + 136, loc_15)
					store_i64(memory_at_0, loc_1 + 128, loc_16)
					reg_0 = FUNC_LIST[353](loc_0, 68)
					reg_0 = FUNC_LIST[301](reg_0, add_i32(loc_1, 128), loc_13, loc_11, loc_12, loc_9, loc_10, (if loc_8 == 291 then 1 else 0), bor_i32(add_i32(loc_1, 72), 4))
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_5 = add_i32(loc_0, 28)
			store_i32(memory_at_0, loc_1 + 60, add_i32(loc_0, 292))
			loc_3 = load_i32(memory_at_0, loc_0 + 292)
			loc_6 = load_i32(memory_at_0, loc_0 + 296)
			store_i32(memory_at_0, loc_1 + 68, 0)
			store_i32(memory_at_0, loc_1 + 64, div_i32(sub_i32(loc_6, loc_3), 24))
			FUNC_LIST[423](add_i32(loc_1, 60), add_i32(loc_1, 104))
			while true do
				loc_9 = load_i32(memory_at_0, loc_0 + 24)
				if loc_9 ~= 44 then
					break
				end
				FUNC_LIST[398](loc_0)
				FUNC_LIST[421](add_i32(loc_1, 128), loc_0)
				FUNC_LIST[423](add_i32(loc_1, 60), add_i32(loc_1, 128))
				loc_9 = load_i32(memory_at_0, loc_0 + 24)
				if loc_9 ~= 44 then
					break
				end
				while true do
					FUNC_LIST[398](loc_0)
					FUNC_LIST[421](add_i32(loc_1, 128), loc_0)
					FUNC_LIST[423](add_i32(loc_1, 60), add_i32(loc_1, 128))
					loc_9 = load_i32(memory_at_0, loc_0 + 24)
					if loc_9 == 44 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_1 + 48, load_i64(memory_at_0, loc_5 + 8))
			store_i64(memory_at_0, loc_1 + 40, load_i64(memory_at_0, loc_5))
			while true do
				if loc_9 ~= 299 then
					while true do
						FUNC_LIST[394](loc_0, 299, 3058)
						FUNC_LIST[381](add_i32(loc_1, 128), loc_4)
						if load_i32(memory_at_0, loc_1 + 128) ~= 299 then
							desired = 2
							break
						end
						FUNC_LIST[398](loc_0)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[398](loc_0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_1 + 28, add_i32(loc_0, 244))
			loc_5 = load_i32(memory_at_0, loc_0 + 244)
			loc_3 = load_i32(memory_at_0, loc_0 + 248)
			store_i32(memory_at_0, loc_1 + 36, 0)
			store_i32(memory_at_0, loc_1 + 32, shr_i32(sub_i32(loc_3, loc_5), 2))
			FUNC_LIST[424](loc_0, add_i32(loc_1, 28))
			store_i32(memory_at_0, loc_1 + 96, load_i32(memory_at_0, loc_2 + 24))
			store_i64(memory_at_0, loc_1 + 88, load_i64(memory_at_0, loc_2 + 16))
			store_i64(memory_at_0, loc_1 + 80, load_i64(memory_at_0, loc_2 + 8))
			store_i64(memory_at_0, loc_1 + 72, load_i64(memory_at_0, loc_2))
			while true do
				loc_14 = load_i32(memory_at_0, loc_0 + 24)
				if loc_14 ~= 291 then
					while true do
						FUNC_LIST[394](loc_0, 291, 3058)
						FUNC_LIST[381](add_i32(loc_1, 128), loc_4)
						if load_i32(memory_at_0, loc_1 + 128) ~= 291 then
							desired = 2
							break
						end
						FUNC_LIST[398](loc_0)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[398](loc_0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = load_i32(memory_at_0, loc_0 + 184)
			loc_5 = load_i32(memory_at_0, loc_0 + 188)
			loc_2 = sub_i32(load_i32(memory_at_0, loc_0 + 156), 4)
			store_i32(memory_at_0, loc_2, add_i32(load_i32(memory_at_0, loc_2), 1))
			store_i32(memory_at_0, loc_1 + 16, add_i32(loc_0, 304))
			loc_3 = load_i32(memory_at_0, loc_0 + 304)
			loc_6 = load_i32(memory_at_0, loc_0 + 308)
			loc_2 = 0
			store_i32(memory_at_0, loc_1 + 24, 0)
			store_i32(memory_at_0, loc_1 + 20, shr_i32(sub_i32(loc_6, loc_3), 2))
			loc_3 = shr_i32(sub_i32(loc_5, loc_4), 2)
			if load_i32(memory_at_0, loc_1 + 68) ~= 0 then
				while true do
					while true do
						reg_1 = FUNC_LIST[422](loc_0, add_i32(add_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 60)), mul_i32(load_i32(memory_at_0, loc_1 + 64), 24)), mul_i32(loc_2, 24)))
						store_i32(memory_at_0, loc_1 + 128, reg_1)
						FUNC_LIST[403](add_i32(loc_1, 16), add_i32(loc_1, 128))
						loc_2 = add_i32(loc_2, 1)
						if loc_2 < load_i32(memory_at_0, loc_1 + 68) then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_6 = add_i32(loc_0, 184)
			reg_0 = FUNC_LIST[393](loc_0)
			loc_12 = reg_0
			loc_2 = sub_i32(load_i32(memory_at_0, loc_0 + 156), 4)
			store_i32(memory_at_0, loc_2, sub_i32(load_i32(memory_at_0, loc_2), 1))
			while true do
				loc_4 = load_i32(memory_at_0, loc_0 + 184)
				loc_2 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 188), loc_4), 2)
				reg_0 = loc_3
				if loc_2 > loc_3 then
					while true do
						loc_7 = add_i32(loc_0, 164)
						while true do
							loc_2 = sub_i32(loc_2, 1)
							loc_4 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_6), shl_i32(loc_2, 2)))
							loc_5 = load_i32(memory_at_0, loc_4 + 20)
							reg_1 = FUNC_LIST[5](loc_7, loc_4)
							store_i32(memory_at_0, reg_1, loc_5)
							if loc_2 > loc_3 then
								continue
							end
							break
						end
						if desired then
							break
						end
						loc_4 = load_i32(memory_at_0, loc_0 + 184)
						reg_1 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 188), loc_4), 2)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_1 = loc_2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = reg_1
				if reg_0 > loc_2 then
					while true do
						FUNC_LIST[190](loc_6, sub_i32(loc_3, loc_2))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_2 <= loc_3 then
					break
				end
				store_i32(memory_at_0, loc_0 + 188, add_i32(shl_i32(loc_3, 2), loc_4))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_15 = load_i64(memory_at_0, loc_0 + 36)
			store_i32(memory_at_0, loc_1 + 128, load_i32(memory_at_0, loc_1 + 72))
			store_i64(memory_at_0, loc_1 + 132, load_i64(memory_at_0, loc_1 + 76))
			reg_1 = FUNC_LIST[406](loc_0, 294, add_i32(loc_1, 128))
			store_i32_n8(memory_at_0, loc_12 + 36, reg_1)
			loc_13 = load_i32(memory_at_0, loc_0 + 88)
			store_i64(memory_at_0, loc_1 + 136, loc_15)
			store_i64(memory_at_0, loc_1 + 128, loc_16)
			while true do
				loc_3 = load_i32(memory_at_0, loc_1 + 24)
				if loc_3 == 0 then
					while true do
						store_i64(memory_at_0, loc_1 + 8, i64_ZERO)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 16))
				loc_5 = load_i32(memory_at_0, loc_1 + 20)
				reg_0 = FUNC_LIST[353](loc_13, shl_i32(loc_3, 2))
				loc_4 = reg_0
				store_i32(memory_at_0, loc_1 + 12, loc_3)
				store_i32(memory_at_0, loc_1 + 8, loc_4)
				loc_10 = band_i32(loc_3, 3)
				loc_5 = add_i32(shl_i32(loc_5, 2), loc_2)
				loc_6 = 0
				loc_2 = 0
				if loc_3 >= 4 then
					while true do
						loc_11 = band_i32(loc_3, 4294967292)
						loc_7 = 0
						while true do
							loc_3 = shl_i32(loc_2, 2)
							store_i32(memory_at_0, add_i32(loc_3, loc_4), load_i32(memory_at_0, add_i32(loc_3, loc_5)))
							loc_8 = bor_i32(loc_3, 4)
							store_i32(memory_at_0, add_i32(loc_8, loc_4), load_i32(memory_at_0, add_i32(loc_5, loc_8)))
							loc_8 = bor_i32(loc_3, 8)
							store_i32(memory_at_0, add_i32(loc_8, loc_4), load_i32(memory_at_0, add_i32(loc_5, loc_8)))
							loc_3 = bor_i32(loc_3, 12)
							store_i32(memory_at_0, add_i32(loc_3, loc_4), load_i32(memory_at_0, add_i32(loc_3, loc_5)))
							loc_2 = add_i32(loc_2, 4)
							loc_7 = add_i32(loc_7, 4)
							if loc_11 ~= loc_7 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_10 == 0 then
					break
				end
				while true do
					loc_3 = shl_i32(loc_2, 2)
					store_i32(memory_at_0, add_i32(loc_3, loc_4), load_i32(memory_at_0, add_i32(loc_3, loc_5)))
					loc_2 = add_i32(loc_2, 1)
					loc_6 = add_i32(loc_6, 1)
					if loc_10 ~= loc_6 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_11 = bor_i32(add_i32(loc_1, 72), 4)
			while true do
				loc_5 = load_i32(memory_at_0, loc_1 + 36)
				if loc_5 == 0 then
					while true do
						store_i64(memory_at_0, loc_1, i64_ZERO)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 28))
				loc_3 = load_i32(memory_at_0, loc_1 + 32)
				reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), shl_i32(loc_5, 2))
				loc_2 = reg_0
				store_i32(memory_at_0, loc_1 + 4, loc_5)
				store_i32(memory_at_0, loc_1, loc_2)
				loc_8 = band_i32(loc_5, 3)
				loc_4 = add_i32(shl_i32(loc_3, 2), loc_4)
				loc_3 = 0
				loc_0 = 0
				if loc_5 >= 4 then
					while true do
						loc_10 = band_i32(loc_5, 4294967292)
						loc_6 = 0
						while true do
							loc_5 = shl_i32(loc_0, 2)
							store_i32(memory_at_0, add_i32(loc_5, loc_2), load_i32(memory_at_0, add_i32(loc_4, loc_5)))
							loc_7 = bor_i32(loc_5, 4)
							store_i32(memory_at_0, add_i32(loc_7, loc_2), load_i32(memory_at_0, add_i32(loc_4, loc_7)))
							loc_7 = bor_i32(loc_5, 8)
							store_i32(memory_at_0, add_i32(loc_7, loc_2), load_i32(memory_at_0, add_i32(loc_4, loc_7)))
							loc_5 = bor_i32(loc_5, 12)
							store_i32(memory_at_0, add_i32(loc_5, loc_2), load_i32(memory_at_0, add_i32(loc_4, loc_5)))
							loc_0 = add_i32(loc_0, 4)
							loc_6 = add_i32(loc_6, 4)
							if loc_10 ~= loc_6 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_8 == 0 then
					break
				end
				while true do
					loc_5 = shl_i32(loc_0, 2)
					store_i32(memory_at_0, add_i32(loc_5, loc_2), load_i32(memory_at_0, add_i32(loc_4, loc_5)))
					loc_0 = add_i32(loc_0, 1)
					loc_3 = add_i32(loc_3, 1)
					if loc_8 ~= loc_3 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[353](loc_13, 88)
			reg_0 = FUNC_LIST[303](reg_0, add_i32(loc_1, 128), add_i32(loc_1, 8), loc_1, loc_12, (if loc_9 == 299 then 1 else 0), add_i32(loc_1, 40), (if loc_14 == 291 then 1 else 0), loc_11)
			loc_0 = reg_0
			loc_2 = load_i32(memory_at_0, loc_1 + 16)
			loc_4 = add_i32(load_i32(memory_at_0, loc_2), shl_i32(load_i32(memory_at_0, loc_1 + 20), 2))
			if loc_4 ~= load_i32(memory_at_0, loc_2 + 4) then
				while true do
					store_i32(memory_at_0, loc_2 + 4, loc_4)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = load_i32(memory_at_0, loc_1 + 28)
			loc_4 = add_i32(load_i32(memory_at_0, loc_2), shl_i32(load_i32(memory_at_0, loc_1 + 32), 2))
			if loc_4 ~= load_i32(memory_at_0, loc_2 + 4) then
				while true do
					store_i32(memory_at_0, loc_2 + 4, loc_4)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = load_i32(memory_at_0, loc_1 + 60)
			loc_4 = add_i32(load_i32(memory_at_0, loc_2), mul_i32(load_i32(memory_at_0, loc_1 + 64), 24))
			if loc_4 == load_i32(memory_at_0, loc_2 + 4) then
				break
			end
			store_i32(memory_at_0, loc_2 + 4, loc_4)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_1, 160)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[408] = --[[ Luau::Parser::parseRepeat() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		loc_1 = load_i32(memory_at_0, loc_0 + 24)
		loc_11 = load_i64(memory_at_0, loc_0 + 28)
		FUNC_LIST[398](loc_0)
		loc_5 = load_i32(memory_at_0, loc_0 + 184)
		loc_6 = load_i32(memory_at_0, loc_0 + 188)
		loc_2 = sub_i32(load_i32(memory_at_0, loc_0 + 156), 4)
		store_i32(memory_at_0, loc_2, add_i32(load_i32(memory_at_0, loc_2), 1))
		reg_0 = FUNC_LIST[400](loc_0)
		loc_7 = reg_0
		loc_2 = sub_i32(load_i32(memory_at_0, loc_0 + 156), 4)
		store_i32(memory_at_0, loc_2, sub_i32(load_i32(memory_at_0, loc_2), 1))
		store_i64(memory_at_0, loc_3 + 4, loc_11)
		store_i32(memory_at_0, loc_3, loc_1)
		reg_1 = FUNC_LIST[406](loc_0, 308, loc_3)
		loc_10 = reg_1
		store_i32_n8(memory_at_0, loc_7 + 36, loc_10)
		reg_0 = FUNC_LIST[420](loc_0, 0)
		loc_8 = reg_0
		loc_9 = add_i32(loc_0, 184)
		while true do
			loc_4 = load_i32(memory_at_0, loc_0 + 184)
			loc_1 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 188), loc_4), 2)
			loc_2 = shr_i32(sub_i32(loc_6, loc_5), 2)
			if loc_1 > loc_2 then
				while true do
					loc_4 = add_i32(loc_0, 164)
					while true do
						loc_1 = sub_i32(loc_1, 1)
						loc_5 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_9), shl_i32(loc_1, 2)))
						loc_6 = load_i32(memory_at_0, loc_5 + 20)
						reg_0 = FUNC_LIST[5](loc_4, loc_5)
						store_i32(memory_at_0, reg_0, loc_6)
						if loc_1 > loc_2 then
							continue
						end
						break
					end
					if desired then
						break
					end
					loc_4 = load_i32(memory_at_0, loc_0 + 184)
					reg_0 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 188), loc_4), 2)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = reg_0
			if loc_1 < loc_2 then
				while true do
					FUNC_LIST[190](loc_9, sub_i32(loc_2, loc_1))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_1 <= loc_2 then
				break
			end
			store_i32(memory_at_0, loc_0 + 188, add_i32(shl_i32(loc_2, 2), loc_4))
			break
		end
		loc_1 = load_i32(memory_at_0, loc_0 + 88)
		store_i64(memory_at_0, loc_3, loc_11)
		store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_8 + 16))
		reg_0 = FUNC_LIST[353](loc_1, 40)
		reg_0 = FUNC_LIST[289](reg_0, loc_3, loc_8, loc_7, loc_10)
		loc_1 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[409] = --[[ Luau::Parser::parseFunctionStat() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = i64_ZERO
	local reg_0
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_1
		loc_5 = load_i64(memory_at_0, loc_0 + 28)
		loc_6 = load_i64(memory_at_0, loc_0 + 36)
		store_i32(memory_at_0, loc_1 + 88, load_i32(memory_at_0, loc_0 + 48))
		store_i64(memory_at_0, loc_1 + 80, load_i64(memory_at_0, loc_0 + 40))
		store_i64(memory_at_0, loc_1 + 72, load_i64(memory_at_0, loc_0 + 32))
		store_i64(memory_at_0, loc_1 + 64, load_i64(memory_at_0, loc_0 + 24))
		FUNC_LIST[398](loc_0)
		store_i64(memory_at_0, loc_1 + 48, loc_6)
		store_i64(memory_at_0, loc_1 + 16, loc_6)
		store_i32_n8(memory_at_0, loc_1 + 63, 0)
		store_i64(memory_at_0, loc_1 + 40, loc_5)
		store_i64(memory_at_0, loc_1 + 8, loc_5)
		store_i32(memory_at_0, loc_1 + 56, 0)
		reg_0 = FUNC_LIST[425](loc_0, add_i32(loc_1, 8), add_i32(loc_1, 63), add_i32(loc_1, 56))
		loc_3 = reg_0
		loc_2 = load_i32(memory_at_0, loc_0 + 208)
		store_i32(memory_at_0, loc_2 + 1176, add_i32(load_i32(memory_at_0, loc_2 + 1176), 1))
		FUNC_LIST[426](add_i32(loc_1, 24), loc_0, load_i32_u8(memory_at_0, loc_1 + 63), sub_i32(loc_1, 4294967232), add_i32(loc_1, 56), 0)
		loc_2 = load_i32(memory_at_0, loc_1 + 24)
		loc_4 = load_i32(memory_at_0, loc_0 + 208)
		store_i32(memory_at_0, loc_4 + 1176, sub_i32(load_i32(memory_at_0, loc_4 + 1176), 1))
		loc_0 = load_i32(memory_at_0, loc_0 + 88)
		store_i64(memory_at_0, loc_1 + 24, loc_5)
		store_i64(memory_at_0, loc_1 + 32, load_i64(memory_at_0, loc_2 + 16))
		reg_0 = FUNC_LIST[353](loc_0, 36)
		reg_0 = FUNC_LIST[309](reg_0, add_i32(loc_1, 24), loc_3, loc_2)
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_1, 96)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[410] = --[[ Luau::Parser::parseLocal() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = i64_ZERO
	local loc_15 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_1
		loc_14 = load_i64(memory_at_0, loc_0 + 28)
		FUNC_LIST[398](loc_0)
		loc_9 = loc_0
		loc_5 = add_i32(loc_9, 28)
		while true do
			if load_i32(memory_at_0, loc_0 + 24) == 297 then
				while true do
					loc_12 = loc_0
					loc_2 = add_i32(loc_12, 24)
					store_i32(memory_at_0, loc_1 + 88, load_i32(memory_at_0, loc_2 + 24))
					store_i64(memory_at_0, loc_1 + 80, load_i64(memory_at_0, loc_0 + 40))
					store_i64(memory_at_0, loc_1 + 72, load_i64(memory_at_0, loc_0 + 32))
					store_i64(memory_at_0, loc_1 + 64, load_i64(memory_at_0, loc_0 + 24))
					FUNC_LIST[398](loc_0)
					if load_i32(memory_at_0, loc_1 + 68) == wrap_i32_i64(loc_14) then
						while true do
							store_i64_n32(memory_at_0, loc_1 + 72, shr_u64(loc_14, i64_from_u32(32, 0)))
							break
						end
						if desired then
							break
						end
					end
					while true do
						if load_i32(memory_at_0, loc_12 + 24) == 281 then
							while true do
								loc_2 = load_i32(memory_at_0, loc_0 + 48)
								loc_3 = add_i32(loc_1, 104)
								store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_9 + 36))
								store_i64(memory_at_0, loc_1 + 96, load_i64(memory_at_0, loc_9 + 28))
								FUNC_LIST[398](loc_0)
								loc_5 = add_i32(loc_1, 44)
								store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_1 + 104))
								store_i64(memory_at_0, loc_1 + 44, load_i64(memory_at_0, loc_1 + 96))
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[427](loc_0, 4310)
						loc_2 = load_i32(memory_at_0, loc_0 + 132)
						loc_15 = load_i64(memory_at_0, loc_0 + 28)
						store_i64(memory_at_0, loc_1 + 52, loc_15)
						store_i64(memory_at_0, loc_1 + 44, loc_15)
						break
					end
					if desired then
						break
					end
					store_i32(memory_at_0, loc_1 + 40, loc_2)
					loc_2 = load_i32(memory_at_0, loc_0 + 208)
					store_i32(memory_at_0, loc_2 + 1176, add_i32(load_i32(memory_at_0, loc_2 + 1176), 1))
					FUNC_LIST[426](add_i32(loc_1, 28), loc_0, 0, sub_i32(loc_1, 4294967232), add_i32(loc_1, 40), add_i32(loc_1, 40))
					loc_2 = load_i32(memory_at_0, loc_0 + 208)
					store_i32(memory_at_0, loc_2 + 1176, sub_i32(load_i32(memory_at_0, loc_2 + 1176), 1))
					store_i64(memory_at_0, loc_1 + 96, loc_14)
					loc_2 = load_i32(memory_at_0, loc_1 + 28)
					store_i64(memory_at_0, loc_1 + 104, load_i64(memory_at_0, loc_2 + 16))
					reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 36)
					reg_0 = FUNC_LIST[311](reg_0, add_i32(loc_1, 96), load_i32(memory_at_0, loc_1 + 32), loc_2)
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = load_i32(memory_at_0, loc_0 + 208)
			store_i32(memory_at_0, loc_2 + 244, add_i32(load_i32(memory_at_0, loc_2 + 244), 1))
			store_i32(memory_at_0, loc_1 + 96, add_i32(loc_0, 292))
			loc_2 = load_i32(memory_at_0, loc_0 + 292)
			loc_3 = load_i32(memory_at_0, loc_0 + 296)
			store_i32(memory_at_0, loc_1 + 104, 0)
			store_i32(memory_at_0, loc_1 + 100, div_i32(sub_i32(loc_3, loc_2), 24))
			FUNC_LIST[421](sub_i32(loc_1, 4294967232), loc_0)
			FUNC_LIST[423](add_i32(loc_1, 96), sub_i32(loc_1, 4294967232))
			loc_2 = load_i32(memory_at_0, loc_0 + 24)
			if loc_2 == 44 then
				while true do
					while true do
						FUNC_LIST[398](loc_0)
						FUNC_LIST[421](sub_i32(loc_1, 4294967232), loc_0)
						FUNC_LIST[423](add_i32(loc_1, 96), sub_i32(loc_1, 4294967232))
						loc_2 = load_i32(memory_at_0, loc_0 + 24)
						if loc_2 == 44 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = load_i32(memory_at_0, loc_0 + 208)
			store_i32(memory_at_0, loc_3 + 244, sub_i32(load_i32(memory_at_0, loc_3 + 244), 1))
			store_i32(memory_at_0, loc_1 + 28, add_i32(loc_0, 304))
			loc_3 = load_i32(memory_at_0, loc_0 + 304)
			loc_4 = load_i32(memory_at_0, loc_0 + 308)
			store_i32(memory_at_0, loc_1 + 36, 0)
			store_i32(memory_at_0, loc_1 + 32, shr_i32(sub_i32(loc_4, loc_3), 2))
			store_i32(memory_at_0, loc_1 + 16, add_i32(loc_0, 244))
			loc_3 = load_i32(memory_at_0, loc_0 + 244)
			loc_4 = load_i32(memory_at_0, loc_0 + 248)
			store_i32(memory_at_0, loc_1 + 24, 0)
			store_i32(memory_at_0, loc_1 + 20, shr_i32(sub_i32(loc_4, loc_3), 2))
			store_i32_n8(memory_at_0, loc_1 + 80, 0)
			store_i32_n8(memory_at_0, loc_1 + 64, 0)
			if loc_2 == 61 then
				while true do
					store_i64(memory_at_0, loc_1 + 72, load_i64(memory_at_0, loc_9 + 36))
					store_i64(memory_at_0, loc_1 + 64, load_i64(memory_at_0, loc_9 + 28))
					store_i32_n8(memory_at_0, loc_1 + 80, 1)
					FUNC_LIST[398](loc_0)
					FUNC_LIST[424](loc_0, add_i32(loc_1, 16))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if load_i32(memory_at_0, loc_1 + 104) ~= 0 then
				while true do
					loc_2 = 0
					while true do
						reg_1 = FUNC_LIST[422](loc_0, add_i32(add_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 96)), mul_i32(load_i32(memory_at_0, loc_1 + 100), 24)), mul_i32(loc_2, 24)))
						store_i32(memory_at_0, loc_1 + 40, reg_1)
						FUNC_LIST[403](add_i32(loc_1, 28), add_i32(loc_1, 40))
						loc_2 = add_i32(loc_2, 1)
						if loc_2 < load_i32(memory_at_0, loc_1 + 104) then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_11 = load_i32(memory_at_0, loc_0 + 88)
			loc_3 = load_i32(memory_at_0, loc_1 + 24)
			reg_0 = loc_1
			if loc_3 ~= 0 then
				while true do
					reg_1 = add_i32(load_i32(memory_at_0, sub_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 16) + 4), 4)), 8)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_1 = add_i32(loc_0, 52)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = reg_1
			store_i64(memory_at_0, reg_0 + 48, load_i64(memory_at_0, loc_2 + 8))
			store_i64(memory_at_0, loc_1 + 40, loc_14)
			while true do
				loc_4 = load_i32(memory_at_0, loc_1 + 36)
				if loc_4 == 0 then
					while true do
						store_i64(memory_at_0, loc_1 + 8, i64_ZERO)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 28))
				loc_3 = load_i32(memory_at_0, loc_1 + 32)
				reg_0 = FUNC_LIST[353](loc_11, shl_i32(loc_4, 2))
				loc_5 = reg_0
				store_i32(memory_at_0, loc_1 + 12, loc_4)
				store_i32(memory_at_0, loc_1 + 8, loc_5)
				loc_10 = band_i32(loc_4, 3)
				loc_3 = add_i32(shl_i32(loc_3, 2), loc_2)
				loc_2 = 0
				if loc_4 >= 4 then
					while true do
						loc_13 = band_i32(loc_4, 4294967292)
						while true do
							loc_4 = shl_i32(loc_2, 2)
							store_i32(memory_at_0, add_i32(loc_4, loc_5), load_i32(memory_at_0, add_i32(loc_3, loc_4)))
							loc_7 = bor_i32(loc_4, 4)
							store_i32(memory_at_0, add_i32(loc_7, loc_5), load_i32(memory_at_0, add_i32(loc_3, loc_7)))
							loc_7 = bor_i32(loc_4, 8)
							store_i32(memory_at_0, add_i32(loc_7, loc_5), load_i32(memory_at_0, add_i32(loc_3, loc_7)))
							loc_4 = bor_i32(loc_4, 12)
							store_i32(memory_at_0, add_i32(loc_4, loc_5), load_i32(memory_at_0, add_i32(loc_3, loc_4)))
							loc_2 = add_i32(loc_2, 4)
							loc_6 = add_i32(loc_6, 4)
							if loc_13 ~= loc_6 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_10 ~= 0 then
					while true do
						while true do
							loc_4 = shl_i32(loc_2, 2)
							store_i32(memory_at_0, add_i32(loc_4, loc_5), load_i32(memory_at_0, add_i32(loc_3, loc_4)))
							loc_2 = add_i32(loc_2, 1)
							loc_8 = add_i32(loc_8, 1)
							if loc_10 ~= loc_8 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_3 = load_i32(memory_at_0, loc_1 + 24)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_3 == 0 then
					while true do
						store_i64(memory_at_0, loc_1, i64_ZERO)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_5 = load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 16))
				loc_4 = load_i32(memory_at_0, loc_1 + 20)
				reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), shl_i32(loc_3, 2))
				loc_2 = reg_0
				store_i32(memory_at_0, loc_1 + 4, loc_3)
				store_i32(memory_at_0, loc_1, loc_2)
				loc_7 = band_i32(loc_3, 3)
				loc_5 = add_i32(shl_i32(loc_4, 2), loc_5)
				loc_4 = 0
				loc_0 = 0
				if loc_3 >= 4 then
					while true do
						loc_10 = band_i32(loc_3, 4294967292)
						loc_8 = 0
						while true do
							loc_3 = shl_i32(loc_0, 2)
							store_i32(memory_at_0, add_i32(loc_3, loc_2), load_i32(memory_at_0, add_i32(loc_3, loc_5)))
							loc_6 = bor_i32(loc_3, 4)
							store_i32(memory_at_0, add_i32(loc_6, loc_2), load_i32(memory_at_0, add_i32(loc_5, loc_6)))
							loc_6 = bor_i32(loc_3, 8)
							store_i32(memory_at_0, add_i32(loc_6, loc_2), load_i32(memory_at_0, add_i32(loc_5, loc_6)))
							loc_3 = bor_i32(loc_3, 12)
							store_i32(memory_at_0, add_i32(loc_3, loc_2), load_i32(memory_at_0, add_i32(loc_3, loc_5)))
							loc_0 = add_i32(loc_0, 4)
							loc_8 = add_i32(loc_8, 4)
							if loc_10 ~= loc_8 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_7 == 0 then
					break
				end
				while true do
					loc_3 = shl_i32(loc_0, 2)
					store_i32(memory_at_0, add_i32(loc_3, loc_2), load_i32(memory_at_0, add_i32(loc_3, loc_5)))
					loc_0 = add_i32(loc_0, 1)
					loc_4 = add_i32(loc_4, 1)
					if loc_7 ~= loc_4 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[353](loc_11, 64)
			reg_0 = FUNC_LIST[299](reg_0, add_i32(loc_1, 40), add_i32(loc_1, 8), loc_1, sub_i32(loc_1, 4294967232))
			loc_0 = reg_0
			loc_2 = load_i32(memory_at_0, loc_1 + 16)
			loc_5 = add_i32(load_i32(memory_at_0, loc_2), shl_i32(load_i32(memory_at_0, loc_1 + 20), 2))
			if loc_5 ~= load_i32(memory_at_0, loc_2 + 4) then
				while true do
					store_i32(memory_at_0, loc_2 + 4, loc_5)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = load_i32(memory_at_0, loc_1 + 28)
			loc_5 = add_i32(load_i32(memory_at_0, loc_2), shl_i32(load_i32(memory_at_0, loc_1 + 32), 2))
			if loc_5 ~= load_i32(memory_at_0, loc_2 + 4) then
				while true do
					store_i32(memory_at_0, loc_2 + 4, loc_5)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = load_i32(memory_at_0, loc_1 + 96)
			loc_5 = add_i32(load_i32(memory_at_0, loc_2), mul_i32(load_i32(memory_at_0, loc_1 + 100), 24))
			if loc_5 == load_i32(memory_at_0, loc_2 + 4) then
				break
			end
			store_i32(memory_at_0, loc_2 + 4, loc_5)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_1, 112)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[411] = --[[ Luau::Parser::parseReturn() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = i64_ZERO
	local loc_12 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_1
		loc_12 = load_i64(memory_at_0, loc_0 + 36)
		loc_11 = load_i64(memory_at_0, loc_0 + 28)
		FUNC_LIST[398](loc_0)
		store_i32(memory_at_0, loc_1 + 36, add_i32(loc_0, 244))
		loc_3 = load_i32(memory_at_0, loc_0 + 244)
		loc_4 = load_i32(memory_at_0, loc_0 + 248)
		store_i32(memory_at_0, loc_1 + 44, 0)
		store_i32(memory_at_0, loc_1 + 40, shr_i32(sub_i32(loc_4, loc_3), 2))
		while true do
			while true do
				while true do
					loc_3 = load_i32(memory_at_0, loc_0 + 24)
					loc_4 = sub_i32(loc_3, 292)
					if (if band_i32(shl_i32(1, loc_4), 65543) ~= 0 then (if loc_4 <= 16 then 1 else 0) else 0) ~= 0 then
						break
					end
					if loc_3 == 0 then
						break
					end
					if loc_3 == 59 then
						break
					end
					FUNC_LIST[424](loc_0, add_i32(loc_1, 36))
					loc_2 = load_i32(memory_at_0, loc_1 + 44)
					if loc_2 ~= 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = load_i32(memory_at_0, loc_0 + 88)
				store_i64(memory_at_0, loc_1 + 24, loc_12)
				store_i64(memory_at_0, loc_1 + 16, loc_11)
				store_i64(memory_at_0, loc_1 + 8, i64_ZERO)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = load_i32(memory_at_0, loc_0 + 88)
			loc_0 = load_i32(memory_at_0, loc_1 + 36)
			store_i64(memory_at_0, loc_1 + 24, load_i64(memory_at_0, load_i32(memory_at_0, sub_i32(load_i32(memory_at_0, loc_0 + 4), 4)) + 16))
			store_i64(memory_at_0, loc_1 + 16, loc_11)
			loc_0 = load_i32(memory_at_0, loc_0)
			loc_4 = load_i32(memory_at_0, loc_1 + 40)
			reg_0 = FUNC_LIST[353](loc_5, shl_i32(loc_2, 2))
			loc_3 = reg_0
			store_i32(memory_at_0, loc_1 + 12, loc_2)
			store_i32(memory_at_0, loc_1 + 8, loc_3)
			loc_7 = band_i32(loc_2, 3)
			loc_4 = add_i32(shl_i32(loc_4, 2), loc_0)
			loc_0 = 0
			if loc_2 >= 4 then
				while true do
					loc_10 = band_i32(loc_2, 4294967292)
					while true do
						loc_2 = shl_i32(loc_0, 2)
						store_i32(memory_at_0, add_i32(loc_2, loc_3), load_i32(memory_at_0, add_i32(loc_2, loc_4)))
						loc_6 = bor_i32(loc_2, 4)
						store_i32(memory_at_0, add_i32(loc_6, loc_3), load_i32(memory_at_0, add_i32(loc_4, loc_6)))
						loc_6 = bor_i32(loc_2, 8)
						store_i32(memory_at_0, add_i32(loc_6, loc_3), load_i32(memory_at_0, add_i32(loc_4, loc_6)))
						loc_2 = bor_i32(loc_2, 12)
						store_i32(memory_at_0, add_i32(loc_2, loc_3), load_i32(memory_at_0, add_i32(loc_2, loc_4)))
						loc_0 = add_i32(loc_0, 4)
						loc_9 = add_i32(loc_9, 4)
						if loc_10 ~= loc_9 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == 0 then
				break
			end
			while true do
				loc_2 = shl_i32(loc_0, 2)
				store_i32(memory_at_0, add_i32(loc_2, loc_3), load_i32(memory_at_0, add_i32(loc_2, loc_4)))
				loc_0 = add_i32(loc_0, 1)
				loc_8 = add_i32(loc_8, 1)
				if loc_7 ~= loc_8 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = FUNC_LIST[353](loc_5, 36)
		reg_0 = FUNC_LIST[295](reg_0, add_i32(loc_1, 16), add_i32(loc_1, 8))
		loc_3 = reg_0
		loc_0 = load_i32(memory_at_0, loc_1 + 36)
		loc_4 = add_i32(load_i32(memory_at_0, loc_0), shl_i32(load_i32(memory_at_0, loc_1 + 40), 2))
		if loc_4 ~= load_i32(memory_at_0, loc_0 + 4) then
			while true do
				store_i32(memory_at_0, loc_0 + 4, loc_4)
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_1, 48)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[412] = --[[ Luau::Parser::parseBreak() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_1
		store_i64(memory_at_0, loc_1 + 24, load_i64(memory_at_0, loc_0 + 36))
		store_i64(memory_at_0, loc_1 + 16, load_i64(memory_at_0, loc_0 + 28))
		FUNC_LIST[398](loc_0)
		while true do
			if load_i32(memory_at_0, sub_i32(load_i32(memory_at_0, loc_0 + 156), 4)) == 0 then
				while true do
					store_i64(memory_at_0, loc_1 + 8, i64_ZERO)
					reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 28)
					reg_0 = FUNC_LIST[291](reg_0, add_i32(loc_1, 16))
					loc_3 = reg_0
					reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 4)
					loc_2 = reg_0
					store_i32(memory_at_0, loc_1 + 4, 1)
					store_i32(memory_at_0, loc_1, loc_2)
					store_i32(memory_at_0, loc_2, loc_3)
					reg_0 = FUNC_LIST[419](loc_0, add_i32(loc_1, 16), add_i32(loc_1, 8), loc_1, 3078, 0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 28)
			reg_0 = FUNC_LIST[291](reg_0, add_i32(loc_1, 16))
			break
		end
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_1, 32)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[413] = --[[ Luau::Parser::parsePrimaryExpr(bool) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = i64_ZERO
	local loc_10 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_2 = add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_2
		loc_4 = add_i32(loc_0, 28)
		loc_10 = load_i64(memory_at_0, loc_0 + 28)
		loc_5 = add_i32(loc_2, 20)
		reg_0 = FUNC_LIST[428](loc_0)
		loc_6 = reg_0
		loc_8 = load_i32(memory_at_0, loc_0 + 120)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											loc_3 = load_i32(memory_at_0, loc_0 + 24)
											if le_i32(loc_3, 122) then
												while true do
													if not br_map[1] then
														br_map[1] = (function()
															return { [0] = 3, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, }
														end)()
													end
													temp = br_map[1][sub_i32(loc_3, 40)] or 4
													if temp < 3 then
														if temp < 2 then
															desired = 9
															break
														else
															desired = 8
															break
														end
													elseif temp > 3 then
														if temp < 5 then
															desired = 6
															break
														else
															desired = 5
															break
														end
													else
														desired = 7
														break
													end
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											if sub_i32(loc_3, 278) < 2 then
												desired = 3
												break
											end
											if loc_3 ~= 123 then
												desired = 5
												break
											end
											desired = 3
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										store_i64(memory_at_0, loc_2 + 40, load_i64(memory_at_0, loc_0 + 28))
										FUNC_LIST[398](loc_0)
										while true do
											if load_i32(memory_at_0, loc_0 + 24) == 281 then
												while true do
													loc_3 = load_i32(memory_at_0, loc_0 + 48)
													loc_7 = add_i32(loc_2, 56)
													store_i64(memory_at_0, loc_7, load_i64(memory_at_0, loc_4 + 8))
													store_i64(memory_at_0, loc_2 + 48, load_i64(memory_at_0, loc_4))
													FUNC_LIST[398](loc_0)
													store_i32(memory_at_0, loc_2 + 16, loc_3)
													store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_2 + 56))
													store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_2 + 48))
													desired = 9
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											FUNC_LIST[427](loc_0, 0)
											while true do
												if sub_i32(load_i32(memory_at_0, loc_0 + 24), 289) > 21 then
													break
												end
												if load_i32(memory_at_0, loc_4) ~= load_i32(memory_at_0, loc_2 + 40) then
													break
												end
												store_i32(memory_at_0, loc_2 + 16, load_i32(memory_at_0, loc_0 + 48))
												store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_4 + 8))
												store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_4))
												FUNC_LIST[398](loc_0)
												desired = 9
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_3 = load_i32(memory_at_0, loc_0 + 132)
											loc_9 = load_i64(memory_at_0, loc_0 + 28)
											store_i64(memory_at_0, loc_2 + 28, loc_9)
											store_i64(memory_at_0, loc_2 + 20, loc_9)
											store_i32(memory_at_0, loc_2 + 16, loc_3)
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_3 = load_i32(memory_at_0, loc_0 + 88)
										store_i64(memory_at_0, loc_2 + 48, loc_10)
										store_i64(memory_at_0, loc_2 + 56, load_i64(memory_at_0, loc_2 + 28))
										reg_0 = FUNC_LIST[353](loc_3, 60)
										reg_0 = FUNC_LIST[263](reg_0, add_i32(loc_2, 48), loc_6, add_i32(loc_2, 16), loc_5, add_i32(loc_2, 40), 46)
										desired = 2
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									store_i64(memory_at_0, loc_2 + 40, load_i64(memory_at_0, loc_0 + 28))
									FUNC_LIST[398](loc_0)
									while true do
										if load_i32(memory_at_0, loc_0 + 24) == 281 then
											while true do
												loc_3 = load_i32(memory_at_0, loc_0 + 48)
												loc_7 = add_i32(loc_2, 56)
												store_i64(memory_at_0, loc_7, load_i64(memory_at_0, loc_4 + 8))
												store_i64(memory_at_0, loc_2 + 48, load_i64(memory_at_0, loc_4))
												FUNC_LIST[398](loc_0)
												store_i32(memory_at_0, loc_2 + 16, loc_3)
												store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_2 + 56))
												store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_2 + 48))
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										FUNC_LIST[427](loc_0, 4324)
										while true do
											if sub_i32(load_i32(memory_at_0, loc_0 + 24), 289) > 21 then
												break
											end
											if load_i32(memory_at_0, loc_4) ~= load_i32(memory_at_0, loc_2 + 40) then
												break
											end
											store_i32(memory_at_0, loc_2 + 16, load_i32(memory_at_0, loc_0 + 48))
											store_i64(memory_at_0, loc_5 + 8, load_i64(memory_at_0, loc_4 + 8))
											store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_4))
											FUNC_LIST[398](loc_0)
											desired = 8
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_3 = load_i32(memory_at_0, loc_0 + 132)
										loc_9 = load_i64(memory_at_0, loc_0 + 28)
										store_i64(memory_at_0, loc_2 + 28, loc_9)
										store_i64(memory_at_0, loc_2 + 20, loc_9)
										store_i32(memory_at_0, loc_2 + 16, loc_3)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_3 = load_i32(memory_at_0, loc_0 + 88)
									store_i64(memory_at_0, loc_2 + 48, loc_10)
									store_i64(memory_at_0, loc_2 + 56, load_i64(memory_at_0, loc_2 + 28))
									reg_1 = FUNC_LIST[353](loc_3, 60)
									reg_1 = FUNC_LIST[263](reg_1, add_i32(loc_2, 48), loc_6, add_i32(loc_2, 16), loc_5, add_i32(loc_2, 40), 58)
									reg_0 = FUNC_LIST[429](loc_0, reg_1, 1)
									desired = 2
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_1 ~= 0 then
									desired = 3
									break
								end
								if load_i32(memory_at_0, loc_6 + 16) == load_i32(memory_at_0, loc_4) then
									desired = 3
									break
								end
								FUNC_LIST[430](loc_0)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_3 == 91 then
								desired = 4
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32(memory_at_0, loc_0 + 120, loc_8)
						GLOBAL_LIST[0].value = sub_i32(loc_2, 4294967232)
						reg_0 = loc_6
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_2 + 48, 91)
					store_i64(memory_at_0, loc_2 + 52, load_i64(memory_at_0, loc_0 + 28))
					FUNC_LIST[398](loc_0)
					reg_0 = FUNC_LIST[420](loc_0, 0)
					loc_3 = reg_0
					loc_9 = load_i64(memory_at_0, loc_0 + 36)
					while true do
						if load_i32(memory_at_0, loc_0 + 24) ~= 93 then
							while true do
								FUNC_LIST[431](loc_0, 93, add_i32(loc_2, 48), 0)
								reg_0 = FUNC_LIST[432](loc_0, 93, loc_0, 0)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[398](loc_0)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_7 = load_i32(memory_at_0, loc_0 + 88)
					store_i64(memory_at_0, loc_2 + 24, loc_9)
					store_i64(memory_at_0, loc_2 + 16, loc_10)
					reg_0 = FUNC_LIST[353](loc_7, 32)
					reg_0 = FUNC_LIST[265](reg_0, add_i32(loc_2, 16), loc_6, loc_3)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[429](loc_0, loc_6, 0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_6 = reg_0
			loc_3 = add_i32(load_i32(memory_at_0, loc_0 + 120), 1)
			store_i32(memory_at_0, loc_0 + 120, loc_3)
			if load_i32(memory_at_0, 47712) >= loc_3 then
				continue
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32(memory_at_0, loc_2, 3451)
		FUNC_LIST[390](loc_4, 4604, loc_2)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[414] = --[[ Luau::Parser::parseAssignment(Luau::AstExpr*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_2
		store_i32(memory_at_0, loc_2 + 44, loc_1)
		while true do
			loc_3 = load_i32(memory_at_0, loc_1 + 4)
			if loc_3 == load_i32(memory_at_0, 47220) then
				break
			end
			if load_i32(memory_at_0, 47228) == loc_3 then
				break
			end
			if load_i32(memory_at_0, 47260) == loc_3 then
				break
			end
			if load_i32(memory_at_0, 47252) == loc_3 then
				break
			end
			reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 4)
			loc_3 = reg_0
			store_i32(memory_at_0, loc_2 + 52, 1)
			store_i32(memory_at_0, loc_2 + 48, loc_3)
			store_i32(memory_at_0, loc_3, loc_1)
			reg_1 = FUNC_LIST[433](loc_0, add_i32(loc_1, 8), add_i32(loc_2, 48), 5090, 0)
			store_i32(memory_at_0, loc_2 + 44, reg_1)
			break
		end
		store_i32(memory_at_0, loc_2 + 32, add_i32(loc_0, 244))
		loc_1 = load_i32(memory_at_0, loc_0 + 244)
		loc_3 = load_i32(memory_at_0, loc_0 + 248)
		store_i32(memory_at_0, loc_2 + 40, 0)
		store_i32(memory_at_0, loc_2 + 36, shr_i32(sub_i32(loc_3, loc_1), 2))
		FUNC_LIST[403](add_i32(loc_2, 32), add_i32(loc_2, 44))
		loc_1 = load_i32(memory_at_0, loc_0 + 24)
		if loc_1 == 44 then
			while true do
				while true do
					FUNC_LIST[398](loc_0)
					reg_1 = FUNC_LIST[413](loc_0, 1)
					loc_3 = reg_1
					store_i32(memory_at_0, loc_2 + 20, loc_3)
					while true do
						loc_1 = load_i32(memory_at_0, loc_3 + 4)
						if loc_1 == load_i32(memory_at_0, 47220) then
							break
						end
						if load_i32(memory_at_0, 47228) == loc_1 then
							break
						end
						if load_i32(memory_at_0, 47260) == loc_1 then
							break
						end
						if load_i32(memory_at_0, 47252) == loc_1 then
							break
						end
						reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 4)
						loc_1 = reg_0
						store_i32(memory_at_0, loc_2 + 52, 1)
						store_i32(memory_at_0, loc_2 + 48, loc_1)
						store_i32(memory_at_0, loc_1, loc_3)
						reg_1 = FUNC_LIST[433](loc_0, add_i32(loc_3, 8), add_i32(loc_2, 48), 5090, 0)
						store_i32(memory_at_0, loc_2 + 20, reg_1)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					FUNC_LIST[403](add_i32(loc_2, 32), add_i32(loc_2, 20))
					loc_1 = load_i32(memory_at_0, loc_0 + 24)
					if loc_1 == 44 then
						continue
					end
					break
				end
				break
			end
		end
		while true do
			if loc_1 ~= 61 then
				while true do
					FUNC_LIST[394](loc_0, 61, 1504)
					FUNC_LIST[381](add_i32(loc_2, 48), add_i32(loc_0, 4))
					if load_i32(memory_at_0, loc_2 + 48) ~= 61 then
						desired = 1
						break
					end
					FUNC_LIST[398](loc_0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[398](loc_0)
			break
		end
		store_i32(memory_at_0, loc_2 + 20, add_i32(loc_0, 256))
		loc_3 = load_i32(memory_at_0, loc_0 + 256)
		loc_4 = load_i32(memory_at_0, loc_0 + 260)
		loc_1 = 0
		store_i32(memory_at_0, loc_2 + 28, 0)
		store_i32(memory_at_0, loc_2 + 24, shr_i32(sub_i32(loc_4, loc_3), 2))
		FUNC_LIST[424](loc_0, add_i32(loc_2, 20))
		loc_10 = load_i32(memory_at_0, loc_0 + 88)
		loc_3 = load_i32(memory_at_0, sub_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 20) + 4), 4))
		store_i64(memory_at_0, loc_2 + 48, load_i64(memory_at_0, load_i32(memory_at_0, loc_2 + 44) + 8))
		store_i64(memory_at_0, loc_2 + 56, load_i64(memory_at_0, loc_3 + 16))
		while true do
			loc_5 = load_i32(memory_at_0, loc_2 + 40)
			if loc_5 == 0 then
				while true do
					store_i64(memory_at_0, loc_2 + 12, i64_ZERO)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 32))
			loc_6 = load_i32(memory_at_0, loc_2 + 36)
			reg_0 = FUNC_LIST[353](loc_10, shl_i32(loc_5, 2))
			loc_3 = reg_0
			store_i32(memory_at_0, loc_2 + 16, loc_5)
			store_i32(memory_at_0, loc_2 + 12, loc_3)
			loc_8 = band_i32(loc_5, 3)
			loc_4 = add_i32(shl_i32(loc_6, 2), loc_4)
			if loc_5 >= 4 then
				while true do
					loc_9 = band_i32(loc_5, 4294967292)
					loc_6 = 0
					while true do
						loc_5 = shl_i32(loc_1, 2)
						store_i32(memory_at_0, add_i32(loc_5, loc_3), load_i32(memory_at_0, add_i32(loc_4, loc_5)))
						loc_7 = bor_i32(loc_5, 4)
						store_i32(memory_at_0, add_i32(loc_7, loc_3), load_i32(memory_at_0, add_i32(loc_4, loc_7)))
						loc_7 = bor_i32(loc_5, 8)
						store_i32(memory_at_0, add_i32(loc_7, loc_3), load_i32(memory_at_0, add_i32(loc_4, loc_7)))
						loc_5 = bor_i32(loc_5, 12)
						store_i32(memory_at_0, add_i32(loc_5, loc_3), load_i32(memory_at_0, add_i32(loc_4, loc_5)))
						loc_1 = add_i32(loc_1, 4)
						loc_6 = add_i32(loc_6, 4)
						if loc_9 ~= loc_6 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 == 0 then
				break
			end
			loc_5 = 0
			while true do
				loc_6 = shl_i32(loc_1, 2)
				store_i32(memory_at_0, add_i32(loc_6, loc_3), load_i32(memory_at_0, add_i32(loc_4, loc_6)))
				loc_1 = add_i32(loc_1, 1)
				loc_5 = add_i32(loc_5, 1)
				if loc_8 ~= loc_5 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		while true do
			loc_4 = load_i32(memory_at_0, loc_2 + 28)
			if loc_4 == 0 then
				while true do
					store_i64(memory_at_0, loc_2 + 4, i64_ZERO)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 20))
			loc_5 = load_i32(memory_at_0, loc_2 + 24)
			reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), shl_i32(loc_4, 2))
			loc_1 = reg_0
			store_i32(memory_at_0, loc_2 + 8, loc_4)
			store_i32(memory_at_0, loc_2 + 4, loc_1)
			loc_8 = band_i32(loc_4, 3)
			loc_3 = add_i32(shl_i32(loc_5, 2), loc_3)
			loc_5 = 0
			loc_0 = 0
			if loc_4 >= 4 then
				while true do
					loc_9 = band_i32(loc_4, 4294967292)
					loc_6 = 0
					while true do
						loc_4 = shl_i32(loc_0, 2)
						store_i32(memory_at_0, add_i32(loc_4, loc_1), load_i32(memory_at_0, add_i32(loc_3, loc_4)))
						loc_7 = bor_i32(loc_4, 4)
						store_i32(memory_at_0, add_i32(loc_7, loc_1), load_i32(memory_at_0, add_i32(loc_3, loc_7)))
						loc_7 = bor_i32(loc_4, 8)
						store_i32(memory_at_0, add_i32(loc_7, loc_1), load_i32(memory_at_0, add_i32(loc_3, loc_7)))
						loc_4 = bor_i32(loc_4, 12)
						store_i32(memory_at_0, add_i32(loc_4, loc_1), load_i32(memory_at_0, add_i32(loc_3, loc_4)))
						loc_0 = add_i32(loc_0, 4)
						loc_6 = add_i32(loc_6, 4)
						if loc_9 ~= loc_6 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 == 0 then
				break
			end
			while true do
				loc_4 = shl_i32(loc_0, 2)
				store_i32(memory_at_0, add_i32(loc_4, loc_1), load_i32(memory_at_0, add_i32(loc_3, loc_4)))
				loc_0 = add_i32(loc_0, 1)
				loc_5 = add_i32(loc_5, 1)
				if loc_8 ~= loc_5 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = FUNC_LIST[353](loc_10, 44)
		reg_0 = FUNC_LIST[305](reg_0, add_i32(loc_2, 48), add_i32(loc_2, 12), add_i32(loc_2, 4))
		loc_1 = reg_0
		loc_0 = load_i32(memory_at_0, loc_2 + 20)
		loc_3 = add_i32(load_i32(memory_at_0, loc_0), shl_i32(load_i32(memory_at_0, loc_2 + 24), 2))
		if loc_3 ~= load_i32(memory_at_0, loc_0 + 4) then
			while true do
				store_i32(memory_at_0, loc_0 + 4, loc_3)
				break
			end
		end
		loc_0 = load_i32(memory_at_0, loc_2 + 32)
		loc_3 = add_i32(load_i32(memory_at_0, loc_0), shl_i32(load_i32(memory_at_0, loc_2 + 36), 2))
		if loc_3 ~= load_i32(memory_at_0, loc_0 + 4) then
			while true do
				store_i32(memory_at_0, loc_0 + 4, loc_3)
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 80)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[415] = --[[ Luau::Parser::parseCompoundAssignment(Luau::AstExpr*, Luau::AstExprBinary::Op) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		while true do
			loc_3 = load_i32(memory_at_0, loc_1 + 4)
			if loc_3 == load_i32(memory_at_0, 47220) then
				break
			end
			if load_i32(memory_at_0, 47228) == loc_3 then
				break
			end
			if load_i32(memory_at_0, 47260) == loc_3 then
				break
			end
			if load_i32(memory_at_0, 47252) == loc_3 then
				break
			end
			reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 4)
			loc_3 = reg_0
			store_i32(memory_at_0, loc_4 + 4, 1)
			store_i32(memory_at_0, loc_4, loc_3)
			store_i32(memory_at_0, loc_3, loc_1)
			reg_0 = FUNC_LIST[433](loc_0, add_i32(loc_1, 8), loc_4, 5090, 0)
			loc_1 = reg_0
			break
		end
		FUNC_LIST[398](loc_0)
		reg_0 = FUNC_LIST[420](loc_0, 0)
		loc_3 = reg_0
		loc_0 = load_i32(memory_at_0, loc_0 + 88)
		store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_1 + 8))
		store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_3 + 16))
		reg_0 = FUNC_LIST[353](loc_0, 40)
		reg_0 = FUNC_LIST[307](reg_0, loc_4, loc_2, loc_1, loc_3)
		loc_1 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[416] = --[[ Luau::Parser::parseTypeAlias(Luau::Location const&, bool) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_3
		loc_6 = loc_0
		loc_4 = add_i32(loc_6, 28)
		while true do
			if load_i32(memory_at_0, loc_0 + 24) == 281 then
				while true do
					loc_5 = load_i32(memory_at_0, loc_0 + 48)
					store_i64(memory_at_0, loc_3 + 48, load_i64(memory_at_0, loc_0 + 36))
					store_i64(memory_at_0, loc_3 + 40, load_i64(memory_at_0, loc_0 + 28))
					FUNC_LIST[398](loc_0)
					store_i64(memory_at_0, loc_3 + 28, load_i64(memory_at_0, loc_3 + 48))
					store_i32(memory_at_0, loc_3 + 16, loc_5)
					store_i64(memory_at_0, loc_3 + 20, load_i64(memory_at_0, loc_3 + 40))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[427](loc_0, 4293)
			store_i32(memory_at_0, loc_3 + 16, load_i32(memory_at_0, loc_0 + 132))
			store_i64(memory_at_0, loc_3 + 28, load_i64(memory_at_0, loc_6 + 36))
			store_i64(memory_at_0, loc_3 + 20, load_i64(memory_at_0, loc_6 + 28))
			break
		end
		store_i32_n8(memory_at_0, loc_3 + 36, 1)
		FUNC_LIST[434](loc_3, loc_0, 1)
		while true do
			if load_i32(memory_at_0, loc_0 + 24) ~= 61 then
				while true do
					FUNC_LIST[394](loc_0, 61, 2430)
					FUNC_LIST[381](add_i32(loc_3, 40), add_i32(loc_0, 4))
					if load_i32(memory_at_0, loc_3 + 40) ~= 61 then
						desired = 1
						break
					end
					FUNC_LIST[398](loc_0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[398](loc_0)
			break
		end
		loc_4 = load_i32(memory_at_0, loc_0 + 120)
		store_i64(memory_at_0, loc_3 + 48, load_i64(memory_at_0, loc_0 + 36))
		store_i64(memory_at_0, loc_3 + 40, load_i64(memory_at_0, loc_0 + 28))
		FUNC_LIST[435](add_i32(loc_3, 72), loc_0, 0, 0)
		loc_5 = load_i32(memory_at_0, loc_3 + 72)
		store_i32(memory_at_0, loc_0 + 120, loc_4)
		reg_0 = FUNC_LIST[436](loc_0, loc_5, add_i32(loc_3, 40))
		loc_4 = reg_0
		loc_0 = load_i32(memory_at_0, loc_0 + 88)
		store_i64(memory_at_0, loc_3 + 40, load_i64(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_3 + 48, load_i64(memory_at_0, loc_4 + 16))
		reg_0 = FUNC_LIST[353](loc_0, 72)
		reg_0 = FUNC_LIST[313](reg_0, add_i32(loc_3, 40), add_i32(loc_3, 16), add_i32(loc_3, 20), loc_3, add_i32(loc_3, 8), loc_4, loc_2)
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_3, 80)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[417] = --[[ Luau::Parser::parseContinue(Luau::Location const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		while true do
			if load_i32(memory_at_0, sub_i32(load_i32(memory_at_0, loc_0 + 156), 4)) == 0 then
				while true do
					store_i64(memory_at_0, loc_2 + 8, i64_ZERO)
					reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 28)
					reg_0 = FUNC_LIST[293](reg_0, loc_1)
					loc_4 = reg_0
					reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 4)
					loc_3 = reg_0
					store_i32(memory_at_0, loc_2 + 4, 1)
					store_i32(memory_at_0, loc_2, loc_3)
					store_i32(memory_at_0, loc_3, loc_4)
					reg_0 = FUNC_LIST[419](loc_0, loc_1, add_i32(loc_2, 8), loc_2, 3116, 0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 28)
			reg_0 = FUNC_LIST[293](reg_0, loc_1)
			break
		end
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[418] = --[[ Luau::Parser::parseDeclaration(Luau::Location const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = i64_ZERO
	local loc_23 = i64_ZERO
	local loc_24 = i64_ZERO
	local loc_25 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 176)
		GLOBAL_LIST[0].value = loc_2
		loc_5 = add_i32(loc_0, 4)
		while true do
			loc_4 = load_i32(memory_at_0, loc_0 + 24)
			if loc_4 == 297 then
				while true do
					FUNC_LIST[398](loc_0)
					while true do
						loc_4 = load_i32(memory_at_0, loc_0 + 24)
						loc_13 = band_i32(load_i32_u8(memory_at_0, 47700), (if loc_4 == 310 then 1 else 0))
						if loc_13 ~= 0 then
							while true do
								FUNC_LIST[398](loc_0)
								reg_0 = load_i32(memory_at_0, loc_0 + 24)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = loc_4
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_4 = reg_0
						if loc_4 == 281 then
							while true do
								loc_4 = load_i32(memory_at_0, loc_0 + 48)
								loc_3 = add_i32(loc_2, 152)
								loc_6 = add_i32(loc_0, 28)
								store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_6 + 8))
								store_i64(memory_at_0, loc_2 + 144, load_i64(memory_at_0, loc_0 + 28))
								FUNC_LIST[398](loc_0)
								loc_6 = add_i32(loc_2, 12)
								store_i64(memory_at_0, loc_6 + 8, load_i64(memory_at_0, loc_2 + 152))
								store_i64(memory_at_0, loc_2 + 12, load_i64(memory_at_0, loc_2 + 144))
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[427](loc_0, 4196)
						loc_4 = load_i32(memory_at_0, loc_0 + 132)
						loc_22 = load_i64(memory_at_0, loc_0 + 28)
						store_i64(memory_at_0, loc_2 + 20, loc_22)
						store_i64(memory_at_0, loc_2 + 12, loc_22)
						break
					end
					if desired then
						break
					end
					store_i32(memory_at_0, loc_2 + 8, loc_4)
					FUNC_LIST[434](add_i32(loc_2, 40), loc_0, 0)
					loc_4 = load_i32(memory_at_0, loc_0 + 24)
					store_i32(memory_at_0, loc_2 + 132, loc_4)
					store_i64(memory_at_0, loc_2 + 136, load_i64(memory_at_0, loc_0 + 28))
					while true do
						if loc_4 ~= 40 then
							while true do
								FUNC_LIST[394](loc_0, 40, 3382)
								FUNC_LIST[381](add_i32(loc_2, 144), loc_5)
								if load_i32(memory_at_0, loc_2 + 144) ~= 40 then
									desired = 3
									break
								end
								FUNC_LIST[398](loc_0)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[398](loc_0)
						break
					end
					if desired then
						break
					end
					store_i32(memory_at_0, loc_2 + 120, add_i32(loc_0, 292))
					loc_4 = load_i32(memory_at_0, loc_0 + 292)
					loc_3 = load_i32(memory_at_0, loc_0 + 296)
					store_i32(memory_at_0, loc_2 + 128, 0)
					store_i32(memory_at_0, loc_2 + 124, div_i32(sub_i32(loc_3, loc_4), 24))
					loc_8 = 1
					while true do
						while true do
							if load_i32(memory_at_0, loc_0 + 24) == 41 then
								break
							end
							FUNC_LIST[437](add_i32(loc_2, 144), loc_0, add_i32(loc_2, 120), 1)
							loc_12 = load_i32(memory_at_0, loc_2 + 164)
							loc_8 = (if load_i32_u8(memory_at_0, loc_2 + 144) == 0 then 1 else 0)
							if load_i32(memory_at_0, loc_0 + 24) == 41 then
								break
							end
							FUNC_LIST[431](loc_0, 41, add_i32(loc_2, 132), 0)
							reg_0 = FUNC_LIST[432](loc_0, 41, loc_2, 0)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						FUNC_LIST[398](loc_0)
						break
					end
					if desired then
						break
					end
					FUNC_LIST[438](add_i32(loc_2, 144), loc_0)
					loc_4 = 0
					store_i32(memory_at_0, loc_2 + 100, 0)
					store_i64(memory_at_0, loc_2 + 92, i64_ZERO)
					loc_3 = (if load_i32_u8(memory_at_0, loc_2 + 156) ~= 0 then add_i32(loc_2, 144) else add_i32(loc_2, 92))
					store_i32(memory_at_0, loc_2 + 112, load_i32(memory_at_0, loc_3 + 8))
					store_i64(memory_at_0, loc_2 + 104, load_i64(memory_at_0, loc_3))
					loc_22 = load_i64(memory_at_0, loc_0 + 36)
					store_i32(memory_at_0, loc_2 + 92, add_i32(loc_0, 328))
					loc_3 = load_i32(memory_at_0, loc_0 + 328)
					loc_6 = load_i32(memory_at_0, loc_0 + 332)
					store_i32(memory_at_0, loc_2 + 100, 0)
					store_i32(memory_at_0, loc_2 + 96, shr_i32(sub_i32(loc_6, loc_3), 2))
					store_i32(memory_at_0, loc_2 + 80, add_i32(loc_0, 376))
					loc_3 = load_i32(memory_at_0, loc_0 + 376)
					loc_6 = load_i32(memory_at_0, loc_0 + 380)
					store_i32(memory_at_0, loc_2 + 88, 0)
					store_i32(memory_at_0, loc_2 + 84, div_i32(sub_i32(loc_6, loc_3), 20))
					while true do
						if load_i32(memory_at_0, loc_2 + 128) ~= 0 then
							while true do
								loc_16 = loc_2
								loc_5 = add_i32(loc_16, 148)
								loc_17 = loc_5
								loc_7 = add_i32(loc_17, 8)
								while true do
									loc_3 = mul_i32(loc_4, 24)
									loc_6 = add_i32(add_i32(loc_3, add_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 120)), mul_i32(load_i32(memory_at_0, loc_2 + 124), 24))), 20)
									if load_i32(memory_at_0, loc_6) == 0 then
										while true do
											loc_23 = load_i64(memory_at_0, loc_1)
											store_i64(memory_at_0, loc_2 + 152, loc_22)
											store_i64(memory_at_0, loc_2 + 144, loc_23)
											store_i64(memory_at_0, loc_2 + 60, i64_ZERO)
											store_i64(memory_at_0, loc_2 + 72, i64_ZERO)
											reg_0 = FUNC_LIST[419](loc_0, add_i32(loc_2, 144), add_i32(loc_2, 60), add_i32(loc_2, 72), 5140, 0)
											desired = 3
											break
										end
										if desired then
											if desired == 5 then
												desired = nil
												continue
											end
											break
										end
									end
									FUNC_LIST[403](add_i32(loc_2, 92), loc_6)
									loc_3 = add_i32(loc_3, add_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 120)), mul_i32(load_i32(memory_at_0, loc_2 + 124), 24)))
									store_i32(memory_at_0, loc_2 + 144, load_i32(memory_at_0, loc_3))
									store_i64(memory_at_0, loc_17 + 8, load_i64(memory_at_0, loc_3 + 12))
									store_i64(memory_at_0, loc_16 + 148, load_i64(memory_at_0, loc_3 + 4))
									FUNC_LIST[439](add_i32(loc_2, 80), add_i32(loc_2, 144))
									loc_4 = add_i32(loc_4, 1)
									if loc_4 < load_i32(memory_at_0, loc_2 + 128) then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if bor_i32((if loc_12 ~= 0 then 1 else 0), loc_8) == 0 then
							while true do
								loc_23 = load_i64(memory_at_0, loc_1)
								store_i64(memory_at_0, loc_2 + 152, loc_22)
								store_i64(memory_at_0, loc_2 + 144, loc_23)
								store_i64(memory_at_0, loc_2 + 60, i64_ZERO)
								store_i64(memory_at_0, loc_2 + 72, i64_ZERO)
								reg_0 = FUNC_LIST[419](loc_0, add_i32(loc_2, 144), add_i32(loc_2, 60), add_i32(loc_2, 72), 5140, 0)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_14 = load_i32(memory_at_0, loc_0 + 88)
						loc_23 = load_i64(memory_at_0, loc_1)
						store_i64(memory_at_0, loc_2 + 152, loc_22)
						store_i64(memory_at_0, loc_2 + 144, loc_23)
						while true do
							loc_5 = load_i32(memory_at_0, loc_2 + 100)
							if loc_5 == 0 then
								while true do
									store_i64(memory_at_0, loc_2 + 60, i64_ZERO)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_4 = load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 92))
							loc_6 = load_i32(memory_at_0, loc_2 + 96)
							reg_0 = FUNC_LIST[353](loc_14, shl_i32(loc_5, 2))
							loc_3 = reg_0
							store_i32(memory_at_0, loc_2 + 64, loc_5)
							store_i32(memory_at_0, loc_2 + 60, loc_3)
							loc_11 = band_i32(loc_5, 3)
							loc_6 = add_i32(shl_i32(loc_6, 2), loc_4)
							loc_7 = 0
							loc_4 = 0
							if loc_5 >= 4 then
								while true do
									loc_9 = band_i32(loc_5, 4294967292)
									loc_1 = 0
									while true do
										loc_5 = shl_i32(loc_4, 2)
										store_i32(memory_at_0, add_i32(loc_5, loc_3), load_i32(memory_at_0, add_i32(loc_5, loc_6)))
										loc_8 = bor_i32(loc_5, 4)
										store_i32(memory_at_0, add_i32(loc_8, loc_3), load_i32(memory_at_0, add_i32(loc_6, loc_8)))
										loc_8 = bor_i32(loc_5, 8)
										store_i32(memory_at_0, add_i32(loc_8, loc_3), load_i32(memory_at_0, add_i32(loc_6, loc_8)))
										loc_5 = bor_i32(loc_5, 12)
										store_i32(memory_at_0, add_i32(loc_5, loc_3), load_i32(memory_at_0, add_i32(loc_5, loc_6)))
										loc_4 = add_i32(loc_4, 4)
										loc_1 = add_i32(loc_1, 4)
										if loc_9 ~= loc_1 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							if loc_11 == 0 then
								break
							end
							while true do
								loc_5 = shl_i32(loc_4, 2)
								store_i32(memory_at_0, add_i32(loc_5, loc_3), load_i32(memory_at_0, add_i32(loc_5, loc_6)))
								loc_4 = add_i32(loc_4, 1)
								loc_7 = add_i32(loc_7, 1)
								if loc_11 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_9 = add_i32(loc_2, 48)
						store_i32(memory_at_0, loc_2 + 68, loc_12)
						while true do
							loc_6 = load_i32(memory_at_0, loc_2 + 88)
							if loc_6 == 0 then
								while true do
									store_i64(memory_at_0, loc_2 + 72, i64_ZERO)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_3 = load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 80))
							loc_5 = load_i32(memory_at_0, loc_2 + 84)
							reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), mul_i32(loc_6, 20))
							loc_4 = reg_0
							store_i32(memory_at_0, loc_2 + 76, loc_6)
							store_i32(memory_at_0, loc_2 + 72, loc_4)
							loc_8 = band_i32(loc_6, 3)
							loc_3 = add_i32(mul_i32(loc_5, 20), loc_3)
							loc_7 = 0
							loc_0 = 0
							if loc_6 >= 4 then
								while true do
									loc_11 = band_i32(loc_6, 4294967292)
									loc_1 = 0
									while true do
										loc_5 = mul_i32(loc_0, 20)
										loc_6 = add_i32(loc_5, loc_4)
										loc_5 = add_i32(loc_3, loc_5)
										store_i64(memory_at_0, loc_6, load_i64(memory_at_0, loc_5))
										store_i32(memory_at_0, loc_6 + 16, load_i32(memory_at_0, loc_5 + 16))
										store_i64(memory_at_0, loc_6 + 8, load_i64(memory_at_0, loc_5 + 8))
										loc_5 = mul_i32(bor_i32(loc_0, 1), 20)
										loc_6 = add_i32(loc_5, loc_4)
										loc_5 = add_i32(loc_3, loc_5)
										store_i32(memory_at_0, loc_6 + 16, load_i32(memory_at_0, loc_5 + 16))
										store_i64(memory_at_0, loc_6 + 8, load_i64(memory_at_0, loc_5 + 8))
										store_i64(memory_at_0, loc_6, load_i64(memory_at_0, loc_5))
										loc_5 = mul_i32(bor_i32(loc_0, 2), 20)
										loc_6 = add_i32(loc_5, loc_4)
										loc_5 = add_i32(loc_3, loc_5)
										store_i32(memory_at_0, loc_6 + 16, load_i32(memory_at_0, loc_5 + 16))
										store_i64(memory_at_0, loc_6 + 8, load_i64(memory_at_0, loc_5 + 8))
										store_i64(memory_at_0, loc_6, load_i64(memory_at_0, loc_5))
										loc_5 = mul_i32(bor_i32(loc_0, 3), 20)
										loc_6 = add_i32(loc_5, loc_4)
										loc_5 = add_i32(loc_3, loc_5)
										store_i32(memory_at_0, loc_6 + 16, load_i32(memory_at_0, loc_5 + 16))
										store_i64(memory_at_0, loc_6 + 8, load_i64(memory_at_0, loc_5 + 8))
										store_i64(memory_at_0, loc_6, load_i64(memory_at_0, loc_5))
										loc_0 = add_i32(loc_0, 4)
										loc_1 = add_i32(loc_1, 4)
										if loc_11 ~= loc_1 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							if loc_8 == 0 then
								break
							end
							while true do
								loc_5 = mul_i32(loc_0, 20)
								loc_6 = add_i32(loc_5, loc_4)
								loc_5 = add_i32(loc_3, loc_5)
								store_i64(memory_at_0, loc_6, load_i64(memory_at_0, loc_5))
								store_i32(memory_at_0, loc_6 + 16, load_i32(memory_at_0, loc_5 + 16))
								store_i64(memory_at_0, loc_6 + 8, load_i64(memory_at_0, loc_5 + 8))
								loc_0 = add_i32(loc_0, 1)
								loc_7 = add_i32(loc_7, 1)
								if loc_8 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[353](loc_14, 84)
						reg_0 = FUNC_LIST[317](reg_0, add_i32(loc_2, 144), add_i32(loc_2, 8), add_i32(loc_2, 40), loc_9, add_i32(loc_2, 60), add_i32(loc_2, 72), add_i32(loc_2, 104), loc_13)
						break
					end
					if desired then
						break
					end
					loc_0 = reg_0
					loc_4 = load_i32(memory_at_0, loc_2 + 80)
					loc_3 = add_i32(load_i32(memory_at_0, loc_4), mul_i32(load_i32(memory_at_0, loc_2 + 84), 20))
					if loc_3 ~= load_i32(memory_at_0, loc_4 + 4) then
						while true do
							store_i32(memory_at_0, loc_4 + 4, loc_3)
							break
						end
						if desired then
							break
						end
					end
					loc_4 = load_i32(memory_at_0, loc_2 + 92)
					loc_3 = add_i32(load_i32(memory_at_0, loc_4), shl_i32(load_i32(memory_at_0, loc_2 + 96), 2))
					if loc_3 ~= load_i32(memory_at_0, loc_4 + 4) then
						while true do
							store_i32(memory_at_0, loc_4 + 4, loc_3)
							break
						end
						if desired then
							break
						end
					end
					loc_4 = load_i32(memory_at_0, loc_2 + 120)
					loc_3 = add_i32(load_i32(memory_at_0, loc_4), mul_i32(load_i32(memory_at_0, loc_2 + 124), 24))
					if loc_3 == load_i32(memory_at_0, loc_4 + 4) then
						desired = 1
						break
					end
					store_i32(memory_at_0, loc_4 + 4, loc_3)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				loc_3 = load_i32(memory_at_0, loc_0 + 48)
				if loc_3 == 0 then
					break
				end
				reg_0 = FUNC_LIST[544](loc_3, 2094)
				if reg_0 ~= 0 then
					break
				end
				FUNC_LIST[398](loc_0)
				loc_6 = add_i32(loc_0, 28)
				loc_25 = load_i64(memory_at_0, loc_0 + 28)
				while true do
					if load_i32(memory_at_0, loc_0 + 24) == 281 then
						while true do
							loc_4 = load_i32(memory_at_0, loc_0 + 48)
							loc_3 = add_i32(loc_2, 152)
							store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_6 + 8))
							store_i64(memory_at_0, loc_2 + 144, load_i64(memory_at_0, loc_6))
							FUNC_LIST[398](loc_0)
							store_i64(memory_at_0, loc_2 + 52, load_i64(memory_at_0, loc_2 + 152))
							store_i64(memory_at_0, loc_2 + 44, load_i64(memory_at_0, loc_2 + 144))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[427](loc_0, 4185)
					loc_4 = load_i32(memory_at_0, loc_0 + 132)
					loc_22 = load_i64(memory_at_0, loc_0 + 28)
					store_i64(memory_at_0, loc_2 + 52, loc_22)
					store_i64(memory_at_0, loc_2 + 44, loc_22)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_2 + 40, loc_4)
				while true do
					loc_4 = load_i32(memory_at_0, loc_0 + 48)
					if loc_4 == 0 then
						while true do
							reg_0 = 0
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_1 = FUNC_LIST[544](loc_4, 2418)
					reg_0 = 0
					if reg_1 ~= 0 then
						break
					end
					FUNC_LIST[398](loc_0)
					while true do
						if load_i32(memory_at_0, loc_0 + 24) == 281 then
							while true do
								loc_4 = load_i32(memory_at_0, loc_0 + 48)
								FUNC_LIST[398](loc_0)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[427](loc_0, 4180)
						loc_4 = load_i32(memory_at_0, loc_0 + 132)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_13 = band_i32(loc_4, 255)
					loc_24 = i64_from_u32(0, 1)
					reg_0 = band_i32(loc_4, 4294967040)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_14 = reg_0
				loc_10 = loc_0
				loc_4 = add_i32(loc_10, 24)
				store_i32(memory_at_0, loc_2 + 132, add_i32(loc_0, 352))
				loc_3 = load_i32(memory_at_0, loc_0 + 352)
				loc_7 = load_i32(memory_at_0, loc_0 + 356)
				store_i32(memory_at_0, loc_2 + 140, 0)
				store_i32(memory_at_0, loc_2 + 136, div_i32(sub_i32(loc_7, loc_3), 12))
				loc_11 = add_i32(loc_2, 12)
				while true do
					while true do
						while true do
							while true do
								loc_3 = load_i32(memory_at_0, loc_10 + 24)
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 2, 1, 1, 0, }
									end)()
								end
								temp = br_map[1][sub_i32(loc_3, 294)] or 1
								if temp < 1 then
									break
								elseif temp > 1 then
									desired = 4
									break
								else
									desired = 5
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[440](add_i32(loc_2, 144), loc_0)
							FUNC_LIST[441](add_i32(loc_2, 132), add_i32(loc_2, 144))
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													if loc_3 == 91 then
														while true do
															FUNC_LIST[381](add_i32(loc_2, 144), loc_5)
															if load_i32(memory_at_0, loc_2 + 144) == 278 then
																desired = 11
																break
															end
															FUNC_LIST[381](add_i32(loc_2, 8), loc_5)
															if load_i32(memory_at_0, loc_2 + 8) == 279 then
																desired = 11
																break
															end
															reg_0 = load_i32(memory_at_0, loc_10 + 24)
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													else
														while true do
															reg_0 = loc_3
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													loc_3 = reg_0
													if loc_3 == 281 then
														desired = 7
														break
													end
													if loc_3 ~= 91 then
														desired = 6
														break
													end
													loc_22 = load_i64(memory_at_0, loc_0 + 28)
													FUNC_LIST[398](loc_0)
													loc_3 = load_i32(memory_at_0, loc_0 + 120)
													if loc_9 == 0 then
														desired = 8
														break
													end
													loc_18 = loc_2
													loc_7 = add_i32(loc_18, 152)
													loc_19 = loc_6
													loc_1 = add_i32(loc_19, 8)
													store_i64(memory_at_0, loc_7, load_i64(memory_at_0, loc_1))
													store_i64(memory_at_0, loc_2 + 144, load_i64(memory_at_0, loc_6))
													FUNC_LIST[435](add_i32(loc_2, 8), loc_0, 0, 0)
													loc_8 = load_i32(memory_at_0, loc_2 + 8)
													store_i32(memory_at_0, loc_0 + 120, loc_3)
													reg_0 = FUNC_LIST[436](loc_0, loc_8, add_i32(loc_2, 144))
													loc_8 = reg_0
													store_i64(memory_at_0, loc_2 + 148, loc_22)
													store_i32(memory_at_0, loc_2 + 144, 91)
													if load_i32(memory_at_0, loc_0 + 24) == 93 then
														desired = 10
														break
													end
													FUNC_LIST[431](loc_0, 93, add_i32(loc_2, 144), 0)
													reg_0 = FUNC_LIST[432](loc_0, 93, loc_2, 0)
													desired = 9
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												store_i32(memory_at_0, loc_2 + 32, load_i32(memory_at_0, loc_10 + 48))
												store_i64(memory_at_0, loc_2 + 24, load_i64(memory_at_0, loc_10 + 40))
												store_i64(memory_at_0, loc_2 + 16, load_i64(memory_at_0, loc_10 + 32))
												store_i64(memory_at_0, loc_2 + 8, load_i64(memory_at_0, loc_10 + 24))
												FUNC_LIST[398](loc_0)
												FUNC_LIST[442](add_i32(loc_2, 120), loc_0)
												store_i32(memory_at_0, loc_2 + 144, load_i32(memory_at_0, loc_2 + 8))
												store_i64(memory_at_0, loc_2 + 148, load_i64(memory_at_0, loc_2 + 12))
												while true do
													if load_i32(memory_at_0, loc_0 + 24) ~= 93 then
														while true do
															FUNC_LIST[431](loc_0, 93, add_i32(loc_2, 144), 0)
															reg_0 = FUNC_LIST[432](loc_0, 93, loc_2, 0)
															desired = 11
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													FUNC_LIST[398](loc_0)
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												while true do
													if load_i32(memory_at_0, loc_10 + 24) ~= 58 then
														while true do
															FUNC_LIST[394](loc_0, 58, 3318)
															FUNC_LIST[381](add_i32(loc_2, 144), loc_5)
															if load_i32(memory_at_0, loc_2 + 144) ~= 58 then
																desired = 11
																break
															end
															FUNC_LIST[398](loc_0)
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													FUNC_LIST[398](loc_0)
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_3 = load_i32(memory_at_0, loc_0 + 120)
												store_i64(memory_at_0, loc_2 + 152, load_i64(memory_at_0, loc_6 + 8))
												store_i64(memory_at_0, loc_2 + 144, load_i64(memory_at_0, loc_6))
												FUNC_LIST[435](add_i32(loc_2, 104), loc_0, 0, 0)
												loc_7 = load_i32(memory_at_0, loc_2 + 104)
												store_i32(memory_at_0, loc_0 + 120, loc_3)
												reg_0 = FUNC_LIST[436](loc_0, loc_7, add_i32(loc_2, 144))
												loc_3 = reg_0
												while true do
													if load_i32_u8(memory_at_0, loc_2 + 128) == 0 then
														break
													end
													loc_1 = load_i32(memory_at_0, loc_2 + 120)
													loc_7 = load_i32(memory_at_0, loc_2 + 124)
													reg_0 = FUNC_LIST[570](loc_1, loc_7)
													if reg_0 < loc_7 then
														break
													end
													store_i32_n8(memory_at_0, loc_2 + 152, 0)
													store_i32(memory_at_0, loc_2 + 148, loc_3)
													store_i32(memory_at_0, loc_2 + 144, loc_1)
													FUNC_LIST[441](add_i32(loc_2, 132), add_i32(loc_2, 144))
													desired = 3
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												FUNC_LIST[401](loc_0, loc_11, 6640, 0)
												desired = 3
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											FUNC_LIST[398](loc_0)
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										while true do
											if load_i32(memory_at_0, loc_10 + 24) ~= 58 then
												while true do
													FUNC_LIST[394](loc_0, 58, 5078)
													FUNC_LIST[381](add_i32(loc_2, 144), loc_5)
													if load_i32(memory_at_0, loc_2 + 144) ~= 58 then
														desired = 9
														break
													end
													FUNC_LIST[398](loc_0)
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											FUNC_LIST[398](loc_0)
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_3 = load_i32(memory_at_0, loc_0 + 120)
										store_i64(memory_at_0, loc_18 + 152, load_i64(memory_at_0, loc_19 + 8))
										store_i64(memory_at_0, loc_2 + 144, load_i64(memory_at_0, loc_6))
										FUNC_LIST[435](add_i32(loc_2, 8), loc_0, 0, 0)
										loc_7 = load_i32(memory_at_0, loc_2 + 8)
										store_i32(memory_at_0, loc_0 + 120, loc_3)
										reg_0 = FUNC_LIST[436](loc_0, loc_7, add_i32(loc_2, 144))
										loc_7 = reg_0
										loc_23 = load_i64(memory_at_0, loc_7 + 16)
										reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 48)
										loc_3 = reg_0
										store_i32_n8(memory_at_0, loc_3 + 44, 0)
										store_i32_n8(memory_at_0, loc_3 + 28, 0)
										store_i32(memory_at_0, loc_3 + 24, 3)
										store_i64(memory_at_0, loc_3 + 16, loc_23)
										store_i64(memory_at_0, loc_3 + 8, loc_22)
										store_i32(memory_at_0, loc_3 + 4, loc_7)
										store_i32(memory_at_0, loc_3, loc_8)
										FUNC_LIST[401](loc_0, add_i32(loc_3, 8), 2859, 0)
										desired = 3
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_20 = loc_2
									loc_7 = add_i32(loc_20, 152)
									loc_21 = loc_6
									loc_1 = add_i32(loc_21, 8)
									store_i64(memory_at_0, loc_7, load_i64(memory_at_0, loc_1))
									store_i64(memory_at_0, loc_2 + 144, load_i64(memory_at_0, loc_6))
									FUNC_LIST[435](add_i32(loc_2, 8), loc_0, 0, 0)
									loc_8 = load_i32(memory_at_0, loc_2 + 8)
									store_i32(memory_at_0, loc_0 + 120, loc_3)
									reg_0 = FUNC_LIST[436](loc_0, loc_8, add_i32(loc_2, 144))
									loc_3 = reg_0
									store_i64(memory_at_0, loc_2 + 148, loc_22)
									store_i32(memory_at_0, loc_2 + 144, 91)
									while true do
										if load_i32(memory_at_0, loc_0 + 24) ~= 93 then
											while true do
												FUNC_LIST[431](loc_0, 93, add_i32(loc_2, 144), 0)
												reg_0 = FUNC_LIST[432](loc_0, 93, loc_2, 0)
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										FUNC_LIST[398](loc_0)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									while true do
										if load_i32(memory_at_0, loc_10 + 24) ~= 58 then
											while true do
												FUNC_LIST[394](loc_0, 58, 5078)
												FUNC_LIST[381](add_i32(loc_2, 144), loc_5)
												if load_i32(memory_at_0, loc_2 + 144) ~= 58 then
													desired = 8
													break
												end
												FUNC_LIST[398](loc_0)
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										FUNC_LIST[398](loc_0)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_8 = load_i32(memory_at_0, loc_0 + 120)
									store_i64(memory_at_0, loc_20 + 152, load_i64(memory_at_0, loc_21 + 8))
									store_i64(memory_at_0, loc_2 + 144, load_i64(memory_at_0, loc_6))
									FUNC_LIST[435](add_i32(loc_2, 8), loc_0, 0, 0)
									loc_7 = load_i32(memory_at_0, loc_2 + 8)
									store_i32(memory_at_0, loc_0 + 120, loc_8)
									reg_0 = FUNC_LIST[436](loc_0, loc_7, add_i32(loc_2, 144))
									loc_7 = reg_0
									loc_23 = load_i64(memory_at_0, loc_7 + 16)
									reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 48)
									loc_9 = reg_0
									store_i32_n8(memory_at_0, loc_9 + 44, 0)
									store_i32_n8(memory_at_0, loc_9 + 28, 0)
									store_i32(memory_at_0, loc_9 + 24, 3)
									store_i64(memory_at_0, loc_9 + 16, loc_23)
									store_i64(memory_at_0, loc_9 + 8, loc_22)
									store_i32(memory_at_0, loc_9 + 4, loc_7)
									store_i32(memory_at_0, loc_9, loc_3)
									desired = 3
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_3 = load_i32(memory_at_0, loc_0 + 48)
								FUNC_LIST[398](loc_0)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[427](loc_0, 4166)
							loc_3 = load_i32(memory_at_0, loc_0 + 132)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if load_i32(memory_at_0, loc_10 + 24) ~= 58 then
								while true do
									FUNC_LIST[394](loc_0, 58, 3318)
									FUNC_LIST[381](add_i32(loc_2, 144), loc_5)
									if load_i32(memory_at_0, loc_2 + 144) ~= 58 then
										desired = 5
										break
									end
									FUNC_LIST[398](loc_0)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[398](loc_0)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_7 = load_i32(memory_at_0, loc_0 + 120)
						store_i64(memory_at_0, loc_2 + 152, load_i64(memory_at_0, loc_6 + 8))
						store_i64(memory_at_0, loc_2 + 144, load_i64(memory_at_0, loc_6))
						FUNC_LIST[435](add_i32(loc_2, 8), loc_0, 0, 0)
						loc_1 = load_i32(memory_at_0, loc_2 + 8)
						store_i32(memory_at_0, loc_0 + 120, loc_7)
						reg_0 = FUNC_LIST[436](loc_0, loc_1, add_i32(loc_2, 144))
						loc_7 = reg_0
						store_i32_n8(memory_at_0, loc_2 + 152, 0)
						store_i32(memory_at_0, loc_2 + 148, loc_7)
						store_i32(memory_at_0, loc_2 + 144, loc_3)
						FUNC_LIST[441](add_i32(loc_2, 132), add_i32(loc_2, 144))
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_22 = load_i64(memory_at_0, loc_0 + 36)
				FUNC_LIST[398](loc_0)
				loc_12 = load_i32(memory_at_0, loc_0 + 88)
				store_i64(memory_at_0, loc_2 + 152, loc_22)
				store_i64(memory_at_0, loc_2 + 144, loc_25)
				while true do
					loc_5 = load_i32(memory_at_0, loc_2 + 140)
					if loc_5 == 0 then
						while true do
							store_i64(memory_at_0, loc_2 + 120, i64_ZERO)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_0 = load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 132))
					loc_3 = load_i32(memory_at_0, loc_2 + 136)
					reg_0 = FUNC_LIST[353](loc_12, mul_i32(loc_5, 12))
					loc_4 = reg_0
					store_i32(memory_at_0, loc_2 + 124, loc_5)
					store_i32(memory_at_0, loc_2 + 120, loc_4)
					loc_8 = band_i32(loc_5, 3)
					loc_3 = add_i32(mul_i32(loc_3, 12), loc_0)
					loc_6 = 0
					loc_0 = 0
					if loc_5 >= 4 then
						while true do
							loc_11 = band_i32(loc_5, 4294967292)
							loc_5 = 0
							while true do
								loc_7 = mul_i32(loc_0, 12)
								loc_1 = add_i32(loc_7, loc_4)
								loc_7 = add_i32(loc_3, loc_7)
								store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_7))
								store_i32(memory_at_0, loc_1 + 8, load_i32(memory_at_0, loc_7 + 8))
								loc_7 = mul_i32(bor_i32(loc_0, 1), 12)
								loc_1 = add_i32(loc_7, loc_4)
								loc_7 = add_i32(loc_3, loc_7)
								store_i32(memory_at_0, loc_1 + 8, load_i32(memory_at_0, loc_7 + 8))
								store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_7))
								loc_7 = mul_i32(bor_i32(loc_0, 2), 12)
								loc_1 = add_i32(loc_7, loc_4)
								loc_7 = add_i32(loc_3, loc_7)
								store_i32(memory_at_0, loc_1 + 8, load_i32(memory_at_0, loc_7 + 8))
								store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_7))
								loc_7 = mul_i32(bor_i32(loc_0, 3), 12)
								loc_1 = add_i32(loc_7, loc_4)
								loc_7 = add_i32(loc_3, loc_7)
								store_i32(memory_at_0, loc_1 + 8, load_i32(memory_at_0, loc_7 + 8))
								store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_7))
								loc_0 = add_i32(loc_0, 4)
								loc_5 = add_i32(loc_5, 4)
								if loc_11 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_8 == 0 then
						break
					end
					while true do
						loc_5 = mul_i32(loc_0, 12)
						loc_7 = add_i32(loc_5, loc_4)
						loc_5 = add_i32(loc_3, loc_5)
						store_i64(memory_at_0, loc_7, load_i64(memory_at_0, loc_5))
						store_i32(memory_at_0, loc_7 + 8, load_i32(memory_at_0, loc_5 + 8))
						loc_0 = add_i32(loc_0, 1)
						loc_6 = add_i32(loc_6, 1)
						if loc_8 ~= loc_6 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[353](loc_12, 52)
				loc_0 = reg_0
				loc_22 = bor_i64(extend_i64_u32(bor_i32(loc_13, loc_14)), loc_24)
				store_i64(memory_at_0, loc_2, loc_22)
				store_i64(memory_at_0, loc_2 + 8, loc_22)
				reg_0 = FUNC_LIST[319](loc_0, add_i32(loc_2, 144), add_i32(loc_2, 40), loc_2, add_i32(loc_2, 120), loc_9)
				loc_0 = reg_0
				loc_4 = load_i32(memory_at_0, loc_2 + 132)
				loc_3 = add_i32(load_i32(memory_at_0, loc_4), mul_i32(load_i32(memory_at_0, loc_2 + 136), 12))
				if loc_3 == load_i32(memory_at_0, loc_4 + 4) then
					desired = 1
					break
				end
				store_i32(memory_at_0, loc_4 + 4, loc_3)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_4 == 281 then
				while true do
					loc_4 = add_i32(loc_2, 152)
					store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_0 + 36))
					store_i64(memory_at_0, loc_2 + 144, load_i64(memory_at_0, loc_0 + 28))
					FUNC_LIST[398](loc_0)
					store_i64(memory_at_0, loc_2 + 20, load_i64(memory_at_0, loc_2 + 152))
					store_i32(memory_at_0, loc_2 + 8, loc_3)
					store_i64(memory_at_0, loc_2 + 12, load_i64(memory_at_0, loc_2 + 144))
					store_i32_n8(memory_at_0, loc_2 + 28, 1)
					loc_15 = loc_0
					loc_4 = add_i32(loc_15, 28)
					while true do
						if load_i32(memory_at_0, loc_0 + 24) ~= 58 then
							while true do
								FUNC_LIST[394](loc_0, 58, 3410)
								FUNC_LIST[381](add_i32(loc_2, 144), loc_5)
								if load_i32(memory_at_0, loc_2 + 144) ~= 58 then
									desired = 3
									break
								end
								FUNC_LIST[398](loc_0)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[398](loc_0)
						break
					end
					if desired then
						break
					end
					loc_3 = load_i32(memory_at_0, loc_0 + 120)
					store_i64(memory_at_0, loc_2 + 152, load_i64(memory_at_0, loc_15 + 36))
					store_i64(memory_at_0, loc_2 + 144, load_i64(memory_at_0, loc_15 + 28))
					FUNC_LIST[435](add_i32(loc_2, 40), loc_0, 0, 1)
					loc_4 = load_i32(memory_at_0, loc_2 + 40)
					store_i32(memory_at_0, loc_0 + 120, loc_3)
					reg_0 = FUNC_LIST[436](loc_0, loc_4, add_i32(loc_2, 144))
					loc_4 = reg_0
					loc_0 = load_i32(memory_at_0, loc_0 + 88)
					store_i64(memory_at_0, loc_2 + 144, load_i64(memory_at_0, loc_1))
					store_i64(memory_at_0, loc_2 + 152, load_i64(memory_at_0, loc_4 + 16))
					reg_0 = FUNC_LIST[353](loc_0, 36)
					reg_0 = FUNC_LIST[315](reg_0, add_i32(loc_2, 144), add_i32(loc_2, 8), loc_4)
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[427](loc_0, 4303)
			store_i64(memory_at_0, loc_2 + 144, i64_ZERO)
			store_i64(memory_at_0, loc_2 + 8, i64_ZERO)
			reg_0 = FUNC_LIST[419](loc_0, loc_1, add_i32(loc_2, 144), add_i32(loc_2, 8), 7445, 0)
			loc_0 = reg_0
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 176)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[419] = --[[ Luau::Parser::reportStatError(Luau::Location const&, Luau::AstArray<Luau::AstExpr*> const&, Luau::AstArray<Luau::AstStat*> const&, char const*, ...) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local reg_0
	while true do
		loc_6 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		store_i32(memory_at_0, loc_6 + 12, loc_5)
		FUNC_LIST[443](loc_0, loc_1, loc_4, loc_5)
		loc_5 = load_i32(memory_at_0, loc_0 + 196)
		loc_4 = load_i32(memory_at_0, loc_0 + 200)
		reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 48)
		reg_0 = FUNC_LIST[321](reg_0, loc_1, loc_2, loc_3, sub_i32(shr_i32(sub_i32(loc_4, loc_5), 5), 1))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_6, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[420] = --[[ Luau::Parser::parseExpr(unsigned int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		loc_9 = load_i32(memory_at_0, loc_0 + 120)
		loc_4 = add_i32(loc_9, 1)
		store_i32(memory_at_0, loc_0 + 120, loc_4)
		while true do
			while true do
				if loc_4 <= load_i32(memory_at_0, 47712) then
					while true do
						loc_7 = add_i32(loc_0, 28)
						loc_10 = load_i64(memory_at_0, loc_0 + 28)
						while true do
							while true do
								while true do
									while true do
										while true do
											loc_4 = load_i32(memory_at_0, loc_0 + 24)
											if not br_map[1] then
												br_map[1] = (function()
													return { [0] = 2, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, }
												end)()
											end
											temp = br_map[1][sub_i32(loc_4, 33)] or 3
											if temp < 2 then
												if temp < 1 then
													break
												else
													desired = 7
													break
												end
											elseif temp > 2 then
												if temp < 4 then
													desired = 5
													break
												else
													desired = 4
													break
												end
											else
												desired = 6
												break
											end
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										loc_2 = 1
										desired = 2
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									loc_2 = 2
									desired = 2
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								store_i64(memory_at_0, loc_3 + 40, load_i64(memory_at_0, loc_7 + 8))
								store_i64(memory_at_0, loc_3 + 32, load_i64(memory_at_0, loc_7))
								FUNC_LIST[401](loc_0, add_i32(loc_3, 32), 6191, 0)
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							if loc_4 == 302 then
								desired = 2
								break
							end
							break
						end
						if desired then
							break
						end
						reg_0 = FUNC_LIST[444](loc_0)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				store_i32(memory_at_0, loc_3, 3451)
				FUNC_LIST[390](add_i32(loc_0, 28), 4604, loc_3)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[398](loc_0)
			reg_0 = FUNC_LIST[420](loc_0, 8)
			loc_4 = reg_0
			loc_5 = load_i32(memory_at_0, loc_0 + 88)
			store_i64(memory_at_0, loc_3 + 32, loc_10)
			store_i64(memory_at_0, loc_3 + 40, load_i64(memory_at_0, loc_4 + 16))
			reg_0 = FUNC_LIST[353](loc_5, 32)
			reg_0 = FUNC_LIST[271](reg_0, add_i32(loc_3, 32), loc_2, loc_4)
			break
		end
		loc_8 = reg_0
		loc_4 = 0
		loc_2 = 0
		loc_5 = 1
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				loc_6 = load_i32(memory_at_0, loc_0 + 24)
																				if not br_map[2] then
																					br_map[2] = (function()
																						return { [0] = 5, 16, 16, 16, 16, 2, 17, 16, 1, 16, 3, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 10, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 6, }
																					end)()
																				end
																				temp = br_map[2][sub_i32(loc_6, 37)] or 0
																				if temp < 6 then
																					if temp < 2 then
																						if temp < 1 then
																							break
																						else
																							desired = 17
																							break
																						end
																					elseif temp > 2 then
																						if temp < 5 then
																							desired = 15
																							break
																						else
																							desired = 13
																							break
																						end
																					else
																						desired = 16
																						break
																					end
																				elseif temp > 6 then
																					if temp < 16 then
																						if temp < 12 then
																							desired = 8
																							break
																						else
																							desired = 6
																							break
																						end
																					elseif temp > 16 then
																						desired = 1
																						break
																					else
																						desired = 2
																						break
																					end
																				else
																					desired = 12
																					break
																				end
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			if not br_map[3] then
																				br_map[3] = (function()
																					return { [0] = 8, 10, 12, 7, 6, 15, 15, 15, 3, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, }
																				end)()
																			end
																			temp = br_map[3][sub_i32(loc_6, 257)] or 15
																			if temp < 10 then
																				if temp < 7 then
																					if temp < 6 then
																						desired = 14
																						break
																					else
																						desired = 11
																						break
																					end
																				elseif temp > 7 then
																					desired = 9
																					break
																				else
																					desired = 10
																					break
																				end
																			elseif temp > 10 then
																				if temp < 14 then
																					if temp < 13 then
																						desired = 5
																						break
																					else
																						desired = 4
																						break
																					end
																				elseif temp > 14 then
																					desired = 2
																					break
																				else
																					desired = 3
																					break
																				end
																			else
																				desired = 7
																				break
																			end
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		loc_2 = 1
																		desired = 1
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_2 = 2
																	desired = 1
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																loc_2 = 3
																desired = 1
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_2 = 4
															desired = 1
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_2 = 5
														desired = 1
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_2 = 6
													desired = 1
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_2 = 7
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_2 = 8
											desired = 1
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_2 = 9
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_2 = 10
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_2 = 11
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_2 = 12
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = 13
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = 14
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = 15
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[445](add_i32(loc_3, 32), loc_0, 30208, loc_1)
			loc_5 = load_i32_u8(memory_at_0, loc_3 + 36)
			loc_4 = load_i32(memory_at_0, loc_3 + 32)
			loc_2 = loc_4
			break
		end
		while true do
			while true do
				if band_i32(loc_5, 255) == 0 then
					desired = 1
					break
				end
				loc_2 = bor_i32(band_i32(loc_2, 255), band_i32(loc_4, 4294967040))
				if loc_1 >= load_i32_u8(memory_at_0, add_i32(shl_i32(loc_2, 1), 30208)) then
					desired = 1
					break
				end
				FUNC_LIST[398](loc_0)
				loc_5 = 1
				reg_0 = FUNC_LIST[420](loc_0, load_i32_u8(memory_at_0, add_i32(shl_i32(loc_2, 1), 30209)))
				loc_4 = reg_0
				loc_6 = load_i32(memory_at_0, loc_0 + 88)
				store_i64(memory_at_0, loc_3 + 32, loc_10)
				store_i64(memory_at_0, loc_3 + 40, load_i64(memory_at_0, loc_4 + 16))
				reg_0 = FUNC_LIST[353](loc_6, 36)
				reg_0 = FUNC_LIST[273](reg_0, add_i32(loc_3, 32), loc_2, loc_8, loc_4)
				loc_8 = reg_0
				loc_4 = 0
				loc_2 = 0
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						loc_6 = load_i32(memory_at_0, loc_0 + 24)
																						if not br_map[4] then
																							br_map[4] = (function()
																								return { [0] = 5, 16, 16, 16, 16, 2, 17, 16, 1, 16, 3, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 10, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 6, }
																							end)()
																						end
																						temp = br_map[4][sub_i32(loc_6, 37)] or 0
																						if temp < 6 then
																							if temp < 2 then
																								if temp < 1 then
																									break
																								else
																									desired = 19
																									break
																								end
																							elseif temp > 2 then
																								if temp < 5 then
																									desired = 17
																									break
																								else
																									desired = 15
																									break
																								end
																							else
																								desired = 18
																								break
																							end
																						elseif temp > 6 then
																							if temp < 16 then
																								if temp < 12 then
																									desired = 10
																									break
																								else
																									desired = 8
																									break
																								end
																							elseif temp > 16 then
																								desired = 3
																								break
																							else
																								desired = 4
																								break
																							end
																						else
																							desired = 14
																							break
																						end
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					if not br_map[5] then
																						br_map[5] = (function()
																							return { [0] = 8, 10, 12, 7, 6, 15, 15, 15, 3, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, }
																						end)()
																					end
																					temp = br_map[5][sub_i32(loc_6, 257)] or 15
																					if temp < 10 then
																						if temp < 7 then
																							if temp < 6 then
																								desired = 16
																								break
																							else
																								desired = 13
																								break
																							end
																						elseif temp > 7 then
																							desired = 11
																							break
																						else
																							desired = 12
																							break
																						end
																					elseif temp > 10 then
																						if temp < 14 then
																							if temp < 13 then
																								desired = 7
																								break
																							else
																								desired = 6
																								break
																							end
																						elseif temp > 14 then
																							desired = 4
																							break
																						else
																							desired = 5
																							break
																						end
																					else
																						desired = 9
																						break
																					end
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				loc_2 = 1
																				desired = 3
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			loc_2 = 2
																			desired = 3
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		loc_2 = 3
																		desired = 3
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_2 = 4
																	desired = 3
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																loc_2 = 5
																desired = 3
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_2 = 6
															desired = 3
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_2 = 7
														desired = 3
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_2 = 8
													desired = 3
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_2 = 9
												desired = 3
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_2 = 10
											desired = 3
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_2 = 11
										desired = 3
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_2 = 12
									desired = 3
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_2 = 13
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_2 = 14
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = 15
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[445](add_i32(loc_3, 32), loc_0, 30208, loc_1)
					loc_5 = load_i32_u8(memory_at_0, loc_3 + 36)
					loc_4 = load_i32(memory_at_0, loc_3 + 32)
					loc_2 = loc_4
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_6 = add_i32(load_i32(memory_at_0, loc_0 + 120), 1)
				store_i32(memory_at_0, loc_0 + 120, loc_6)
				if load_i32(memory_at_0, 47712) >= loc_6 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_3 + 16, 3451)
			FUNC_LIST[390](loc_7, 4604, add_i32(loc_3, 16))
			error("out of code bounds")
		end
		store_i32(memory_at_0, loc_0 + 120, loc_9)
		GLOBAL_LIST[0].value = add_i32(loc_3, 48)
		reg_0 = loc_8
		break
	end
	return reg_0
end
FUNC_LIST[421] = --[[ Luau::Parser::parseBinding() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = add_i32(loc_1, 28)
		while true do
			if load_i32(memory_at_0, loc_1 + 24) == 281 then
				while true do
					loc_4 = load_i32(memory_at_0, loc_1 + 48)
					store_i64(memory_at_0, loc_2 + 16, load_i64(memory_at_0, loc_3 + 8))
					store_i64(memory_at_0, loc_2 + 8, load_i64(memory_at_0, loc_3))
					FUNC_LIST[398](loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[427](loc_1, 4310)
			loc_4 = load_i32(memory_at_0, loc_1 + 132)
			store_i64(memory_at_0, loc_2 + 16, load_i64(memory_at_0, loc_3 + 8))
			store_i64(memory_at_0, loc_2 + 8, load_i64(memory_at_0, loc_3))
			break
		end
		loc_3 = 0
		if load_i32(memory_at_0, loc_1 + 24) == 58 then
			while true do
				FUNC_LIST[398](loc_1)
				loc_3 = load_i32(memory_at_0, loc_1 + 120)
				store_i64(memory_at_0, loc_2 + 40, load_i64(memory_at_0, loc_1 + 36))
				store_i64(memory_at_0, loc_2 + 32, load_i64(memory_at_0, loc_1 + 28))
				FUNC_LIST[435](add_i32(loc_2, 24), loc_1, 0, 0)
				loc_5 = load_i32(memory_at_0, loc_2 + 24)
				store_i32(memory_at_0, loc_1 + 120, loc_3)
				reg_0 = FUNC_LIST[436](loc_1, loc_5, add_i32(loc_2, 32))
				break
			end
		else
			while true do
				reg_0 = loc_3
				break
			end
		end
		loc_3 = reg_0
		store_i32(memory_at_0, loc_0, loc_4)
		store_i64(memory_at_0, loc_0 + 4, load_i64(memory_at_0, loc_2 + 8))
		store_i64(memory_at_0, loc_0 + 12, load_i64(memory_at_0, loc_2 + 16))
		store_i32(memory_at_0, loc_0 + 20, loc_3)
		GLOBAL_LIST[0].value = add_i32(loc_2, 48)
		break
	end
end
FUNC_LIST[422] = --[[ Luau::Parser::pushLocal(Luau::Parser::Binding const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[5](add_i32(loc_0, 164), loc_1)
		loc_6 = reg_0
		loc_7 = load_i32(memory_at_0, loc_0 + 152)
		loc_3 = load_i32(memory_at_0, loc_0 + 156)
		reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 36)
		loc_2 = reg_0
		loc_4 = load_i32(memory_at_0, loc_6)
		loc_5 = load_i32(memory_at_0, sub_i32(loc_3, 4))
		loc_8 = load_i32(memory_at_0, loc_1 + 20)
		store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_1))
		store_i64(memory_at_0, loc_2 + 4, load_i64(memory_at_0, loc_1 + 4))
		store_i64(memory_at_0, loc_2 + 12, load_i64(memory_at_0, loc_1 + 12))
		store_i32(memory_at_0, loc_2 + 32, loc_8)
		store_i32(memory_at_0, loc_2 + 28, loc_5)
		store_i32(memory_at_0, loc_2 + 24, sub_i32(shr_i32(sub_i32(loc_3, loc_7), 3), 1))
		store_i32(memory_at_0, loc_2 + 20, loc_4)
		store_i32(memory_at_0, loc_6, loc_2)
		loc_1 = load_i32(memory_at_0, loc_0 + 188)
		if loc_1 ~= load_i32(memory_at_0, loc_0 + 192) then
			while true do
				store_i32(memory_at_0, loc_1, loc_2)
				store_i32(memory_at_0, loc_0 + 188, add_i32(loc_1, 4))
				reg_0 = load_i32(memory_at_0, loc_6)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_9 = add_i32(loc_0, 184)
			loc_7 = load_i32(memory_at_0, loc_9)
			loc_3 = sub_i32(loc_1, loc_7)
			loc_8 = shr_i32(loc_3, 2)
			loc_4 = add_i32(loc_8, 1)
			if loc_4 < 1073741824 then
				while true do
					loc_5 = shr_i32(loc_3, 1)
					loc_4 = (if loc_3 >= 2147483644 then 1073741823 else (if loc_4 < loc_5 then loc_5 else loc_4))
					if loc_4 ~= 0 then
						while true do
							if loc_4 >= 1073741824 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](shl_i32(loc_4, 2))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							break
						end
					end
					loc_5 = reg_0
					loc_3 = add_i32(loc_5, shl_i32(loc_8, 2))
					store_i32(memory_at_0, loc_3, loc_2)
					loc_2 = add_i32(shl_i32(loc_4, 2), loc_5)
					loc_4 = add_i32(loc_3, 4)
					if loc_1 ~= loc_7 then
						while true do
							while true do
								loc_3 = sub_i32(loc_3, 4)
								loc_1 = sub_i32(loc_1, 4)
								store_i32(memory_at_0, loc_3, load_i32(memory_at_0, loc_1))
								if loc_1 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = load_i32(memory_at_0, loc_9)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_1
							break
						end
						if desired then
							break
						end
					end
					loc_1 = reg_0
					store_i32(memory_at_0, loc_0 + 192, loc_2)
					store_i32(memory_at_0, loc_0 + 188, loc_4)
					store_i32(memory_at_0, loc_0 + 184, loc_3)
					if loc_1 ~= 0 then
						while true do
							FUNC_LIST[609](loc_1)
							break
						end
						if desired then
							break
						end
					end
					reg_0 = load_i32(memory_at_0, loc_6)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[40](loc_9)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[423] = --[[ Luau::TempVector<Luau::Parser::Binding>::push_back(Luau::Parser::Binding const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_4 = load_i32(memory_at_0, loc_0)
					loc_2 = load_i32(memory_at_0, loc_4 + 4)
					if loc_2 ~= load_i32(memory_at_0, loc_4 + 8) then
						while true do
							store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_1))
							store_i64(memory_at_0, loc_2 + 16, load_i64(memory_at_0, loc_1 + 16))
							store_i64(memory_at_0, loc_2 + 8, load_i64(memory_at_0, loc_1 + 8))
							store_i32(memory_at_0, loc_4 + 4, add_i32(loc_2, 24))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = load_i32(memory_at_0, loc_4)
					loc_3 = div_i32(sub_i32(loc_2, loc_7), 24)
					loc_5 = add_i32(loc_3, 1)
					if loc_5 >= 178956971 then
						desired = 2
						break
					end
					loc_6 = shl_i32(loc_3, 1)
					loc_5 = (if loc_3 >= 89478485 then 178956970 else (if loc_5 < loc_6 then loc_6 else loc_5))
					if loc_5 ~= 0 then
						while true do
							if loc_5 >= 178956971 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](mul_i32(loc_5, 24))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = reg_0
					loc_3 = add_i32(loc_6, mul_i32(loc_3, 24))
					store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_1))
					store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_1 + 16))
					store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_1 + 8))
					loc_1 = add_i32(mul_i32(loc_5, 24), loc_6)
					loc_5 = add_i32(loc_3, 24)
					if loc_2 ~= loc_7 then
						while true do
							while true do
								loc_3 = sub_i32(loc_3, 24)
								loc_2 = sub_i32(loc_2, 24)
								store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2))
								store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_2 + 16))
								store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_2 + 8))
								if loc_2 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = load_i32(memory_at_0, loc_4)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = reg_0
					store_i32(memory_at_0, loc_4 + 8, loc_1)
					store_i32(memory_at_0, loc_4 + 4, loc_5)
					store_i32(memory_at_0, loc_4, loc_3)
					if loc_2 == 0 then
						break
					end
					FUNC_LIST[609](loc_2)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_4)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[424] = --[[ Luau::Parser::parseExprList(Luau::TempVector<Luau::AstExpr*>&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		reg_1 = FUNC_LIST[420](loc_0, 0)
		store_i32(memory_at_0, loc_2 + 12, reg_1)
		FUNC_LIST[403](loc_1, add_i32(loc_2, 12))
		while true do
			if load_i32(memory_at_0, loc_0 + 24) ~= 44 then
				break
			end
			while true do
				FUNC_LIST[398](loc_0)
				if load_i32(memory_at_0, loc_0 + 24) == 41 then
					while true do
						FUNC_LIST[401](loc_0, add_i32(loc_0, 28), 5305, 0)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				reg_1 = FUNC_LIST[420](loc_0, 0)
				store_i32(memory_at_0, loc_2 + 8, reg_1)
				FUNC_LIST[403](loc_1, add_i32(loc_2, 8))
				if load_i32(memory_at_0, loc_0 + 24) == 44 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		break
	end
end
FUNC_LIST[425] = --[[ Luau::Parser::parseFunctionName(Luau::Location, bool&, Luau::AstName&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = i64_ZERO
	local loc_11 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_4
		if load_i32(memory_at_0, loc_0 + 24) == 281 then
			while true do
				store_i32(memory_at_0, loc_3, load_i32(memory_at_0, loc_0 + 48))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = FUNC_LIST[449](loc_0, 4203)
		loc_6 = reg_0
		loc_9 = load_i32(memory_at_0, loc_0 + 120)
		while true do
			loc_5 = load_i32(memory_at_0, loc_0 + 24)
			if loc_5 == 46 then
				while true do
					loc_7 = add_i32(loc_0, 28)
					loc_11 = load_i64(memory_at_0, loc_1)
					loc_8 = add_i32(loc_4, 8)
					while true do
						store_i64(memory_at_0, loc_4 + 24, load_i64(memory_at_0, loc_0 + 28))
						FUNC_LIST[398](loc_0)
						while true do
							if load_i32(memory_at_0, loc_0 + 24) == 281 then
								while true do
									loc_5 = load_i32(memory_at_0, loc_0 + 48)
									store_i64(memory_at_0, loc_4 + 40, load_i64(memory_at_0, loc_7 + 8))
									store_i64(memory_at_0, loc_4 + 32, load_i64(memory_at_0, loc_7))
									FUNC_LIST[398](loc_0)
									store_i64(memory_at_0, loc_8 + 8, load_i64(memory_at_0, loc_4 + 40))
									store_i64(memory_at_0, loc_8, load_i64(memory_at_0, loc_4 + 32))
									loc_10 = load_i64(memory_at_0, loc_4 + 16)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[427](loc_0, 4336)
							loc_5 = load_i32(memory_at_0, loc_0 + 132)
							loc_10 = load_i64(memory_at_0, loc_0 + 28)
							store_i64(memory_at_0, loc_4 + 16, loc_10)
							store_i64(memory_at_0, loc_4 + 8, loc_10)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						store_i32(memory_at_0, loc_4 + 4, loc_5)
						store_i32(memory_at_0, loc_3, loc_5)
						loc_5 = load_i32(memory_at_0, loc_0 + 88)
						store_i64(memory_at_0, loc_4 + 40, loc_10)
						store_i64(memory_at_0, loc_4 + 32, loc_11)
						reg_0 = FUNC_LIST[353](loc_5, 60)
						reg_0 = FUNC_LIST[263](reg_0, add_i32(loc_4, 32), loc_6, add_i32(loc_4, 4), loc_8, add_i32(loc_4, 24), 46)
						loc_6 = reg_0
						loc_5 = add_i32(load_i32(memory_at_0, loc_0 + 120), 1)
						store_i32(memory_at_0, loc_0 + 120, loc_5)
						if load_i32(memory_at_0, 47712) < loc_5 then
							desired = 1
							break
						end
						loc_5 = load_i32(memory_at_0, loc_0 + 24)
						if loc_5 == 46 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			store_i32(memory_at_0, loc_0 + 120, loc_9)
			if loc_5 == 58 then
				while true do
					store_i64(memory_at_0, loc_4 + 24, load_i64(memory_at_0, loc_0 + 28))
					FUNC_LIST[398](loc_0)
					while true do
						if load_i32(memory_at_0, loc_0 + 24) == 281 then
							while true do
								loc_5 = load_i32(memory_at_0, loc_0 + 48)
								loc_8 = add_i32(loc_4, 40)
								loc_7 = add_i32(loc_0, 28)
								store_i64(memory_at_0, loc_8, load_i64(memory_at_0, loc_7 + 8))
								store_i64(memory_at_0, loc_4 + 32, load_i64(memory_at_0, loc_0 + 28))
								FUNC_LIST[398](loc_0)
								loc_7 = add_i32(loc_4, 8)
								store_i64(memory_at_0, loc_7 + 8, load_i64(memory_at_0, loc_4 + 40))
								store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_4 + 32))
								loc_10 = load_i64(memory_at_0, loc_4 + 16)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[427](loc_0, 4324)
						loc_5 = load_i32(memory_at_0, loc_0 + 132)
						loc_10 = load_i64(memory_at_0, loc_0 + 28)
						store_i64(memory_at_0, loc_4 + 16, loc_10)
						store_i64(memory_at_0, loc_4 + 8, loc_10)
						break
					end
					if desired then
						break
					end
					store_i32(memory_at_0, loc_4 + 4, loc_5)
					store_i32(memory_at_0, loc_3, loc_5)
					loc_0 = load_i32(memory_at_0, loc_0 + 88)
					loc_11 = load_i64(memory_at_0, loc_1)
					store_i64(memory_at_0, loc_4 + 40, loc_10)
					store_i64(memory_at_0, loc_4 + 32, loc_11)
					reg_0 = FUNC_LIST[353](loc_0, 60)
					reg_0 = FUNC_LIST[263](reg_0, add_i32(loc_4, 32), loc_6, add_i32(loc_4, 4), add_i32(loc_4, 8), add_i32(loc_4, 24), 58)
					loc_6 = reg_0
					store_i32_n8(memory_at_0, loc_2, 1)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			GLOBAL_LIST[0].value = add_i32(loc_4, 48)
			reg_0 = loc_6
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32(memory_at_0, loc_4, 4203)
		FUNC_LIST[390](loc_7, 4604, loc_4)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[426] = --[[ Luau::Parser::parseFunctionBody(bool, Luau::Lexeme const&, Luau::AstName const&, Luau::Parser::Name const*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = i64_ZERO
	local loc_19 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = sub_i32(GLOBAL_LIST[0].value, 160)
		GLOBAL_LIST[0].value = loc_6
		store_i64(memory_at_0, loc_6 + 120, load_i64(memory_at_0, loc_3 + 12))
		store_i64(memory_at_0, loc_6 + 112, load_i64(memory_at_0, loc_3 + 4))
		FUNC_LIST[434](add_i32(loc_6, 96), loc_1, 0)
		loc_7 = load_i32(memory_at_0, loc_1 + 24)
		store_i32(memory_at_0, loc_6 + 84, loc_7)
		loc_18 = load_i64(memory_at_0, loc_1 + 28)
		store_i64(memory_at_0, loc_6 + 88, loc_18)
		while true do
			if loc_7 ~= 40 then
				while true do
					FUNC_LIST[394](loc_1, 40, 3280)
					FUNC_LIST[381](add_i32(loc_6, 128), add_i32(loc_1, 4))
					if load_i32(memory_at_0, loc_6 + 128) ~= 40 then
						desired = 1
						break
					end
					FUNC_LIST[398](loc_1)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[398](loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32(memory_at_0, loc_6 + 72, add_i32(loc_1, 292))
		loc_8 = load_i32(memory_at_0, loc_1 + 292)
		loc_9 = load_i32(memory_at_0, loc_1 + 296)
		store_i32(memory_at_0, loc_6 + 80, 0)
		store_i32(memory_at_0, loc_6 + 76, div_i32(sub_i32(loc_9, loc_8), 24))
		loc_8 = sub_i32(loc_6, 4294967232)
		store_i64(memory_at_0, loc_8, i64_ZERO)
		store_i64(memory_at_0, loc_6 + 56, i64_ZERO)
		while true do
			if load_i32(memory_at_0, loc_1 + 24) == 41 then
				while true do
					reg_0 = 1
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[437](add_i32(loc_6, 128), loc_1, add_i32(loc_6, 72), 1)
			store_i64(memory_at_0, loc_8, load_i64(memory_at_0, loc_6 + 140))
			store_i64(memory_at_0, loc_6 + 56, load_i64(memory_at_0, loc_6 + 132))
			loc_12 = load_i32_u8(memory_at_0, loc_6 + 128)
			loc_13 = load_i32(memory_at_0, loc_6 + 148)
			reg_0 = (if load_i32(memory_at_0, loc_1 + 24) == 41 then 1 else 0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_8 = reg_0
		store_i32_n8(memory_at_0, loc_6 + 48, 0)
		store_i32_n8(memory_at_0, loc_6 + 32, 0)
		while true do
			while true do
				while true do
					if loc_7 ~= 40 then
						break
					end
					if loc_8 == 0 then
						break
					end
					loc_19 = load_i64(memory_at_0, loc_1 + 36)
					store_i32_n8(memory_at_0, loc_6 + 48, 1)
					store_i64(memory_at_0, loc_6 + 40, loc_19)
					store_i64(memory_at_0, loc_6 + 32, loc_18)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_8 ~= 0 then
					break
				end
				FUNC_LIST[431](loc_1, 41, add_i32(loc_6, 84), 0)
				reg_0 = FUNC_LIST[432](loc_1, 41, loc_5, 1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[398](loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[438](add_i32(loc_6, 16), loc_1)
		if loc_5 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_6 + 144, load_i32(memory_at_0, loc_5 + 16))
				store_i64(memory_at_0, loc_6 + 136, load_i64(memory_at_0, loc_5 + 8))
				store_i64(memory_at_0, loc_6 + 128, load_i64(memory_at_0, loc_5))
				store_i32(memory_at_0, loc_6 + 148, 0)
				reg_0 = FUNC_LIST[422](loc_1, add_i32(loc_6, 128))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_15 = reg_0
		loc_9 = load_i32(memory_at_0, loc_1 + 184)
		loc_16 = load_i32(memory_at_0, loc_1 + 188)
		while true do
			while true do
				while true do
					loc_5 = load_i32(memory_at_0, loc_1 + 156)
					loc_7 = load_i32(memory_at_0, loc_1 + 160)
					if loc_5 < loc_7 then
						while true do
							store_i64(memory_at_0, loc_5, band_i64(extend_i64_u32(loc_12), i64_from_u32(255, 0)))
							store_i32(memory_at_0, loc_1 + 156, add_i32(loc_5, 8))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_14 = add_i32(loc_1, 152)
					loc_8 = load_i32(memory_at_0, loc_14)
					loc_17 = shr_i32(sub_i32(loc_5, loc_8), 3)
					loc_10 = add_i32(loc_17, 1)
					if loc_10 >= 536870912 then
						desired = 2
						break
					end
					loc_7 = sub_i32(loc_7, loc_8)
					loc_11 = shr_i32(loc_7, 2)
					loc_10 = (if loc_7 >= 2147483640 then 536870911 else (if loc_10 < loc_11 then loc_11 else loc_10))
					if loc_10 ~= 0 then
						while true do
							if loc_10 >= 536870912 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](shl_i32(loc_10, 3))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_11 = reg_0
					loc_7 = add_i32(loc_11, shl_i32(loc_17, 3))
					store_i64(memory_at_0, loc_7, band_i64(extend_i64_u32(loc_12), i64_from_u32(255, 0)))
					loc_10 = add_i32(shl_i32(loc_10, 3), loc_11)
					loc_11 = add_i32(loc_7, 8)
					if loc_5 ~= loc_8 then
						while true do
							while true do
								loc_7 = sub_i32(loc_7, 8)
								loc_5 = sub_i32(loc_5, 8)
								store_i64(memory_at_0, loc_7, load_i64(memory_at_0, loc_5))
								if loc_5 ~= loc_8 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = load_i32(memory_at_0, loc_14)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_5
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = reg_0
					store_i32(memory_at_0, loc_1 + 160, loc_10)
					store_i32(memory_at_0, loc_1 + 156, loc_11)
					store_i32(memory_at_0, loc_1 + 152, loc_7)
					if loc_5 == 0 then
						break
					end
					FUNC_LIST[609](loc_5)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_10 = add_i32(loc_1, 184)
				FUNC_LIST[450](add_i32(loc_6, 4), loc_1, add_i32(loc_6, 112), loc_2, add_i32(loc_6, 72))
				reg_0 = FUNC_LIST[393](loc_1)
				loc_11 = reg_0
				store_i32(memory_at_0, loc_1 + 156, sub_i32(load_i32(memory_at_0, loc_1 + 156), 8))
				loc_2 = load_i32(memory_at_0, loc_1 + 184)
				loc_5 = shr_i32(sub_i32(load_i32(memory_at_0, loc_1 + 188), loc_2), 2)
				loc_9 = shr_i32(sub_i32(loc_16, loc_9), 2)
				if loc_5 > loc_9 then
					while true do
						loc_2 = add_i32(loc_1, 164)
						while true do
							loc_5 = sub_i32(loc_5, 1)
							loc_7 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_10), shl_i32(loc_5, 2)))
							loc_8 = load_i32(memory_at_0, loc_7 + 20)
							reg_0 = FUNC_LIST[5](loc_2, loc_7)
							store_i32(memory_at_0, reg_0, loc_8)
							if loc_5 > loc_9 then
								continue
							end
							break
						end
						if desired then
							break
						end
						loc_2 = load_i32(memory_at_0, loc_1 + 184)
						reg_0 = shr_i32(sub_i32(load_i32(memory_at_0, loc_1 + 188), loc_2), 2)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_5
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_5 = reg_0
				loc_7 = add_i32(loc_6, 104)
				loc_8 = add_i32(loc_6, 8)
				while true do
					if loc_5 < loc_9 then
						while true do
							FUNC_LIST[190](loc_10, sub_i32(loc_9, loc_5))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_5 <= loc_9 then
						break
					end
					store_i32(memory_at_0, loc_1 + 188, add_i32(shl_i32(loc_9, 2), loc_2))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_18 = load_i64(memory_at_0, loc_1 + 36)
				store_i32(memory_at_0, loc_6 + 128, load_i32(memory_at_0, loc_3))
				store_i64(memory_at_0, loc_6 + 132, load_i64(memory_at_0, loc_3 + 4))
				reg_1 = FUNC_LIST[406](loc_1, 294, add_i32(loc_6, 128))
				store_i32_n8(memory_at_0, loc_11 + 36, reg_1)
				loc_5 = load_i32(memory_at_0, loc_1 + 88)
				store_i64(memory_at_0, loc_6 + 136, loc_18)
				store_i64(memory_at_0, loc_6 + 128, load_i64(memory_at_0, loc_6 + 112))
				loc_9 = load_i32(memory_at_0, loc_1 + 152)
				loc_1 = load_i32(memory_at_0, loc_1 + 156)
				reg_0 = FUNC_LIST[353](loc_5, 124)
				reg_0 = FUNC_LIST[267](reg_0, add_i32(loc_6, 128), add_i32(loc_6, 96), loc_7, load_i32(memory_at_0, loc_6 + 4), loc_8, (if loc_12 ~= 0 then 1 else 0), add_i32(loc_6, 56), loc_11, shr_i32(sub_i32(loc_1, loc_9), 3), loc_4, add_i32(loc_6, 16), loc_13, add_i32(loc_6, 32))
				loc_5 = reg_0
				store_i32(memory_at_0, loc_0 + 4, loc_15)
				store_i32(memory_at_0, loc_0, loc_5)
				loc_5 = load_i32(memory_at_0, loc_6 + 72)
				loc_1 = add_i32(load_i32(memory_at_0, loc_5), mul_i32(load_i32(memory_at_0, loc_6 + 76), 24))
				if loc_1 ~= load_i32(memory_at_0, loc_5 + 4) then
					while true do
						store_i32(memory_at_0, loc_5 + 4, loc_1)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				GLOBAL_LIST[0].value = add_i32(loc_6, 160)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_14)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[427] = --[[ Luau::Parser::reportNameError(char const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = add_i32(loc_0, 28)
		loc_4 = add_i32(loc_0, 24)
		while true do
			if loc_1 ~= 0 then
				while true do
					FUNC_LIST[358](add_i32(loc_2, 36), loc_4)
					store_i32(memory_at_0, loc_2 + 16, loc_1)
					store_i32(memory_at_0, loc_2 + 20, (if lt_i32(load_i32_i8(memory_at_0, loc_2 + 47), 0) then load_i32(memory_at_0, loc_2 + 36) else add_i32(loc_2, 36)))
					FUNC_LIST[401](loc_0, loc_3, 2608, add_i32(loc_2, 16))
					if ge_i32(load_i32_i8(memory_at_0, loc_2 + 47), 0) then
						desired = 1
						break
					end
					FUNC_LIST[609](load_i32(memory_at_0, loc_2 + 36))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[358](add_i32(loc_2, 36), loc_4)
			store_i32(memory_at_0, loc_2, (if lt_i32(load_i32_i8(memory_at_0, loc_2 + 47), 0) then load_i32(memory_at_0, loc_2 + 36) else add_i32(loc_2, 36)))
			FUNC_LIST[401](loc_0, loc_3, 2672, loc_2)
			if ge_i32(load_i32_i8(memory_at_0, loc_2 + 47), 0) then
				break
			end
			FUNC_LIST[609](load_i32(memory_at_0, loc_2 + 36))
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 48)
		break
	end
end
FUNC_LIST[428] = --[[ Luau::Parser::parsePrefixExpr() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = i64_ZERO
	local loc_5 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_1
		while true do
			if load_i32(memory_at_0, loc_0 + 24) == 40 then
				while true do
					loc_5 = load_i64(memory_at_0, loc_0 + 28)
					store_i64(memory_at_0, loc_1 + 24, loc_5)
					store_i32(memory_at_0, loc_1 + 20, 40)
					FUNC_LIST[398](loc_0)
					reg_0 = FUNC_LIST[420](loc_0, 0)
					loc_2 = reg_0
					while true do
						loc_3 = load_i32(memory_at_0, loc_0 + 24)
						if loc_3 ~= 41 then
							while true do
								FUNC_LIST[431](loc_0, 41, add_i32(loc_1, 20), (if loc_3 == 61 then 5961 else 0))
								loc_4 = load_i64(memory_at_0, loc_0 + 60)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_4 = load_i64(memory_at_0, loc_0 + 36)
						FUNC_LIST[398](loc_0)
						break
					end
					if desired then
						break
					end
					loc_0 = load_i32(memory_at_0, loc_0 + 88)
					store_i64(memory_at_0, loc_1 + 8, loc_4)
					store_i64(memory_at_0, loc_1, loc_5)
					reg_0 = FUNC_LIST[353](loc_0, 28)
					reg_0 = FUNC_LIST[245](reg_0, loc_1, loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[449](loc_0, 3451)
			break
		end
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_1, 32)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[429] = --[[ Luau::Parser::parseFunctionArgs(Luau::AstExpr*, bool) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = i64_ZERO
	local loc_14 = i64_ZERO
	local loc_15 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				while true do
					while true do
						loc_4 = load_i32(memory_at_0, loc_0 + 24)
						if sub_i32(loc_4, 278) >= 2 then
							while true do
								if loc_4 ~= 123 then
									while true do
										loc_5 = 40
										if loc_4 ~= 40 then
											desired = 4
											break
										end
										loc_14 = load_i64(memory_at_0, loc_0 + 36)
										reg_0 = loc_3
										if load_i32(memory_at_0, loc_1 + 16) ~= load_i32(memory_at_0, loc_0 + 28) then
											while true do
												FUNC_LIST[430](loc_0)
												reg_1 = load_i32(memory_at_0, loc_0 + 24)
												break
											end
											if desired then
												break
											end
										else
											while true do
												reg_1 = loc_5
												break
											end
											if desired then
												break
											end
										end
										loc_5 = reg_1
										store_i32(memory_at_0, reg_0 + 36, loc_5)
										store_i64(memory_at_0, loc_3 + 40, load_i64(memory_at_0, loc_0 + 28))
										FUNC_LIST[398](loc_0)
										store_i32(memory_at_0, loc_3 + 24, add_i32(loc_0, 244))
										loc_4 = load_i32(memory_at_0, loc_0 + 244)
										loc_5 = load_i32(memory_at_0, loc_0 + 248)
										store_i32(memory_at_0, loc_3 + 32, 0)
										store_i32(memory_at_0, loc_3 + 28, shr_i32(sub_i32(loc_5, loc_4), 2))
										if load_i32(memory_at_0, loc_0 + 24) == 41 then
											while true do
												loc_13 = load_i64(memory_at_0, loc_0 + 36)
												desired = 3
												break
											end
											if desired then
												break
											end
										end
										FUNC_LIST[424](loc_0, add_i32(loc_3, 24))
										loc_13 = load_i64(memory_at_0, loc_0 + 36)
										if load_i32(memory_at_0, loc_0 + 24) == 41 then
											desired = 3
											break
										end
										FUNC_LIST[431](loc_0, 41, add_i32(loc_3, 36), 0)
										reg_0 = FUNC_LIST[432](loc_0, 41, loc_0, 0)
										desired = 2
										break
									end
									if desired then
										break
									end
								end
								loc_13 = load_i64(memory_at_0, loc_0 + 36)
								reg_0 = FUNC_LIST[465](loc_0)
								loc_4 = reg_0
								loc_14 = load_i64(memory_at_0, loc_0 + 60)
								loc_0 = load_i32(memory_at_0, loc_0 + 88)
								store_i64(memory_at_0, loc_3 + 48, load_i64(memory_at_0, loc_1 + 8))
								store_i64(memory_at_0, loc_3 + 56, load_i64(memory_at_0, loc_4 + 16))
								reg_0 = FUNC_LIST[353](loc_0, 4)
								loc_5 = reg_0
								store_i32(memory_at_0, loc_3 + 40, 1)
								store_i32(memory_at_0, loc_3 + 36, loc_5)
								store_i32(memory_at_0, loc_5, loc_4)
								store_i64(memory_at_0, loc_3 + 8, loc_14)
								store_i64(memory_at_0, loc_3, loc_13)
								reg_0 = FUNC_LIST[353](loc_0, 56)
								reg_0 = FUNC_LIST[261](reg_0, add_i32(loc_3, 48), loc_1, add_i32(loc_3, 36), loc_2, loc_3)
								loc_0 = reg_0
								desired = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_4 = add_i32(loc_0, 36)
						store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_4))
						store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_0 + 28))
						store_i64(memory_at_0, loc_3 + 56, load_i64(memory_at_0, loc_0 + 36))
						store_i64(memory_at_0, loc_3 + 48, load_i64(memory_at_0, loc_0 + 28))
						FUNC_LIST[442](add_i32(loc_3, 36), loc_0)
						while true do
							if load_i32_u8(memory_at_0, loc_3 + 44) ~= 0 then
								while true do
									reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 36)
									reg_0 = FUNC_LIST[253](reg_0, add_i32(loc_3, 48), add_i32(loc_3, 36), 0)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							store_i64(memory_at_0, loc_3 + 24, i64_ZERO)
							reg_0 = FUNC_LIST[433](loc_0, add_i32(loc_3, 48), add_i32(loc_3, 24), 4919, 0)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = reg_0
						loc_0 = load_i32(memory_at_0, loc_0 + 88)
						store_i64(memory_at_0, loc_3 + 48, load_i64(memory_at_0, loc_1 + 8))
						store_i64(memory_at_0, loc_3 + 56, load_i64(memory_at_0, loc_4 + 16))
						reg_0 = FUNC_LIST[353](loc_0, 4)
						loc_5 = reg_0
						store_i32(memory_at_0, loc_3 + 40, 1)
						store_i32(memory_at_0, loc_3 + 36, loc_5)
						store_i32(memory_at_0, loc_5, loc_4)
						reg_0 = FUNC_LIST[353](loc_0, 56)
						reg_0 = FUNC_LIST[261](reg_0, add_i32(loc_3, 48), loc_1, add_i32(loc_3, 36), loc_2, loc_3)
						loc_0 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[466](loc_0, loc_1, loc_2)
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[398](loc_0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = load_i32(memory_at_0, loc_0 + 88)
			loc_15 = load_i64(memory_at_0, loc_1 + 8)
			store_i64(memory_at_0, loc_3 + 56, loc_13)
			store_i64(memory_at_0, loc_3 + 48, loc_15)
			while true do
				loc_6 = load_i32(memory_at_0, loc_3 + 32)
				if loc_6 == 0 then
					while true do
						store_i64(memory_at_0, loc_3 + 16, i64_ZERO)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_0 = load_i32(memory_at_0, load_i32(memory_at_0, loc_3 + 24))
				loc_5 = load_i32(memory_at_0, loc_3 + 28)
				reg_0 = FUNC_LIST[353](loc_8, shl_i32(loc_6, 2))
				loc_4 = reg_0
				store_i32(memory_at_0, loc_3 + 20, loc_6)
				store_i32(memory_at_0, loc_3 + 16, loc_4)
				loc_9 = band_i32(loc_6, 3)
				loc_5 = add_i32(shl_i32(loc_5, 2), loc_0)
				loc_0 = 0
				if loc_6 >= 4 then
					while true do
						loc_12 = band_i32(loc_6, 4294967292)
						while true do
							loc_6 = shl_i32(loc_0, 2)
							store_i32(memory_at_0, add_i32(loc_6, loc_4), load_i32(memory_at_0, add_i32(loc_5, loc_6)))
							loc_7 = bor_i32(loc_6, 4)
							store_i32(memory_at_0, add_i32(loc_7, loc_4), load_i32(memory_at_0, add_i32(loc_5, loc_7)))
							loc_7 = bor_i32(loc_6, 8)
							store_i32(memory_at_0, add_i32(loc_7, loc_4), load_i32(memory_at_0, add_i32(loc_5, loc_7)))
							loc_6 = bor_i32(loc_6, 12)
							store_i32(memory_at_0, add_i32(loc_6, loc_4), load_i32(memory_at_0, add_i32(loc_5, loc_6)))
							loc_0 = add_i32(loc_0, 4)
							loc_11 = add_i32(loc_11, 4)
							if loc_12 ~= loc_11 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_9 == 0 then
					break
				end
				while true do
					loc_6 = shl_i32(loc_0, 2)
					store_i32(memory_at_0, add_i32(loc_6, loc_4), load_i32(memory_at_0, add_i32(loc_5, loc_6)))
					loc_0 = add_i32(loc_0, 1)
					loc_10 = add_i32(loc_10, 1)
					if loc_9 ~= loc_10 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_3 + 8, loc_13)
			store_i64(memory_at_0, loc_3, loc_14)
			reg_0 = FUNC_LIST[353](loc_8, 56)
			reg_0 = FUNC_LIST[261](reg_0, add_i32(loc_3, 48), loc_1, add_i32(loc_3, 16), loc_2, loc_3)
			loc_0 = reg_0
			loc_4 = load_i32(memory_at_0, loc_3 + 24)
			loc_5 = add_i32(load_i32(memory_at_0, loc_4), shl_i32(load_i32(memory_at_0, loc_3 + 28), 2))
			if loc_5 == load_i32(memory_at_0, loc_4 + 4) then
				break
			end
			store_i32(memory_at_0, loc_4 + 4, loc_5)
			break
		end
		GLOBAL_LIST[0].value = sub_i32(loc_3, 4294967232)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[430] = --[[ Luau::Parser::reportAmbiguousCallError() ]] function(loc_0)
	while true do
		FUNC_LIST[401](loc_0, add_i32(loc_0, 28), 1905, 0)
		break
	end
end
FUNC_LIST[431] = --[[ Luau::Parser::expectMatchAndConsumeFail(Luau::Lexeme::Type, Luau::Parser::MatchLexeme const&, char const*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 128)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = add_i32(loc_4, 80)
		store_i64(memory_at_0, loc_5, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 72, i64_ZERO)
		reg_1 = FUNC_LIST[354](add_i32(loc_4, 88), add_i32(loc_4, 72), loc_1)
		FUNC_LIST[358](add_i32(loc_4, 116), reg_1)
		store_i64(memory_at_0, loc_4 + 80, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 72, i64_ZERO)
		reg_1 = FUNC_LIST[354](add_i32(loc_4, 88), add_i32(loc_4, 72), load_i32(memory_at_0, loc_2))
		FUNC_LIST[358](add_i32(loc_4, 60), reg_1)
		loc_1 = add_i32(loc_0, 28)
		loc_5 = add_i32(loc_0, 24)
		loc_6 = (if lt_i32(load_i32_i8(memory_at_0, loc_4 + 71), 0) then load_i32(memory_at_0, loc_4 + 60) else add_i32(loc_4, 60))
		loc_7 = (if lt_i32(load_i32_i8(memory_at_0, loc_4 + 127), 0) then load_i32(memory_at_0, loc_4 + 116) else add_i32(loc_4, 116))
		while true do
			loc_8 = load_i32(memory_at_0, loc_2 + 4)
			if loc_8 == load_i32(memory_at_0, loc_0 + 28) then
				while true do
					loc_2 = load_i32(memory_at_0, loc_2 + 8)
					FUNC_LIST[358](add_i32(loc_4, 88), loc_5)
					store_i32(memory_at_0, loc_4 + 16, (if loc_3 ~= 0 then loc_3 else 7767))
					store_i32(memory_at_0, loc_4, loc_7)
					store_i32(memory_at_0, loc_4 + 4, loc_6)
					store_i32(memory_at_0, loc_4 + 8, add_i32(loc_2, 1))
					store_i32(memory_at_0, loc_4 + 12, (if lt_i32(load_i32_i8(memory_at_0, loc_4 + 99), 0) then load_i32(memory_at_0, loc_4 + 88) else add_i32(loc_4, 88)))
					FUNC_LIST[401](loc_0, loc_1, 2441, loc_4)
					if ge_i32(load_i32_i8(memory_at_0, loc_4 + 99), 0) then
						desired = 1
						break
					end
					FUNC_LIST[609](load_i32(memory_at_0, loc_4 + 88))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[358](add_i32(loc_4, 88), loc_5)
			store_i32(memory_at_0, loc_4 + 48, (if loc_3 ~= 0 then loc_3 else 7767))
			store_i32(memory_at_0, loc_4 + 32, loc_7)
			store_i32(memory_at_0, loc_4 + 36, loc_6)
			store_i32(memory_at_0, loc_4 + 40, add_i32(loc_8, 1))
			store_i32(memory_at_0, loc_4 + 44, (if lt_i32(load_i32_i8(memory_at_0, loc_4 + 99), 0) then load_i32(memory_at_0, loc_4 + 88) else add_i32(loc_4, 88)))
			FUNC_LIST[401](loc_0, loc_1, 2490, add_i32(loc_4, 32))
			if ge_i32(load_i32_i8(memory_at_0, loc_4 + 99), 0) then
				break
			end
			FUNC_LIST[609](load_i32(memory_at_0, loc_4 + 88))
			break
		end
		if lt_i32(load_i32_i8(memory_at_0, loc_4 + 71), 0) then
			while true do
				FUNC_LIST[609](load_i32(memory_at_0, loc_4 + 60))
				break
			end
		end
		if lt_i32(load_i32_i8(memory_at_0, loc_4 + 127), 0) then
			while true do
				FUNC_LIST[609](load_i32(memory_at_0, loc_4 + 116))
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 128)
		break
	end
end
FUNC_LIST[432] = --[[ Luau::Parser::expectMatchAndConsumeRecover(char, Luau::Parser::MatchLexeme const&, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		loc_4 = band_i32(loc_1, 255)
		while true do
			while true do
				if loc_3 ~= 0 then
					while true do
						loc_1 = load_i32(memory_at_0, loc_0 + 24)
						loc_3 = (if loc_4 == loc_1 then 1 else 0)
						while true do
							loc_6 = load_i32(memory_at_0, loc_0 + 60)
							if loc_6 ~= load_i32(memory_at_0, loc_0 + 28) then
								break
							end
							if loc_1 == loc_4 then
								break
							end
							while true do
								if load_i32(memory_at_0, add_i32(load_i32(memory_at_0, loc_0 + 208), shl_i32(loc_1, 2))) ~= 0 then
									while true do
										loc_1 = 0
										desired = 1
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								end
								FUNC_LIST[398](loc_0)
								loc_1 = load_i32(memory_at_0, loc_0 + 24)
								loc_3 = (if loc_4 == loc_1 then 1 else 0)
								if load_i32(memory_at_0, loc_0 + 28) ~= loc_6 then
									desired = 4
									break
								end
								if loc_1 ~= loc_4 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							break
						end
						loc_1 = 0
						if loc_3 ~= 0 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[381](add_i32(loc_5, 4), add_i32(loc_0, 4))
				loc_1 = 0
				if loc_4 ~= load_i32(memory_at_0, loc_5 + 4) then
					desired = 1
					break
				end
				FUNC_LIST[398](loc_0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[398](loc_0)
			loc_1 = 1
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_5, 32)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[433] = --[[ Luau::Parser::reportExprError(Luau::Location const&, Luau::AstArray<Luau::AstExpr*> const&, char const*, ...) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local reg_0
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		store_i32(memory_at_0, loc_5 + 12, loc_4)
		FUNC_LIST[443](loc_0, loc_1, loc_3, loc_4)
		loc_4 = load_i32(memory_at_0, loc_0 + 196)
		loc_3 = load_i32(memory_at_0, loc_0 + 200)
		reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 36)
		reg_0 = FUNC_LIST[279](reg_0, loc_1, loc_2, sub_i32(shr_i32(sub_i32(loc_3, loc_4), 5), 1))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_5, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[434] = --[[ Luau::Parser::parseGenericTypeList(bool) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, loc_3 + 28, add_i32(loc_1, 388))
		loc_6 = load_i32(memory_at_0, loc_1 + 388)
		loc_8 = load_i32(memory_at_0, loc_1 + 392)
		store_i32(memory_at_0, loc_3 + 36, 0)
		store_i32(memory_at_0, loc_3 + 32, div_i32(sub_i32(loc_8, loc_6), 24))
		store_i32(memory_at_0, loc_3 + 16, add_i32(loc_1, 400))
		loc_6 = load_i32(memory_at_0, loc_1 + 400)
		loc_8 = load_i32(memory_at_0, loc_1 + 404)
		store_i32(memory_at_0, loc_3 + 24, 0)
		store_i32(memory_at_0, loc_3 + 20, div_i32(sub_i32(loc_8, loc_6), 24))
		while true do
			if load_i32(memory_at_0, loc_1 + 24) ~= 60 then
				while true do
					loc_7 = load_i32(memory_at_0, loc_3 + 20)
					loc_6 = load_i32(memory_at_0, loc_3 + 16)
					loc_2 = 0
					loc_8 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_13 = add_i32(loc_1, 4)
			loc_17 = load_i64(memory_at_0, loc_1 + 28)
			FUNC_LIST[398](loc_1)
			loc_6 = add_i32(loc_1, 28)
			loc_10 = loc_3
			loc_12 = add_i32(loc_10, 44)
			loc_7 = load_i32(memory_at_0, loc_1 + 24)
			loc_8 = 0
			while true do
				while true do
					loc_15 = loc_3
					loc_4 = add_i32(loc_15, 8)
					loc_16 = loc_6
					loc_14 = add_i32(loc_16, 8)
					store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_14))
					store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_6))
					while true do
						if loc_7 == 281 then
							while true do
								loc_7 = load_i32(memory_at_0, loc_1 + 48)
								FUNC_LIST[398](loc_1)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[427](loc_1, 0)
						loc_7 = load_i32(memory_at_0, loc_1 + 132)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					while true do
						loc_5 = load_i32(memory_at_0, loc_1 + 24)
						loc_9 = (if loc_5 == 262 then 1 else 0)
						loc_8 = bor_i32(loc_8, loc_9)
						if band_i32(loc_8, 1) ~= 0 then
							while true do
								while true do
									if loc_9 == 0 then
										while true do
											FUNC_LIST[401](loc_1, loc_6, 2214, 0)
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									FUNC_LIST[398](loc_1)
									break
								end
								if desired then
									break
								end
								while true do
									if loc_2 == 0 then
										break
									end
									if load_i32(memory_at_0, loc_1 + 24) ~= 61 then
										break
									end
									FUNC_LIST[398](loc_1)
									while true do
										loc_5 = load_i32(memory_at_0, loc_1 + 24)
										if loc_5 ~= 262 then
											while true do
												if loc_5 ~= 281 then
													desired = 7
													break
												end
												FUNC_LIST[381](add_i32(loc_3, 40), loc_13)
												if load_i32(memory_at_0, loc_3 + 40) ~= 262 then
													desired = 7
													break
												end
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										reg_0 = FUNC_LIST[451](loc_1)
										loc_5 = reg_0
										store_i32(memory_at_0, loc_3 + 40, loc_7)
										store_i64(memory_at_0, loc_10 + 52, load_i64(memory_at_0, loc_15 + 8))
										store_i64(memory_at_0, loc_10 + 44, load_i64(memory_at_0, loc_3))
										store_i32(memory_at_0, loc_3 + 60, loc_5)
										FUNC_LIST[423](add_i32(loc_3, 16), add_i32(loc_3, 40))
										loc_11 = 1
										desired = 4
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									loc_9 = load_i32(memory_at_0, loc_1 + 120)
									store_i64(memory_at_0, loc_3 + 48, load_i64(memory_at_0, loc_16 + 8))
									store_i64(memory_at_0, loc_3 + 40, load_i64(memory_at_0, loc_6))
									FUNC_LIST[435](add_i32(loc_3, 72), loc_1, 1, 0)
									while true do
										loc_5 = load_i32(memory_at_0, loc_3 + 76)
										if loc_5 ~= 0 then
											break
										end
										store_i32(memory_at_0, loc_1 + 120, loc_9)
										reg_0 = FUNC_LIST[436](loc_1, load_i32(memory_at_0, loc_3 + 72), add_i32(loc_3, 40))
										loc_9 = reg_0
										if loc_9 == 0 then
											break
										end
										FUNC_LIST[401](loc_1, add_i32(loc_9, 8), 4053, 0)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									store_i32(memory_at_0, loc_3 + 40, loc_7)
									store_i64(memory_at_0, loc_10 + 44, load_i64(memory_at_0, loc_3))
									store_i64(memory_at_0, loc_10 + 52, load_i64(memory_at_0, loc_15 + 8))
									store_i32(memory_at_0, loc_3 + 60, loc_5)
									FUNC_LIST[423](add_i32(loc_3, 16), add_i32(loc_3, 40))
									loc_11 = 1
									desired = 4
									break
								end
								if desired then
									break
								end
								if band_i32(loc_11, 1) ~= 0 then
									while true do
										FUNC_LIST[401](loc_1, loc_6, 4217, 0)
										break
									end
									if desired then
										break
									end
								end
								store_i32(memory_at_0, loc_3 + 40, loc_7)
								store_i64(memory_at_0, loc_10 + 44, load_i64(memory_at_0, loc_3))
								store_i64(memory_at_0, loc_10 + 52, load_i64(memory_at_0, loc_15 + 8))
								store_i32(memory_at_0, loc_3 + 60, 0)
								FUNC_LIST[423](add_i32(loc_3, 16), add_i32(loc_3, 40))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if loc_5 ~= 61 then
								break
							end
							if loc_2 == 0 then
								break
							end
							FUNC_LIST[398](loc_1)
							loc_5 = load_i32(memory_at_0, loc_1 + 120)
							store_i64(memory_at_0, loc_3 + 48, load_i64(memory_at_0, loc_16 + 8))
							store_i64(memory_at_0, loc_3 + 40, load_i64(memory_at_0, loc_6))
							FUNC_LIST[435](add_i32(loc_3, 72), loc_1, 0, 0)
							loc_9 = load_i32(memory_at_0, loc_3 + 72)
							store_i32(memory_at_0, loc_1 + 120, loc_5)
							reg_0 = FUNC_LIST[436](loc_1, loc_9, add_i32(loc_3, 40))
							loc_5 = reg_0
							store_i32(memory_at_0, loc_3 + 40, loc_7)
							store_i64(memory_at_0, loc_10 + 52, load_i64(memory_at_0, loc_15 + 8))
							store_i64(memory_at_0, loc_10 + 44, load_i64(memory_at_0, loc_3))
							store_i32(memory_at_0, loc_3 + 60, loc_5)
							FUNC_LIST[423](add_i32(loc_3, 28), add_i32(loc_3, 40))
							loc_11 = 1
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if band_i32(loc_11, 1) ~= 0 then
							while true do
								FUNC_LIST[401](loc_1, loc_6, 4265, 0)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						store_i32(memory_at_0, loc_3 + 40, loc_7)
						store_i64(memory_at_0, loc_10 + 44, load_i64(memory_at_0, loc_3))
						store_i64(memory_at_0, loc_10 + 52, load_i64(memory_at_0, loc_15 + 8))
						store_i32(memory_at_0, loc_3 + 60, 0)
						FUNC_LIST[423](add_i32(loc_3, 28), add_i32(loc_3, 40))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_7 = load_i32(memory_at_0, loc_1 + 24)
					if loc_7 ~= 44 then
						desired = 2
						break
					end
					FUNC_LIST[398](loc_1)
					loc_7 = load_i32(memory_at_0, loc_1 + 24)
					if loc_7 ~= 62 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[401](loc_1, loc_6, 5261, 0)
				loc_7 = load_i32(memory_at_0, loc_1 + 24)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_3 + 44, loc_17)
			store_i32(memory_at_0, loc_3 + 40, 60)
			while true do
				if loc_7 ~= 62 then
					while true do
						FUNC_LIST[431](loc_1, 62, add_i32(loc_3, 40), 0)
						reg_0 = FUNC_LIST[432](loc_1, 62, loc_3, 0)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[398](loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = 0
			loc_12 = 0
			while true do
				loc_13 = load_i32(memory_at_0, loc_3 + 36)
				if loc_13 == 0 then
					break
				end
				loc_11 = band_i32(loc_13, 3)
				loc_7 = add_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_3 + 28)), mul_i32(load_i32(memory_at_0, loc_3 + 32), 24))
				loc_9 = 0
				reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_1 + 88), mul_i32(loc_13, 24))
				loc_12 = reg_0
				loc_6 = 0
				if loc_13 >= 4 then
					while true do
						loc_2 = band_i32(loc_13, 4294967292)
						loc_14 = 0
						while true do
							loc_5 = mul_i32(loc_6, 24)
							loc_4 = add_i32(loc_5, loc_12)
							loc_5 = add_i32(loc_5, loc_7)
							store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_5))
							store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_5 + 16))
							store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_5 + 8))
							loc_5 = mul_i32(bor_i32(loc_6, 1), 24)
							loc_4 = add_i32(loc_5, loc_12)
							loc_5 = add_i32(loc_5, loc_7)
							store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_5 + 16))
							store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_5 + 8))
							store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_5))
							loc_5 = mul_i32(bor_i32(loc_6, 2), 24)
							loc_4 = add_i32(loc_5, loc_12)
							loc_5 = add_i32(loc_5, loc_7)
							store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_5 + 16))
							store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_5 + 8))
							store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_5))
							loc_5 = mul_i32(bor_i32(loc_6, 3), 24)
							loc_4 = add_i32(loc_5, loc_12)
							loc_5 = add_i32(loc_5, loc_7)
							store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_5 + 16))
							store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_5 + 8))
							store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_5))
							loc_6 = add_i32(loc_6, 4)
							loc_14 = add_i32(loc_14, 4)
							if loc_2 ~= loc_14 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_11 == 0 then
					break
				end
				while true do
					loc_5 = mul_i32(loc_6, 24)
					loc_4 = add_i32(loc_5, loc_12)
					loc_5 = add_i32(loc_5, loc_7)
					store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_5))
					store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_5 + 16))
					store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_5 + 8))
					loc_6 = add_i32(loc_6, 1)
					loc_9 = add_i32(loc_9, 1)
					if loc_11 ~= loc_9 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = load_i32(memory_at_0, loc_3 + 20)
			loc_6 = load_i32(memory_at_0, loc_3 + 16)
			loc_2 = load_i32(memory_at_0, loc_3 + 24)
			if loc_2 == 0 then
				while true do
					loc_2 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_14 = band_i32(loc_2, 3)
			loc_6 = add_i32(load_i32(memory_at_0, loc_6), mul_i32(loc_7, 24))
			loc_5 = 0
			reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_1 + 88), mul_i32(loc_2, 24))
			loc_8 = reg_0
			loc_1 = 0
			if loc_2 >= 4 then
				while true do
					loc_11 = band_i32(loc_2, 4294967292)
					loc_9 = 0
					while true do
						loc_4 = mul_i32(loc_1, 24)
						loc_7 = add_i32(loc_4, loc_8)
						loc_4 = add_i32(loc_4, loc_6)
						store_i64(memory_at_0, loc_7, load_i64(memory_at_0, loc_4))
						store_i64(memory_at_0, loc_7 + 16, load_i64(memory_at_0, loc_4 + 16))
						store_i64(memory_at_0, loc_7 + 8, load_i64(memory_at_0, loc_4 + 8))
						loc_4 = mul_i32(bor_i32(loc_1, 1), 24)
						loc_7 = add_i32(loc_4, loc_8)
						loc_4 = add_i32(loc_4, loc_6)
						store_i64(memory_at_0, loc_7 + 16, load_i64(memory_at_0, loc_4 + 16))
						store_i64(memory_at_0, loc_7 + 8, load_i64(memory_at_0, loc_4 + 8))
						store_i64(memory_at_0, loc_7, load_i64(memory_at_0, loc_4))
						loc_4 = mul_i32(bor_i32(loc_1, 2), 24)
						loc_7 = add_i32(loc_4, loc_8)
						loc_4 = add_i32(loc_4, loc_6)
						store_i64(memory_at_0, loc_7 + 16, load_i64(memory_at_0, loc_4 + 16))
						store_i64(memory_at_0, loc_7 + 8, load_i64(memory_at_0, loc_4 + 8))
						store_i64(memory_at_0, loc_7, load_i64(memory_at_0, loc_4))
						loc_4 = mul_i32(bor_i32(loc_1, 3), 24)
						loc_7 = add_i32(loc_4, loc_8)
						loc_4 = add_i32(loc_4, loc_6)
						store_i64(memory_at_0, loc_7 + 16, load_i64(memory_at_0, loc_4 + 16))
						store_i64(memory_at_0, loc_7 + 8, load_i64(memory_at_0, loc_4 + 8))
						store_i64(memory_at_0, loc_7, load_i64(memory_at_0, loc_4))
						loc_1 = add_i32(loc_1, 4)
						loc_9 = add_i32(loc_9, 4)
						if loc_11 ~= loc_9 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_14 ~= 0 then
				while true do
					while true do
						loc_4 = mul_i32(loc_1, 24)
						loc_7 = add_i32(loc_4, loc_8)
						loc_4 = add_i32(loc_4, loc_6)
						store_i64(memory_at_0, loc_7, load_i64(memory_at_0, loc_4))
						store_i64(memory_at_0, loc_7 + 16, load_i64(memory_at_0, loc_4 + 16))
						store_i64(memory_at_0, loc_7 + 8, load_i64(memory_at_0, loc_4 + 8))
						loc_1 = add_i32(loc_1, 1)
						loc_5 = add_i32(loc_5, 1)
						if loc_14 ~= loc_5 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = load_i32(memory_at_0, loc_3 + 20)
			loc_6 = load_i32(memory_at_0, loc_3 + 16)
			break
		end
		store_i32(memory_at_0, loc_0 + 12, loc_2)
		store_i32(memory_at_0, loc_0 + 8, loc_8)
		store_i32(memory_at_0, loc_0 + 4, loc_13)
		store_i32(memory_at_0, loc_0, loc_12)
		loc_1 = add_i32(load_i32(memory_at_0, loc_6), mul_i32(loc_7, 24))
		if loc_1 ~= load_i32(memory_at_0, loc_6 + 4) then
			while true do
				store_i32(memory_at_0, loc_6 + 4, loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_3 + 28)
		loc_6 = add_i32(load_i32(memory_at_0, loc_1), mul_i32(load_i32(memory_at_0, loc_3 + 32), 24))
		if loc_6 ~= load_i32(memory_at_0, loc_1 + 4) then
			while true do
				store_i32(memory_at_0, loc_1 + 4, loc_6)
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 80)
		break
	end
end
FUNC_LIST[435] = --[[ Luau::Parser::parseSimpleType(bool, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = i64_ZERO
	local loc_11 = i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 192)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = add_i32(load_i32(memory_at_0, loc_1 + 120), 1)
		store_i32(memory_at_0, loc_1 + 120, loc_5)
		while true do
			while true do
				if loc_5 <= load_i32(memory_at_0, 47712) then
					while true do
						store_i64(memory_at_0, loc_4 + 136, load_i64(memory_at_0, loc_1 + 36))
						store_i64(memory_at_0, loc_4 + 128, load_i64(memory_at_0, loc_1 + 28))
						loc_8 = add_i32(loc_1, 24)
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															loc_5 = load_i32(memory_at_0, loc_1 + 24)
															if not br_map[1] then
																br_map[1] = (function()
																	return { [0] = 4, 8, 8, 4, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 8, 6, 8, 8, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 1, }
																end)()
															end
															temp = br_map[1][sub_i32(loc_5, 266)] or 7
															if temp < 4 then
																if temp < 2 then
																	if temp < 1 then
																		break
																	else
																		desired = 11
																		break
																	end
																elseif temp > 2 then
																	desired = 9
																	break
																else
																	desired = 10
																	break
																end
															elseif temp > 4 then
																if temp < 7 then
																	if temp < 6 then
																		desired = 7
																		break
																	else
																		desired = 6
																		break
																	end
																elseif temp > 7 then
																	desired = 4
																	break
																else
																	desired = 5
																	break
																end
															else
																desired = 8
																break
															end
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
														FUNC_LIST[398](loc_1)
														reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_1 + 88), 84)
														loc_5 = reg_0
														store_i32_n8(memory_at_0, loc_4 + 108, 0)
														store_i32_n8(memory_at_0, loc_4 + 104, 0)
														loc_1 = load_i32(memory_at_0, loc_1 + 136)
														loc_3 = add_i32(loc_4, 160)
														store_i32_n8(memory_at_0, loc_3, 0)
														store_i64(memory_at_0, loc_4 + 40, load_i64(memory_at_0, loc_4 + 152))
														store_i32(memory_at_0, loc_4 + 48, load_i32(memory_at_0, loc_4 + 160))
														store_i32_n8(memory_at_0, loc_4 + 144, 0)
														store_i64(memory_at_0, loc_4 + 56, load_i64(memory_at_0, loc_4 + 104))
														store_i64(memory_at_0, loc_4 + 168, i64_ZERO)
														store_i64(memory_at_0, loc_4 + 32, load_i64(memory_at_0, loc_4 + 144))
														reg_0 = FUNC_LIST[323](loc_5, add_i32(loc_4, 128), add_i32(loc_4, 56), loc_1, add_i32(loc_4, 32), add_i32(loc_4, 128), 0, add_i32(loc_4, 168))
														loc_1 = reg_0
														store_i32(memory_at_0, loc_0 + 4, 0)
														store_i32(memory_at_0, loc_0, loc_1)
														desired = 1
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													FUNC_LIST[398](loc_1)
													reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_1 + 88), 28)
													reg_0 = FUNC_LIST[336](reg_0, add_i32(loc_4, 128), 1)
													loc_1 = reg_0
													store_i32(memory_at_0, loc_0 + 4, 0)
													store_i32(memory_at_0, loc_0, loc_1)
													desired = 1
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
												FUNC_LIST[398](loc_1)
												reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_1 + 88), 28)
												reg_0 = FUNC_LIST[336](reg_0, add_i32(loc_4, 128), 0)
												loc_1 = reg_0
												store_i32(memory_at_0, loc_0 + 4, 0)
												store_i32(memory_at_0, loc_0, loc_1)
												desired = 1
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											FUNC_LIST[442](add_i32(loc_4, 144), loc_1)
											while true do
												if load_i32_u8(memory_at_0, loc_4 + 152) ~= 0 then
													while true do
														store_i64(memory_at_0, loc_4 + 104, load_i64(memory_at_0, loc_4 + 144))
														reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_1 + 88), 32)
														reg_0 = FUNC_LIST[338](reg_0, add_i32(loc_4, 128), add_i32(loc_4, 104))
														desired = 9
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												end
												store_i64(memory_at_0, loc_4 + 104, i64_ZERO)
												reg_0 = FUNC_LIST[452](loc_1, add_i32(loc_4, 128), add_i32(loc_4, 104), 4919, 0)
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											loc_1 = reg_0
											store_i32(memory_at_0, loc_0 + 4, 0)
											store_i32(memory_at_0, loc_0, loc_1)
											desired = 1
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										reg_0 = FUNC_LIST[460](loc_1)
										store_i64(memory_at_0, loc_4 + 144, i64_ZERO)
										reg_0 = FUNC_LIST[452](loc_1, add_i32(loc_4, 128), add_i32(loc_4, 144), 2324, 0)
										loc_1 = reg_0
										store_i32(memory_at_0, loc_0 + 4, 0)
										store_i32(memory_at_0, loc_0, loc_1)
										desired = 1
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									FUNC_LIST[398](loc_1)
									store_i64(memory_at_0, loc_4 + 144, i64_ZERO)
									reg_0 = FUNC_LIST[452](loc_1, add_i32(loc_4, 128), add_i32(loc_4, 144), 5819, 0)
									loc_1 = reg_0
									store_i32(memory_at_0, loc_0 + 4, 0)
									store_i32(memory_at_0, loc_0, loc_1)
									desired = 1
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								store_i32_n8(memory_at_0, loc_4 + 160, 0)
								store_i32_n8(memory_at_0, loc_4 + 144, 0)
								loc_5 = load_i32(memory_at_0, loc_1 + 48)
								loc_3 = add_i32(loc_4, 176)
								loc_6 = add_i32(loc_1, 28)
								store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_6 + 8))
								store_i64(memory_at_0, loc_4 + 168, load_i64(memory_at_0, loc_6))
								FUNC_LIST[398](loc_1)
								store_i64(memory_at_0, loc_4 + 116, load_i64(memory_at_0, loc_4 + 176))
								store_i64(memory_at_0, loc_4 + 108, load_i64(memory_at_0, loc_4 + 168))
								store_i32(memory_at_0, loc_4 + 104, loc_5)
								loc_2 = add_i32(loc_4, 108)
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															loc_3 = load_i32(memory_at_0, loc_1 + 24)
															if loc_3 ~= 262 then
																while true do
																	if loc_3 ~= 46 then
																		desired = 12
																		break
																	end
																	loc_10 = load_i64(memory_at_0, loc_1 + 28)
																	FUNC_LIST[398](loc_1)
																	loc_3 = add_i32(loc_2, 8)
																	store_i64(memory_at_0, loc_4 + 152, load_i64(memory_at_0, loc_3))
																	store_i64(memory_at_0, loc_4 + 144, load_i64(memory_at_0, loc_2))
																	store_i32_n8(memory_at_0, loc_4 + 160, 1)
																	loc_9 = shr_u32(loc_5, 8)
																	if load_i32(memory_at_0, loc_1 + 24) == 281 then
																		while true do
																			loc_7 = load_i32(memory_at_0, loc_1 + 48)
																			store_i64(memory_at_0, loc_4 + 176, load_i64(memory_at_0, loc_6 + 8))
																			store_i64(memory_at_0, loc_4 + 168, load_i64(memory_at_0, loc_6))
																			FUNC_LIST[398](loc_1)
																			store_i32(memory_at_0, loc_4 + 104, loc_7)
																			store_i64(memory_at_0, loc_2 + 8, load_i64(memory_at_0, loc_4 + 176))
																			store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_4 + 168))
																			desired = 8
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	FUNC_LIST[427](loc_1, 4336)
																	if sub_i32(load_i32(memory_at_0, loc_1 + 24), 289) > 21 then
																		desired = 9
																		break
																	end
																	if load_i32(memory_at_0, loc_1 + 28) ~= wrap_i32_i64(loc_10) then
																		desired = 9
																		break
																	end
																	loc_7 = load_i32(memory_at_0, loc_1 + 48)
																	store_i32(memory_at_0, loc_4 + 104, loc_7)
																	store_i64(memory_at_0, loc_2 + 8, load_i64(memory_at_0, loc_6 + 8))
																	store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_6))
																	FUNC_LIST[398](loc_1)
																	desired = 8
																	break
																end
																if desired then
																	if desired == 12 then
																		desired = nil
																	end
																	break
																end
															end
															FUNC_LIST[401](loc_1, loc_6, 1239, 0)
															FUNC_LIST[398](loc_1)
															desired = 11
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
														if loc_5 == 0 then
															while true do
																loc_6 = 0
																reg_0 = 0
																desired = 6
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														reg_0 = FUNC_LIST[544](loc_5, 3913)
														if reg_0 == 0 then
															desired = 10
															break
														end
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													loc_7 = loc_5
													loc_5 = 0
													reg_0 = i64_ZERO
													desired = 7
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
												loc_10 = load_i64(memory_at_0, loc_1 + 28)
												reg_0 = FUNC_LIST[447](loc_1, 40, 4106)
												reg_0 = FUNC_LIST[420](loc_1, 0)
												loc_5 = reg_0
												loc_11 = load_i64(memory_at_0, loc_1 + 36)
												store_i64(memory_at_0, loc_4 + 172, loc_10)
												store_i32(memory_at_0, loc_4 + 168, loc_3)
												reg_0 = FUNC_LIST[453](loc_1, 41, add_i32(loc_4, 168), 0)
												loc_1 = load_i32(memory_at_0, loc_1 + 88)
												store_i64(memory_at_0, loc_4 + 176, loc_11)
												store_i64(memory_at_0, loc_4 + 168, load_i64(memory_at_0, loc_4 + 128))
												reg_0 = FUNC_LIST[353](loc_1, 28)
												reg_0 = FUNC_LIST[330](reg_0, add_i32(loc_4, 168), loc_5)
												loc_1 = reg_0
												store_i32(memory_at_0, loc_0 + 4, 0)
												store_i32(memory_at_0, loc_0, loc_1)
												desired = 1
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											loc_7 = load_i32(memory_at_0, loc_1 + 132)
											loc_10 = load_i64(memory_at_0, loc_1 + 28)
											store_i64(memory_at_0, loc_4 + 116, loc_10)
											store_i64(memory_at_0, loc_4 + 108, loc_10)
											store_i32(memory_at_0, loc_4 + 104, loc_7)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										reg_0 = i64_from_u32(0, 1)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									loc_10 = reg_0
									loc_6 = shl_i32(loc_9, 8)
									loc_3 = load_i32(memory_at_0, loc_8)
									reg_0 = band_i32(loc_5, 255)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								loc_5 = reg_0
								store_i64(memory_at_0, loc_4 + 96, i64_ZERO)
								if loc_3 == 60 then
									while true do
										FUNC_LIST[461](add_i32(loc_4, 96), loc_1)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_8 = load_i32(memory_at_0, loc_1 + 88)
								store_i64(memory_at_0, loc_4 + 176, load_i64(memory_at_0, loc_1 + 60))
								store_i64(memory_at_0, loc_4 + 168, load_i64(memory_at_0, loc_4 + 128))
								reg_0 = FUNC_LIST[353](loc_8, 84)
								loc_1 = reg_0
								store_i64(memory_at_0, loc_4 + 72, load_i64(memory_at_0, loc_4 + 152))
								store_i32(memory_at_0, loc_4 + 80, load_i32(memory_at_0, loc_4 + 160))
								loc_10 = bor_i64(extend_i64_u32(bor_i32(loc_5, loc_6)), loc_10)
								store_i64(memory_at_0, loc_4 + 88, loc_10)
								store_i64(memory_at_0, loc_4 + 184, loc_10)
								store_i64(memory_at_0, loc_4 + 64, load_i64(memory_at_0, loc_4 + 144))
								reg_0 = FUNC_LIST[323](loc_1, add_i32(loc_4, 168), add_i32(loc_4, 88), loc_7, sub_i32(loc_4, 4294967232), loc_2, (if loc_3 == 60 then 1 else 0), add_i32(loc_4, 96))
								loc_1 = reg_0
								store_i32(memory_at_0, loc_0 + 4, 0)
								store_i32(memory_at_0, loc_0, loc_1)
								desired = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							if loc_5 == 123 then
								desired = 2
								break
							end
							break
						end
						if desired then
							break
						end
						while true do
							if loc_5 ~= 310 then
								break
							end
							if load_i32_u8(memory_at_0, 47700) == 0 then
								break
							end
							if loc_3 == 0 then
								break
							end
							FUNC_LIST[398](loc_1)
							FUNC_LIST[459](loc_0, loc_1, loc_2, 1)
							desired = 1
							break
						end
						if desired then
							break
						end
						while true do
							while true do
								if loc_5 ~= 40 then
									while true do
										if loc_5 == 297 then
											desired = 5
											break
										end
										if loc_5 ~= 60 then
											desired = 4
											break
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								FUNC_LIST[459](loc_0, loc_1, loc_2, 0)
								desired = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							FUNC_LIST[398](loc_1)
							store_i64(memory_at_0, loc_4 + 144, i64_ZERO)
							reg_0 = FUNC_LIST[452](loc_1, add_i32(loc_4, 128), add_i32(loc_4, 144), 7312, 0)
							loc_1 = reg_0
							store_i32(memory_at_0, loc_0 + 4, 0)
							store_i32(memory_at_0, loc_0, loc_1)
							desired = 1
							break
						end
						if desired then
							break
						end
						loc_10 = load_i64(memory_at_0, loc_1 + 60)
						store_i64(memory_at_0, loc_4 + 144, loc_10)
						store_i64(memory_at_0, loc_4 + 152, load_i64(memory_at_0, loc_4 + 128))
						store_i64(memory_at_0, loc_4 + 104, loc_10)
						store_i64(memory_at_0, loc_4 + 112, load_i64(memory_at_0, loc_4 + 136))
						FUNC_LIST[358](add_i32(loc_4, 168), loc_8)
						store_i32(memory_at_0, loc_4 + 16, (if lt_i32(load_i32_i8(memory_at_0, loc_4 + 179), 0) then load_i32(memory_at_0, loc_4 + 168) else add_i32(loc_4, 168)))
						reg_0 = FUNC_LIST[462](loc_1, add_i32(loc_4, 104), add_i32(loc_4, 144), 2803, add_i32(loc_4, 16))
						loc_1 = reg_0
						store_i32(memory_at_0, loc_0 + 4, 0)
						store_i32(memory_at_0, loc_0, loc_1)
						if ge_i32(load_i32_i8(memory_at_0, loc_4 + 179), 0) then
							desired = 1
							break
						end
						FUNC_LIST[609](load_i32(memory_at_0, loc_4 + 168))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				store_i32(memory_at_0, loc_4, 3366)
				FUNC_LIST[390](add_i32(loc_1, 28), 4604, loc_4)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[457](loc_1, loc_3)
			loc_1 = reg_0
			store_i32(memory_at_0, loc_0 + 4, 0)
			store_i32(memory_at_0, loc_0, loc_1)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 192)
		break
	end
end
FUNC_LIST[436] = --[[ Luau::Parser::parseTypeSuffix(Luau::AstType*, Luau::Location const&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 144)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, loc_3 + 100, loc_1)
		store_i32(memory_at_0, loc_3 + 88, add_i32(loc_0, 328))
		store_i32(memory_at_0, loc_3 + 92, shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 332), load_i32(memory_at_0, loc_0 + 328)), 2))
		store_i32(memory_at_0, loc_3 + 96, 0)
		FUNC_LIST[403](add_i32(loc_3, 88), add_i32(loc_3, 100))
		loc_1 = add_i32(load_i32(memory_at_0, loc_0 + 120), 1)
		store_i32(memory_at_0, loc_0 + 120, loc_1)
		while true do
			if loc_1 <= load_i32(memory_at_0, 47712) then
				while true do
					store_i64(memory_at_0, loc_3 + 72, load_i64(memory_at_0, loc_2))
					loc_5 = add_i32(loc_0, 28)
					while true do
						while true do
							while true do
								while true do
									while true do
										loc_1 = load_i32(memory_at_0, loc_0 + 24)
										if le_i32(loc_1, 123) then
											while true do
												if loc_1 == 38 then
													desired = 7
													break
												end
												if loc_1 ~= 63 then
													desired = 3
													break
												end
												store_i64(memory_at_0, sub_i32(loc_3, 4294967232), load_i64(memory_at_0, loc_5 + 8))
												store_i64(memory_at_0, loc_3 + 56, load_i64(memory_at_0, loc_5))
												FUNC_LIST[398](loc_0)
												if band_i32(loc_4, 1) == 0 then
													while true do
														reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 84)
														loc_1 = reg_0
														store_i32_n8(memory_at_0, loc_3 + 140, 0)
														store_i32_n8(memory_at_0, loc_3 + 136, 0)
														loc_4 = load_i32(memory_at_0, loc_0 + 136)
														loc_7 = add_i32(loc_3, 128)
														store_i32_n8(memory_at_0, loc_7, 0)
														store_i64(memory_at_0, loc_3 + 24, load_i64(memory_at_0, loc_3 + 120))
														store_i32(memory_at_0, loc_3 + 32, load_i32(memory_at_0, loc_3 + 128))
														store_i32_n8(memory_at_0, loc_3 + 112, 0)
														store_i64(memory_at_0, loc_3 + 40, load_i64(memory_at_0, loc_3 + 136))
														store_i64(memory_at_0, loc_3 + 104, i64_ZERO)
														store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_3 + 112))
														reg_1 = FUNC_LIST[323](loc_1, add_i32(loc_3, 56), add_i32(loc_3, 40), loc_4, add_i32(loc_3, 16), add_i32(loc_3, 56), 0, add_i32(loc_3, 104))
														store_i32(memory_at_0, loc_3 + 52, reg_1)
														FUNC_LIST[403](add_i32(loc_3, 88), add_i32(loc_3, 52))
														break
													end
													if desired then
														break
													end
												end
												loc_4 = 1
												loc_7 = 1
												desired = 5
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										if loc_1 == 262 then
											desired = 6
											break
										end
										if loc_1 ~= 124 then
											desired = 3
											break
										end
										FUNC_LIST[398](loc_0)
										loc_1 = load_i32(memory_at_0, loc_0 + 120)
										FUNC_LIST[435](add_i32(loc_3, 112), loc_0, 0, 0)
										FUNC_LIST[403](add_i32(loc_3, 88), add_i32(loc_3, 112))
										store_i32(memory_at_0, loc_0 + 120, loc_1)
										loc_7 = 1
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									FUNC_LIST[398](loc_0)
									loc_1 = load_i32(memory_at_0, loc_0 + 120)
									FUNC_LIST[435](add_i32(loc_3, 112), loc_0, 0, 0)
									FUNC_LIST[403](add_i32(loc_3, 88), add_i32(loc_3, 112))
									store_i32(memory_at_0, loc_0 + 120, loc_1)
									loc_8 = 1
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								FUNC_LIST[401](loc_0, loc_5, 3343, 0)
								FUNC_LIST[398](loc_0)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							if load_i32(memory_at_0, loc_3 + 96) <= add_i32(load_i32(memory_at_0, 47728), band_i32(loc_4, 1)) then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						FUNC_LIST[390](add_i32(load_i32(memory_at_0, sub_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_3 + 88) + 4), 4)), 8), 4680, 0)
						error("out of code bounds")
					end
					if desired then
						break
					end
					while true do
						loc_6 = load_i32(memory_at_0, loc_3 + 96)
						if loc_6 == 1 then
							while true do
								reg_0 = load_i32(memory_at_0, loc_3 + 100)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if band_i32(band_i32(loc_7, loc_8), 1) ~= 0 then
							while true do
								loc_4 = load_i32(memory_at_0, loc_3 + 88)
								loc_1 = load_i32(memory_at_0, sub_i32(load_i32(memory_at_0, loc_4 + 4), 4))
								store_i64(memory_at_0, loc_3 + 112, load_i64(memory_at_0, loc_2))
								store_i64(memory_at_0, loc_3 + 120, load_i64(memory_at_0, loc_1 + 16))
								while true do
									if loc_6 == 0 then
										while true do
											store_i64(memory_at_0, loc_3 + 56, i64_ZERO)
											desired = 5
											break
										end
										if desired then
											if desired == 5 then
												desired = nil
											end
											break
										end
									end
									loc_1 = load_i32(memory_at_0, loc_4)
									loc_5 = load_i32(memory_at_0, loc_3 + 92)
									reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), shl_i32(loc_6, 2))
									loc_4 = reg_0
									store_i32(memory_at_0, loc_3 + 60, loc_6)
									store_i32(memory_at_0, loc_3 + 56, loc_4)
									loc_10 = band_i32(loc_6, 3)
									loc_5 = add_i32(shl_i32(loc_5, 2), loc_1)
									loc_8 = 0
									loc_1 = 0
									if loc_6 >= 4 then
										while true do
											loc_9 = band_i32(loc_6, 4294967292)
											loc_6 = 0
											while true do
												loc_7 = shl_i32(loc_1, 2)
												store_i32(memory_at_0, add_i32(loc_7, loc_4), load_i32(memory_at_0, add_i32(loc_5, loc_7)))
												loc_2 = bor_i32(loc_7, 4)
												store_i32(memory_at_0, add_i32(loc_2, loc_4), load_i32(memory_at_0, add_i32(loc_2, loc_5)))
												loc_2 = bor_i32(loc_7, 8)
												store_i32(memory_at_0, add_i32(loc_2, loc_4), load_i32(memory_at_0, add_i32(loc_2, loc_5)))
												loc_7 = bor_i32(loc_7, 12)
												store_i32(memory_at_0, add_i32(loc_7, loc_4), load_i32(memory_at_0, add_i32(loc_5, loc_7)))
												loc_1 = add_i32(loc_1, 4)
												loc_6 = add_i32(loc_6, 4)
												if loc_9 ~= loc_6 then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 5 then
												desired = nil
											end
											break
										end
									end
									if loc_10 == 0 then
										break
									end
									while true do
										loc_7 = shl_i32(loc_1, 2)
										store_i32(memory_at_0, add_i32(loc_7, loc_4), load_i32(memory_at_0, add_i32(loc_5, loc_7)))
										loc_1 = add_i32(loc_1, 1)
										loc_8 = add_i32(loc_8, 1)
										if loc_10 ~= loc_8 then
											continue
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									break
								end
								reg_0 = FUNC_LIST[452](loc_0, add_i32(loc_3, 112), add_i32(loc_3, 56), 6702, 0)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_1 = load_i32(memory_at_0, loc_3 + 88)
						store_i64(memory_at_0, loc_3 + 80, load_i64(memory_at_0, load_i32(memory_at_0, sub_i32(load_i32(memory_at_0, loc_1 + 4), 4)) + 16))
						if band_i32(loc_7, 1) ~= 0 then
							while true do
								loc_9 = load_i32(memory_at_0, loc_0 + 88)
								while true do
									if loc_6 == 0 then
										while true do
											store_i64(memory_at_0, loc_3 + 112, i64_ZERO)
											desired = 5
											break
										end
										if desired then
											if desired == 5 then
												desired = nil
											end
											break
										end
									end
									loc_0 = load_i32(memory_at_0, loc_1)
									loc_4 = load_i32(memory_at_0, loc_3 + 92)
									reg_0 = FUNC_LIST[353](loc_9, shl_i32(loc_6, 2))
									loc_1 = reg_0
									store_i32(memory_at_0, loc_3 + 116, loc_6)
									store_i32(memory_at_0, loc_3 + 112, loc_1)
									loc_2 = band_i32(loc_6, 3)
									loc_4 = add_i32(shl_i32(loc_4, 2), loc_0)
									loc_7 = 0
									loc_0 = 0
									if loc_6 >= 4 then
										while true do
											loc_10 = band_i32(loc_6, 4294967292)
											loc_8 = 0
											while true do
												loc_5 = shl_i32(loc_0, 2)
												store_i32(memory_at_0, add_i32(loc_5, loc_1), load_i32(memory_at_0, add_i32(loc_4, loc_5)))
												loc_6 = bor_i32(loc_5, 4)
												store_i32(memory_at_0, add_i32(loc_6, loc_1), load_i32(memory_at_0, add_i32(loc_4, loc_6)))
												loc_6 = bor_i32(loc_5, 8)
												store_i32(memory_at_0, add_i32(loc_6, loc_1), load_i32(memory_at_0, add_i32(loc_4, loc_6)))
												loc_5 = bor_i32(loc_5, 12)
												store_i32(memory_at_0, add_i32(loc_5, loc_1), load_i32(memory_at_0, add_i32(loc_4, loc_5)))
												loc_0 = add_i32(loc_0, 4)
												loc_8 = add_i32(loc_8, 4)
												if loc_10 ~= loc_8 then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 5 then
												desired = nil
											end
											break
										end
									end
									if loc_2 == 0 then
										break
									end
									while true do
										loc_5 = shl_i32(loc_0, 2)
										store_i32(memory_at_0, add_i32(loc_5, loc_1), load_i32(memory_at_0, add_i32(loc_4, loc_5)))
										loc_0 = add_i32(loc_0, 1)
										loc_7 = add_i32(loc_7, 1)
										if loc_2 ~= loc_7 then
											continue
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									break
								end
								reg_0 = FUNC_LIST[353](loc_9, 32)
								reg_0 = FUNC_LIST[332](reg_0, add_i32(loc_3, 72), add_i32(loc_3, 112))
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if band_i32(loc_8, 1) == 0 then
							desired = 1
							break
						end
						loc_9 = load_i32(memory_at_0, loc_0 + 88)
						while true do
							if loc_6 == 0 then
								while true do
									store_i64(memory_at_0, loc_3 + 112, i64_ZERO)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_0 = load_i32(memory_at_0, loc_1)
							loc_4 = load_i32(memory_at_0, loc_3 + 92)
							reg_0 = FUNC_LIST[353](loc_9, shl_i32(loc_6, 2))
							loc_1 = reg_0
							store_i32(memory_at_0, loc_3 + 116, loc_6)
							store_i32(memory_at_0, loc_3 + 112, loc_1)
							loc_2 = band_i32(loc_6, 3)
							loc_4 = add_i32(shl_i32(loc_4, 2), loc_0)
							loc_7 = 0
							loc_0 = 0
							if loc_6 >= 4 then
								while true do
									loc_10 = band_i32(loc_6, 4294967292)
									loc_8 = 0
									while true do
										loc_5 = shl_i32(loc_0, 2)
										store_i32(memory_at_0, add_i32(loc_5, loc_1), load_i32(memory_at_0, add_i32(loc_4, loc_5)))
										loc_6 = bor_i32(loc_5, 4)
										store_i32(memory_at_0, add_i32(loc_6, loc_1), load_i32(memory_at_0, add_i32(loc_4, loc_6)))
										loc_6 = bor_i32(loc_5, 8)
										store_i32(memory_at_0, add_i32(loc_6, loc_1), load_i32(memory_at_0, add_i32(loc_4, loc_6)))
										loc_5 = bor_i32(loc_5, 12)
										store_i32(memory_at_0, add_i32(loc_5, loc_1), load_i32(memory_at_0, add_i32(loc_4, loc_5)))
										loc_0 = add_i32(loc_0, 4)
										loc_8 = add_i32(loc_8, 4)
										if loc_10 ~= loc_8 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							if loc_2 == 0 then
								break
							end
							while true do
								loc_5 = shl_i32(loc_0, 2)
								store_i32(memory_at_0, add_i32(loc_5, loc_1), load_i32(memory_at_0, add_i32(loc_4, loc_5)))
								loc_0 = add_i32(loc_0, 1)
								loc_7 = add_i32(loc_7, 1)
								if loc_2 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[353](loc_9, 32)
						reg_0 = FUNC_LIST[334](reg_0, add_i32(loc_3, 72), add_i32(loc_3, 112))
						break
					end
					if desired then
						break
					end
					loc_1 = reg_0
					loc_0 = load_i32(memory_at_0, loc_3 + 88)
					loc_4 = add_i32(load_i32(memory_at_0, loc_0), shl_i32(load_i32(memory_at_0, loc_3 + 92), 2))
					if loc_4 ~= load_i32(memory_at_0, loc_0 + 4) then
						while true do
							store_i32(memory_at_0, loc_0 + 4, loc_4)
							break
						end
						if desired then
							break
						end
					end
					GLOBAL_LIST[0].value = add_i32(loc_3, 144)
					reg_0 = loc_1
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			store_i32(memory_at_0, loc_3, 3366)
			FUNC_LIST[390](add_i32(loc_0, 28), 4604, loc_3)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[390](loc_2, 6788, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[437] = --[[ Luau::Parser::parseBindingList(Luau::TempVector<Luau::Parser::Binding>&, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		while true do
			while true do
				if (if loc_3 ~= 0 then (if load_i32(memory_at_0, loc_1 + 24) == 262 then 1 else 0) else 0) ~= 0 then
					break
				end
				while true do
					while true do
						FUNC_LIST[421](add_i32(loc_4, 8), loc_1)
						FUNC_LIST[423](loc_2, add_i32(loc_4, 8))
						if load_i32(memory_at_0, loc_1 + 24) ~= 44 then
							break
						end
						FUNC_LIST[398](loc_1)
						if load_i32(memory_at_0, loc_1 + 24) ~= 262 then
							desired = 3
							break
						end
						if loc_3 == 0 then
							desired = 3
							break
						end
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i64(memory_at_0, loc_0 + 4, i64_ZERO)
				store_i32_n8(memory_at_0, loc_0, 0)
				store_i64(memory_at_0, loc_0 + 12, i64_ZERO)
				store_i32(memory_at_0, loc_0 + 20, 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = loc_4
			loc_3 = add_i32(loc_5, 16)
			store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_1 + 36))
			store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_1 + 28))
			FUNC_LIST[398](loc_1)
			loc_2 = 0
			if load_i32(memory_at_0, loc_1 + 24) == 58 then
				while true do
					FUNC_LIST[398](loc_1)
					reg_0 = FUNC_LIST[448](loc_1)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_2
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = reg_0
			store_i32_n8(memory_at_0, loc_0, 1)
			store_i64(memory_at_0, loc_0 + 4, load_i64(memory_at_0, loc_4 + 8))
			store_i64(memory_at_0, loc_0 + 12, load_i64(memory_at_0, loc_5 + 16))
			store_i32(memory_at_0, loc_0 + 20, loc_2)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[438] = --[[ Luau::Parser::parseOptionalReturnType() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_1 + 24)
				if loc_2 ~= 58 then
					while true do
						if loc_2 ~= 263 then
							desired = 2
							break
						end
						FUNC_LIST[401](loc_1, add_i32(loc_1, 28), 7528, 0)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[398](loc_1)
				loc_4 = load_i32(memory_at_0, loc_1 + 120)
				FUNC_LIST[454](add_i32(loc_3, 4), loc_1)
				loc_2 = add_i32(loc_3, 20)
				if load_i32(memory_at_0, loc_1 + 24) == 44 then
					while true do
						FUNC_LIST[401](loc_1, add_i32(loc_1, 28), 5866, 0)
						FUNC_LIST[398](loc_1)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				store_i32(memory_at_0, loc_1 + 120, loc_4)
				store_i32(memory_at_0, loc_0 + 8, load_i32(memory_at_0, loc_2 + 8))
				store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_2))
				store_i32_n8(memory_at_0, loc_0 + 12, 1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 12, 0)
			store_i32_n8(memory_at_0, loc_0, 0)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 32)
		break
	end
end
FUNC_LIST[439] = --[[ Luau::TempVector<std::__2::pair<Luau::AstName, Luau::Location>>::push_back(std::__2::pair<Luau::AstName, Luau::Location> const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_4 = load_i32(memory_at_0, loc_0)
					loc_2 = load_i32(memory_at_0, loc_4 + 4)
					if loc_2 ~= load_i32(memory_at_0, loc_4 + 8) then
						while true do
							store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_1))
							store_i32(memory_at_0, loc_2 + 16, load_i32(memory_at_0, loc_1 + 16))
							store_i64(memory_at_0, loc_2 + 8, load_i64(memory_at_0, loc_1 + 8))
							store_i32(memory_at_0, loc_4 + 4, add_i32(loc_2, 20))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = load_i32(memory_at_0, loc_4)
					loc_3 = div_i32(sub_i32(loc_2, loc_7), 20)
					loc_5 = add_i32(loc_3, 1)
					if loc_5 >= 214748365 then
						desired = 2
						break
					end
					loc_6 = shl_i32(loc_3, 1)
					loc_5 = (if loc_3 >= 107374182 then 214748364 else (if loc_5 < loc_6 then loc_6 else loc_5))
					if loc_5 ~= 0 then
						while true do
							if loc_5 >= 214748365 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](mul_i32(loc_5, 20))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = reg_0
					loc_3 = add_i32(loc_6, mul_i32(loc_3, 20))
					store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_1))
					store_i32(memory_at_0, loc_3 + 16, load_i32(memory_at_0, loc_1 + 16))
					store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_1 + 8))
					loc_1 = add_i32(mul_i32(loc_5, 20), loc_6)
					loc_5 = add_i32(loc_3, 20)
					if loc_2 ~= loc_7 then
						while true do
							while true do
								loc_3 = sub_i32(loc_3, 20)
								loc_2 = sub_i32(loc_2, 20)
								store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2))
								store_i32(memory_at_0, loc_3 + 16, load_i32(memory_at_0, loc_2 + 16))
								store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_2 + 8))
								if loc_2 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = load_i32(memory_at_0, loc_4)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = reg_0
					store_i32(memory_at_0, loc_4 + 8, loc_1)
					store_i32(memory_at_0, loc_4 + 4, loc_5)
					store_i32(memory_at_0, loc_4, loc_3)
					if loc_2 == 0 then
						break
					end
					FUNC_LIST[609](loc_2)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_4)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[440] = --[[ Luau::Parser::parseDeclaredClassMethod() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = i64_ZERO
	local loc_16 = i64_ZERO
	local loc_17 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 160)
		GLOBAL_LIST[0].value = loc_2
		FUNC_LIST[398](loc_1)
		store_i64(memory_at_0, loc_2 + 120, load_i64(memory_at_0, loc_1 + 36))
		store_i64(memory_at_0, loc_2 + 112, load_i64(memory_at_0, loc_1 + 28))
		while true do
			if load_i32(memory_at_0, loc_1 + 24) == 281 then
				while true do
					loc_11 = load_i32(memory_at_0, loc_1 + 48)
					FUNC_LIST[398](loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[427](loc_1, 4203)
			loc_11 = load_i32(memory_at_0, loc_1 + 132)
			break
		end
		store_i64(memory_at_0, loc_2 + 104, i64_ZERO)
		store_i64(memory_at_0, loc_2 + 96, i64_ZERO)
		loc_5 = load_i32(memory_at_0, loc_1 + 24)
		store_i32(memory_at_0, loc_2 + 84, loc_5)
		store_i64(memory_at_0, loc_2 + 88, load_i64(memory_at_0, loc_1 + 28))
		while true do
			if loc_5 ~= 40 then
				while true do
					FUNC_LIST[394](loc_1, 40, 1425)
					FUNC_LIST[381](add_i32(loc_2, 128), add_i32(loc_1, 4))
					if load_i32(memory_at_0, loc_2 + 128) ~= 40 then
						desired = 1
						break
					end
					FUNC_LIST[398](loc_1)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[398](loc_1)
			break
		end
		store_i32(memory_at_0, loc_2 + 72, add_i32(loc_1, 292))
		loc_5 = load_i32(memory_at_0, loc_1 + 292)
		loc_6 = load_i32(memory_at_0, loc_1 + 296)
		store_i32(memory_at_0, loc_2 + 80, 0)
		store_i32(memory_at_0, loc_2 + 76, div_i32(sub_i32(loc_6, loc_5), 24))
		loc_8 = 1
		while true do
			while true do
				if load_i32(memory_at_0, loc_1 + 24) == 41 then
					break
				end
				FUNC_LIST[437](add_i32(loc_2, 128), loc_1, add_i32(loc_2, 72), 1)
				loc_9 = load_i32(memory_at_0, loc_2 + 148)
				loc_8 = (if load_i32_u8(memory_at_0, loc_2 + 128) == 0 then 1 else 0)
				if load_i32(memory_at_0, loc_1 + 24) == 41 then
					break
				end
				FUNC_LIST[431](loc_1, 41, add_i32(loc_2, 84), 0)
				reg_0 = FUNC_LIST[432](loc_1, 41, loc_2, 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[398](loc_1)
			break
		end
		FUNC_LIST[438](add_i32(loc_2, 128), loc_1)
		store_i32(memory_at_0, loc_2 + 24, 0)
		store_i64(memory_at_0, loc_2 + 16, i64_ZERO)
		loc_5 = (if load_i32_u8(memory_at_0, loc_2 + 140) ~= 0 then add_i32(loc_2, 128) else add_i32(loc_2, 16))
		store_i32(memory_at_0, sub_i32(loc_2, 4294967232), load_i32(memory_at_0, loc_5 + 8))
		store_i64(memory_at_0, loc_2 + 56, load_i64(memory_at_0, loc_5))
		loc_15 = load_i64(memory_at_0, loc_1 + 36)
		store_i32(memory_at_0, loc_2 + 44, add_i32(loc_1, 328))
		loc_5 = load_i32(memory_at_0, loc_1 + 328)
		loc_6 = load_i32(memory_at_0, loc_1 + 332)
		store_i32(memory_at_0, loc_2 + 52, 0)
		store_i32(memory_at_0, loc_2 + 48, shr_i32(sub_i32(loc_6, loc_5), 2))
		loc_5 = add_i32(loc_1, 412)
		store_i32(memory_at_0, loc_2 + 32, loc_5)
		loc_6 = load_i32(memory_at_0, loc_1 + 412)
		loc_4 = load_i32(memory_at_0, loc_1 + 416)
		store_i32(memory_at_0, loc_2 + 40, 0)
		loc_6 = div_i32(sub_i32(loc_4, loc_6), 24)
		store_i32(memory_at_0, loc_2 + 36, loc_6)
		while true do
			while true do
				loc_4 = load_i32(memory_at_0, loc_2 + 80)
				if loc_4 == 0 then
					break
				end
				loc_7 = add_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 72)), mul_i32(load_i32(memory_at_0, loc_2 + 76), 24))
				loc_3 = load_i32(memory_at_0, loc_7)
				if loc_3 == 0 then
					break
				end
				reg_0 = FUNC_LIST[544](loc_3, 3924)
				if reg_0 ~= 0 then
					break
				end
				if load_i32(memory_at_0, loc_7 + 20) ~= 0 then
					break
				end
				if loc_4 ~= 1 then
					while true do
						loc_4 = add_i32(loc_2, 132)
						loc_5 = 1
						while true do
							loc_3 = mul_i32(loc_5, 24)
							loc_6 = add_i32(loc_3, add_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 72)), mul_i32(load_i32(memory_at_0, loc_2 + 76), 24)))
							loc_7 = load_i32(memory_at_0, loc_6)
							loc_16 = load_i64(memory_at_0, loc_6 + 12)
							store_i64(memory_at_0, loc_2 + 24, loc_16)
							loc_17 = load_i64(memory_at_0, loc_6 + 4)
							store_i64(memory_at_0, loc_2 + 16, loc_17)
							store_i32(memory_at_0, loc_2 + 128, loc_7)
							store_i64(memory_at_0, loc_4 + 8, loc_16)
							store_i64(memory_at_0, loc_4, loc_17)
							store_i32_n8(memory_at_0, loc_2 + 148, 1)
							FUNC_LIST[423](add_i32(loc_2, 32), add_i32(loc_2, 128))
							while true do
								loc_6 = add_i32(add_i32(loc_3, add_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 72)), mul_i32(load_i32(memory_at_0, loc_2 + 76), 24))), 20)
								if load_i32(memory_at_0, loc_6) ~= 0 then
									while true do
										FUNC_LIST[403](add_i32(loc_2, 44), loc_6)
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								store_i64(memory_at_0, loc_2 + 136, loc_15)
								store_i64(memory_at_0, loc_2 + 128, load_i64(memory_at_0, loc_2 + 112))
								store_i64(memory_at_0, loc_2 + 16, i64_ZERO)
								reg_1 = FUNC_LIST[452](loc_1, add_i32(loc_2, 128), add_i32(loc_2, 16), 5185, 0)
								store_i32(memory_at_0, loc_2 + 8, reg_1)
								FUNC_LIST[403](add_i32(loc_2, 44), add_i32(loc_2, 8))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							loc_5 = add_i32(loc_5, 1)
							if loc_5 < load_i32(memory_at_0, loc_2 + 80) then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if bor_i32((if loc_9 ~= 0 then 1 else 0), loc_8) == 0 then
					while true do
						FUNC_LIST[401](loc_1, add_i32(loc_2, 112), 5185, 0)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_12 = load_i32(memory_at_0, loc_1 + 88)
				store_i64(memory_at_0, loc_2 + 136, loc_15)
				store_i64(memory_at_0, loc_2 + 128, load_i64(memory_at_0, loc_2 + 112))
				while true do
					loc_3 = load_i32(memory_at_0, loc_2 + 52)
					if loc_3 == 0 then
						while true do
							store_i64(memory_at_0, loc_2 + 16, i64_ZERO)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 44))
					loc_4 = load_i32(memory_at_0, loc_2 + 48)
					reg_0 = FUNC_LIST[353](loc_12, shl_i32(loc_3, 2))
					loc_6 = reg_0
					store_i32(memory_at_0, loc_2 + 20, loc_3)
					store_i32(memory_at_0, loc_2 + 16, loc_6)
					loc_13 = band_i32(loc_3, 3)
					loc_4 = add_i32(shl_i32(loc_4, 2), loc_5)
					loc_7 = 0
					loc_5 = 0
					if loc_3 >= 4 then
						while true do
							loc_14 = band_i32(loc_3, 4294967292)
							loc_8 = 0
							while true do
								loc_3 = shl_i32(loc_5, 2)
								store_i32(memory_at_0, add_i32(loc_3, loc_6), load_i32(memory_at_0, add_i32(loc_3, loc_4)))
								loc_10 = bor_i32(loc_3, 4)
								store_i32(memory_at_0, add_i32(loc_10, loc_6), load_i32(memory_at_0, add_i32(loc_4, loc_10)))
								loc_10 = bor_i32(loc_3, 8)
								store_i32(memory_at_0, add_i32(loc_10, loc_6), load_i32(memory_at_0, add_i32(loc_4, loc_10)))
								loc_3 = bor_i32(loc_3, 12)
								store_i32(memory_at_0, add_i32(loc_3, loc_6), load_i32(memory_at_0, add_i32(loc_3, loc_4)))
								loc_5 = add_i32(loc_5, 4)
								loc_8 = add_i32(loc_8, 4)
								if loc_14 ~= loc_8 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_13 == 0 then
						break
					end
					while true do
						loc_3 = shl_i32(loc_5, 2)
						store_i32(memory_at_0, add_i32(loc_3, loc_6), load_i32(memory_at_0, add_i32(loc_3, loc_4)))
						loc_5 = add_i32(loc_5, 1)
						loc_7 = add_i32(loc_7, 1)
						if loc_13 ~= loc_7 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_2 + 24, loc_9)
				while true do
					loc_4 = load_i32(memory_at_0, loc_2 + 40)
					if loc_4 == 0 then
						while true do
							store_i64(memory_at_0, loc_2 + 8, i64_ZERO)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 32))
					loc_3 = load_i32(memory_at_0, loc_2 + 36)
					reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_1 + 88), mul_i32(loc_4, 24))
					loc_5 = reg_0
					store_i32(memory_at_0, loc_2 + 12, loc_4)
					store_i32(memory_at_0, loc_2 + 8, loc_5)
					loc_8 = band_i32(loc_4, 3)
					loc_6 = add_i32(mul_i32(loc_3, 24), loc_6)
					loc_7 = 0
					loc_1 = 0
					if loc_4 >= 4 then
						while true do
							loc_10 = band_i32(loc_4, 4294967292)
							loc_9 = 0
							while true do
								loc_3 = mul_i32(loc_1, 24)
								loc_4 = add_i32(loc_3, loc_5)
								loc_3 = add_i32(loc_3, loc_6)
								store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_3))
								store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_3 + 16))
								store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_3 + 8))
								loc_3 = mul_i32(bor_i32(loc_1, 1), 24)
								loc_4 = add_i32(loc_3, loc_5)
								loc_3 = add_i32(loc_3, loc_6)
								store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_3 + 16))
								store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_3 + 8))
								store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_3))
								loc_3 = mul_i32(bor_i32(loc_1, 2), 24)
								loc_4 = add_i32(loc_3, loc_5)
								loc_3 = add_i32(loc_3, loc_6)
								store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_3 + 16))
								store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_3 + 8))
								store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_3))
								loc_3 = mul_i32(bor_i32(loc_1, 3), 24)
								loc_4 = add_i32(loc_3, loc_5)
								loc_3 = add_i32(loc_3, loc_6)
								store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_3 + 16))
								store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_3 + 8))
								store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_3))
								loc_1 = add_i32(loc_1, 4)
								loc_9 = add_i32(loc_9, 4)
								if loc_10 ~= loc_9 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_8 == 0 then
						break
					end
					while true do
						loc_3 = mul_i32(loc_1, 24)
						loc_4 = add_i32(loc_3, loc_5)
						loc_3 = add_i32(loc_3, loc_6)
						store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_3))
						store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_3 + 16))
						store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_3 + 8))
						loc_1 = add_i32(loc_1, 1)
						loc_7 = add_i32(loc_7, 1)
						if loc_8 ~= loc_7 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[353](loc_12, 76)
				reg_0 = FUNC_LIST[327](reg_0, add_i32(loc_2, 128), add_i32(loc_2, 104), add_i32(loc_2, 96), add_i32(loc_2, 16), add_i32(loc_2, 8), add_i32(loc_2, 56))
				loc_1 = reg_0
				store_i32_n8(memory_at_0, loc_0 + 8, 1)
				store_i32(memory_at_0, loc_0 + 4, loc_1)
				store_i32(memory_at_0, loc_0, loc_11)
				loc_6 = load_i32(memory_at_0, loc_2 + 36)
				loc_5 = load_i32(memory_at_0, loc_2 + 32)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_0, loc_11)
			store_i64(memory_at_0, loc_2 + 136, loc_15)
			store_i64(memory_at_0, loc_2 + 128, load_i64(memory_at_0, loc_2 + 112))
			store_i64(memory_at_0, loc_2 + 16, i64_ZERO)
			reg_0 = FUNC_LIST[452](loc_1, add_i32(loc_2, 128), add_i32(loc_2, 16), 2939, 0)
			loc_1 = reg_0
			store_i32_n8(memory_at_0, loc_0 + 8, 1)
			store_i32(memory_at_0, loc_0 + 4, loc_1)
			break
		end
		loc_1 = add_i32(load_i32(memory_at_0, loc_5), mul_i32(loc_6, 24))
		if loc_1 ~= load_i32(memory_at_0, loc_5 + 4) then
			while true do
				store_i32(memory_at_0, loc_5 + 4, loc_1)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_2 + 44)
		loc_0 = add_i32(load_i32(memory_at_0, loc_1), shl_i32(load_i32(memory_at_0, loc_2 + 48), 2))
		if loc_0 ~= load_i32(memory_at_0, loc_1 + 4) then
			while true do
				store_i32(memory_at_0, loc_1 + 4, loc_0)
				break
			end
		end
		loc_1 = load_i32(memory_at_0, loc_2 + 72)
		loc_0 = add_i32(load_i32(memory_at_0, loc_1), mul_i32(load_i32(memory_at_0, loc_2 + 76), 24))
		if loc_0 ~= load_i32(memory_at_0, loc_1 + 4) then
			while true do
				store_i32(memory_at_0, loc_1 + 4, loc_0)
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 160)
		break
	end
end
FUNC_LIST[441] = --[[ Luau::TempVector<Luau::AstDeclaredClassProp>::push_back(Luau::AstDeclaredClassProp const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_4 = load_i32(memory_at_0, loc_0)
					loc_2 = load_i32(memory_at_0, loc_4 + 4)
					if loc_2 ~= load_i32(memory_at_0, loc_4 + 8) then
						while true do
							store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_1))
							store_i32(memory_at_0, loc_2 + 8, load_i32(memory_at_0, loc_1 + 8))
							store_i32(memory_at_0, loc_4 + 4, add_i32(loc_2, 12))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = load_i32(memory_at_0, loc_4)
					loc_3 = div_i32(sub_i32(loc_2, loc_7), 12)
					loc_5 = add_i32(loc_3, 1)
					if loc_5 >= 357913942 then
						desired = 2
						break
					end
					loc_6 = shl_i32(loc_3, 1)
					loc_5 = (if loc_3 >= 178956970 then 357913941 else (if loc_5 < loc_6 then loc_6 else loc_5))
					if loc_5 ~= 0 then
						while true do
							if loc_5 >= 357913942 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](mul_i32(loc_5, 12))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = reg_0
					loc_3 = add_i32(loc_6, mul_i32(loc_3, 12))
					store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_1))
					store_i32(memory_at_0, loc_3 + 8, load_i32(memory_at_0, loc_1 + 8))
					loc_1 = add_i32(mul_i32(loc_5, 12), loc_6)
					loc_5 = add_i32(loc_3, 12)
					if loc_2 ~= loc_7 then
						while true do
							while true do
								loc_3 = sub_i32(loc_3, 12)
								loc_2 = sub_i32(loc_2, 12)
								store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2))
								store_i32_n8(memory_at_0, loc_3 + 8, load_i32_u8(memory_at_0, loc_2 + 8))
								if loc_2 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = load_i32(memory_at_0, loc_4)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = reg_0
					store_i32(memory_at_0, loc_4 + 8, loc_1)
					store_i32(memory_at_0, loc_4 + 4, loc_5)
					store_i32(memory_at_0, loc_4, loc_3)
					if loc_2 == 0 then
						break
					end
					FUNC_LIST[609](loc_2)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_4)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[442] = --[[ Luau::Parser::parseCharArray() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_3 = add_i32(loc_1, 424)
		reg_0 = FUNC_LIST[672](loc_3, load_i32(memory_at_0, loc_1 + 48), load_i32(memory_at_0, loc_1 + 44))
		while true do
			while true do
				while true do
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, }
						end)()
					end
					temp = br_map[1][sub_i32(load_i32(memory_at_0, loc_1 + 24), 269)] or 1
					if temp < 1 then
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[383](loc_3)
				if reg_0 ~= 0 then
					desired = 1
					break
				end
				FUNC_LIST[398](loc_1)
				store_i32_n8(memory_at_0, loc_0, 0)
				store_i32_n8(memory_at_0, loc_0 + 8, 0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[385](loc_3)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_7 = load_i32(memory_at_0, loc_1 + 428)
		loc_2 = load_i32_i8(memory_at_0, loc_1 + 435)
		loc_5 = (if lt_i32(loc_2, 0) then 1 else 0)
		loc_8 = (if loc_5 ~= 0 then loc_7 else loc_2)
		loc_6 = add_i32(loc_8, 1)
		if loc_6 ~= 0 then
			while true do
				loc_3 = (if loc_5 ~= 0 then load_i32(memory_at_0, loc_1 + 424) else loc_3)
				loc_9 = band_i32(loc_6, 3)
				loc_7 = 0
				reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_1 + 88), loc_6)
				loc_4 = reg_0
				loc_2 = 0
				if loc_8 >= 3 then
					while true do
						loc_8 = band_i32(loc_6, 4294967292)
						loc_6 = 0
						while true do
							store_i32_n8(memory_at_0, add_i32(loc_2, loc_4), load_i32_u8(memory_at_0, add_i32(loc_2, loc_3)))
							loc_5 = bor_i32(loc_2, 1)
							store_i32_n8(memory_at_0, add_i32(loc_5, loc_4), load_i32_u8(memory_at_0, add_i32(loc_3, loc_5)))
							loc_5 = bor_i32(loc_2, 2)
							store_i32_n8(memory_at_0, add_i32(loc_5, loc_4), load_i32_u8(memory_at_0, add_i32(loc_3, loc_5)))
							loc_5 = bor_i32(loc_2, 3)
							store_i32_n8(memory_at_0, add_i32(loc_5, loc_4), load_i32_u8(memory_at_0, add_i32(loc_3, loc_5)))
							loc_2 = add_i32(loc_2, 4)
							loc_6 = add_i32(loc_6, 4)
							if loc_8 ~= loc_6 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						break
					end
				end
				if loc_9 ~= 0 then
					while true do
						while true do
							store_i32_n8(memory_at_0, add_i32(loc_2, loc_4), load_i32_u8(memory_at_0, add_i32(loc_2, loc_3)))
							loc_2 = add_i32(loc_2, 1)
							loc_7 = add_i32(loc_7, 1)
							if loc_9 ~= loc_7 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						break
					end
				end
				loc_7 = load_i32(memory_at_0, loc_1 + 428)
				reg_0 = load_i32_u8(memory_at_0, loc_1 + 435)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_2
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = reg_0
		FUNC_LIST[398](loc_1)
		store_i32(memory_at_0, loc_0, loc_4)
		store_i32(memory_at_0, loc_0 + 4, (if lt_i32(extend_i32_n8(loc_2), 0) then loc_7 else loc_2))
		store_i32_n8(memory_at_0, loc_0 + 8, 1)
		break
	end
end
FUNC_LIST[443] = --[[ Luau::Parser::report(Luau::Location const&, char const*, void*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		while true do
			while true do
				while true do
					loc_5 = load_i32(memory_at_0, loc_0 + 200)
					if loc_5 ~= load_i32(memory_at_0, loc_0 + 196) then
						while true do
							reg_0 = FUNC_LIST[387](loc_1, sub_i32(loc_5, 28))
							if reg_0 ~= 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[474](add_i32(loc_4, 4), loc_2, loc_3)
					if load_i32(memory_at_0, 47744) == 1 then
						desired = 2
						break
					end
					loc_3 = add_i32(loc_0, 196)
					while true do
						loc_2 = load_i32(memory_at_0, loc_0 + 200)
						if loc_2 < load_i32(memory_at_0, loc_0 + 204) then
							while true do
								reg_0 = FUNC_LIST[388](loc_2, loc_1, add_i32(loc_4, 4))
								loc_2 = add_i32(loc_2, 32)
								store_i32(memory_at_0, loc_0 + 200, loc_2)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[470](loc_3, loc_1, add_i32(loc_4, 4))
						loc_2 = load_i32(memory_at_0, loc_0 + 200)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_0 = load_i32(memory_at_0, 47744)
					if loc_0 <= shr_i32(sub_i32(loc_2, load_i32(memory_at_0, loc_3)), 5) then
						desired = 1
						break
					end
					if ge_i32(load_i32_i8(memory_at_0, loc_4 + 15), 0) then
						break
					end
					FUNC_LIST[609](load_i32(memory_at_0, loc_4 + 4))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				GLOBAL_LIST[0].value = add_i32(loc_4, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[538](32)
			loc_0 = reg_0
			reg_0 = FUNC_LIST[388](loc_0, loc_1, add_i32(loc_4, 4))
			FUNC_LIST[0](loc_0, 30192, 174)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32(memory_at_0, loc_4, loc_0)
		FUNC_LIST[390](loc_1, 7038, loc_4)
		error("out of code bounds")
	end
end
FUNC_LIST[444] = --[[ Luau::Parser::parseAssertionExpr() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local reg_0
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_1
		loc_5 = load_i64(memory_at_0, loc_0 + 28)
		reg_0 = FUNC_LIST[464](loc_0)
		loc_2 = reg_0
		if load_i32(memory_at_0, loc_0 + 24) == 264 then
			while true do
				FUNC_LIST[398](loc_0)
				loc_3 = load_i32(memory_at_0, loc_0 + 120)
				loc_4 = add_i32(loc_0, 28)
				store_i64(memory_at_0, loc_1 + 24, load_i64(memory_at_0, loc_4 + 8))
				store_i64(memory_at_0, loc_1 + 16, load_i64(memory_at_0, loc_0 + 28))
				FUNC_LIST[435](add_i32(loc_1, 8), loc_0, 0, 0)
				loc_4 = load_i32(memory_at_0, loc_1 + 8)
				store_i32(memory_at_0, loc_0 + 120, loc_3)
				reg_0 = FUNC_LIST[436](loc_0, loc_4, add_i32(loc_1, 16))
				loc_3 = reg_0
				loc_0 = load_i32(memory_at_0, loc_0 + 88)
				store_i64(memory_at_0, loc_1 + 16, loc_5)
				store_i64(memory_at_0, loc_1 + 24, load_i64(memory_at_0, loc_3 + 16))
				reg_0 = FUNC_LIST[353](loc_0, 32)
				reg_0 = FUNC_LIST[275](reg_0, add_i32(loc_1, 16), loc_2, loc_3)
				break
			end
		else
			while true do
				reg_0 = loc_2
				break
			end
		end
		loc_2 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_1, 32)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[445] = --[[ Luau::Parser::checkBinaryConfusables(Luau::Parser::BinaryOpPriority const*, unsigned int) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_4
		while true do
			while true do
				while true do
					while true do
						loc_5 = load_i32(memory_at_0, loc_1 + 24)
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 2, 1, 1, 1, 1, 2, }
							end)()
						end
						temp = br_map[1][sub_i32(loc_5, 33)] or 0
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_5 == 124 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32_n8(memory_at_0, loc_0 + 4, 0)
				store_i32_n8(memory_at_0, loc_0, 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = load_i64(memory_at_0, loc_1 + 28)
			FUNC_LIST[381](add_i32(loc_4, 20), add_i32(loc_1, 4))
			reg_0 = loc_0
			while true do
				while true do
					if load_i32(memory_at_0, loc_1 + 24) ~= 38 then
						break
					end
					if load_i32(memory_at_0, loc_4 + 20) ~= 38 then
						break
					end
					reg_1 = FUNC_LIST[386](add_i32(loc_1, 36), add_i32(loc_4, 24))
					if reg_1 == 0 then
						break
					end
					if loc_3 >= load_i32_u8(memory_at_0, loc_2 + 28) then
						break
					end
					FUNC_LIST[398](loc_1)
					store_i64(memory_at_0, loc_4, loc_6)
					store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_4 + 32))
					FUNC_LIST[401](loc_1, loc_4, 6336, 0)
					store_i32(memory_at_0, loc_0, 14)
					reg_1 = 1
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if load_i32(memory_at_0, loc_1 + 24) ~= 124 then
						break
					end
					if load_i32(memory_at_0, loc_4 + 20) ~= 124 then
						break
					end
					reg_1 = FUNC_LIST[386](add_i32(loc_1, 36), add_i32(loc_4, 24))
					if reg_1 == 0 then
						break
					end
					if loc_3 >= load_i32_u8(memory_at_0, loc_2 + 30) then
						break
					end
					FUNC_LIST[398](loc_1)
					store_i64(memory_at_0, loc_4, loc_6)
					store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_4 + 32))
					FUNC_LIST[401](loc_1, loc_4, 6227, 0)
					store_i32(memory_at_0, loc_0, 15)
					reg_1 = 1
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if load_i32(memory_at_0, loc_1 + 24) ~= 33 then
						break
					end
					if load_i32(memory_at_0, loc_4 + 20) ~= 61 then
						break
					end
					reg_1 = FUNC_LIST[386](add_i32(loc_1, 36), add_i32(loc_4, 24))
					if reg_1 == 0 then
						break
					end
					if loc_3 >= load_i32_u8(memory_at_0, loc_2 + 16) then
						break
					end
					FUNC_LIST[398](loc_1)
					store_i64(memory_at_0, loc_4, loc_6)
					store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_4 + 32))
					FUNC_LIST[401](loc_1, loc_4, 6433, 0)
					store_i32(memory_at_0, loc_0, 8)
					reg_1 = 1
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32_n8(memory_at_0, loc_0, 0)
				reg_1 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = reg_1
			store_i32_n8(memory_at_0, reg_0 + 4, loc_1)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 48)
		break
	end
end
FUNC_LIST[446] = --[[ Luau::Parser::expectMatchEndAndConsumeFail(Luau::Lexeme::Type, Luau::Parser::MatchLexeme const&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				loc_4 = load_i32(memory_at_0, loc_0 + 140)
				if loc_4 == 0 then
					break
				end
				if load_i32(memory_at_0, loc_0 + 144) <= load_i32(memory_at_0, loc_2 + 4) then
					break
				end
				store_i64(memory_at_0, loc_3 + 16, i64_ZERO)
				store_i64(memory_at_0, loc_3 + 8, i64_ZERO)
				reg_1 = FUNC_LIST[354](add_i32(loc_3, 24), add_i32(loc_3, 8), loc_4)
				FUNC_LIST[358](add_i32(loc_3, 52), reg_1)
				loc_4 = load_i32(memory_at_0, loc_0 + 144)
				store_i32(memory_at_0, loc_3, (if lt_i32(load_i32_i8(memory_at_0, loc_3 + 63), 0) then load_i32(memory_at_0, loc_3 + 52) else add_i32(loc_3, 52)))
				store_i32(memory_at_0, loc_3 + 4, add_i32(loc_4, 1))
				FUNC_LIST[473](add_i32(loc_3, 24), 6010, loc_3)
				FUNC_LIST[431](loc_0, loc_1, loc_2, (if lt_i32(load_i32_i8(memory_at_0, loc_3 + 35), 0) then load_i32(memory_at_0, loc_3 + 24) else add_i32(loc_3, 24)))
				if lt_i32(load_i32_i8(memory_at_0, loc_3 + 35), 0) then
					while true do
						FUNC_LIST[609](load_i32(memory_at_0, loc_3 + 24))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if ge_i32(load_i32_i8(memory_at_0, loc_3 + 63), 0) then
					desired = 1
					break
				end
				FUNC_LIST[609](load_i32(memory_at_0, loc_3 + 52))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[431](loc_0, loc_1, loc_2, 0)
			break
		end
		GLOBAL_LIST[0].value = sub_i32(loc_3, 4294967232)
		break
	end
end
FUNC_LIST[447] = --[[ Luau::Parser::expectAndConsume(char, char const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_3
		while true do
			loc_1 = band_i32(loc_1, 255)
			loc_4 = (if loc_1 == load_i32(memory_at_0, loc_0 + 24) then 1 else 0)
			if loc_4 == 0 then
				while true do
					FUNC_LIST[394](loc_0, loc_1, loc_2)
					FUNC_LIST[381](add_i32(loc_3, 4), add_i32(loc_0, 4))
					if loc_1 ~= load_i32(memory_at_0, loc_3 + 4) then
						desired = 1
						break
					end
					FUNC_LIST[398](loc_0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[398](loc_0)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 32)
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[448] = --[[ Luau::Parser::parseVariadicArgumentTypePack() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = i64_ZERO
	local loc_5 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_1
		while true do
			while true do
				if load_i32(memory_at_0, loc_0 + 24) ~= 281 then
					break
				end
				loc_2 = add_i32(loc_0, 4)
				FUNC_LIST[381](add_i32(loc_1, 8), loc_2)
				if load_i32(memory_at_0, loc_1 + 8) ~= 262 then
					break
				end
				while true do
					if load_i32(memory_at_0, loc_0 + 24) == 281 then
						while true do
							loc_4 = load_i64(memory_at_0, loc_0 + 28)
							loc_3 = load_i32(memory_at_0, loc_0 + 48)
							FUNC_LIST[398](loc_0)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[427](loc_0, 4347)
					loc_3 = load_i32(memory_at_0, loc_0 + 132)
					loc_4 = load_i64(memory_at_0, loc_0 + 28)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = load_i64(memory_at_0, loc_0 + 36)
				while true do
					if load_i32(memory_at_0, loc_0 + 24) ~= 262 then
						while true do
							FUNC_LIST[394](loc_0, 262, 3289)
							FUNC_LIST[381](add_i32(loc_1, 8), loc_2)
							if load_i32(memory_at_0, loc_1 + 8) ~= 262 then
								desired = 3
								break
							end
							FUNC_LIST[398](loc_0)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[398](loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_0 = load_i32(memory_at_0, loc_0 + 88)
				store_i64(memory_at_0, loc_1 + 16, loc_5)
				store_i64(memory_at_0, loc_1 + 8, loc_4)
				reg_0 = FUNC_LIST[353](loc_0, 28)
				reg_0 = FUNC_LIST[346](reg_0, add_i32(loc_1, 8), loc_3)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = load_i32(memory_at_0, loc_0 + 120)
			store_i64(memory_at_0, loc_1 + 16, load_i64(memory_at_0, loc_0 + 36))
			store_i64(memory_at_0, loc_1 + 8, load_i64(memory_at_0, loc_0 + 28))
			FUNC_LIST[435](add_i32(loc_1, 40), loc_0, 0, 0)
			loc_3 = load_i32(memory_at_0, loc_1 + 40)
			store_i32(memory_at_0, loc_0 + 120, loc_2)
			reg_0 = FUNC_LIST[436](loc_0, loc_3, add_i32(loc_1, 8))
			loc_2 = reg_0
			reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 28)
			reg_0 = FUNC_LIST[344](reg_0, add_i32(loc_2, 8), loc_2)
			break
		end
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_1, 48)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[449] = --[[ Luau::Parser::parseNameExpr(char const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = add_i32(loc_0, 28)
		while true do
			if load_i32(memory_at_0, loc_0 + 24) ~= 281 then
				while true do
					FUNC_LIST[427](loc_0, loc_1)
					loc_1 = load_i32(memory_at_0, loc_0 + 88)
					store_i64(memory_at_0, loc_2 + 8, i64_ZERO)
					loc_4 = load_i32(memory_at_0, loc_0 + 196)
					loc_0 = load_i32(memory_at_0, loc_0 + 200)
					reg_0 = FUNC_LIST[353](loc_1, 36)
					reg_0 = FUNC_LIST[279](reg_0, loc_3, add_i32(loc_2, 8), sub_i32(shr_i32(sub_i32(loc_0, loc_4), 5), 1))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_5 = load_i32(memory_at_0, loc_0 + 48)
			loc_1 = add_i32(loc_2, 40)
			store_i64(memory_at_0, loc_1, load_i64(memory_at_0, loc_3 + 8))
			store_i64(memory_at_0, loc_2 + 32, load_i64(memory_at_0, loc_3))
			FUNC_LIST[398](loc_0)
			store_i64(memory_at_0, loc_2 + 20, load_i64(memory_at_0, loc_2 + 40))
			store_i32(memory_at_0, loc_2 + 8, loc_5)
			store_i64(memory_at_0, loc_2 + 12, load_i64(memory_at_0, loc_2 + 32))
			store_i32_n8(memory_at_0, loc_2 + 28, 1)
			loc_7 = add_i32(loc_2, 12)
			while true do
				if load_i32(memory_at_0, loc_0 + 172) == 0 then
					break
				end
				loc_8 = load_i32(memory_at_0, loc_0 + 176)
				if loc_8 == loc_5 then
					break
				end
				loc_1 = bxor_i32(shr_u32(loc_5, 4), shr_u32(loc_5, 9))
				loc_4 = sub_i32(load_i32(memory_at_0, loc_0 + 168), 1)
				loc_9 = load_i32(memory_at_0, loc_0 + 164)
				loc_3 = 0
				while true do
					loc_6 = band_i32(loc_1, loc_4)
					loc_10 = add_i32(shl_i32(loc_6, 3), loc_9)
					loc_1 = load_i32(memory_at_0, loc_10)
					if loc_1 ~= loc_5 then
						while true do
							if loc_1 == loc_8 then
								desired = 2
								break
							end
							loc_3 = add_i32(loc_3, 1)
							loc_1 = add_i32(loc_6, loc_3)
							if loc_3 <= loc_4 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = load_i32(memory_at_0, loc_10 + 4)
				if loc_3 == 0 then
					break
				end
				loc_1 = load_i32(memory_at_0, loc_0 + 152)
				loc_4 = load_i32(memory_at_0, loc_0 + 156)
				loc_6 = load_i32(memory_at_0, loc_3 + 24)
				reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 32)
				reg_0 = FUNC_LIST[255](reg_0, loc_7, loc_3, (if sub_i32(shr_i32(sub_i32(loc_4, loc_1), 3), 1) ~= loc_6 then 1 else 0))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 28)
			reg_0 = FUNC_LIST[257](reg_0, loc_7, add_i32(loc_2, 8))
			break
		end
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 48)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[450] = --[[ Luau::Parser::prepareFunctionArguments(Luau::Location const&, bool, Luau::TempVector<Luau::Parser::Binding> const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		if loc_3 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_5 + 8, load_i32(memory_at_0, loc_1 + 124))
				store_i64(memory_at_0, loc_5 + 20, load_i64(memory_at_0, loc_2 + 8))
				store_i64(memory_at_0, loc_5 + 12, load_i64(memory_at_0, loc_2))
				store_i32(memory_at_0, loc_5 + 28, 0)
				reg_0 = FUNC_LIST[422](loc_1, add_i32(loc_5, 8))
				break
			end
		else
			while true do
				reg_0 = loc_8
				break
			end
		end
		loc_8 = reg_0
		loc_3 = add_i32(loc_1, 304)
		store_i32(memory_at_0, loc_5 + 8, loc_3)
		loc_2 = load_i32(memory_at_0, loc_1 + 304)
		loc_6 = load_i32(memory_at_0, loc_1 + 308)
		store_i32(memory_at_0, loc_5 + 16, 0)
		loc_6 = shr_i32(sub_i32(loc_6, loc_2), 2)
		store_i32(memory_at_0, loc_5 + 12, loc_6)
		loc_2 = 0
		while true do
			if load_i32(memory_at_0, loc_4 + 8) == 0 then
				break
			end
			while true do
				reg_1 = FUNC_LIST[422](loc_1, add_i32(add_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_4)), mul_i32(load_i32(memory_at_0, loc_4 + 4), 24)), mul_i32(loc_2, 24)))
				store_i32(memory_at_0, loc_5 + 4, reg_1)
				FUNC_LIST[403](add_i32(loc_5, 8), add_i32(loc_5, 4))
				loc_2 = add_i32(loc_2, 1)
				if loc_2 < load_i32(memory_at_0, loc_4 + 8) then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = load_i32(memory_at_0, loc_5 + 12)
			loc_3 = load_i32(memory_at_0, loc_5 + 8)
			loc_7 = load_i32(memory_at_0, loc_5 + 16)
			if loc_7 == 0 then
				while true do
					loc_7 = 0
					loc_2 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = add_i32(load_i32(memory_at_0, loc_3), shl_i32(loc_6, 2))
			loc_6 = 0
			reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_1 + 88), shl_i32(loc_7, 2))
			loc_2 = reg_0
			loc_4 = 0
			if loc_7 >= 4 then
				while true do
					loc_11 = band_i32(loc_7, 4294967292)
					while true do
						loc_1 = shl_i32(loc_4, 2)
						store_i32(memory_at_0, add_i32(loc_1, loc_2), load_i32(memory_at_0, add_i32(loc_1, loc_3)))
						loc_9 = bor_i32(loc_1, 4)
						store_i32(memory_at_0, add_i32(loc_9, loc_2), load_i32(memory_at_0, add_i32(loc_3, loc_9)))
						loc_9 = bor_i32(loc_1, 8)
						store_i32(memory_at_0, add_i32(loc_9, loc_2), load_i32(memory_at_0, add_i32(loc_3, loc_9)))
						loc_1 = bor_i32(loc_1, 12)
						store_i32(memory_at_0, add_i32(loc_1, loc_2), load_i32(memory_at_0, add_i32(loc_1, loc_3)))
						loc_4 = add_i32(loc_4, 4)
						loc_10 = add_i32(loc_10, 4)
						if loc_11 ~= loc_10 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_12 = band_i32(loc_7, 3)
			if loc_12 ~= 0 then
				while true do
					while true do
						loc_1 = shl_i32(loc_4, 2)
						store_i32(memory_at_0, add_i32(loc_1, loc_2), load_i32(memory_at_0, add_i32(loc_1, loc_3)))
						loc_4 = add_i32(loc_4, 1)
						loc_6 = add_i32(loc_6, 1)
						if loc_12 ~= loc_6 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_6 = load_i32(memory_at_0, loc_5 + 12)
			loc_3 = load_i32(memory_at_0, loc_5 + 8)
			break
		end
		store_i32(memory_at_0, loc_0 + 8, loc_7)
		store_i32(memory_at_0, loc_0 + 4, loc_2)
		store_i32(memory_at_0, loc_0, loc_8)
		loc_4 = add_i32(load_i32(memory_at_0, loc_3), shl_i32(loc_6, 2))
		if loc_4 ~= load_i32(memory_at_0, loc_3 + 4) then
			while true do
				store_i32(memory_at_0, loc_3 + 4, loc_4)
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_5, 32)
		break
	end
end
FUNC_LIST[451] = --[[ Luau::Parser::parseTypePack() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = i64_ZERO
	local loc_5 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_1
		while true do
			loc_2 = load_i32(memory_at_0, loc_0 + 24)
			if loc_2 == 262 then
				while true do
					loc_4 = load_i64(memory_at_0, loc_0 + 28)
					FUNC_LIST[398](loc_0)
					loc_2 = load_i32(memory_at_0, loc_0 + 120)
					store_i64(memory_at_0, loc_1 + 24, load_i64(memory_at_0, loc_0 + 36))
					store_i64(memory_at_0, loc_1 + 16, load_i64(memory_at_0, loc_0 + 28))
					FUNC_LIST[435](add_i32(loc_1, 8), loc_0, 0, 0)
					loc_3 = load_i32(memory_at_0, loc_1 + 8)
					store_i32(memory_at_0, loc_0 + 120, loc_2)
					reg_0 = FUNC_LIST[436](loc_0, loc_3, add_i32(loc_1, 16))
					loc_2 = reg_0
					loc_0 = load_i32(memory_at_0, loc_0 + 88)
					store_i64(memory_at_0, loc_1 + 16, loc_4)
					store_i64(memory_at_0, loc_1 + 24, load_i64(memory_at_0, loc_2 + 16))
					reg_0 = FUNC_LIST[353](loc_0, 28)
					reg_0 = FUNC_LIST[344](reg_0, add_i32(loc_1, 16), loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_2 == 281 then
				while true do
					loc_3 = add_i32(loc_0, 4)
					FUNC_LIST[381](add_i32(loc_1, 16), loc_3)
					loc_2 = 0
					reg_0 = loc_2
					if load_i32(memory_at_0, loc_1 + 16) ~= 262 then
						desired = 1
						break
					end
					while true do
						if load_i32(memory_at_0, loc_0 + 24) == 281 then
							while true do
								loc_4 = load_i64(memory_at_0, loc_0 + 28)
								loc_2 = load_i32(memory_at_0, loc_0 + 48)
								FUNC_LIST[398](loc_0)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[427](loc_0, 4347)
						loc_2 = load_i32(memory_at_0, loc_0 + 132)
						loc_4 = load_i64(memory_at_0, loc_0 + 28)
						break
					end
					if desired then
						break
					end
					loc_5 = load_i64(memory_at_0, loc_0 + 36)
					while true do
						if load_i32(memory_at_0, loc_0 + 24) ~= 262 then
							while true do
								FUNC_LIST[394](loc_0, 262, 3289)
								FUNC_LIST[381](add_i32(loc_1, 16), loc_3)
								if load_i32(memory_at_0, loc_1 + 16) ~= 262 then
									desired = 3
									break
								end
								FUNC_LIST[398](loc_0)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[398](loc_0)
						break
					end
					if desired then
						break
					end
					loc_0 = load_i32(memory_at_0, loc_0 + 88)
					store_i64(memory_at_0, loc_1 + 24, loc_5)
					store_i64(memory_at_0, loc_1 + 16, loc_4)
					reg_0 = FUNC_LIST[353](loc_0, 28)
					reg_0 = FUNC_LIST[346](reg_0, add_i32(loc_1, 16), loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = 0
			break
		end
		loc_2 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_1, 48)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[452] = --[[ Luau::Parser::reportTypeError(Luau::Location const&, Luau::AstArray<Luau::AstType*> const&, char const*, ...) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local reg_0
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		store_i32(memory_at_0, loc_5 + 12, loc_4)
		FUNC_LIST[443](loc_0, loc_1, loc_3, loc_4)
		loc_4 = load_i32(memory_at_0, loc_0 + 196)
		loc_3 = load_i32(memory_at_0, loc_0 + 200)
		reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 40)
		reg_0 = FUNC_LIST[340](reg_0, loc_1, loc_2, 0, sub_i32(shr_i32(sub_i32(loc_3, loc_4), 5), 1))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_5, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[453] = --[[ Luau::Parser::expectMatchAndConsume(char, Luau::Parser::MatchLexeme const&, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_4 = band_i32(loc_1, 255)
		if loc_4 ~= load_i32(memory_at_0, loc_0 + 24) then
			while true do
				FUNC_LIST[431](loc_0, loc_4, loc_2, 0)
				reg_0 = FUNC_LIST[432](loc_0, loc_1, loc_0, loc_3)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[398](loc_0)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[454] = --[[ Luau::Parser::parseReturnType() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = i64_ZERO
	local loc_14 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 192)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = add_i32(load_i32(memory_at_0, loc_1 + 120), 1)
		store_i32(memory_at_0, loc_1 + 120, loc_3)
		while true do
			while true do
				while true do
					while true do
						if loc_3 <= load_i32(memory_at_0, 47712) then
							while true do
								store_i32(memory_at_0, loc_2 + 152, load_i32(memory_at_0, loc_1 + 48))
								store_i64(memory_at_0, loc_2 + 144, load_i64(memory_at_0, loc_1 + 40))
								store_i64(memory_at_0, loc_2 + 136, load_i64(memory_at_0, loc_1 + 32))
								store_i64(memory_at_0, loc_2 + 128, load_i64(memory_at_0, loc_1 + 24))
								loc_5 = load_i32(memory_at_0, loc_1 + 24)
								if loc_5 ~= 40 then
									while true do
										if loc_5 == 262 then
											desired = 4
											break
										end
										if loc_5 == 281 then
											while true do
												FUNC_LIST[381](add_i32(loc_2, 160), add_i32(loc_1, 4))
												if load_i32(memory_at_0, loc_2 + 160) == 262 then
													desired = 4
													break
												end
												reg_0 = load_i32(memory_at_0, loc_1 + 120)
												break
											end
											if desired then
												break
											end
										else
											while true do
												reg_0 = loc_3
												break
											end
											if desired then
												break
											end
										end
										loc_3 = reg_0
										store_i64(memory_at_0, loc_2 + 168, load_i64(memory_at_0, loc_1 + 36))
										store_i64(memory_at_0, loc_2 + 160, load_i64(memory_at_0, loc_1 + 28))
										FUNC_LIST[435](add_i32(loc_2, 116), loc_1, 0, 0)
										loc_5 = load_i32(memory_at_0, loc_2 + 116)
										store_i32(memory_at_0, loc_1 + 120, loc_3)
										reg_0 = FUNC_LIST[436](loc_1, loc_5, add_i32(loc_2, 160))
										loc_3 = reg_0
										reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_1 + 88), 4)
										loc_1 = reg_0
										store_i32(memory_at_0, loc_1, loc_3)
										store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_3 + 16))
										store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_3 + 8))
										store_i64(memory_at_0, loc_0 + 20, i64_ONE)
										store_i32(memory_at_0, loc_0 + 16, loc_1)
										desired = 1
										break
									end
									if desired then
										break
									end
								end
								FUNC_LIST[398](loc_1)
								store_i64(memory_at_0, loc_2 + 168, load_i64(memory_at_0, loc_1 + 36))
								store_i64(memory_at_0, loc_2 + 160, load_i64(memory_at_0, loc_1 + 28))
								loc_3 = load_i32(memory_at_0, loc_1 + 208)
								store_i32(memory_at_0, loc_3 + 1052, add_i32(load_i32(memory_at_0, loc_3 + 1052), 1))
								store_i32(memory_at_0, loc_2 + 116, add_i32(loc_1, 328))
								loc_3 = load_i32(memory_at_0, loc_1 + 328)
								loc_5 = load_i32(memory_at_0, loc_1 + 332)
								store_i32(memory_at_0, loc_2 + 124, 0)
								store_i32(memory_at_0, loc_2 + 120, shr_i32(sub_i32(loc_5, loc_3), 2))
								store_i32(memory_at_0, loc_2 + 104, add_i32(loc_1, 412))
								loc_3 = load_i32(memory_at_0, loc_1 + 412)
								loc_5 = load_i32(memory_at_0, loc_1 + 416)
								store_i32(memory_at_0, loc_2 + 112, 0)
								store_i32(memory_at_0, loc_2 + 108, div_i32(sub_i32(loc_5, loc_3), 24))
								if load_i32(memory_at_0, loc_1 + 24) == 41 then
									while true do
										loc_13 = load_i64(memory_at_0, loc_1 + 36)
										store_i64(memory_at_0, loc_2 + 96, loc_13)
										loc_14 = load_i64(memory_at_0, loc_2 + 132)
										desired = 3
										break
									end
									if desired then
										break
									end
								end
								reg_0 = FUNC_LIST[455](loc_1, add_i32(loc_2, 116), add_i32(loc_2, 104))
								loc_12 = reg_0
								loc_3 = load_i32(memory_at_0, loc_1 + 24)
								loc_13 = load_i64(memory_at_0, loc_1 + 36)
								store_i64(memory_at_0, loc_2 + 96, loc_13)
								loc_14 = load_i64(memory_at_0, loc_2 + 132)
								store_i64(memory_at_0, loc_2 + 88, loc_14)
								store_i32(memory_at_0, loc_2 + 84, load_i32(memory_at_0, loc_2 + 128))
								if loc_3 == 41 then
									desired = 3
									break
								end
								FUNC_LIST[431](loc_1, 41, add_i32(loc_2, 84), 0)
								reg_0 = FUNC_LIST[432](loc_1, 41, loc_2, 1)
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						store_i32(memory_at_0, loc_2, 3366)
						FUNC_LIST[390](add_i32(loc_1, 28), 4604, loc_2)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_1 = FUNC_LIST[451](loc_1)
					loc_3 = reg_1
					store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_3 + 8))
					store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_3 + 16))
					store_i32(memory_at_0, loc_0 + 24, loc_3)
					store_i64(memory_at_0, loc_0 + 16, i64_ZERO)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[398](loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = load_i32(memory_at_0, loc_1 + 208)
			store_i32(memory_at_0, loc_3 + 1052, sub_i32(load_i32(memory_at_0, loc_3 + 1052), 1))
			loc_4 = load_i32(memory_at_0, loc_2 + 112)
			while true do
				while true do
					if load_i32(memory_at_0, loc_1 + 24) == 263 then
						break
					end
					if loc_4 ~= 0 then
						break
					end
					loc_5 = 0
					while true do
						while true do
							loc_9 = load_i32(memory_at_0, loc_2 + 124)
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 3, 0, }
								end)()
							end
							temp = br_map[1][loc_9] or 1
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 2
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_9 = 1
						reg_1 = FUNC_LIST[436](loc_1, load_i32(memory_at_0, add_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 116)), shl_i32(load_i32(memory_at_0, loc_2 + 120), 2))), add_i32(loc_2, 160))
						loc_3 = reg_1
						loc_13 = load_i64(memory_at_0, (if load_i32(memory_at_0, loc_2 + 124) == 1 then add_i32(loc_2, 96) else add_i32(loc_3, 16)))
						reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_1 + 88), 4)
						loc_5 = reg_0
						store_i32(memory_at_0, loc_5, loc_3)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_10 = band_i32(loc_9, 3)
					loc_7 = add_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 116)), shl_i32(load_i32(memory_at_0, loc_2 + 120), 2))
					loc_4 = 0
					reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_1 + 88), shl_i32(loc_9, 2))
					loc_5 = reg_0
					loc_3 = 0
					if sub_i32(loc_9, 1) >= 3 then
						while true do
							loc_11 = band_i32(loc_9, 4294967292)
							while true do
								loc_1 = shl_i32(loc_3, 2)
								store_i32(memory_at_0, add_i32(loc_1, loc_5), load_i32(memory_at_0, add_i32(loc_1, loc_7)))
								loc_8 = bor_i32(loc_1, 4)
								store_i32(memory_at_0, add_i32(loc_8, loc_5), load_i32(memory_at_0, add_i32(loc_7, loc_8)))
								loc_8 = bor_i32(loc_1, 8)
								store_i32(memory_at_0, add_i32(loc_8, loc_5), load_i32(memory_at_0, add_i32(loc_7, loc_8)))
								loc_1 = bor_i32(loc_1, 12)
								store_i32(memory_at_0, add_i32(loc_1, loc_5), load_i32(memory_at_0, add_i32(loc_1, loc_7)))
								loc_3 = add_i32(loc_3, 4)
								loc_6 = add_i32(loc_6, 4)
								if loc_11 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_10 == 0 then
						desired = 2
						break
					end
					while true do
						loc_1 = shl_i32(loc_3, 2)
						store_i32(memory_at_0, add_i32(loc_1, loc_5), load_i32(memory_at_0, add_i32(loc_1, loc_7)))
						loc_3 = add_i32(loc_3, 1)
						loc_4 = add_i32(loc_4, 1)
						if loc_10 ~= loc_4 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i64(memory_at_0, loc_2 + 68, i64_ZERO)
				store_i64(memory_at_0, loc_2 + 76, i64_ZERO)
				while true do
					loc_8 = load_i32(memory_at_0, loc_2 + 124)
					if loc_8 == 0 then
						while true do
							store_i64(memory_at_0, loc_2 + 60, i64_ZERO)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 116))
					loc_7 = load_i32(memory_at_0, loc_2 + 120)
					reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_1 + 88), shl_i32(loc_8, 2))
					loc_5 = reg_0
					store_i32(memory_at_0, loc_2 + 64, loc_8)
					store_i32(memory_at_0, loc_2 + 60, loc_5)
					loc_9 = band_i32(loc_8, 3)
					loc_7 = add_i32(shl_i32(loc_7, 2), loc_3)
					loc_3 = 0
					if loc_8 >= 4 then
						while true do
							loc_11 = band_i32(loc_8, 4294967292)
							loc_8 = 0
							while true do
								loc_4 = shl_i32(loc_3, 2)
								store_i32(memory_at_0, add_i32(loc_4, loc_5), load_i32(memory_at_0, add_i32(loc_4, loc_7)))
								loc_10 = bor_i32(loc_4, 4)
								store_i32(memory_at_0, add_i32(loc_10, loc_5), load_i32(memory_at_0, add_i32(loc_7, loc_10)))
								loc_10 = bor_i32(loc_4, 8)
								store_i32(memory_at_0, add_i32(loc_10, loc_5), load_i32(memory_at_0, add_i32(loc_7, loc_10)))
								loc_4 = bor_i32(loc_4, 12)
								store_i32(memory_at_0, add_i32(loc_4, loc_5), load_i32(memory_at_0, add_i32(loc_4, loc_7)))
								loc_3 = add_i32(loc_3, 4)
								loc_8 = add_i32(loc_8, 4)
								if loc_11 ~= loc_8 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_9 ~= 0 then
						while true do
							while true do
								loc_4 = shl_i32(loc_3, 2)
								store_i32(memory_at_0, add_i32(loc_4, loc_5), load_i32(memory_at_0, add_i32(loc_4, loc_7)))
								loc_3 = add_i32(loc_3, 1)
								loc_6 = add_i32(loc_6, 1)
								if loc_9 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_4 = load_i32(memory_at_0, loc_2 + 112)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if loc_4 == 0 then
						while true do
							store_i64(memory_at_0, loc_2 + 52, i64_ZERO)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 104))
					loc_7 = load_i32(memory_at_0, loc_2 + 108)
					reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_1 + 88), mul_i32(loc_4, 24))
					loc_5 = reg_0
					store_i32(memory_at_0, loc_2 + 56, loc_4)
					store_i32(memory_at_0, loc_2 + 52, loc_5)
					loc_9 = band_i32(loc_4, 3)
					loc_7 = add_i32(mul_i32(loc_7, 24), loc_3)
					loc_8 = 0
					loc_3 = 0
					if loc_4 >= 4 then
						while true do
							loc_11 = band_i32(loc_4, 4294967292)
							loc_10 = 0
							while true do
								loc_6 = mul_i32(loc_3, 24)
								loc_4 = add_i32(loc_6, loc_5)
								loc_6 = add_i32(loc_6, loc_7)
								store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_6))
								store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_6 + 16))
								store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_6 + 8))
								loc_6 = mul_i32(bor_i32(loc_3, 1), 24)
								loc_4 = add_i32(loc_6, loc_5)
								loc_6 = add_i32(loc_6, loc_7)
								store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_6 + 16))
								store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_6 + 8))
								store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_6))
								loc_6 = mul_i32(bor_i32(loc_3, 2), 24)
								loc_4 = add_i32(loc_6, loc_5)
								loc_6 = add_i32(loc_6, loc_7)
								store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_6 + 16))
								store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_6 + 8))
								store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_6))
								loc_6 = mul_i32(bor_i32(loc_3, 3), 24)
								loc_4 = add_i32(loc_6, loc_5)
								loc_6 = add_i32(loc_6, loc_7)
								store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_6 + 16))
								store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_6 + 8))
								store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_6))
								loc_3 = add_i32(loc_3, 4)
								loc_10 = add_i32(loc_10, 4)
								if loc_11 ~= loc_10 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_9 == 0 then
						break
					end
					while true do
						loc_6 = mul_i32(loc_3, 24)
						loc_4 = add_i32(loc_6, loc_5)
						loc_6 = add_i32(loc_6, loc_7)
						store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_6))
						store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_6 + 16))
						store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_6 + 8))
						loc_3 = add_i32(loc_3, 1)
						loc_8 = add_i32(loc_8, 1)
						if loc_9 ~= loc_8 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i64(memory_at_0, loc_2 + 40, load_i64(memory_at_0, loc_2 + 76))
				store_i64(memory_at_0, loc_2 + 32, load_i64(memory_at_0, loc_2 + 68))
				store_i64(memory_at_0, loc_2 + 24, load_i64(memory_at_0, loc_2 + 60))
				store_i64(memory_at_0, loc_2 + 16, load_i64(memory_at_0, loc_2 + 52))
				reg_0 = FUNC_LIST[456](loc_1, add_i32(loc_2, 128), add_i32(loc_2, 40), add_i32(loc_2, 32), add_i32(loc_2, 24), add_i32(loc_2, 16), loc_12, 0)
				loc_3 = reg_0
				loc_13 = load_i64(memory_at_0, loc_3 + 16)
				reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_1 + 88), 4)
				loc_5 = reg_0
				store_i32(memory_at_0, loc_5, loc_3)
				loc_9 = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_0 + 24, loc_12)
			store_i32(memory_at_0, loc_0 + 20, loc_9)
			store_i32(memory_at_0, loc_0 + 16, loc_5)
			store_i64(memory_at_0, loc_0 + 8, loc_13)
			store_i64(memory_at_0, loc_0, loc_14)
			loc_3 = load_i32(memory_at_0, loc_2 + 104)
			loc_1 = add_i32(load_i32(memory_at_0, loc_3), mul_i32(load_i32(memory_at_0, loc_2 + 108), 24))
			if loc_1 ~= load_i32(memory_at_0, loc_3 + 4) then
				while true do
					store_i32(memory_at_0, loc_3 + 4, loc_1)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = load_i32(memory_at_0, loc_2 + 116)
			loc_1 = add_i32(load_i32(memory_at_0, loc_3), shl_i32(load_i32(memory_at_0, loc_2 + 120), 2))
			if loc_1 == load_i32(memory_at_0, loc_3 + 4) then
				break
			end
			store_i32(memory_at_0, loc_3 + 4, loc_1)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 192)
		break
	end
end
FUNC_LIST[455] = --[[ Luau::Parser::parseTypeList(Luau::TempVector<Luau::AstType*>&, Luau::TempVector<std::__2::optional<std::__2::pair<Luau::AstName, Luau::Location>>>&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		loc_5 = add_i32(loc_0, 28)
		loc_6 = add_i32(loc_0, 4)
		loc_4 = load_i32(memory_at_0, loc_0 + 24)
		loc_7 = add_i32(loc_3, 12)
		while true do
			while true do
				while true do
					if loc_4 == 262 then
						desired = 2
						break
					end
					while true do
						while true do
							if loc_4 == 281 then
								while true do
									FUNC_LIST[381](add_i32(loc_3, 8), loc_6)
									if load_i32(memory_at_0, loc_3 + 8) == 262 then
										desired = 2
										break
									end
									reg_0 = load_i32(memory_at_0, loc_0 + 24)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = loc_4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_4 = reg_0
							if loc_4 ~= 281 then
								break
							end
							FUNC_LIST[381](add_i32(loc_3, 8), loc_6)
							if load_i32(memory_at_0, loc_3 + 8) ~= 58 then
								break
							end
							if load_i32(memory_at_0, loc_2 + 8) < load_i32(memory_at_0, loc_1 + 8) then
								while true do
									while true do
										store_i32_n8(memory_at_0, loc_3 + 28, 0)
										store_i32_n8(memory_at_0, loc_3 + 8, 0)
										FUNC_LIST[423](loc_2, add_i32(loc_3, 8))
										if load_i32(memory_at_0, loc_2 + 8) < load_i32(memory_at_0, loc_1 + 8) then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							store_i32(memory_at_0, loc_3 + 8, load_i32(memory_at_0, loc_0 + 48))
							store_i64(memory_at_0, loc_7 + 8, load_i64(memory_at_0, loc_5 + 8))
							store_i64(memory_at_0, loc_7, load_i64(memory_at_0, loc_5))
							store_i32_n8(memory_at_0, loc_3 + 28, 1)
							FUNC_LIST[423](loc_2, add_i32(loc_3, 8))
							FUNC_LIST[398](loc_0)
							if load_i32(memory_at_0, loc_0 + 24) ~= 58 then
								while true do
									FUNC_LIST[394](loc_0, 58, 0)
									FUNC_LIST[381](add_i32(loc_3, 8), loc_6)
									if load_i32(memory_at_0, loc_3 + 8) ~= 58 then
										desired = 4
										break
									end
									FUNC_LIST[398](loc_0)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[398](loc_0)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if load_i32(memory_at_0, loc_2 + 8) == 0 then
							break
						end
						store_i32_n8(memory_at_0, loc_3 + 28, 0)
						store_i32_n8(memory_at_0, loc_3 + 8, 0)
						FUNC_LIST[423](loc_2, add_i32(loc_3, 8))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_4 = load_i32(memory_at_0, loc_0 + 120)
					store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_5 + 8))
					store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_5))
					FUNC_LIST[435](add_i32(loc_3, 40), loc_0, 0, 0)
					loc_9 = load_i32(memory_at_0, loc_3 + 40)
					store_i32(memory_at_0, loc_0 + 120, loc_4)
					reg_1 = FUNC_LIST[436](loc_0, loc_9, add_i32(loc_3, 8))
					store_i32(memory_at_0, loc_3 + 40, reg_1)
					FUNC_LIST[403](loc_1, add_i32(loc_3, 40))
					reg_0 = 0
					if load_i32(memory_at_0, loc_0 + 24) ~= 44 then
						desired = 1
						break
					end
					FUNC_LIST[398](loc_0)
					loc_4 = load_i32(memory_at_0, loc_0 + 24)
					if loc_4 ~= 41 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[401](loc_0, loc_5, 5355, 0)
				reg_0 = 0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[451](loc_0)
			break
		end
		loc_8 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_3, 48)
		reg_0 = loc_8
		break
	end
	return reg_0
end
FUNC_LIST[456] = --[[ Luau::Parser::parseFunctionTypeTail(Luau::Lexeme const&, Luau::AstArray<Luau::AstGenericType>, Luau::AstArray<Luau::AstGenericTypePack>, Luau::AstArray<Luau::AstType*>, Luau::AstArray<std::__2::optional<std::__2::pair<Luau::AstName, Luau::Location>>>, Luau::AstTypePack*, bool) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7)
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_8 = sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_8
		loc_9 = add_i32(load_i32(memory_at_0, loc_0 + 120), 1)
		store_i32(memory_at_0, loc_0 + 120, loc_9)
		if loc_9 <= load_i32(memory_at_0, 47712) then
			while true do
				loc_9 = add_i32(loc_0, 4)
				while true do
					while true do
						loc_10 = load_i32(memory_at_0, loc_0 + 24)
						if loc_10 == 58 then
							while true do
								FUNC_LIST[401](loc_0, add_i32(loc_0, 28), 7611, 0)
								reg_0 = FUNC_LIST[370](loc_9)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						while true do
							loc_10 = (if loc_10 == 263 then 1 else 0)
							if loc_10 ~= 0 then
								break
							end
							if load_i32(memory_at_0, loc_2 + 4) ~= 0 then
								break
							end
							if load_i32(memory_at_0, loc_3 + 4) ~= 0 then
								break
							end
							if load_i32(memory_at_0, loc_4 + 4) ~= 0 then
								break
							end
							store_i64(memory_at_0, loc_8 + 80, load_i64(memory_at_0, loc_1 + 4))
							store_i64(memory_at_0, loc_8 + 88, load_i64(memory_at_0, loc_0 + 60))
							FUNC_LIST[401](loc_0, add_i32(loc_8, 80), 6263, 0)
							reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 84)
							loc_2 = reg_0
							store_i32_n8(memory_at_0, loc_8 + 52, 0)
							store_i32_n8(memory_at_0, loc_8 + 48, 0)
							loc_0 = load_i32(memory_at_0, loc_0 + 136)
							loc_3 = add_i32(loc_8, 96)
							store_i32_n8(memory_at_0, loc_3, 0)
							store_i64(memory_at_0, loc_8 + 24, load_i64(memory_at_0, loc_8 + 88))
							store_i32(memory_at_0, loc_8 + 32, load_i32(memory_at_0, loc_8 + 96))
							store_i32_n8(memory_at_0, loc_8 + 80, 0)
							store_i64(memory_at_0, loc_8 + 40, load_i64(memory_at_0, loc_8 + 48))
							store_i64(memory_at_0, loc_8 + 64, i64_ZERO)
							store_i64(memory_at_0, loc_8 + 16, load_i64(memory_at_0, loc_8 + 80))
							loc_1 = add_i32(loc_1, 4)
							reg_0 = FUNC_LIST[323](loc_2, loc_1, add_i32(loc_8, 40), loc_0, add_i32(loc_8, 16), loc_1, 0, sub_i32(loc_8, 4294967232))
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						if loc_10 == 0 then
							while true do
								FUNC_LIST[394](loc_0, 263, 4092)
								FUNC_LIST[381](add_i32(loc_8, 80), loc_9)
								if load_i32(memory_at_0, loc_8 + 80) ~= 263 then
									desired = 3
									break
								end
								FUNC_LIST[398](loc_0)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[398](loc_0)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					FUNC_LIST[454](add_i32(loc_8, 80), loc_0)
					loc_11 = load_i64(memory_at_0, loc_4)
					store_i32(memory_at_0, loc_8 + 72, loc_6)
					store_i64(memory_at_0, loc_8 + 64, loc_11)
					loc_0 = load_i32(memory_at_0, loc_0 + 88)
					store_i64(memory_at_0, loc_8 + 48, load_i64(memory_at_0, loc_1 + 4))
					store_i64(memory_at_0, loc_8 + 56, load_i64(memory_at_0, loc_8 + 88))
					reg_0 = FUNC_LIST[353](loc_0, 76)
					reg_0 = FUNC_LIST[328](reg_0, add_i32(loc_8, 48), loc_2, loc_3, sub_i32(loc_8, 4294967232), loc_5, add_i32(loc_8, 96), loc_7)
					break
				end
				if desired then
					break
				end
				loc_0 = reg_0
				GLOBAL_LIST[0].value = add_i32(loc_8, 112)
				reg_0 = loc_0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		store_i32(memory_at_0, loc_8, 3366)
		FUNC_LIST[390](add_i32(loc_0, 28), 4604, loc_8)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[457] = --[[ Luau::Parser::parseTableType(bool) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local loc_23 = 0
	local loc_24 = 0
	local loc_25 = 0
	local loc_26 = 0
	local loc_27 = 0
	local loc_28 = i64_ZERO
	local loc_29 = i64_ZERO
	local loc_30 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 192)
		GLOBAL_LIST[0].value = loc_2
		loc_4 = add_i32(load_i32(memory_at_0, loc_0 + 120), 1)
		store_i32(memory_at_0, loc_0 + 120, loc_4)
		while true do
			while true do
				if loc_4 <= load_i32(memory_at_0, 47712) then
					while true do
						store_i32(memory_at_0, loc_2 + 172, add_i32(loc_0, 316))
						loc_4 = load_i32(memory_at_0, loc_0 + 316)
						loc_3 = load_i32(memory_at_0, loc_0 + 320)
						store_i32(memory_at_0, loc_2 + 180, 0)
						store_i32(memory_at_0, loc_2 + 176, div_i32(sub_i32(loc_3, loc_4), 48))
						loc_3 = load_i32(memory_at_0, loc_0 + 24)
						loc_30 = load_i64(memory_at_0, loc_0 + 28)
						store_i64(memory_at_0, loc_2 + 164, loc_30)
						store_i32(memory_at_0, loc_2 + 160, loc_3)
						loc_8 = loc_0
						loc_4 = add_i32(loc_8, 24)
						loc_7 = add_i32(loc_0, 4)
						while true do
							if loc_3 ~= 123 then
								while true do
									FUNC_LIST[394](loc_0, 123, 4118)
									FUNC_LIST[381](add_i32(loc_2, 48), loc_7)
									if load_i32(memory_at_0, loc_2 + 48) ~= 123 then
										desired = 4
										break
									end
									FUNC_LIST[398](loc_0)
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[398](loc_0)
							break
						end
						if desired then
							break
						end
						while true do
							while true do
								while true do
									while true do
										loc_5 = load_i32(memory_at_0, loc_8 + 24)
										if loc_5 == 125 then
											break
										end
										loc_3 = add_i32(loc_0, 28)
										loc_16 = loc_2
										loc_14 = add_i32(loc_16, 77)
										loc_17 = loc_2
										loc_18 = add_i32(loc_17, 52)
										loc_19 = add_i32(loc_2, 116)
										loc_20 = loc_0
										loc_21 = add_i32(loc_20, 29)
										while true do
											loc_12 = 3
											while true do
												while true do
													if bor_i32(load_i32_u8(memory_at_0, 47760), load_i32_u8(memory_at_0, 47772)) == 0 then
														break
													end
													if loc_5 ~= 281 then
														break
													end
													FUNC_LIST[381](add_i32(loc_2, 48), loc_7)
													if load_i32(memory_at_0, loc_2 + 48) == 58 then
														break
													end
													loc_5 = load_i32(memory_at_0, loc_0 + 48)
													if loc_5 == 0 then
														break
													end
													reg_0 = FUNC_LIST[544](loc_5, 5401)
													if reg_0 == 0 then
														while true do
															loc_10 = load_i32_u8(memory_at_0, loc_3)
															store_i64(memory_at_0, loc_2 + 144, load_i64(memory_at_0, loc_20 + 29))
															store_i64(memory_at_0, loc_2 + 151, load_i64(memory_at_0, loc_21 + 7))
															reg_0 = FUNC_LIST[370](loc_7)
															loc_12 = 1
															reg_0 = 1
															desired = 9
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													loc_10 = 0
													loc_13 = 0
													reg_1 = FUNC_LIST[544](loc_5, 3972)
													reg_0 = loc_13
													if reg_1 ~= 0 then
														desired = 9
														break
													end
													loc_10 = load_i32_u8(memory_at_0, loc_3)
													store_i64(memory_at_0, loc_2 + 144, load_i64(memory_at_0, loc_20 + 29))
													store_i64(memory_at_0, loc_2 + 151, load_i64(memory_at_0, loc_21 + 7))
													reg_0 = FUNC_LIST[370](loc_7)
													loc_12 = 2
													reg_0 = 1
													desired = 9
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
												loc_10 = 0
												reg_0 = 0
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
											loc_13 = reg_0
											while true do
												while true do
													while true do
														loc_5 = load_i32(memory_at_0, loc_8 + 24)
														if loc_5 ~= 91 then
															break
														end
														FUNC_LIST[381](add_i32(loc_2, 48), loc_7)
														while true do
															if load_i32(memory_at_0, loc_2 + 48) ~= 278 then
																while true do
																	FUNC_LIST[381](add_i32(loc_2, 112), loc_7)
																	if load_i32(memory_at_0, loc_2 + 112) ~= 279 then
																		desired = 12
																		break
																	end
																	break
																end
																if desired then
																	if desired == 12 then
																		desired = nil
																	end
																	break
																end
															end
															store_i32(memory_at_0, loc_2 + 136, load_i32(memory_at_0, loc_8 + 48))
															store_i64(memory_at_0, loc_2 + 128, load_i64(memory_at_0, loc_8 + 40))
															store_i64(memory_at_0, loc_2 + 120, load_i64(memory_at_0, loc_8 + 32))
															store_i64(memory_at_0, loc_2 + 112, load_i64(memory_at_0, loc_8 + 24))
															FUNC_LIST[398](loc_0)
															FUNC_LIST[442](add_i32(loc_2, 100), loc_0)
															store_i32(memory_at_0, loc_2 + 48, load_i32(memory_at_0, loc_2 + 112))
															store_i64(memory_at_0, loc_2 + 52, load_i64(memory_at_0, loc_2 + 116))
															while true do
																if load_i32(memory_at_0, loc_0 + 24) ~= 93 then
																	while true do
																		FUNC_LIST[431](loc_0, 93, add_i32(loc_2, 48), 0)
																		reg_0 = FUNC_LIST[432](loc_0, 93, loc_2, 0)
																		desired = 13
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																FUNC_LIST[398](loc_0)
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															while true do
																if load_i32(memory_at_0, loc_8 + 24) ~= 58 then
																	while true do
																		FUNC_LIST[394](loc_0, 58, 5078)
																		FUNC_LIST[381](add_i32(loc_2, 48), loc_7)
																		if load_i32(memory_at_0, loc_2 + 48) ~= 58 then
																			desired = 13
																			break
																		end
																		FUNC_LIST[398](loc_0)
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																FUNC_LIST[398](loc_0)
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															loc_5 = load_i32(memory_at_0, loc_0 + 120)
															store_i64(memory_at_0, loc_2 + 56, load_i64(memory_at_0, loc_3 + 8))
															store_i64(memory_at_0, loc_2 + 48, load_i64(memory_at_0, loc_3))
															FUNC_LIST[435](add_i32(loc_2, 184), loc_0, 0, 0)
															loc_9 = load_i32(memory_at_0, loc_2 + 184)
															store_i32(memory_at_0, loc_0 + 120, loc_5)
															reg_0 = FUNC_LIST[436](loc_0, loc_9, add_i32(loc_2, 48))
															loc_5 = reg_0
															if load_i32_u8(memory_at_0, loc_2 + 108) == 0 then
																desired = 10
																break
															end
															loc_11 = load_i32(memory_at_0, loc_2 + 100)
															loc_9 = load_i32(memory_at_0, loc_2 + 104)
															reg_0 = FUNC_LIST[570](loc_11, loc_9)
															if reg_0 < loc_9 then
																desired = 10
																break
															end
															store_i32(memory_at_0, loc_2 + 48, loc_11)
															store_i64(memory_at_0, loc_17 + 60, load_i64(memory_at_0, loc_19 + 8))
															store_i64(memory_at_0, loc_17 + 52, load_i64(memory_at_0, loc_19))
															store_i32_n8(memory_at_0, loc_2 + 76, loc_10)
															store_i32(memory_at_0, loc_2 + 72, loc_12)
															store_i32(memory_at_0, loc_2 + 68, loc_5)
															store_i64(memory_at_0, loc_16 + 84, load_i64(memory_at_0, loc_2 + 151))
															store_i64(memory_at_0, loc_16 + 77, load_i64(memory_at_0, loc_2 + 144))
															store_i32_n8(memory_at_0, loc_2 + 92, loc_13)
															FUNC_LIST[458](add_i32(loc_2, 172), add_i32(loc_2, 48))
															desired = 9
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
														loc_5 = load_i32(memory_at_0, loc_8 + 24)
														if loc_5 ~= 91 then
															break
														end
														loc_28 = load_i64(memory_at_0, loc_0 + 28)
														FUNC_LIST[398](loc_0)
														loc_5 = load_i32(memory_at_0, loc_0 + 120)
														if loc_6 ~= 0 then
															while true do
																loc_22 = loc_2
																loc_9 = add_i32(loc_22, 56)
																loc_23 = loc_3
																loc_11 = add_i32(loc_23, 8)
																store_i64(memory_at_0, loc_9, load_i64(memory_at_0, loc_11))
																store_i64(memory_at_0, loc_2 + 48, load_i64(memory_at_0, loc_3))
																FUNC_LIST[435](add_i32(loc_2, 112), loc_0, 0, 0)
																loc_15 = load_i32(memory_at_0, loc_2 + 112)
																store_i32(memory_at_0, loc_0 + 120, loc_5)
																reg_0 = FUNC_LIST[436](loc_0, loc_15, add_i32(loc_2, 48))
																loc_15 = reg_0
																store_i64(memory_at_0, loc_2 + 52, loc_28)
																store_i32(memory_at_0, loc_2 + 48, 91)
																while true do
																	if load_i32(memory_at_0, loc_0 + 24) ~= 93 then
																		while true do
																			FUNC_LIST[431](loc_0, 93, add_i32(loc_2, 48), 0)
																			reg_0 = FUNC_LIST[432](loc_0, 93, loc_2, 0)
																			desired = 13
																			break
																		end
																		if desired then
																			if desired == 13 then
																				desired = nil
																			end
																			break
																		end
																	end
																	FUNC_LIST[398](loc_0)
																	break
																end
																if desired then
																	break
																end
																while true do
																	if load_i32(memory_at_0, loc_8 + 24) ~= 58 then
																		while true do
																			FUNC_LIST[394](loc_0, 58, 5078)
																			FUNC_LIST[381](add_i32(loc_2, 48), loc_7)
																			if load_i32(memory_at_0, loc_2 + 48) ~= 58 then
																				desired = 13
																				break
																			end
																			FUNC_LIST[398](loc_0)
																			break
																		end
																		if desired then
																			if desired == 13 then
																				desired = nil
																			end
																			break
																		end
																	end
																	FUNC_LIST[398](loc_0)
																	break
																end
																if desired then
																	break
																end
																loc_5 = load_i32(memory_at_0, loc_0 + 120)
																store_i64(memory_at_0, loc_22 + 56, load_i64(memory_at_0, loc_23 + 8))
																store_i64(memory_at_0, loc_2 + 48, load_i64(memory_at_0, loc_3))
																FUNC_LIST[435](add_i32(loc_2, 112), loc_0, 0, 0)
																loc_9 = load_i32(memory_at_0, loc_2 + 112)
																store_i32(memory_at_0, loc_0 + 120, loc_5)
																reg_0 = FUNC_LIST[436](loc_0, loc_9, add_i32(loc_2, 48))
																loc_9 = reg_0
																loc_29 = load_i64(memory_at_0, loc_9 + 16)
																reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 48)
																loc_5 = reg_0
																store_i32_n8(memory_at_0, loc_5 + 28, loc_10)
																store_i32(memory_at_0, loc_5 + 24, loc_12)
																store_i64(memory_at_0, loc_5 + 16, loc_29)
																store_i64(memory_at_0, loc_5 + 8, loc_28)
																store_i32(memory_at_0, loc_5 + 4, loc_9)
																store_i32(memory_at_0, loc_5, loc_15)
																store_i64(memory_at_0, loc_5 + 29, load_i64(memory_at_0, loc_2 + 144))
																store_i64(memory_at_0, loc_5 + 36, load_i64(memory_at_0, loc_2 + 151))
																store_i32_n8(memory_at_0, loc_5 + 44, loc_13)
																FUNC_LIST[401](loc_0, add_i32(loc_5, 8), 2899, 0)
																desired = 9
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														loc_24 = loc_2
														loc_6 = add_i32(loc_24, 56)
														loc_25 = loc_3
														loc_9 = add_i32(loc_25, 8)
														store_i64(memory_at_0, loc_6, load_i64(memory_at_0, loc_9))
														store_i64(memory_at_0, loc_2 + 48, load_i64(memory_at_0, loc_3))
														FUNC_LIST[435](add_i32(loc_2, 112), loc_0, 0, 0)
														loc_11 = load_i32(memory_at_0, loc_2 + 112)
														store_i32(memory_at_0, loc_0 + 120, loc_5)
														reg_0 = FUNC_LIST[436](loc_0, loc_11, add_i32(loc_2, 48))
														loc_5 = reg_0
														store_i64(memory_at_0, loc_2 + 52, loc_28)
														store_i32(memory_at_0, loc_2 + 48, 91)
														while true do
															if load_i32(memory_at_0, loc_0 + 24) ~= 93 then
																while true do
																	FUNC_LIST[431](loc_0, 93, add_i32(loc_2, 48), 0)
																	reg_0 = FUNC_LIST[432](loc_0, 93, loc_2, 0)
																	desired = 12
																	break
																end
																if desired then
																	if desired == 12 then
																		desired = nil
																	end
																	break
																end
															end
															FUNC_LIST[398](loc_0)
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
														while true do
															if load_i32(memory_at_0, loc_8 + 24) ~= 58 then
																while true do
																	FUNC_LIST[394](loc_0, 58, 5078)
																	FUNC_LIST[381](add_i32(loc_2, 48), loc_7)
																	if load_i32(memory_at_0, loc_2 + 48) ~= 58 then
																		desired = 12
																		break
																	end
																	FUNC_LIST[398](loc_0)
																	break
																end
																if desired then
																	if desired == 12 then
																		desired = nil
																	end
																	break
																end
															end
															FUNC_LIST[398](loc_0)
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
														loc_11 = load_i32(memory_at_0, loc_0 + 120)
														store_i64(memory_at_0, loc_24 + 56, load_i64(memory_at_0, loc_25 + 8))
														store_i64(memory_at_0, loc_2 + 48, load_i64(memory_at_0, loc_3))
														FUNC_LIST[435](add_i32(loc_2, 112), loc_0, 0, 0)
														loc_6 = load_i32(memory_at_0, loc_2 + 112)
														store_i32(memory_at_0, loc_0 + 120, loc_11)
														reg_0 = FUNC_LIST[436](loc_0, loc_6, add_i32(loc_2, 48))
														loc_9 = reg_0
														loc_29 = load_i64(memory_at_0, loc_9 + 16)
														reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 48)
														loc_6 = reg_0
														store_i32_n8(memory_at_0, loc_6 + 28, loc_10)
														store_i32(memory_at_0, loc_6 + 24, loc_12)
														store_i64(memory_at_0, loc_6 + 16, loc_29)
														store_i64(memory_at_0, loc_6 + 8, loc_28)
														store_i32(memory_at_0, loc_6 + 4, loc_9)
														store_i32(memory_at_0, loc_6, loc_5)
														store_i64(memory_at_0, loc_6 + 29, load_i64(memory_at_0, loc_2 + 144))
														store_i64(memory_at_0, loc_6 + 36, load_i64(memory_at_0, loc_2 + 151))
														store_i32_n8(memory_at_0, loc_6 + 44, loc_13)
														desired = 9
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													while true do
														if load_i32(memory_at_0, loc_2 + 180) ~= 0 then
															break
														end
														if loc_6 ~= 0 then
															break
														end
														if loc_5 ~= 281 then
															desired = 6
															break
														end
														FUNC_LIST[381](add_i32(loc_2, 48), loc_7)
														if load_i32(memory_at_0, loc_2 + 48) ~= 58 then
															desired = 6
															break
														end
														loc_5 = load_i32(memory_at_0, loc_8 + 24)
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													if loc_5 == 281 then
														while true do
															loc_5 = load_i32(memory_at_0, loc_0 + 48)
															loc_26 = loc_2
															loc_9 = add_i32(loc_26, 120)
															loc_27 = loc_3
															loc_11 = add_i32(loc_27, 8)
															store_i64(memory_at_0, loc_9, load_i64(memory_at_0, loc_11))
															store_i64(memory_at_0, loc_2 + 112, load_i64(memory_at_0, loc_3))
															FUNC_LIST[398](loc_0)
															while true do
																if load_i32(memory_at_0, loc_0 + 24) ~= 58 then
																	while true do
																		FUNC_LIST[394](loc_0, 58, 5078)
																		FUNC_LIST[381](add_i32(loc_2, 48), loc_7)
																		if load_i32(memory_at_0, loc_2 + 48) ~= 58 then
																			desired = 12
																			break
																		end
																		FUNC_LIST[398](loc_0)
																		break
																	end
																	if desired then
																		if desired == 12 then
																			desired = nil
																		end
																		break
																	end
																end
																FUNC_LIST[398](loc_0)
																break
															end
															if desired then
																break
															end
															loc_15 = load_i32(memory_at_0, loc_0 + 120)
															store_i64(memory_at_0, loc_2 + 56, load_i64(memory_at_0, loc_27 + 8))
															store_i64(memory_at_0, loc_2 + 48, load_i64(memory_at_0, loc_3))
															FUNC_LIST[435](add_i32(loc_2, 100), loc_0, 0, loc_1)
															loc_11 = load_i32(memory_at_0, loc_2 + 100)
															store_i32(memory_at_0, loc_0 + 120, loc_15)
															reg_0 = FUNC_LIST[436](loc_0, loc_11, add_i32(loc_2, 48))
															loc_11 = reg_0
															store_i32(memory_at_0, loc_2 + 48, loc_5)
															store_i64(memory_at_0, loc_17 + 60, load_i64(memory_at_0, loc_26 + 120))
															store_i64(memory_at_0, loc_17 + 52, load_i64(memory_at_0, loc_2 + 112))
															store_i32_n8(memory_at_0, loc_2 + 76, loc_10)
															store_i32(memory_at_0, loc_2 + 72, loc_12)
															store_i32(memory_at_0, loc_2 + 68, loc_11)
															store_i64(memory_at_0, loc_16 + 84, load_i64(memory_at_0, loc_2 + 151))
															store_i64(memory_at_0, loc_16 + 77, load_i64(memory_at_0, loc_2 + 144))
															store_i32_n8(memory_at_0, loc_2 + 92, loc_13)
															FUNC_LIST[458](add_i32(loc_2, 172), add_i32(loc_2, 48))
															desired = 9
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													FUNC_LIST[427](loc_0, 5078)
													desired = 5
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
												FUNC_LIST[401](loc_0, loc_19, 6640, 0)
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
											while true do
												while true do
													while true do
														loc_5 = load_i32(memory_at_0, loc_8 + 24)
														if not br_map[1] then
															br_map[1] = (function()
																return { [0] = 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, }
															end)()
														end
														temp = br_map[1][sub_i32(loc_5, 44)] or 0
														if temp < 1 then
															break
														elseif temp > 1 then
															desired = 9
															break
														else
															desired = 10
															break
														end
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													if loc_5 == 125 then
														desired = 7
														break
													end
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
												loc_28 = load_i64(memory_at_0, loc_0 + 36)
												desired = 2
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
											FUNC_LIST[398](loc_0)
											loc_5 = load_i32(memory_at_0, loc_0 + 24)
											if loc_5 ~= 125 then
												continue
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									loc_28 = load_i64(memory_at_0, loc_0 + 36)
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								loc_4 = load_i32(memory_at_0, loc_0 + 120)
								loc_5 = add_i32(loc_2, 56)
								store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_3 + 8))
								store_i64(memory_at_0, loc_2 + 48, load_i64(memory_at_0, loc_3))
								FUNC_LIST[435](add_i32(loc_2, 112), loc_0, 0, 0)
								loc_3 = load_i32(memory_at_0, loc_2 + 112)
								store_i32(memory_at_0, loc_0 + 120, loc_4)
								reg_0 = FUNC_LIST[436](loc_0, loc_3, add_i32(loc_2, 48))
								loc_4 = reg_0
								reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 84)
								loc_3 = reg_0
								store_i32_n8(memory_at_0, loc_2 + 116, 0)
								store_i32_n8(memory_at_0, loc_2 + 112, 0)
								loc_7 = load_i32(memory_at_0, loc_0 + 128)
								loc_14 = sub_i32(loc_2, 4294967232)
								store_i32_n8(memory_at_0, loc_14, 0)
								store_i64(memory_at_0, loc_2 + 24, load_i64(memory_at_0, loc_2 + 56))
								store_i32(memory_at_0, loc_2 + 32, load_i32(memory_at_0, loc_14))
								store_i32_n8(memory_at_0, loc_2 + 48, 0)
								store_i64(memory_at_0, loc_2 + 40, load_i64(memory_at_0, loc_2 + 112))
								store_i64(memory_at_0, loc_2 + 100, i64_ZERO)
								store_i64(memory_at_0, loc_2 + 16, load_i64(memory_at_0, loc_2 + 48))
								loc_14 = add_i32(loc_4, 8)
								reg_0 = FUNC_LIST[323](loc_3, loc_14, add_i32(loc_2, 40), loc_7, add_i32(loc_2, 16), loc_14, 0, add_i32(loc_2, 100))
								loc_3 = reg_0
								loc_7 = load_i32(memory_at_0, loc_0 + 88)
								store_i64(memory_at_0, loc_2 + 56, load_i64(memory_at_0, loc_4 + 16))
								store_i64(memory_at_0, loc_2 + 48, load_i64(memory_at_0, loc_4 + 8))
								reg_0 = FUNC_LIST[353](loc_7, 48)
								loc_6 = reg_0
								store_i32(memory_at_0, loc_6 + 4, loc_4)
								store_i32(memory_at_0, loc_6, loc_3)
								store_i64(memory_at_0, loc_6 + 8, load_i64(memory_at_0, loc_2 + 48))
								store_i64(memory_at_0, loc_6 + 16, load_i64(memory_at_0, loc_2 + 56))
								store_i32_n8(memory_at_0, loc_6 + 28, loc_10)
								store_i32(memory_at_0, loc_6 + 24, loc_12)
								loc_28 = load_i64(memory_at_0, loc_2 + 151)
								loc_29 = load_i64(memory_at_0, loc_2 + 144)
								store_i32_n8(memory_at_0, loc_6 + 44, loc_13)
								store_i64(memory_at_0, loc_6 + 29, loc_29)
								store_i64(memory_at_0, loc_6 + 36, loc_28)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_28 = load_i64(memory_at_0, loc_0 + 36)
							if load_i32(memory_at_0, loc_0 + 24) ~= 125 then
								desired = 2
								break
							end
							break
						end
						if desired then
							break
						end
						FUNC_LIST[398](loc_0)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				store_i32(memory_at_0, loc_2, 3366)
				FUNC_LIST[390](add_i32(loc_0, 28), 4604, loc_2)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[431](loc_0, 125, add_i32(loc_2, 160), 0)
			reg_0 = FUNC_LIST[432](loc_0, 125, loc_2, 0)
			if reg_0 ~= 0 then
				break
			end
			loc_28 = load_i64(memory_at_0, loc_0 + 60)
			break
		end
		loc_18 = load_i32(memory_at_0, loc_0 + 88)
		store_i64(memory_at_0, loc_2 + 56, loc_28)
		store_i64(memory_at_0, loc_2 + 48, loc_30)
		while true do
			loc_4 = load_i32(memory_at_0, loc_2 + 180)
			if loc_4 == 0 then
				while true do
					store_i64(memory_at_0, loc_2 + 112, i64_ZERO)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 172))
			loc_3 = load_i32(memory_at_0, loc_2 + 176)
			reg_0 = FUNC_LIST[353](loc_18, mul_i32(loc_4, 48))
			loc_5 = reg_0
			store_i32(memory_at_0, loc_2 + 116, loc_4)
			store_i32(memory_at_0, loc_2 + 112, loc_5)
			loc_13 = band_i32(loc_4, 3)
			loc_7 = add_i32(mul_i32(loc_3, 48), loc_0)
			loc_12 = 0
			loc_0 = 0
			if loc_4 >= 4 then
				while true do
					loc_14 = band_i32(loc_4, 4294967292)
					loc_10 = 0
					while true do
						loc_3 = mul_i32(loc_0, 48)
						loc_4 = add_i32(loc_3, loc_5)
						loc_3 = add_i32(loc_3, loc_7)
						store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_3))
						store_i64(memory_at_0, loc_4 + 40, load_i64(memory_at_0, loc_3 + 40))
						store_i64(memory_at_0, loc_4 + 32, load_i64(memory_at_0, loc_3 + 32))
						store_i64(memory_at_0, loc_4 + 24, load_i64(memory_at_0, loc_3 + 24))
						store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_3 + 16))
						store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_3 + 8))
						loc_3 = mul_i32(bor_i32(loc_0, 1), 48)
						loc_4 = add_i32(loc_3, loc_5)
						loc_3 = add_i32(loc_3, loc_7)
						store_i64(memory_at_0, loc_4 + 40, load_i64(memory_at_0, loc_3 + 40))
						store_i64(memory_at_0, loc_4 + 32, load_i64(memory_at_0, loc_3 + 32))
						store_i64(memory_at_0, loc_4 + 24, load_i64(memory_at_0, loc_3 + 24))
						store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_3 + 16))
						store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_3 + 8))
						store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_3))
						loc_3 = mul_i32(bor_i32(loc_0, 2), 48)
						loc_4 = add_i32(loc_3, loc_5)
						loc_3 = add_i32(loc_3, loc_7)
						store_i64(memory_at_0, loc_4 + 40, load_i64(memory_at_0, loc_3 + 40))
						store_i64(memory_at_0, loc_4 + 32, load_i64(memory_at_0, loc_3 + 32))
						store_i64(memory_at_0, loc_4 + 24, load_i64(memory_at_0, loc_3 + 24))
						store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_3 + 16))
						store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_3 + 8))
						store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_3))
						loc_3 = mul_i32(bor_i32(loc_0, 3), 48)
						loc_4 = add_i32(loc_3, loc_5)
						loc_3 = add_i32(loc_3, loc_7)
						store_i64(memory_at_0, loc_4 + 40, load_i64(memory_at_0, loc_3 + 40))
						store_i64(memory_at_0, loc_4 + 32, load_i64(memory_at_0, loc_3 + 32))
						store_i64(memory_at_0, loc_4 + 24, load_i64(memory_at_0, loc_3 + 24))
						store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_3 + 16))
						store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_3 + 8))
						store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_3))
						loc_0 = add_i32(loc_0, 4)
						loc_10 = add_i32(loc_10, 4)
						if loc_14 ~= loc_10 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_13 == 0 then
				break
			end
			while true do
				loc_3 = mul_i32(loc_0, 48)
				loc_4 = add_i32(loc_3, loc_5)
				loc_3 = add_i32(loc_3, loc_7)
				store_i64(memory_at_0, loc_4, load_i64(memory_at_0, loc_3))
				store_i64(memory_at_0, loc_4 + 40, load_i64(memory_at_0, loc_3 + 40))
				store_i64(memory_at_0, loc_4 + 32, load_i64(memory_at_0, loc_3 + 32))
				store_i64(memory_at_0, loc_4 + 24, load_i64(memory_at_0, loc_3 + 24))
				store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_3 + 16))
				store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, loc_3 + 8))
				loc_0 = add_i32(loc_0, 1)
				loc_12 = add_i32(loc_12, 1)
				if loc_13 ~= loc_12 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = FUNC_LIST[353](loc_18, 36)
		reg_0 = FUNC_LIST[325](reg_0, add_i32(loc_2, 48), add_i32(loc_2, 112), loc_6)
		loc_4 = reg_0
		loc_0 = load_i32(memory_at_0, loc_2 + 172)
		loc_3 = add_i32(load_i32(memory_at_0, loc_0), mul_i32(load_i32(memory_at_0, loc_2 + 176), 48))
		if loc_3 ~= load_i32(memory_at_0, loc_0 + 4) then
			while true do
				store_i32(memory_at_0, loc_0 + 4, loc_3)
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 192)
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[458] = --[[ Luau::TempVector<Luau::AstTableProp>::push_back(Luau::AstTableProp const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_4 = load_i32(memory_at_0, loc_0)
					loc_2 = load_i32(memory_at_0, loc_4 + 4)
					if loc_2 ~= load_i32(memory_at_0, loc_4 + 8) then
						while true do
							store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_1))
							store_i64(memory_at_0, loc_2 + 40, load_i64(memory_at_0, loc_1 + 40))
							store_i64(memory_at_0, loc_2 + 32, load_i64(memory_at_0, loc_1 + 32))
							store_i64(memory_at_0, loc_2 + 24, load_i64(memory_at_0, loc_1 + 24))
							store_i64(memory_at_0, loc_2 + 16, load_i64(memory_at_0, loc_1 + 16))
							store_i64(memory_at_0, loc_2 + 8, load_i64(memory_at_0, loc_1 + 8))
							store_i32(memory_at_0, loc_4 + 4, add_i32(loc_2, 48))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = load_i32(memory_at_0, loc_4)
					loc_3 = div_i32(sub_i32(loc_2, loc_7), 48)
					loc_5 = add_i32(loc_3, 1)
					if loc_5 >= 89478486 then
						desired = 2
						break
					end
					loc_6 = shl_i32(loc_3, 1)
					loc_5 = (if loc_3 >= 44739242 then 89478485 else (if loc_5 < loc_6 then loc_6 else loc_5))
					if loc_5 ~= 0 then
						while true do
							if loc_5 >= 89478486 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](mul_i32(loc_5, 48))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = reg_0
					loc_3 = add_i32(loc_6, mul_i32(loc_3, 48))
					store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_1))
					store_i64(memory_at_0, loc_3 + 40, load_i64(memory_at_0, loc_1 + 40))
					store_i64(memory_at_0, loc_3 + 32, load_i64(memory_at_0, loc_1 + 32))
					store_i64(memory_at_0, loc_3 + 24, load_i64(memory_at_0, loc_1 + 24))
					store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_1 + 16))
					store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_1 + 8))
					loc_1 = add_i32(mul_i32(loc_5, 48), loc_6)
					loc_5 = add_i32(loc_3, 48)
					if loc_2 ~= loc_7 then
						while true do
							while true do
								loc_3 = sub_i32(loc_3, 48)
								loc_2 = sub_i32(loc_2, 48)
								store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2))
								store_i64(memory_at_0, loc_3 + 40, load_i64(memory_at_0, loc_2 + 40))
								store_i64(memory_at_0, loc_3 + 32, load_i64(memory_at_0, loc_2 + 32))
								store_i64(memory_at_0, loc_3 + 24, load_i64(memory_at_0, loc_2 + 24))
								store_i64(memory_at_0, loc_3 + 16, load_i64(memory_at_0, loc_2 + 16))
								store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_2 + 8))
								if loc_2 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = load_i32(memory_at_0, loc_4)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = reg_0
					store_i32(memory_at_0, loc_4 + 8, loc_1)
					store_i32(memory_at_0, loc_4 + 4, loc_5)
					store_i32(memory_at_0, loc_4, loc_3)
					if loc_2 == 0 then
						break
					end
					FUNC_LIST[609](loc_2)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_4)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[459] = --[[ Luau::Parser::parseFunctionType(bool, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = i64_ZERO
	local loc_21 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 208)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = add_i32(load_i32(memory_at_0, loc_1 + 120), 1)
		store_i32(memory_at_0, loc_1 + 120, loc_5)
		if loc_5 <= load_i32(memory_at_0, 47712) then
			while true do
				loc_18 = load_i32(memory_at_0, loc_1 + 24)
				store_i32(memory_at_0, loc_4 + 176, load_i32(memory_at_0, loc_1 + 48))
				store_i64(memory_at_0, loc_4 + 168, load_i64(memory_at_0, loc_1 + 40))
				store_i64(memory_at_0, loc_4 + 160, load_i64(memory_at_0, loc_1 + 32))
				store_i64(memory_at_0, loc_4 + 152, load_i64(memory_at_0, loc_1 + 24))
				FUNC_LIST[434](add_i32(loc_4, 136), loc_1, 0)
				loc_20 = load_i64(memory_at_0, loc_1 + 28)
				while true do
					loc_7 = load_i32(memory_at_0, loc_1 + 24)
					if loc_7 ~= 40 then
						while true do
							FUNC_LIST[394](loc_1, 40, 2107)
							FUNC_LIST[381](add_i32(loc_4, 180), add_i32(loc_1, 4))
							if load_i32(memory_at_0, loc_4 + 180) ~= 40 then
								desired = 2
								break
							end
							FUNC_LIST[398](loc_1)
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[398](loc_1)
					break
				end
				if desired then
					break
				end
				loc_5 = load_i32(memory_at_0, loc_1 + 208)
				store_i32(memory_at_0, loc_5 + 1052, add_i32(load_i32(memory_at_0, loc_5 + 1052), 1))
				store_i32(memory_at_0, loc_4 + 180, add_i32(loc_1, 328))
				loc_5 = load_i32(memory_at_0, loc_1 + 328)
				loc_8 = load_i32(memory_at_0, loc_1 + 332)
				store_i32(memory_at_0, loc_4 + 188, 0)
				store_i32(memory_at_0, loc_4 + 184, shr_i32(sub_i32(loc_8, loc_5), 2))
				store_i32(memory_at_0, loc_4 + 124, add_i32(loc_1, 412))
				loc_5 = load_i32(memory_at_0, loc_1 + 412)
				loc_8 = load_i32(memory_at_0, loc_1 + 416)
				store_i32(memory_at_0, loc_4 + 132, 0)
				store_i32(memory_at_0, loc_4 + 128, div_i32(sub_i32(loc_8, loc_5), 24))
				while true do
					while true do
						if load_i32(memory_at_0, loc_1 + 24) == 41 then
							break
						end
						reg_0 = FUNC_LIST[455](loc_1, add_i32(loc_4, 180), add_i32(loc_4, 124))
						loc_15 = reg_0
						loc_5 = load_i32(memory_at_0, loc_1 + 24)
						store_i64(memory_at_0, loc_4 + 116, loc_20)
						store_i32(memory_at_0, loc_4 + 112, loc_7)
						if loc_5 == 41 then
							break
						end
						FUNC_LIST[431](loc_1, 41, add_i32(loc_4, 112), 0)
						reg_0 = FUNC_LIST[432](loc_1, 41, loc_5, 1)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					FUNC_LIST[398](loc_1)
					break
				end
				if desired then
					break
				end
				loc_19 = loc_1
				loc_17 = add_i32(loc_19, 24)
				loc_5 = load_i32(memory_at_0, loc_1 + 208)
				store_i32(memory_at_0, loc_5 + 1052, sub_i32(load_i32(memory_at_0, loc_5 + 1052), 1))
				loc_8 = 0
				while true do
					loc_11 = load_i32(memory_at_0, loc_4 + 188)
					if loc_11 == 0 then
						break
					end
					loc_14 = band_i32(loc_11, 3)
					loc_7 = add_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_4 + 180)), shl_i32(load_i32(memory_at_0, loc_4 + 184), 2))
					reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_1 + 88), shl_i32(loc_11, 2))
					loc_8 = reg_0
					loc_5 = 0
					if loc_11 >= 4 then
						while true do
							loc_16 = band_i32(loc_11, 4294967292)
							while true do
								loc_10 = shl_i32(loc_5, 2)
								store_i32(memory_at_0, add_i32(loc_10, loc_8), load_i32(memory_at_0, add_i32(loc_7, loc_10)))
								loc_13 = bor_i32(loc_10, 4)
								store_i32(memory_at_0, add_i32(loc_13, loc_8), load_i32(memory_at_0, add_i32(loc_7, loc_13)))
								loc_13 = bor_i32(loc_10, 8)
								store_i32(memory_at_0, add_i32(loc_13, loc_8), load_i32(memory_at_0, add_i32(loc_7, loc_13)))
								loc_10 = bor_i32(loc_10, 12)
								store_i32(memory_at_0, add_i32(loc_10, loc_8), load_i32(memory_at_0, add_i32(loc_7, loc_10)))
								loc_5 = add_i32(loc_5, 4)
								loc_6 = add_i32(loc_6, 4)
								if loc_16 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					if loc_14 == 0 then
						break
					end
					while true do
						loc_10 = shl_i32(loc_5, 2)
						store_i32(memory_at_0, add_i32(loc_10, loc_8), load_i32(memory_at_0, add_i32(loc_7, loc_10)))
						loc_5 = add_i32(loc_5, 1)
						loc_9 = add_i32(loc_9, 1)
						if loc_14 ~= loc_9 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					break
				end
				loc_12 = load_i32(memory_at_0, loc_4 + 132)
				while true do
					while true do
						loc_5 = load_i32(memory_at_0, loc_19 + 24)
						if loc_5 == 263 then
							break
						end
						loc_7 = bor_i32((if loc_18 == 60 then 1 else 0), (if loc_12 ~= 0 then 1 else 0))
						while true do
							loc_5 = (if loc_5 == 58 then 1 else 0)
							if loc_5 ~= 0 then
								break
							end
							if bor_i32(loc_7, bor_i32(loc_15, (if load_i32(memory_at_0, loc_4 + 188) ~= 1 then 1 else 0))) ~= 0 then
								break
							end
							if loc_2 ~= 0 then
								while true do
									store_i32(memory_at_0, loc_0, 0)
									loc_5 = load_i32(memory_at_0, loc_1 + 88)
									loc_7 = add_i32(loc_4, 120)
									store_i32(memory_at_0, loc_7, 0)
									store_i32(memory_at_0, loc_4 + 116, loc_11)
									store_i32(memory_at_0, loc_4 + 112, loc_8)
									reg_0 = FUNC_LIST[353](loc_5, 36)
									loc_5 = reg_0
									store_i32(memory_at_0, loc_4 + 72, load_i32(memory_at_0, loc_4 + 120))
									store_i64(memory_at_0, loc_4 + 64, load_i64(memory_at_0, loc_4 + 112))
									reg_1 = FUNC_LIST[342](loc_5, bor_i32(add_i32(loc_4, 152), 4), sub_i32(loc_4, 4294967232))
									store_i32(memory_at_0, loc_0 + 4, reg_1)
									desired = 2
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_5 = load_i32(memory_at_0, add_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_4 + 180)), shl_i32(load_i32(memory_at_0, loc_4 + 184), 2)))
							store_i32(memory_at_0, loc_0 + 4, 0)
							store_i32(memory_at_0, loc_0, loc_5)
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						if bor_i32(bor_i32(bxor_i32(loc_2, 1), loc_5), loc_7) ~= 0 then
							break
						end
						store_i32(memory_at_0, loc_0, 0)
						loc_5 = load_i32(memory_at_0, loc_1 + 88)
						loc_7 = add_i32(loc_4, 120)
						store_i32(memory_at_0, loc_7, loc_15)
						store_i32(memory_at_0, loc_4 + 116, loc_11)
						store_i32(memory_at_0, loc_4 + 112, loc_8)
						reg_0 = FUNC_LIST[353](loc_5, 36)
						loc_5 = reg_0
						store_i32(memory_at_0, loc_4 + 56, load_i32(memory_at_0, loc_4 + 120))
						store_i64(memory_at_0, loc_4 + 48, load_i64(memory_at_0, loc_4 + 112))
						reg_1 = FUNC_LIST[342](loc_5, bor_i32(add_i32(loc_4, 152), 4), add_i32(loc_4, 48))
						store_i32(memory_at_0, loc_0 + 4, reg_1)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					loc_7 = 0
					while true do
						if loc_12 == 0 then
							break
						end
						loc_16 = band_i32(loc_12, 3)
						loc_10 = add_i32(load_i32(memory_at_0, load_i32(memory_at_0, loc_4 + 124)), mul_i32(load_i32(memory_at_0, loc_4 + 128), 24))
						loc_13 = 0
						reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_1 + 88), mul_i32(loc_12, 24))
						loc_7 = reg_0
						loc_5 = 0
						if loc_12 >= 4 then
							while true do
								loc_17 = band_i32(loc_12, 4294967292)
								loc_14 = 0
								while true do
									loc_6 = mul_i32(loc_5, 24)
									loc_9 = add_i32(loc_6, loc_7)
									loc_6 = add_i32(loc_6, loc_10)
									store_i64(memory_at_0, loc_9, load_i64(memory_at_0, loc_6))
									store_i64(memory_at_0, loc_9 + 16, load_i64(memory_at_0, loc_6 + 16))
									store_i64(memory_at_0, loc_9 + 8, load_i64(memory_at_0, loc_6 + 8))
									loc_6 = mul_i32(bor_i32(loc_5, 1), 24)
									loc_9 = add_i32(loc_6, loc_7)
									loc_6 = add_i32(loc_6, loc_10)
									store_i64(memory_at_0, loc_9 + 16, load_i64(memory_at_0, loc_6 + 16))
									store_i64(memory_at_0, loc_9 + 8, load_i64(memory_at_0, loc_6 + 8))
									store_i64(memory_at_0, loc_9, load_i64(memory_at_0, loc_6))
									loc_6 = mul_i32(bor_i32(loc_5, 2), 24)
									loc_9 = add_i32(loc_6, loc_7)
									loc_6 = add_i32(loc_6, loc_10)
									store_i64(memory_at_0, loc_9 + 16, load_i64(memory_at_0, loc_6 + 16))
									store_i64(memory_at_0, loc_9 + 8, load_i64(memory_at_0, loc_6 + 8))
									store_i64(memory_at_0, loc_9, load_i64(memory_at_0, loc_6))
									loc_6 = mul_i32(bor_i32(loc_5, 3), 24)
									loc_9 = add_i32(loc_6, loc_7)
									loc_6 = add_i32(loc_6, loc_10)
									store_i64(memory_at_0, loc_9 + 16, load_i64(memory_at_0, loc_6 + 16))
									store_i64(memory_at_0, loc_9 + 8, load_i64(memory_at_0, loc_6 + 8))
									store_i64(memory_at_0, loc_9, load_i64(memory_at_0, loc_6))
									loc_5 = add_i32(loc_5, 4)
									loc_14 = add_i32(loc_14, 4)
									if loc_17 ~= loc_14 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if loc_16 == 0 then
							break
						end
						while true do
							loc_6 = mul_i32(loc_5, 24)
							loc_9 = add_i32(loc_6, loc_7)
							loc_6 = add_i32(loc_6, loc_10)
							store_i64(memory_at_0, loc_9, load_i64(memory_at_0, loc_6))
							store_i64(memory_at_0, loc_9 + 16, load_i64(memory_at_0, loc_6 + 16))
							store_i64(memory_at_0, loc_9 + 8, load_i64(memory_at_0, loc_6 + 8))
							loc_5 = add_i32(loc_5, 1)
							loc_13 = add_i32(loc_13, 1)
							if loc_16 ~= loc_13 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_4 + 92, loc_11)
					store_i32(memory_at_0, loc_4 + 88, loc_8)
					store_i32(memory_at_0, loc_4 + 84, loc_12)
					store_i32(memory_at_0, loc_4 + 80, loc_7)
					loc_20 = load_i64(memory_at_0, loc_4 + 136)
					store_i64(memory_at_0, loc_4 + 104, loc_20)
					loc_21 = load_i64(memory_at_0, loc_4 + 144)
					store_i64(memory_at_0, loc_4 + 96, loc_21)
					store_i64(memory_at_0, loc_4 + 40, loc_20)
					store_i64(memory_at_0, loc_4 + 32, loc_21)
					store_i64(memory_at_0, loc_4 + 24, load_i64(memory_at_0, loc_4 + 88))
					store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_4 + 80))
					reg_0 = FUNC_LIST[456](loc_1, add_i32(loc_4, 152), add_i32(loc_4, 40), add_i32(loc_4, 32), add_i32(loc_4, 24), add_i32(loc_4, 16), loc_15, loc_3)
					loc_5 = reg_0
					store_i32(memory_at_0, loc_0 + 4, 0)
					store_i32(memory_at_0, loc_0, loc_5)
					break
				end
				if desired then
					break
				end
				loc_5 = load_i32(memory_at_0, loc_4 + 124)
				loc_8 = add_i32(load_i32(memory_at_0, loc_5), mul_i32(load_i32(memory_at_0, loc_4 + 128), 24))
				if loc_8 ~= load_i32(memory_at_0, loc_5 + 4) then
					while true do
						store_i32(memory_at_0, loc_5 + 4, loc_8)
						break
					end
					if desired then
						break
					end
				end
				loc_5 = load_i32(memory_at_0, loc_4 + 180)
				loc_8 = add_i32(load_i32(memory_at_0, loc_5), shl_i32(load_i32(memory_at_0, loc_4 + 184), 2))
				if loc_8 ~= load_i32(memory_at_0, loc_5 + 4) then
					while true do
						store_i32(memory_at_0, loc_5 + 4, loc_8)
						break
					end
					if desired then
						break
					end
				end
				GLOBAL_LIST[0].value = add_i32(loc_4, 208)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		store_i32(memory_at_0, loc_4, 3366)
		FUNC_LIST[390](add_i32(loc_1, 28), 4604, loc_4)
		error("out of code bounds")
	end
end
FUNC_LIST[460] = --[[ Luau::Parser::parseInterpString() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_1
		store_i32(memory_at_0, loc_1 + 68, add_i32(loc_0, 232))
		loc_2 = load_i32(memory_at_0, loc_0 + 232)
		loc_3 = load_i32(memory_at_0, loc_0 + 236)
		store_i32(memory_at_0, loc_1 + 76, 0)
		store_i32(memory_at_0, loc_1 + 72, shr_i32(sub_i32(loc_3, loc_2), 3))
		store_i32(memory_at_0, loc_1 + 56, add_i32(loc_0, 244))
		loc_2 = load_i32(memory_at_0, loc_0 + 244)
		loc_3 = load_i32(memory_at_0, loc_0 + 248)
		store_i32(memory_at_0, loc_1 + 64, 0)
		store_i32(memory_at_0, loc_1 + 60, shr_i32(sub_i32(loc_3, loc_2), 2))
		loc_9 = add_i32(loc_0, 424)
		loc_12 = add_i32(loc_0, 28)
		loc_13 = add_i32(loc_0, 24)
		loc_14 = load_i64(memory_at_0, loc_0 + 28)
		loc_11 = load_i32(memory_at_0, loc_0 + 24)
		while true do
			while true do
				while true do
					while true do
						store_i64(memory_at_0, loc_1 + 48, load_i64(memory_at_0, loc_12 + 8))
						store_i64(memory_at_0, loc_1 + 40, load_i64(memory_at_0, loc_12))
						reg_0 = FUNC_LIST[672](loc_9, load_i32(memory_at_0, loc_0 + 48), load_i32(memory_at_0, loc_0 + 44))
						reg_0 = FUNC_LIST[383](loc_9)
						if reg_0 == 0 then
							while true do
								FUNC_LIST[398](loc_0)
								store_i64(memory_at_0, loc_1 + 24, loc_14)
								store_i64(memory_at_0, loc_1 + 32, load_i64(memory_at_0, loc_1 + 48))
								store_i64(memory_at_0, loc_1 + 16, i64_ZERO)
								reg_0 = FUNC_LIST[433](loc_0, add_i32(loc_1, 24), add_i32(loc_1, 16), 4856, 0)
								loc_3 = reg_0
								desired = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						while true do
							loc_3 = load_i32(memory_at_0, loc_0 + 428)
							loc_2 = load_i32_i8(memory_at_0, loc_0 + 435)
							loc_5 = (if lt_i32(loc_2, 0) then 1 else 0)
							loc_6 = (if loc_5 ~= 0 then loc_3 else loc_2)
							loc_7 = add_i32(loc_6, 1)
							if loc_7 == 0 then
								while true do
									store_i32(memory_at_0, loc_1 + 16, 0)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_3 = (if loc_5 ~= 0 then load_i32(memory_at_0, loc_0 + 424) else loc_9)
							reg_1 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), loc_7)
							loc_5 = reg_1
							store_i32(memory_at_0, loc_1 + 16, loc_5)
							loc_8 = band_i32(loc_7, 3)
							loc_4 = 0
							loc_2 = 0
							if loc_6 >= 3 then
								while true do
									loc_10 = band_i32(loc_7, 4294967292)
									loc_7 = 0
									while true do
										store_i32_n8(memory_at_0, add_i32(loc_2, loc_5), load_i32_u8(memory_at_0, add_i32(loc_2, loc_3)))
										loc_6 = bor_i32(loc_2, 1)
										store_i32_n8(memory_at_0, add_i32(loc_6, loc_5), load_i32_u8(memory_at_0, add_i32(loc_3, loc_6)))
										loc_6 = bor_i32(loc_2, 2)
										store_i32_n8(memory_at_0, add_i32(loc_6, loc_5), load_i32_u8(memory_at_0, add_i32(loc_3, loc_6)))
										loc_6 = bor_i32(loc_2, 3)
										store_i32_n8(memory_at_0, add_i32(loc_6, loc_5), load_i32_u8(memory_at_0, add_i32(loc_3, loc_6)))
										loc_2 = add_i32(loc_2, 4)
										loc_7 = add_i32(loc_7, 4)
										if loc_10 ~= loc_7 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_8 ~= 0 then
								while true do
									while true do
										store_i32_n8(memory_at_0, add_i32(loc_2, loc_5), load_i32_u8(memory_at_0, add_i32(loc_2, loc_3)))
										loc_2 = add_i32(loc_2, 1)
										loc_4 = add_i32(loc_4, 1)
										if loc_8 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_2 = load_i32_u8(memory_at_0, loc_0 + 435)
							loc_3 = load_i32(memory_at_0, loc_0 + 428)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						store_i32(memory_at_0, loc_1 + 20, (if lt_i32(extend_i32_n8(loc_2), 0) then loc_3 else loc_2))
						FUNC_LIST[398](loc_0)
						FUNC_LIST[463](add_i32(loc_1, 68), add_i32(loc_1, 16))
						if band_i32(loc_11, 4294967294) == 268 then
							desired = 2
							break
						end
						while true do
							while true do
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, }
									end)()
								end
								temp = br_map[1][sub_i32(load_i32(memory_at_0, loc_13), 267)] or 1
								if temp < 1 then
									break
								elseif temp > 1 then
									desired = 3
									break
								else
									desired = 5
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[398](loc_0)
							store_i64(memory_at_0, loc_1 + 24, i64_ZERO)
							reg_1 = FUNC_LIST[433](loc_0, add_i32(loc_1, 40), add_i32(loc_1, 24), 6373, 0)
							store_i32(memory_at_0, loc_1 + 8, reg_1)
							FUNC_LIST[403](add_i32(loc_1, 56), add_i32(loc_1, 8))
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						reg_1 = FUNC_LIST[420](loc_0, 0)
						store_i32(memory_at_0, loc_1 + 24, reg_1)
						FUNC_LIST[403](add_i32(loc_1, 56), add_i32(loc_1, 24))
						loc_11 = load_i32(memory_at_0, loc_0 + 24)
						if sub_i32(loc_11, 266) < 3 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							while true do
								if not br_map[2] then
									br_map[2] = (function()
										return { [0] = 1, 2, 2, 0, }
									end)()
								end
								temp = br_map[2][sub_i32(loc_11, 284)] or 2
								if temp < 1 then
									break
								elseif temp > 1 then
									desired = 4
									break
								else
									desired = 5
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[398](loc_0)
							store_i64(memory_at_0, loc_1 + 24, i64_ZERO)
							reg_0 = FUNC_LIST[433](loc_0, add_i32(loc_1, 40), add_i32(loc_1, 24), 6111, 0)
							loc_3 = reg_0
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[398](loc_0)
						store_i64(memory_at_0, loc_1 + 24, i64_ZERO)
						reg_0 = FUNC_LIST[433](loc_0, add_i32(loc_1, 40), add_i32(loc_1, 24), 6051, 0)
						loc_3 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i64(memory_at_0, loc_1 + 8, i64_ZERO)
					FUNC_LIST[358](add_i32(loc_1, 24), loc_13)
					store_i32(memory_at_0, loc_1, (if lt_i32(load_i32_i8(memory_at_0, loc_1 + 35), 0) then load_i32(memory_at_0, loc_1 + 24) else add_i32(loc_1, 24)))
					reg_0 = FUNC_LIST[433](loc_0, add_i32(loc_1, 40), add_i32(loc_1, 8), 2765, loc_1)
					loc_3 = reg_0
					if ge_i32(load_i32_i8(memory_at_0, loc_1 + 35), 0) then
						desired = 1
						break
					end
					FUNC_LIST[609](load_i32(memory_at_0, loc_1 + 24))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[398](loc_0)
				store_i64(memory_at_0, loc_1 + 24, i64_ZERO)
				reg_1 = FUNC_LIST[433](loc_0, add_i32(loc_1, 40), add_i32(loc_1, 24), 7249, 0)
				store_i32(memory_at_0, loc_1 + 8, reg_1)
				FUNC_LIST[403](add_i32(loc_1, 56), add_i32(loc_1, 8))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_4 = load_i32(memory_at_0, loc_1 + 76)
				if loc_4 == 0 then
					while true do
						store_i64(memory_at_0, loc_1 + 16, i64_ZERO)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 68))
				loc_5 = load_i32(memory_at_0, loc_1 + 72)
				reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), shl_i32(loc_4, 3))
				loc_3 = reg_0
				store_i32(memory_at_0, loc_1 + 20, loc_4)
				store_i32(memory_at_0, loc_1 + 16, loc_3)
				loc_10 = band_i32(loc_4, 3)
				loc_5 = add_i32(shl_i32(loc_5, 3), loc_2)
				loc_7 = 0
				loc_2 = 0
				if loc_4 >= 4 then
					while true do
						loc_9 = band_i32(loc_4, 4294967292)
						loc_6 = 0
						while true do
							loc_4 = shl_i32(loc_2, 3)
							store_i64(memory_at_0, add_i32(loc_4, loc_3), load_i64(memory_at_0, add_i32(loc_4, loc_5)))
							loc_8 = bor_i32(loc_4, 8)
							store_i64(memory_at_0, add_i32(loc_8, loc_3), load_i64(memory_at_0, add_i32(loc_5, loc_8)))
							loc_8 = bor_i32(loc_4, 16)
							store_i64(memory_at_0, add_i32(loc_8, loc_3), load_i64(memory_at_0, add_i32(loc_5, loc_8)))
							loc_4 = bor_i32(loc_4, 24)
							store_i64(memory_at_0, add_i32(loc_4, loc_3), load_i64(memory_at_0, add_i32(loc_4, loc_5)))
							loc_2 = add_i32(loc_2, 4)
							loc_6 = add_i32(loc_6, 4)
							if loc_9 ~= loc_6 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_10 == 0 then
					break
				end
				while true do
					loc_4 = shl_i32(loc_2, 3)
					store_i64(memory_at_0, add_i32(loc_4, loc_3), load_i64(memory_at_0, add_i32(loc_4, loc_5)))
					loc_2 = add_i32(loc_2, 1)
					loc_7 = add_i32(loc_7, 1)
					if loc_10 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_4 = load_i32(memory_at_0, loc_1 + 64)
				if loc_4 == 0 then
					while true do
						store_i64(memory_at_0, loc_1 + 8, i64_ZERO)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 56))
				loc_5 = load_i32(memory_at_0, loc_1 + 60)
				reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), shl_i32(loc_4, 2))
				loc_3 = reg_0
				store_i32(memory_at_0, loc_1 + 12, loc_4)
				store_i32(memory_at_0, loc_1 + 8, loc_3)
				loc_10 = band_i32(loc_4, 3)
				loc_5 = add_i32(shl_i32(loc_5, 2), loc_2)
				loc_7 = 0
				loc_2 = 0
				if loc_4 >= 4 then
					while true do
						loc_9 = band_i32(loc_4, 4294967292)
						loc_6 = 0
						while true do
							loc_4 = shl_i32(loc_2, 2)
							store_i32(memory_at_0, add_i32(loc_4, loc_3), load_i32(memory_at_0, add_i32(loc_4, loc_5)))
							loc_8 = bor_i32(loc_4, 4)
							store_i32(memory_at_0, add_i32(loc_8, loc_3), load_i32(memory_at_0, add_i32(loc_5, loc_8)))
							loc_8 = bor_i32(loc_4, 8)
							store_i32(memory_at_0, add_i32(loc_8, loc_3), load_i32(memory_at_0, add_i32(loc_5, loc_8)))
							loc_4 = bor_i32(loc_4, 12)
							store_i32(memory_at_0, add_i32(loc_4, loc_3), load_i32(memory_at_0, add_i32(loc_4, loc_5)))
							loc_2 = add_i32(loc_2, 4)
							loc_6 = add_i32(loc_6, 4)
							if loc_9 ~= loc_6 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_10 == 0 then
					break
				end
				while true do
					loc_4 = shl_i32(loc_2, 2)
					store_i32(memory_at_0, add_i32(loc_4, loc_3), load_i32(memory_at_0, add_i32(loc_4, loc_5)))
					loc_2 = add_i32(loc_2, 1)
					loc_7 = add_i32(loc_7, 1)
					if loc_10 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = load_i32(memory_at_0, loc_0 + 88)
			store_i64(memory_at_0, loc_1 + 24, loc_14)
			store_i64(memory_at_0, loc_1 + 32, load_i64(memory_at_0, loc_1 + 48))
			reg_0 = FUNC_LIST[353](loc_2, 40)
			reg_0 = FUNC_LIST[280](reg_0, add_i32(loc_1, 24), add_i32(loc_1, 16), add_i32(loc_1, 8))
			loc_3 = reg_0
			break
		end
		loc_2 = load_i32(memory_at_0, loc_1 + 56)
		loc_5 = add_i32(load_i32(memory_at_0, loc_2), shl_i32(load_i32(memory_at_0, loc_1 + 60), 2))
		if loc_5 ~= load_i32(memory_at_0, loc_2 + 4) then
			while true do
				store_i32(memory_at_0, loc_2 + 4, loc_5)
				break
			end
		end
		loc_2 = load_i32(memory_at_0, loc_1 + 68)
		loc_5 = add_i32(load_i32(memory_at_0, loc_2), shl_i32(load_i32(memory_at_0, loc_1 + 72), 3))
		if loc_5 ~= load_i32(memory_at_0, loc_2 + 4) then
			while true do
				store_i32(memory_at_0, loc_2 + 4, loc_5)
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_1, 80)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[461] = --[[ Luau::Parser::parseTypeParams() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_2 = add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_2
		store_i32(memory_at_0, loc_2 + 12, add_i32(loc_1, 340))
		loc_3 = load_i32(memory_at_0, loc_1 + 340)
		loc_5 = load_i32(memory_at_0, loc_1 + 344)
		store_i32(memory_at_0, loc_2 + 20, 0)
		store_i32(memory_at_0, loc_2 + 16, shr_i32(sub_i32(loc_5, loc_3), 3))
		while true do
			while true do
				if load_i32(memory_at_0, loc_1 + 24) == 60 then
					while true do
						loc_6 = add_i32(loc_1, 4)
						loc_10 = load_i64(memory_at_0, loc_1 + 28)
						FUNC_LIST[398](loc_1)
						loc_5 = add_i32(loc_1, 28)
						while true do
							while true do
								while true do
									while true do
										while true do
											loc_3 = load_i32(memory_at_0, loc_1 + 24)
											if loc_3 == 262 then
												break
											end
											while true do
												if loc_3 == 281 then
													while true do
														FUNC_LIST[381](add_i32(loc_2, 24), loc_6)
														if load_i32(memory_at_0, loc_2 + 24) == 262 then
															desired = 8
															break
														end
														reg_0 = load_i32(memory_at_0, loc_1 + 24)
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												else
													while true do
														reg_0 = loc_3
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												end
												loc_3 = reg_0
												if loc_3 ~= 62 then
													while true do
														if loc_3 ~= 40 then
															desired = 9
															break
														end
														loc_4 = load_i32(memory_at_0, loc_1 + 120)
														store_i64(memory_at_0, loc_2 + 32, load_i64(memory_at_0, loc_5 + 8))
														store_i64(memory_at_0, loc_2 + 24, load_i64(memory_at_0, loc_5))
														FUNC_LIST[435](add_i32(loc_2, 56), loc_1, 1, 0)
														loc_3 = load_i32(memory_at_0, loc_2 + 60)
														if loc_3 ~= 0 then
															while true do
																store_i32(memory_at_0, loc_2 + 28, loc_3)
																store_i32(memory_at_0, loc_2 + 24, 0)
																FUNC_LIST[463](add_i32(loc_2, 12), add_i32(loc_2, 24))
																desired = 7
																break
															end
															if desired then
																break
															end
														end
														store_i32(memory_at_0, loc_1 + 120, loc_4)
														reg_0 = FUNC_LIST[436](loc_1, load_i32(memory_at_0, loc_2 + 56), add_i32(loc_2, 24))
														loc_3 = reg_0
														store_i32(memory_at_0, loc_2 + 28, 0)
														store_i32(memory_at_0, loc_2 + 24, loc_3)
														FUNC_LIST[463](add_i32(loc_2, 12), add_i32(loc_2, 24))
														desired = 7
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												end
												if load_i32(memory_at_0, loc_2 + 20) == 0 then
													desired = 5
													break
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											loc_3 = load_i32(memory_at_0, loc_1 + 120)
											store_i64(memory_at_0, loc_2 + 32, load_i64(memory_at_0, loc_5 + 8))
											store_i64(memory_at_0, loc_2 + 24, load_i64(memory_at_0, loc_5))
											FUNC_LIST[435](add_i32(loc_2, 56), loc_1, 0, 0)
											loc_4 = load_i32(memory_at_0, loc_2 + 56)
											store_i32(memory_at_0, loc_1 + 120, loc_3)
											reg_0 = FUNC_LIST[436](loc_1, loc_4, add_i32(loc_2, 24))
											loc_3 = reg_0
											store_i32(memory_at_0, loc_2 + 60, 0)
											store_i32(memory_at_0, loc_2 + 56, loc_3)
											FUNC_LIST[463](add_i32(loc_2, 12), add_i32(loc_2, 56))
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										reg_1 = FUNC_LIST[451](loc_1)
										store_i32(memory_at_0, loc_2 + 28, reg_1)
										store_i32(memory_at_0, loc_2 + 24, 0)
										FUNC_LIST[463](add_i32(loc_2, 12), add_i32(loc_2, 24))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
									loc_3 = load_i32(memory_at_0, loc_1 + 24)
									if loc_3 == 44 then
										while true do
											FUNC_LIST[398](loc_1)
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								store_i64(memory_at_0, loc_2 + 28, loc_10)
								store_i32(memory_at_0, loc_2 + 24, 60)
								if loc_3 == 62 then
									break
								end
								FUNC_LIST[431](loc_1, 62, add_i32(loc_2, 24), 0)
								reg_0 = FUNC_LIST[432](loc_1, 62, loc_2, 0)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							FUNC_LIST[398](loc_1)
							break
						end
						if desired then
							break
						end
						loc_4 = load_i32(memory_at_0, loc_2 + 20)
						if loc_4 ~= 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				store_i64(memory_at_0, loc_0, i64_ZERO)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = load_i32(memory_at_0, load_i32(memory_at_0, loc_2 + 12))
			loc_6 = load_i32(memory_at_0, loc_2 + 16)
			reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_1 + 88), shl_i32(loc_4, 3))
			loc_3 = reg_0
			store_i32(memory_at_0, loc_0 + 4, loc_4)
			store_i32(memory_at_0, loc_0, loc_3)
			loc_8 = band_i32(loc_4, 3)
			loc_5 = add_i32(shl_i32(loc_6, 3), loc_5)
			loc_6 = 0
			loc_1 = 0
			if loc_4 >= 4 then
				while true do
					loc_9 = band_i32(loc_4, 4294967292)
					loc_0 = 0
					while true do
						loc_4 = shl_i32(loc_1, 3)
						store_i64(memory_at_0, add_i32(loc_4, loc_3), load_i64(memory_at_0, add_i32(loc_4, loc_5)))
						loc_7 = bor_i32(loc_4, 8)
						store_i64(memory_at_0, add_i32(loc_7, loc_3), load_i64(memory_at_0, add_i32(loc_5, loc_7)))
						loc_7 = bor_i32(loc_4, 16)
						store_i64(memory_at_0, add_i32(loc_7, loc_3), load_i64(memory_at_0, add_i32(loc_5, loc_7)))
						loc_4 = bor_i32(loc_4, 24)
						store_i64(memory_at_0, add_i32(loc_4, loc_3), load_i64(memory_at_0, add_i32(loc_4, loc_5)))
						loc_1 = add_i32(loc_1, 4)
						loc_0 = add_i32(loc_0, 4)
						if loc_9 ~= loc_0 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 == 0 then
				break
			end
			while true do
				loc_4 = shl_i32(loc_1, 3)
				store_i64(memory_at_0, add_i32(loc_4, loc_3), load_i64(memory_at_0, add_i32(loc_4, loc_5)))
				loc_1 = add_i32(loc_1, 1)
				loc_6 = add_i32(loc_6, 1)
				if loc_8 ~= loc_6 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		loc_1 = load_i32(memory_at_0, loc_2 + 12)
		loc_3 = add_i32(load_i32(memory_at_0, loc_1), shl_i32(load_i32(memory_at_0, loc_2 + 16), 3))
		if loc_3 ~= load_i32(memory_at_0, loc_1 + 4) then
			while true do
				store_i32(memory_at_0, loc_1 + 4, loc_3)
				break
			end
		end
		GLOBAL_LIST[0].value = sub_i32(loc_2, 4294967232)
		break
	end
end
FUNC_LIST[462] = --[[ Luau::Parser::reportMissingTypeError(Luau::Location const&, Luau::Location const&, char const*, ...) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local reg_0
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		store_i32(memory_at_0, loc_5 + 12, loc_4)
		FUNC_LIST[443](loc_0, loc_1, loc_3, loc_4)
		loc_4 = load_i32(memory_at_0, loc_0 + 88)
		store_i64(memory_at_0, loc_5 + 4, i64_ZERO)
		loc_3 = load_i32(memory_at_0, loc_0 + 196)
		loc_0 = load_i32(memory_at_0, loc_0 + 200)
		reg_0 = FUNC_LIST[353](loc_4, 40)
		reg_0 = FUNC_LIST[340](reg_0, loc_2, add_i32(loc_5, 4), 1, sub_i32(shr_i32(sub_i32(loc_0, loc_3), 5), 1))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_5, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[463] = --[[ Luau::TempVector<Luau::AstArray<char>>::push_back(Luau::AstArray<char> const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_3 = load_i32(memory_at_0, loc_0)
					loc_2 = load_i32(memory_at_0, loc_3 + 4)
					if loc_2 ~= load_i32(memory_at_0, loc_3 + 8) then
						while true do
							store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_1))
							store_i32(memory_at_0, loc_3 + 4, add_i32(loc_2, 8))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = load_i32(memory_at_0, loc_3)
					loc_5 = sub_i32(loc_2, loc_7)
					loc_8 = shr_i32(loc_5, 3)
					loc_4 = add_i32(loc_8, 1)
					if loc_4 >= 536870912 then
						desired = 2
						break
					end
					loc_6 = shr_i32(loc_5, 2)
					loc_4 = (if loc_5 >= 2147483640 then 536870911 else (if loc_4 < loc_6 then loc_6 else loc_4))
					if loc_4 ~= 0 then
						while true do
							if loc_4 >= 536870912 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](shl_i32(loc_4, 3))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = reg_0
					loc_5 = add_i32(loc_6, shl_i32(loc_8, 3))
					store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_1))
					loc_1 = add_i32(shl_i32(loc_4, 3), loc_6)
					loc_4 = add_i32(loc_5, 8)
					if loc_2 ~= loc_7 then
						while true do
							while true do
								loc_5 = sub_i32(loc_5, 8)
								loc_2 = sub_i32(loc_2, 8)
								store_i64(memory_at_0, loc_5, load_i64(memory_at_0, loc_2))
								if loc_2 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = load_i32(memory_at_0, loc_3)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = reg_0
					store_i32(memory_at_0, loc_3 + 8, loc_1)
					store_i32(memory_at_0, loc_3 + 4, loc_4)
					store_i32(memory_at_0, loc_3, loc_5)
					if loc_2 == 0 then
						break
					end
					FUNC_LIST[609](loc_2)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_3)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[464] = --[[ Luau::Parser::parseSimpleExpr() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_1
		store_i64(memory_at_0, loc_1 + 48, load_i64(memory_at_0, loc_0 + 36))
		store_i64(memory_at_0, loc_1 + 40, load_i64(memory_at_0, loc_0 + 28))
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	loc_2 = load_i32(memory_at_0, loc_0 + 24)
																	if not br_map[1] then
																		br_map[1] = (function()
																			return { [0] = 9, 12, 12, 12, 6, 12, 12, 5, 12, 12, 12, 12, 12, 12, 12, 12, 5, 5, 4, 12, 12, 12, 7, 12, 12, 8, 12, 12, 12, 12, 12, 12, 12, 2, 12, 3, 10, 12, 12, 0, 12, 12, 12, 12, 12, 1, }
																		end)()
																	end
																	temp = br_map[1][sub_i32(loc_2, 262)] or 11
																	if temp < 6 then
																		if temp < 3 then
																			if temp < 1 then
																				break
																			elseif temp > 1 then
																				desired = 13
																				break
																			else
																				desired = 14
																				break
																			end
																		elseif temp > 3 then
																			if temp < 5 then
																				desired = 11
																				break
																			else
																				desired = 10
																				break
																			end
																		else
																			desired = 12
																			break
																		end
																	elseif temp > 6 then
																		if temp < 10 then
																			if temp < 8 then
																				desired = 8
																				break
																			elseif temp > 8 then
																				desired = 6
																				break
																			else
																				desired = 7
																				break
																			end
																		elseif temp > 10 then
																			if temp < 12 then
																				desired = 4
																				break
																			else
																				desired = 3
																				break
																			end
																		else
																			desired = 5
																			break
																		end
																	else
																		desired = 9
																		break
																	end
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																FUNC_LIST[398](loc_0)
																reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 24)
																reg_0 = FUNC_LIST[247](reg_0, add_i32(loc_1, 40))
																desired = 1
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															FUNC_LIST[398](loc_0)
															reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 28)
															reg_0 = FUNC_LIST[249](reg_0, add_i32(loc_1, 40), 1)
															desired = 1
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														FUNC_LIST[398](loc_0)
														reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 28)
														reg_0 = FUNC_LIST[249](reg_0, add_i32(loc_1, 40), 0)
														desired = 1
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_2 = add_i32(loc_0, 24)
													store_i32(memory_at_0, loc_1 + 32, load_i32(memory_at_0, loc_2 + 24))
													store_i64(memory_at_0, loc_1 + 24, load_i64(memory_at_0, loc_0 + 40))
													store_i64(memory_at_0, loc_1 + 16, load_i64(memory_at_0, loc_0 + 32))
													store_i64(memory_at_0, loc_1 + 8, load_i64(memory_at_0, loc_0 + 24))
													FUNC_LIST[398](loc_0)
													store_i32(memory_at_0, loc_1 + 60, 0)
													FUNC_LIST[426](add_i32(loc_1, 68), loc_0, 0, add_i32(loc_1, 8), add_i32(loc_1, 60), 0)
													reg_0 = load_i32(memory_at_0, loc_1 + 68)
													desired = 1
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												reg_0 = FUNC_LIST[467](loc_0)
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_2 = add_i32(loc_0, 28)
											store_i64(memory_at_0, loc_1 + 16, load_i64(memory_at_0, loc_2 + 8))
											store_i64(memory_at_0, loc_1 + 8, load_i64(memory_at_0, loc_0 + 28))
											FUNC_LIST[442](add_i32(loc_1, 68), loc_0)
											if load_i32_u8(memory_at_0, loc_1 + 76) ~= 0 then
												while true do
													reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 36)
													reg_0 = FUNC_LIST[253](reg_0, add_i32(loc_1, 8), add_i32(loc_1, 68), 0)
													desired = 1
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											store_i64(memory_at_0, loc_1 + 60, i64_ZERO)
											reg_0 = FUNC_LIST[433](loc_0, add_i32(loc_1, 8), add_i32(loc_1, 60), 4919, 0)
											desired = 1
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										reg_0 = FUNC_LIST[460](loc_0)
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									FUNC_LIST[398](loc_0)
									store_i64(memory_at_0, loc_1 + 8, i64_ZERO)
									reg_0 = FUNC_LIST[433](loc_0, add_i32(loc_1, 40), add_i32(loc_1, 8), 5819, 0)
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[398](loc_0)
								store_i64(memory_at_0, loc_1 + 8, i64_ZERO)
								reg_0 = FUNC_LIST[433](loc_0, add_i32(loc_1, 40), add_i32(loc_1, 8), 6111, 0)
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_2 = load_i32_u8(memory_at_0, sub_i32(load_i32(memory_at_0, loc_0 + 156), 8))
							FUNC_LIST[398](loc_0)
							if loc_2 ~= 0 then
								while true do
									reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 24)
									reg_0 = FUNC_LIST[259](reg_0, add_i32(loc_1, 40))
									desired = 1
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							store_i64(memory_at_0, loc_1 + 8, i64_ZERO)
							reg_0 = FUNC_LIST[433](loc_0, add_i32(loc_1, 40), add_i32(loc_1, 8), 3243, 0)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[468](loc_0)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_2 == 123 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[413](loc_0, 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[465](loc_0)
			break
		end
		loc_0 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_1, 80)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[465] = --[[ Luau::Parser::parseTableConstructor() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = i64_ZERO
	local loc_12 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_1
		store_i32(memory_at_0, loc_1 + 52, add_i32(loc_0, 364))
		loc_2 = load_i32(memory_at_0, loc_0 + 364)
		loc_5 = load_i32(memory_at_0, loc_0 + 368)
		store_i32(memory_at_0, loc_1 + 60, 0)
		store_i32(memory_at_0, loc_1 + 56, div_i32(sub_i32(loc_5, loc_2), 12))
		loc_2 = load_i32(memory_at_0, loc_0 + 24)
		loc_12 = load_i64(memory_at_0, loc_0 + 28)
		store_i64(memory_at_0, loc_1 + 44, loc_12)
		store_i32(memory_at_0, loc_1 + 40, loc_2)
		loc_7 = add_i32(loc_0, 4)
		while true do
			if loc_2 ~= 123 then
				while true do
					FUNC_LIST[394](loc_0, 123, 3590)
					FUNC_LIST[381](sub_i32(loc_1, 4294967232), loc_7)
					if load_i32(memory_at_0, loc_1 + 64) ~= 123 then
						desired = 1
						break
					end
					FUNC_LIST[398](loc_0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[398](loc_0)
			break
		end
		while true do
			while true do
				while true do
					loc_2 = load_i32(memory_at_0, loc_0 + 24)
					if loc_2 == 125 then
						while true do
							loc_11 = load_i64(memory_at_0, loc_0 + 36)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_4 = add_i32(loc_0, 28)
					loc_3 = add_i32(loc_1, 24)
					while true do
						while true do
							loc_5 = load_i32(memory_at_0, loc_0 + 32)
							while true do
								if loc_2 == 91 then
									while true do
										store_i32(memory_at_0, loc_1 + 20, 91)
										store_i64(memory_at_0, loc_1 + 24, load_i64(memory_at_0, loc_0 + 28))
										FUNC_LIST[398](loc_0)
										reg_0 = FUNC_LIST[420](loc_0, 0)
										loc_2 = reg_0
										while true do
											if load_i32(memory_at_0, loc_0 + 24) ~= 93 then
												while true do
													FUNC_LIST[431](loc_0, 93, add_i32(loc_1, 20), 0)
													reg_0 = FUNC_LIST[432](loc_0, 93, loc_0, 0)
													desired = 8
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
											end
											FUNC_LIST[398](loc_0)
											break
										end
										if desired then
											break
										end
										while true do
											if load_i32(memory_at_0, loc_0 + 24) ~= 61 then
												while true do
													FUNC_LIST[394](loc_0, 61, 5078)
													FUNC_LIST[381](sub_i32(loc_1, 4294967232), loc_7)
													if load_i32(memory_at_0, loc_1 + 64) ~= 61 then
														desired = 8
														break
													end
													FUNC_LIST[398](loc_0)
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
											end
											FUNC_LIST[398](loc_0)
											break
										end
										if desired then
											break
										end
										reg_1 = FUNC_LIST[420](loc_0, 0)
										store_i32(memory_at_0, loc_1 + 72, reg_1)
										store_i32(memory_at_0, loc_1 + 68, loc_2)
										store_i32(memory_at_0, loc_1 + 64, 2)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								while true do
									if loc_2 ~= 281 then
										break
									end
									FUNC_LIST[381](sub_i32(loc_1, 4294967232), loc_7)
									if load_i32(memory_at_0, loc_1 + 64) ~= 61 then
										break
									end
									while true do
										if load_i32(memory_at_0, loc_0 + 24) == 281 then
											while true do
												loc_2 = load_i32(memory_at_0, loc_0 + 48)
												loc_6 = add_i32(loc_1, 72)
												store_i64(memory_at_0, loc_6, load_i64(memory_at_0, loc_4 + 8))
												store_i64(memory_at_0, loc_1 + 64, load_i64(memory_at_0, loc_4))
												FUNC_LIST[398](loc_0)
												store_i64(memory_at_0, loc_3 + 8, load_i64(memory_at_0, loc_1 + 72))
												store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_1 + 64))
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										FUNC_LIST[427](loc_0, 5078)
										loc_2 = load_i32(memory_at_0, loc_0 + 132)
										loc_11 = load_i64(memory_at_0, loc_0 + 28)
										store_i64(memory_at_0, loc_1 + 32, loc_11)
										store_i64(memory_at_0, loc_1 + 24, loc_11)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									store_i32(memory_at_0, loc_1 + 20, loc_2)
									while true do
										if load_i32(memory_at_0, loc_0 + 24) ~= 61 then
											while true do
												FUNC_LIST[394](loc_0, 61, 5078)
												FUNC_LIST[381](sub_i32(loc_1, 4294967232), loc_7)
												if load_i32(memory_at_0, loc_1 + 64) ~= 61 then
													desired = 8
													break
												end
												FUNC_LIST[398](loc_0)
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										FUNC_LIST[398](loc_0)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_2 = load_i32(memory_at_0, loc_1 + 20)
									store_i32(memory_at_0, loc_1 + 12, loc_2)
									reg_1 = FUNC_LIST[504](loc_2)
									store_i32(memory_at_0, loc_1 + 16, reg_1)
									reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 36)
									reg_0 = FUNC_LIST[253](reg_0, loc_3, add_i32(loc_1, 12), 1)
									loc_6 = reg_0
									while true do
										reg_0 = FUNC_LIST[420](loc_0, 0)
										loc_2 = reg_0
										if loc_2 == 0 then
											break
										end
										if load_i32(memory_at_0, loc_2 + 4) ~= load_i32(memory_at_0, 47268) then
											break
										end
										store_i32(memory_at_0, loc_2 + 100, load_i32(memory_at_0, loc_1 + 20))
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									store_i32(memory_at_0, loc_1 + 72, loc_2)
									store_i32(memory_at_0, loc_1 + 68, loc_6)
									store_i32(memory_at_0, loc_1 + 64, 1)
									desired = 6
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_1 = FUNC_LIST[420](loc_0, 0)
								store_i32(memory_at_0, loc_1 + 72, reg_1)
								store_i64(memory_at_0, loc_1 + 64, i64_ZERO)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							FUNC_LIST[469](add_i32(loc_1, 52), sub_i32(loc_1, 4294967232))
							while true do
								while true do
									while true do
										while true do
											while true do
												loc_2 = load_i32(memory_at_0, loc_0 + 24)
												if le_i32(loc_2, 90) then
													while true do
														if not br_map[1] then
															br_map[1] = (function()
																return { [0] = 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, }
															end)()
														end
														temp = br_map[1][sub_i32(loc_2, 44)] or 1
														if temp < 2 then
															desired = 10
															break
														else
															desired = 9
															break
														end
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												if loc_2 == 91 then
													desired = 8
													break
												end
												if loc_2 == 281 then
													desired = 8
													break
												end
												if loc_2 == 125 then
													desired = 6
													break
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_11 = load_i64(memory_at_0, loc_0 + 36)
											desired = 2
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										FUNC_LIST[398](loc_0)
										desired = 7
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_5 ~= load_i32(memory_at_0, loc_0 + 32) then
										desired = 4
										break
									end
									FUNC_LIST[401](loc_0, loc_4, 1547, 0)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_2 = load_i32(memory_at_0, loc_0 + 24)
								if loc_2 ~= 125 then
									desired = 5
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_11 = load_i64(memory_at_0, loc_0 + 36)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_11 = load_i64(memory_at_0, loc_0 + 36)
					if loc_2 ~= 125 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[398](loc_0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[431](loc_0, 125, add_i32(loc_1, 40), 0)
			reg_0 = FUNC_LIST[432](loc_0, 125, loc_0, 0)
			if reg_0 ~= 0 then
				break
			end
			loc_11 = load_i64(memory_at_0, loc_0 + 60)
			break
		end
		loc_8 = load_i32(memory_at_0, loc_0 + 88)
		store_i64(memory_at_0, loc_1 + 72, loc_11)
		store_i64(memory_at_0, loc_1 + 64, loc_12)
		while true do
			loc_4 = load_i32(memory_at_0, loc_1 + 60)
			if loc_4 == 0 then
				while true do
					store_i64(memory_at_0, loc_1 + 20, i64_ZERO)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = load_i32(memory_at_0, load_i32(memory_at_0, loc_1 + 52))
			loc_5 = load_i32(memory_at_0, loc_1 + 56)
			reg_0 = FUNC_LIST[353](loc_8, mul_i32(loc_4, 12))
			loc_2 = reg_0
			store_i32(memory_at_0, loc_1 + 24, loc_4)
			store_i32(memory_at_0, loc_1 + 20, loc_2)
			loc_9 = band_i32(loc_4, 3)
			loc_5 = add_i32(mul_i32(loc_5, 12), loc_0)
			loc_7 = 0
			loc_0 = 0
			if loc_4 >= 4 then
				while true do
					loc_10 = band_i32(loc_4, 4294967292)
					loc_4 = 0
					while true do
						loc_3 = mul_i32(loc_0, 12)
						loc_6 = add_i32(loc_3, loc_2)
						loc_3 = add_i32(loc_3, loc_5)
						store_i64(memory_at_0, loc_6, load_i64(memory_at_0, loc_3))
						store_i32(memory_at_0, loc_6 + 8, load_i32(memory_at_0, loc_3 + 8))
						loc_3 = mul_i32(bor_i32(loc_0, 1), 12)
						loc_6 = add_i32(loc_3, loc_2)
						loc_3 = add_i32(loc_3, loc_5)
						store_i32(memory_at_0, loc_6 + 8, load_i32(memory_at_0, loc_3 + 8))
						store_i64(memory_at_0, loc_6, load_i64(memory_at_0, loc_3))
						loc_3 = mul_i32(bor_i32(loc_0, 2), 12)
						loc_6 = add_i32(loc_3, loc_2)
						loc_3 = add_i32(loc_3, loc_5)
						store_i32(memory_at_0, loc_6 + 8, load_i32(memory_at_0, loc_3 + 8))
						store_i64(memory_at_0, loc_6, load_i64(memory_at_0, loc_3))
						loc_3 = mul_i32(bor_i32(loc_0, 3), 12)
						loc_6 = add_i32(loc_3, loc_2)
						loc_3 = add_i32(loc_3, loc_5)
						store_i32(memory_at_0, loc_6 + 8, load_i32(memory_at_0, loc_3 + 8))
						store_i64(memory_at_0, loc_6, load_i64(memory_at_0, loc_3))
						loc_0 = add_i32(loc_0, 4)
						loc_4 = add_i32(loc_4, 4)
						if loc_10 ~= loc_4 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_9 == 0 then
				break
			end
			while true do
				loc_4 = mul_i32(loc_0, 12)
				loc_3 = add_i32(loc_4, loc_2)
				loc_4 = add_i32(loc_4, loc_5)
				store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_4))
				store_i32(memory_at_0, loc_3 + 8, load_i32(memory_at_0, loc_4 + 8))
				loc_0 = add_i32(loc_0, 1)
				loc_7 = add_i32(loc_7, 1)
				if loc_9 ~= loc_7 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = FUNC_LIST[353](loc_8, 32)
		reg_0 = FUNC_LIST[269](reg_0, sub_i32(loc_1, 4294967232), add_i32(loc_1, 20))
		loc_2 = reg_0
		loc_0 = load_i32(memory_at_0, loc_1 + 52)
		loc_5 = add_i32(load_i32(memory_at_0, loc_0), mul_i32(load_i32(memory_at_0, loc_1 + 56), 12))
		if loc_5 ~= load_i32(memory_at_0, loc_0 + 4) then
			while true do
				store_i32(memory_at_0, loc_0 + 4, loc_5)
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_1, 96)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[466] = --[[ Luau::Parser::reportFunctionArgsError(Luau::AstExpr*, bool) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				if loc_2 == 0 then
					break
				end
				if load_i32(memory_at_0, loc_0 + 28) == load_i32(memory_at_0, loc_1 + 16) then
					break
				end
				reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 4)
				loc_2 = reg_0
				store_i32(memory_at_0, loc_3 + 36, 1)
				store_i32(memory_at_0, loc_3 + 32, loc_2)
				store_i32(memory_at_0, loc_2, loc_1)
				reg_0 = FUNC_LIST[433](loc_0, add_i32(loc_1, 8), add_i32(loc_3, 32), 7697, 0)
				loc_0 = reg_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i64(memory_at_0, loc_3 + 32, load_i64(memory_at_0, loc_1 + 8))
			store_i64(memory_at_0, loc_3 + 40, load_i64(memory_at_0, loc_0 + 28))
			reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 4)
			loc_2 = reg_0
			store_i32(memory_at_0, loc_3 + 28, 1)
			store_i32(memory_at_0, loc_3 + 24, loc_2)
			store_i32(memory_at_0, loc_2, loc_1)
			FUNC_LIST[358](add_i32(loc_3, 12), add_i32(loc_0, 24))
			store_i32(memory_at_0, loc_3, (if lt_i32(load_i32_i8(memory_at_0, loc_3 + 23), 0) then load_i32(memory_at_0, loc_3 + 12) else add_i32(loc_3, 12)))
			reg_0 = FUNC_LIST[433](loc_0, add_i32(loc_3, 32), add_i32(loc_3, 24), 2700, loc_3)
			loc_0 = reg_0
			if ge_i32(load_i32_i8(memory_at_0, loc_3 + 23), 0) then
				break
			end
			FUNC_LIST[609](load_i32(memory_at_0, loc_3 + 12))
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 48)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[467] = --[[ Luau::Parser::parseNumber() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = i64_ZERO
	local loc_11 = 0.0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 560)
		GLOBAL_LIST[0].value = loc_4
		store_i64(memory_at_0, loc_4 + 24, load_i64(memory_at_0, loc_0 + 36))
		store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, loc_0 + 28))
		loc_5 = add_i32(loc_0, 424)
		reg_0 = FUNC_LIST[672](loc_5, load_i32(memory_at_0, loc_0 + 48), load_i32(memory_at_0, loc_0 + 44))
		while true do
			while true do
				while true do
					while true do
						reg_0 = FUNC_LIST[676](loc_5, 95, 0)
						if reg_0 == 4294967295 then
							break
						end
						while true do
							loc_7 = load_i32(memory_at_0, loc_0 + 424)
							loc_3 = load_i32_i8(memory_at_0, loc_0 + 435)
							loc_2 = (if lt_i32(loc_3, 0) then 1 else 0)
							loc_1 = (if loc_2 ~= 0 then loc_7 else loc_5)
							loc_9 = load_i32(memory_at_0, loc_0 + 428)
							loc_2 = (if loc_2 ~= 0 then loc_9 else loc_3)
							reg_0 = FUNC_LIST[564](loc_1, 95, loc_2)
							loc_8 = reg_0
							loc_6 = add_i32(loc_1, loc_2)
							loc_1 = (if loc_8 ~= 0 then loc_8 else loc_6)
							if loc_1 == loc_6 then
								break
							end
							loc_2 = add_i32(loc_1, 1)
							if loc_6 == loc_2 then
								break
							end
							loc_8 = sub_i32(sub_i32(loc_6, loc_1), 2)
							loc_9 = band_i32(add_i32(bxor_i32(loc_1, 4294967295), loc_6), 3)
							if loc_9 ~= 0 then
								while true do
									loc_3 = 0
									while true do
										loc_7 = load_i32_u8(memory_at_0, loc_2)
										if loc_7 ~= 95 then
											while true do
												store_i32_n8(memory_at_0, loc_1, loc_7)
												reg_0 = add_i32(loc_1, 1)
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										else
											while true do
												reg_0 = loc_1
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										end
										loc_1 = reg_0
										loc_2 = add_i32(loc_2, 1)
										loc_3 = add_i32(loc_3, 1)
										if loc_9 ~= loc_3 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_8 >= 3 then
								while true do
									while true do
										loc_3 = load_i32_u8(memory_at_0, loc_2)
										if loc_3 ~= 95 then
											while true do
												store_i32_n8(memory_at_0, loc_1, loc_3)
												reg_0 = add_i32(loc_1, 1)
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										else
											while true do
												reg_0 = loc_1
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										end
										loc_1 = reg_0
										loc_3 = load_i32_u8(memory_at_0, loc_2 + 1)
										if loc_3 ~= 95 then
											while true do
												store_i32_n8(memory_at_0, loc_1, loc_3)
												reg_0 = add_i32(loc_1, 1)
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										else
											while true do
												reg_0 = loc_1
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										end
										loc_1 = reg_0
										loc_3 = load_i32_u8(memory_at_0, loc_2 + 2)
										if loc_3 ~= 95 then
											while true do
												store_i32_n8(memory_at_0, loc_1, loc_3)
												reg_0 = add_i32(loc_1, 1)
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										else
											while true do
												reg_0 = loc_1
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										end
										loc_1 = reg_0
										loc_3 = load_i32_u8(memory_at_0, loc_2 + 3)
										if loc_3 ~= 95 then
											while true do
												store_i32_n8(memory_at_0, loc_1, loc_3)
												reg_0 = add_i32(loc_1, 1)
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										else
											while true do
												reg_0 = loc_1
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										end
										loc_1 = reg_0
										loc_2 = add_i32(loc_2, 4)
										if loc_6 ~= loc_2 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_3 = load_i32_u8(memory_at_0, loc_0 + 435)
							loc_9 = load_i32(memory_at_0, loc_0 + 428)
							loc_7 = load_i32(memory_at_0, loc_0 + 424)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_8 = extend_i32_n8(loc_3)
						loc_2 = (if lt_i32(loc_8, 0) then 1 else 0)
						loc_3 = (if loc_2 ~= 0 then loc_9 else loc_3)
						loc_6 = (if loc_2 ~= 0 then loc_7 else loc_5)
						loc_2 = sub_i32(loc_1, loc_6)
						if loc_3 < loc_2 then
							desired = 3
							break
						end
						loc_1 = sub_i32(add_i32(loc_3, loc_6), loc_1)
						if loc_1 == 4294967295 then
							while true do
								while true do
									if lt_i32(loc_8, 0) then
										while true do
											store_i32(memory_at_0, loc_0 + 428, loc_2)
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									store_i32_n8(memory_at_0, loc_0 + 435, band_i32(loc_2, 127))
									loc_7 = loc_5
									break
								end
								if desired then
									break
								end
								store_i32_n8(memory_at_0, add_i32(loc_2, loc_7), 0)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[682](loc_5, loc_2, loc_1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							loc_2 = (if lt_i32(load_i32_i8(memory_at_0, loc_0 + 435), 0) then load_i32(memory_at_0, loc_0 + 424) else loc_5)
							if load_i32_u8(memory_at_0, loc_2) ~= 48 then
								break
							end
							while true do
								while true do
									while true do
										loc_1 = load_i32_u8(memory_at_0, loc_2 + 1)
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, }
											end)()
										end
										temp = br_map[1][sub_i32(loc_1, 88)] or 0
										if temp < 2 then
											if temp < 1 then
												break
											else
												desired = 7
												break
											end
										elseif temp > 2 then
											desired = 5
											break
										else
											desired = 6
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_1 == 120 then
										desired = 6
										break
									end
									if loc_1 ~= 66 then
										desired = 5
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if load_i32_u8(memory_at_0, loc_2 + 2) ~= 0 then
									while true do
										loc_1 = 2
										store_i32(memory_at_0, loc_4 + 32, 0)
										loc_2 = add_i32(loc_2, 2)
										reg_0 = FUNC_LIST[585](loc_2, add_i32(loc_4, 32), 2)
										loc_10 = reg_0
										if load_i32_u8(memory_at_0, load_i32(memory_at_0, loc_4 + 32)) ~= 0 then
											desired = 1
											break
										end
										loc_11 = convert_f64_u64(loc_10)
										while true do
											if eq_i64(loc_10, i64_from_u32(4294967295, 4294967295)) then
												while true do
													loc_10 = i64_from_u32(4294967295, 4294967295)
													reg_0 = FUNC_LIST[476]()
													loc_3 = reg_0
													if load_i32(memory_at_0, loc_3) ~= 68 then
														desired = 8
														break
													end
													store_i32(memory_at_0, loc_3, 0)
													reg_0 = FUNC_LIST[585](loc_2, add_i32(loc_4, 32), 2)
													loc_10 = reg_0
													loc_1 = 3
													if load_i32(memory_at_0, loc_3) == 68 then
														desired = 1
														break
													end
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
											end
											if lt_u64(loc_10, i64_from_u32(0, 2097152)) then
												desired = 4
												break
											end
											break
										end
										if desired then
											break
										end
										loc_1 = 1
										while true do
											if band_i32((if loc_11 < 1.8446744073709552e19 then 1 else 0), (if loc_11 >= 0e0 then 1 else 0)) ~= 0 then
												while true do
													reg_0 = truncate_u64_f64(loc_11)
													desired = 8
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
											end
											reg_0 = i64_ZERO
											break
										end
										if desired then
											break
										end
										if eq_i64(reg_0, loc_10) then
											desired = 4
											break
										end
										desired = 1
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								if loc_1 ~= 88 then
									desired = 5
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if load_i32_u8(memory_at_0, loc_2 + 2) == 0 then
								break
							end
							store_i32(memory_at_0, loc_4 + 32, 0)
							reg_0 = FUNC_LIST[585](loc_2, add_i32(loc_4, 32), 16)
							loc_10 = reg_0
							if load_i32_u8(memory_at_0, load_i32(memory_at_0, loc_4 + 32)) ~= 0 then
								desired = 2
								break
							end
							loc_11 = convert_f64_u64(loc_10)
							while true do
								if eq_i64(loc_10, i64_from_u32(4294967295, 4294967295)) then
									while true do
										loc_10 = i64_from_u32(4294967295, 4294967295)
										reg_0 = FUNC_LIST[476]()
										loc_3 = reg_0
										if load_i32(memory_at_0, loc_3) ~= 68 then
											desired = 6
											break
										end
										store_i32(memory_at_0, loc_3, 0)
										reg_0 = FUNC_LIST[585](loc_2, add_i32(loc_4, 32), 16)
										loc_10 = reg_0
										loc_1 = 4
										if load_i32(memory_at_0, loc_3) == 68 then
											desired = 1
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								if lt_u64(loc_10, i64_from_u32(0, 2097152)) then
									desired = 4
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_1 = 1
							while true do
								if band_i32((if loc_11 < 1.8446744073709552e19 then 1 else 0), (if loc_11 >= 0e0 then 1 else 0)) ~= 0 then
									while true do
										reg_0 = truncate_u64_f64(loc_11)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = i64_ZERO
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if eq_i64(reg_0, loc_10) then
								desired = 4
								break
							end
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32(memory_at_0, loc_4 + 556, 0)
						reg_0 = FUNC_LIST[572](loc_2, add_i32(loc_4, 556))
						loc_11 = reg_0
						if load_i32_u8(memory_at_0, load_i32(memory_at_0, loc_4 + 556)) ~= 0 then
							desired = 2
							break
						end
						if (if loc_11 >= 9.007199254740992e15 then 1 else 0) == 0 then
							break
						end
						reg_0 = FUNC_LIST[571](loc_2, 6485)
						reg_1 = FUNC_LIST[504](loc_2)
						if reg_0 ~= reg_1 then
							break
						end
						store_f64(memory_at_0, loc_4, loc_11)
						reg_0 = FUNC_LIST[568](add_i32(loc_4, 32), 512, 3941, loc_4)
						loc_1 = 1
						reg_0 = FUNC_LIST[544](add_i32(loc_4, 32), loc_2)
						if reg_0 ~= 0 then
							desired = 1
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[536](loc_5)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = 2
			loc_11 = 0e0
			break
		end
		FUNC_LIST[398](loc_0)
		while true do
			if loc_1 == 2 then
				while true do
					store_i64(memory_at_0, loc_4 + 32, i64_ZERO)
					reg_0 = FUNC_LIST[433](loc_0, add_i32(loc_4, 16), add_i32(loc_4, 32), 3024, 0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[353](load_i32(memory_at_0, loc_0 + 88), 40)
			reg_0 = FUNC_LIST[251](reg_0, add_i32(loc_4, 16), loc_11, loc_1)
			break
		end
		loc_2 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_4, 560)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[468] = --[[ Luau::Parser::parseIfElseExpr() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_1
		loc_8 = load_i64(memory_at_0, loc_0 + 28)
		FUNC_LIST[398](loc_0)
		loc_2 = add_i32(loc_0, 4)
		reg_0 = FUNC_LIST[420](loc_0, 0)
		loc_4 = reg_0
		while true do
			loc_5 = load_i32(memory_at_0, loc_0 + 24)
			if loc_5 ~= 306 then
				while true do
					FUNC_LIST[394](loc_0, 306, 3438)
					FUNC_LIST[381](add_i32(loc_1, 16), loc_2)
					if load_i32(memory_at_0, loc_1 + 16) ~= 306 then
						desired = 1
						break
					end
					FUNC_LIST[398](loc_0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[398](loc_0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = FUNC_LIST[420](loc_0, 0)
		loc_6 = reg_0
		while true do
			while true do
				loc_3 = load_i32(memory_at_0, loc_0 + 24)
				if loc_3 == 293 then
					while true do
						loc_3 = 1
						loc_7 = load_i32(memory_at_0, loc_0 + 120)
						loc_2 = add_i32(loc_7, 1)
						store_i32(memory_at_0, loc_0 + 120, loc_2)
						if load_i32(memory_at_0, 47712) < loc_2 then
							desired = 1
							break
						end
						reg_0 = FUNC_LIST[468](loc_0)
						loc_2 = reg_0
						store_i32(memory_at_0, loc_0 + 120, loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					loc_3 = (if loc_3 == 292 then 1 else 0)
					if loc_3 == 0 then
						while true do
							FUNC_LIST[394](loc_0, 292, 3438)
							FUNC_LIST[381](add_i32(loc_1, 16), loc_2)
							if load_i32(memory_at_0, loc_1 + 16) ~= 292 then
								desired = 3
								break
							end
							FUNC_LIST[398](loc_0)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[398](loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[420](loc_0, 0)
				loc_2 = reg_0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_0 = load_i32(memory_at_0, loc_0 + 88)
			store_i64(memory_at_0, loc_1 + 24, load_i64(memory_at_0, loc_2 + 16))
			store_i64(memory_at_0, loc_1 + 16, loc_8)
			reg_0 = FUNC_LIST[353](loc_0, 44)
			reg_0 = FUNC_LIST[277](reg_0, add_i32(loc_1, 16), loc_4, (if loc_5 == 306 then 1 else 0), loc_6, loc_3, loc_2)
			loc_0 = reg_0
			GLOBAL_LIST[0].value = add_i32(loc_1, 48)
			reg_0 = loc_0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32(memory_at_0, loc_1, 3451)
		FUNC_LIST[390](add_i32(loc_0, 28), 4604, loc_1)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[469] = --[[ Luau::TempVector<Luau::AstExprTable::Item>::push_back(Luau::AstExprTable::Item const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_4 = load_i32(memory_at_0, loc_0)
					loc_2 = load_i32(memory_at_0, loc_4 + 4)
					if loc_2 ~= load_i32(memory_at_0, loc_4 + 8) then
						while true do
							store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_1))
							store_i32(memory_at_0, loc_2 + 8, load_i32(memory_at_0, loc_1 + 8))
							store_i32(memory_at_0, loc_4 + 4, add_i32(loc_2, 12))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = load_i32(memory_at_0, loc_4)
					loc_3 = div_i32(sub_i32(loc_2, loc_7), 12)
					loc_5 = add_i32(loc_3, 1)
					if loc_5 >= 357913942 then
						desired = 2
						break
					end
					loc_6 = shl_i32(loc_3, 1)
					loc_5 = (if loc_3 >= 178956970 then 357913941 else (if loc_5 < loc_6 then loc_6 else loc_5))
					if loc_5 ~= 0 then
						while true do
							if loc_5 >= 357913942 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[606](mul_i32(loc_5, 12))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = reg_0
					loc_3 = add_i32(loc_6, mul_i32(loc_3, 12))
					store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_1))
					store_i32(memory_at_0, loc_3 + 8, load_i32(memory_at_0, loc_1 + 8))
					loc_1 = add_i32(mul_i32(loc_5, 12), loc_6)
					loc_5 = add_i32(loc_3, 12)
					if loc_2 ~= loc_7 then
						while true do
							while true do
								loc_3 = sub_i32(loc_3, 12)
								loc_2 = sub_i32(loc_2, 12)
								store_i64(memory_at_0, loc_3, load_i64(memory_at_0, loc_2))
								store_i32(memory_at_0, loc_3 + 8, load_i32(memory_at_0, loc_2 + 8))
								if loc_2 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = load_i32(memory_at_0, loc_4)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = reg_0
					store_i32(memory_at_0, loc_4 + 8, loc_1)
					store_i32(memory_at_0, loc_4 + 4, loc_5)
					store_i32(memory_at_0, loc_4, loc_3)
					if loc_2 == 0 then
						break
					end
					FUNC_LIST[609](loc_2)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 8, add_i32(load_i32(memory_at_0, loc_0 + 8), 1))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[40](loc_4)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[163]()
		error("out of code bounds")
	end
end
FUNC_LIST[470] = --[[ void std::__2::vector<Luau::ParseError, std::__2::allocator<Luau::ParseError>>::__emplace_back_slow_path<Luau::Location const&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>&>(Luau::Location const&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_3 = load_i32(memory_at_0, loc_0)
					loc_6 = shr_i32(sub_i32(load_i32(memory_at_0, loc_0 + 4), loc_3), 5)
					loc_4 = add_i32(loc_6, 1)
					if loc_4 < 134217728 then
						while true do
							loc_3 = sub_i32(load_i32(memory_at_0, loc_0 + 8), loc_3)
							loc_5 = shr_i32(loc_3, 4)
							loc_4 = (if loc_3 >= 2147483616 then 134217727 else (if loc_4 < loc_5 then loc_5 else loc_4))
							if loc_4 ~= 0 then
								while true do
									if loc_4 >= 134217728 then
										desired = 3
										break
									end
									reg_0 = FUNC_LIST[606](shl_i32(loc_4, 5))
									break
								end
								if desired then
									break
								end
							else
								while true do
									reg_0 = 0
									break
								end
								if desired then
									break
								end
							end
							loc_5 = reg_0
							loc_3 = add_i32(loc_5, shl_i32(loc_6, 5))
							reg_0 = FUNC_LIST[388](loc_3, loc_1, loc_2)
							loc_7 = add_i32(shl_i32(loc_4, 5), loc_5)
							loc_8 = add_i32(loc_3, 32)
							loc_4 = load_i32(memory_at_0, loc_0 + 4)
							loc_6 = load_i32(memory_at_0, loc_0)
							if loc_4 == loc_6 then
								desired = 2
								break
							end
							while true do
								loc_5 = sub_i32(loc_3, 32)
								store_i32(memory_at_0, loc_5, 30160)
								loc_2 = sub_i32(loc_3, 28)
								loc_1 = sub_i32(loc_4, 28)
								store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_1))
								store_i64(memory_at_0, loc_2 + 8, load_i64(memory_at_0, loc_1 + 8))
								loc_2 = sub_i32(loc_3, 12)
								loc_3 = sub_i32(loc_4, 12)
								loc_9 = loc_3
								loc_1 = add_i32(loc_9, 8)
								store_i32(memory_at_0, loc_2 + 8, load_i32(memory_at_0, loc_1))
								store_i64(memory_at_0, loc_2, load_i64(memory_at_0, loc_3))
								store_i64(memory_at_0, loc_3, i64_ZERO)
								store_i32(memory_at_0, loc_9 + 8, 0)
								loc_3 = loc_5
								loc_4 = sub_i32(loc_4, 32)
								if loc_6 ~= loc_4 then
									continue
								end
								break
							end
							if desired then
								break
							end
							store_i32(memory_at_0, loc_0 + 8, loc_7)
							loc_3 = load_i32(memory_at_0, loc_0 + 4)
							store_i32(memory_at_0, loc_0 + 4, loc_8)
							loc_4 = load_i32(memory_at_0, loc_0)
							store_i32(memory_at_0, loc_0, loc_5)
							if loc_3 == loc_4 then
								desired = 1
								break
							end
							while true do
								loc_3 = sub_i32(loc_3, 32)
								reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_3))](loc_3)
								if loc_3 ~= loc_4 then
									continue
								end
								break
							end
							if desired then
								break
							end
							desired = 1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[40](loc_0)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[163]()
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_0 + 8, loc_7)
			store_i32(memory_at_0, loc_0 + 4, loc_8)
			store_i32(memory_at_0, loc_0, loc_3)
			break
		end
		if loc_4 ~= 0 then
			while true do
				FUNC_LIST[609](loc_4)
				break
			end
		end
		break
	end
end
FUNC_LIST[471] = --[[ Luau::ParseError::~ParseError().1 ]] function(loc_0)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0, 30160)
		if lt_i32(load_i32_i8(memory_at_0, loc_0 + 31), 0) then
			while true do
				FUNC_LIST[609](load_i32(memory_at_0, loc_0 + 20))
				break
			end
		end
		reg_0 = FUNC_LIST[159](loc_0)
		FUNC_LIST[609](reg_0)
		break
	end
end
FUNC_LIST[472] = --[[ Luau::vformatAppend(std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>&, char const*, void*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, loc_3 + 12, loc_2)
		store_i32(memory_at_0, loc_3 + 8, loc_2)
		reg_0 = FUNC_LIST[569](0, 0, loc_1, loc_2)
		loc_2 = reg_0
		if gt_i32(loc_2, 0) then
			while true do
				loc_4 = load_i32_i8(memory_at_0, loc_0 + 11)
				loc_4 = (if lt_i32(loc_4, 0) then load_i32(memory_at_0, loc_0 + 4) else loc_4)
				FUNC_LIST[687](loc_0, add_i32(loc_2, loc_4), 0)
				reg_0 = FUNC_LIST[569](add_i32(loc_4, (if lt_i32(load_i32_i8(memory_at_0, loc_0 + 11), 0) then load_i32(memory_at_0, loc_0) else loc_0)), add_i32(loc_2, 1), loc_1, load_i32(memory_at_0, loc_3 + 12))
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[473] = --[[ Luau::format(char const*, ...) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, loc_0 + 8, 0)
		store_i64(memory_at_0, loc_0, i64_ZERO)
		store_i32(memory_at_0, loc_3 + 4, loc_2)
		store_i32(memory_at_0, loc_3 + 12, loc_2)
		store_i32(memory_at_0, loc_3 + 8, loc_2)
		reg_0 = FUNC_LIST[569](0, 0, loc_1, loc_2)
		loc_2 = reg_0
		if gt_i32(loc_2, 0) then
			while true do
				FUNC_LIST[687](loc_0, loc_2, 0)
				reg_0 = FUNC_LIST[569]((if lt_i32(load_i32_i8(memory_at_0, loc_0 + 11), 0) then load_i32(memory_at_0, loc_0) else loc_0), add_i32(loc_2, 1), loc_1, load_i32(memory_at_0, loc_3 + 12))
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[474] = --[[ Luau::vformat(char const*, void*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		store_i64(memory_at_0, loc_0, i64_ZERO)
		store_i32(memory_at_0, loc_0 + 8, 0)
		store_i32(memory_at_0, loc_3 + 12, loc_2)
		store_i32(memory_at_0, loc_3 + 8, loc_2)
		reg_0 = FUNC_LIST[569](0, 0, loc_1, loc_2)
		loc_2 = reg_0
		if gt_i32(loc_2, 0) then
			while true do
				FUNC_LIST[687](loc_0, loc_2, 0)
				reg_0 = FUNC_LIST[569]((if lt_i32(load_i32_i8(memory_at_0, loc_0 + 11), 0) then load_i32(memory_at_0, loc_0) else loc_0), add_i32(loc_2, 1), loc_1, load_i32(memory_at_0, loc_3 + 12))
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[475] = --[[ Luau::hashRange(char const*, unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		if loc_1 == 0 then
			while true do
				reg_0 = 2166136261
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_4 = band_i32(loc_1, 3)
		while true do
			if loc_1 < 4 then
				while true do
					loc_2 = 2166136261
					loc_1 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = band_i32(loc_1, 4294967292)
			loc_2 = 2166136261
			loc_1 = 0
			while true do
				loc_3 = add_i32(loc_0, loc_1)
				loc_2 = mul_i32(bxor_i32(mul_i32(bxor_i32(mul_i32(bxor_i32(mul_i32(bxor_i32(load_i32_u8(memory_at_0, loc_3), loc_2), 16777619), load_i32_u8(memory_at_0, loc_3 + 1)), 16777619), load_i32_u8(memory_at_0, loc_3 + 2)), 16777619), load_i32_u8(memory_at_0, loc_3 + 3)), 16777619)
				loc_1 = add_i32(loc_1, 4)
				loc_6 = add_i32(loc_6, 4)
				if loc_7 ~= loc_6 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		if loc_4 ~= 0 then
			while true do
				while true do
					loc_2 = mul_i32(bxor_i32(load_i32_u8(memory_at_0, add_i32(loc_0, loc_1)), loc_2), 16777619)
					loc_1 = add_i32(loc_1, 1)
					loc_5 = add_i32(loc_5, 1)
					if loc_4 ~= loc_5 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[476] = --[[ __errno_location ]] function()
	local reg_0
	while true do
		reg_0 = 47784
		break
	end
	return reg_0
end
FUNC_LIST[477] = --[[ __memcpy ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		if loc_2 >= 512 then
			while true do
				FUNC_LIST[1](loc_0, loc_1, loc_2)
				reg_0 = loc_0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = add_i32(loc_0, loc_2)
		while true do
			if band_i32(bxor_i32(loc_0, loc_1), 3) == 0 then
				while true do
					while true do
						if band_i32(loc_0, 3) == 0 then
							while true do
								loc_2 = loc_0
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if loc_2 == 0 then
							while true do
								loc_2 = loc_0
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_2 = loc_0
						while true do
							store_i32_n8(memory_at_0, loc_2, load_i32_u8(memory_at_0, loc_1))
							loc_1 = add_i32(loc_1, 1)
							loc_2 = add_i32(loc_2, 1)
							if band_i32(loc_2, 3) == 0 then
								desired = 3
								break
							end
							if loc_2 < loc_3 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						break
					end
					while true do
						loc_4 = band_i32(loc_3, 4294967292)
						if loc_4 < 64 then
							break
						end
						loc_5 = add_i32(loc_4, 4294967232)
						if loc_5 < loc_2 then
							break
						end
						while true do
							store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_1))
							store_i32(memory_at_0, loc_2 + 4, load_i32(memory_at_0, loc_1 + 4))
							store_i32(memory_at_0, loc_2 + 8, load_i32(memory_at_0, loc_1 + 8))
							store_i32(memory_at_0, loc_2 + 12, load_i32(memory_at_0, loc_1 + 12))
							store_i32(memory_at_0, loc_2 + 16, load_i32(memory_at_0, loc_1 + 16))
							store_i32(memory_at_0, loc_2 + 20, load_i32(memory_at_0, loc_1 + 20))
							store_i32(memory_at_0, loc_2 + 24, load_i32(memory_at_0, loc_1 + 24))
							store_i32(memory_at_0, loc_2 + 28, load_i32(memory_at_0, loc_1 + 28))
							store_i32(memory_at_0, loc_2 + 32, load_i32(memory_at_0, loc_1 + 32))
							store_i32(memory_at_0, loc_2 + 36, load_i32(memory_at_0, loc_1 + 36))
							store_i32(memory_at_0, loc_2 + 40, load_i32(memory_at_0, loc_1 + 40))
							store_i32(memory_at_0, loc_2 + 44, load_i32(memory_at_0, loc_1 + 44))
							store_i32(memory_at_0, loc_2 + 48, load_i32(memory_at_0, loc_1 + 48))
							store_i32(memory_at_0, loc_2 + 52, load_i32(memory_at_0, loc_1 + 52))
							store_i32(memory_at_0, loc_2 + 56, load_i32(memory_at_0, loc_1 + 56))
							store_i32(memory_at_0, loc_2 + 60, load_i32(memory_at_0, loc_1 + 60))
							loc_1 = sub_i32(loc_1, 4294967232)
							loc_2 = sub_i32(loc_2, 4294967232)
							if loc_5 >= loc_2 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						break
					end
					if loc_2 >= loc_4 then
						desired = 1
						break
					end
					while true do
						store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_1))
						loc_1 = add_i32(loc_1, 4)
						loc_2 = add_i32(loc_2, 4)
						if loc_4 > loc_2 then
							continue
						end
						break
					end
					if desired then
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_3 < 4 then
				while true do
					loc_2 = loc_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = sub_i32(loc_3, 4)
			if loc_4 < loc_0 then
				while true do
					loc_2 = loc_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = loc_0
			while true do
				store_i32_n8(memory_at_0, loc_2, load_i32_u8(memory_at_0, loc_1))
				store_i32_n8(memory_at_0, loc_2 + 1, load_i32_u8(memory_at_0, loc_1 + 1))
				store_i32_n8(memory_at_0, loc_2 + 2, load_i32_u8(memory_at_0, loc_1 + 2))
				store_i32_n8(memory_at_0, loc_2 + 3, load_i32_u8(memory_at_0, loc_1 + 3))
				loc_1 = add_i32(loc_1, 4)
				loc_2 = add_i32(loc_2, 4)
				if loc_4 >= loc_2 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		if loc_2 < loc_3 then
			while true do
				while true do
					store_i32_n8(memory_at_0, loc_2, load_i32_u8(memory_at_0, loc_1))
					loc_1 = add_i32(loc_1, 1)
					loc_2 = add_i32(loc_2, 1)
					if loc_3 ~= loc_2 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[478] = --[[ memmove ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		while true do
			if loc_0 == loc_1 then
				break
			end
			loc_3 = add_i32(loc_0, loc_2)
			if sub_i32(loc_1, loc_3) <= sub_i32(0, shl_i32(loc_2, 1)) then
				while true do
					reg_0 = FUNC_LIST[477](loc_0, loc_1, loc_2)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = band_i32(bxor_i32(loc_0, loc_1), 3)
			while true do
				while true do
					if loc_0 < loc_1 then
						while true do
							if loc_4 ~= 0 then
								while true do
									loc_3 = loc_0
									desired = 2
									break
								end
								if desired then
									break
								end
							end
							if band_i32(loc_0, 3) == 0 then
								while true do
									loc_3 = loc_0
									desired = 3
									break
								end
								if desired then
									break
								end
							end
							loc_3 = loc_0
							while true do
								if loc_2 == 0 then
									desired = 1
									break
								end
								store_i32_n8(memory_at_0, loc_3, load_i32_u8(memory_at_0, loc_1))
								loc_1 = add_i32(loc_1, 1)
								loc_2 = sub_i32(loc_2, 1)
								loc_3 = add_i32(loc_3, 1)
								if band_i32(loc_3, 3) ~= 0 then
									continue
								end
								break
							end
							if desired then
								break
							end
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						if loc_4 ~= 0 then
							break
						end
						if band_i32(loc_3, 3) ~= 0 then
							while true do
								while true do
									if loc_2 == 0 then
										desired = 1
										break
									end
									loc_2 = sub_i32(loc_2, 1)
									loc_3 = add_i32(loc_2, loc_0)
									store_i32_n8(memory_at_0, loc_3, load_i32_u8(memory_at_0, add_i32(loc_1, loc_2)))
									if band_i32(loc_3, 3) ~= 0 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_2 <= 3 then
							break
						end
						while true do
							loc_2 = sub_i32(loc_2, 4)
							store_i32(memory_at_0, add_i32(loc_2, loc_0), load_i32(memory_at_0, add_i32(loc_1, loc_2)))
							if loc_2 > 3 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_2 == 0 then
						desired = 1
						break
					end
					while true do
						loc_2 = sub_i32(loc_2, 1)
						store_i32_n8(memory_at_0, add_i32(loc_2, loc_0), load_i32_u8(memory_at_0, add_i32(loc_1, loc_2)))
						if loc_2 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_2 <= 3 then
					break
				end
				while true do
					store_i32(memory_at_0, loc_3, load_i32(memory_at_0, loc_1))
					loc_1 = add_i32(loc_1, 4)
					loc_3 = add_i32(loc_3, 4)
					loc_2 = sub_i32(loc_2, 4)
					if loc_2 > 3 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_2 == 0 then
				break
			end
			while true do
				store_i32_n8(memory_at_0, loc_3, load_i32_u8(memory_at_0, loc_1))
				loc_3 = add_i32(loc_3, 1)
				loc_1 = add_i32(loc_1, 1)
				loc_2 = sub_i32(loc_2, 1)
				if loc_2 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[479] = --[[ __memset ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local reg_0
	while true do
		while true do
			if loc_2 == 0 then
				break
			end
			store_i32_n8(memory_at_0, loc_0, loc_1)
			loc_3 = add_i32(loc_0, loc_2)
			store_i32_n8(memory_at_0, sub_i32(loc_3, 1), loc_1)
			if loc_2 < 3 then
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 2, loc_1)
			store_i32_n8(memory_at_0, loc_0 + 1, loc_1)
			store_i32_n8(memory_at_0, sub_i32(loc_3, 3), loc_1)
			store_i32_n8(memory_at_0, sub_i32(loc_3, 2), loc_1)
			if loc_2 < 7 then
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 3, loc_1)
			store_i32_n8(memory_at_0, sub_i32(loc_3, 4), loc_1)
			if loc_2 < 9 then
				break
			end
			loc_4 = band_i32(sub_i32(0, loc_0), 3)
			loc_3 = add_i32(loc_4, loc_0)
			loc_1 = mul_i32(band_i32(loc_1, 255), 16843009)
			store_i32(memory_at_0, loc_3, loc_1)
			loc_4 = band_i32(sub_i32(loc_2, loc_4), 4294967292)
			loc_2 = add_i32(loc_4, loc_3)
			store_i32(memory_at_0, sub_i32(loc_2, 4), loc_1)
			if loc_4 < 9 then
				break
			end
			store_i32(memory_at_0, loc_3 + 8, loc_1)
			store_i32(memory_at_0, loc_3 + 4, loc_1)
			store_i32(memory_at_0, sub_i32(loc_2, 8), loc_1)
			store_i32(memory_at_0, sub_i32(loc_2, 12), loc_1)
			if loc_4 < 25 then
				break
			end
			store_i32(memory_at_0, loc_3 + 24, loc_1)
			store_i32(memory_at_0, loc_3 + 20, loc_1)
			store_i32(memory_at_0, loc_3 + 16, loc_1)
			store_i32(memory_at_0, loc_3 + 12, loc_1)
			store_i32(memory_at_0, sub_i32(loc_2, 16), loc_1)
			store_i32(memory_at_0, sub_i32(loc_2, 20), loc_1)
			store_i32(memory_at_0, sub_i32(loc_2, 24), loc_1)
			store_i32(memory_at_0, sub_i32(loc_2, 28), loc_1)
			loc_5 = bor_i32(band_i32(loc_3, 4), 24)
			loc_2 = sub_i32(loc_4, loc_5)
			if loc_2 < 32 then
				break
			end
			loc_6 = mul_i64(extend_i64_u32(loc_1), i64_from_u32(1, 1))
			loc_1 = add_i32(loc_3, loc_5)
			while true do
				store_i64(memory_at_0, loc_1 + 24, loc_6)
				store_i64(memory_at_0, loc_1 + 16, loc_6)
				store_i64(memory_at_0, loc_1 + 8, loc_6)
				store_i64(memory_at_0, loc_1, loc_6)
				loc_1 = add_i32(loc_1, 32)
				loc_2 = sub_i32(loc_2, 32)
				if loc_2 > 31 then
					continue
				end
				break
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[480] = --[[ __math_uflow ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[563](loc_0, 1.2882297539194267e-231)
		break
	end
	return reg_0
end
FUNC_LIST[481] = --[[ __math_oflow ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[563](loc_0, 3.105036184601418e231)
		break
	end
	return reg_0
end
FUNC_LIST[482] = --[[ exp ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			while true do
				reg_0 = FUNC_LIST[483](loc_0)
				loc_3 = band_i32(reg_0, 2047)
				reg_1 = FUNC_LIST[483](5.551115123125783e-17)
				loc_4 = reg_1
				reg_1 = FUNC_LIST[483](5.12e2)
				if sub_i32(loc_3, loc_4) < sub_i32(reg_1, loc_4) then
					while true do
						loc_4 = loc_3
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_3 < loc_4 then
					while true do
						reg_0 = (loc_0 + 1e0)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = 0
				reg_0 = FUNC_LIST[483](1.024e3)
				if reg_0 > loc_3 then
					break
				end
				loc_5 = reinterpret_i64_f64(loc_0)
				reg_0 = 0e0
				if eq_i64(loc_5, i64_from_u32(0, 4293918720)) then
					desired = 1
					break
				end
				reg_0 = FUNC_LIST[483](math.huge)
				if reg_0 <= loc_3 then
					while true do
						reg_0 = (loc_0 + 1e0)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if lt_i64(loc_5, i64_ZERO) then
					while true do
						reg_0 = FUNC_LIST[480](0)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[481](0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = load_f64(memory_at_0, 30248)
			loc_2 = ((load_f64(memory_at_0, 30240) * loc_0) + loc_1)
			loc_1 = (loc_2 - loc_1)
			loc_0 = ((loc_1 * load_f64(memory_at_0, 30264)) + ((loc_1 * load_f64(memory_at_0, 30256)) + loc_0))
			loc_1 = (loc_0 * loc_0)
			loc_5 = reinterpret_i64_f64(loc_2)
			loc_3 = band_i32(shl_i32(wrap_i32_i64(loc_5), 4), 2032)
			loc_0 = (((loc_1 * loc_1) * ((loc_0 * load_f64(memory_at_0, 30296)) + load_f64(memory_at_0, 30288))) + ((loc_1 * ((loc_0 * load_f64(memory_at_0, 30280)) + load_f64(memory_at_0, 30272))) + (load_f64(memory_at_0, add_i32(loc_3, 30352)) + loc_0)))
			loc_6 = add_i64(load_i64(memory_at_0, add_i32(loc_3, 30360)), shl_i64(loc_5, i64_from_u32(45, 0)))
			if loc_4 == 0 then
				while true do
					reg_0 = FUNC_LIST[484](loc_0, loc_6, loc_5)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = reinterpret_f64_i64(loc_6)
			reg_0 = ((loc_1 * loc_0) + loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_1 = reg_0
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[483] = --[[ top12 ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = wrap_i32_i64(shr_u64(reinterpret_i64_f64(loc_0), i64_from_u32(52, 0)))
		break
	end
	return reg_0
end
FUNC_LIST[484] = --[[ specialcase ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local reg_0
	local desired
	while true do
		if eq_i64(band_i64(loc_2, i64_from_u32(2147483648, 0)), i64_ZERO) then
			while true do
				loc_3 = reinterpret_f64_i64(sub_i64(loc_1, i64_from_u32(0, 1058013184)))
				reg_0 = (((loc_3 * loc_0) + loc_3) * 5.486124068793689e303)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = reinterpret_f64_i64(add_i64(loc_1, i64_from_u32(0, 1071644672)))
		loc_4 = (loc_3 * loc_0)
		loc_0 = (loc_4 + loc_3)
		if loc_0 < 1e0 then
			while true do
				reg_0 = FUNC_LIST[485]()
				FUNC_LIST[486]((reg_0 * 2.2250738585072014e-308))
				loc_5 = (loc_0 + 1e0)
				loc_0 = ((loc_5 + ((loc_4 + (loc_3 - loc_0)) + (loc_0 + (1e0 - loc_5)))) + -1e0)
				reg_0 = (if loc_0 == 0e0 then 0e0 else loc_0)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = reg_0
		reg_0 = (loc_0 * 2.2250738585072014e-308)
		break
	end
	return reg_0
end
FUNC_LIST[485] = --[[ fp_barrier ]] function()
	local loc_0 = 0
	local reg_0
	while true do
		loc_0 = sub_i32(GLOBAL_LIST[0].value, 16)
		store_i64(memory_at_0, loc_0 + 8, i64_from_u32(0, 1048576))
		reg_0 = load_f64(memory_at_0, loc_0 + 8)
		break
	end
	return reg_0
end
FUNC_LIST[486] = --[[ fp_force_eval ]] function(loc_0)
	while true do
		store_f64(memory_at_0, sub_i32(GLOBAL_LIST[0].value, 16) + 8, loc_0)
		break
	end
end
FUNC_LIST[487] = --[[ fmod ]] function(loc_0, loc_1)
	local loc_2 = i64_ZERO
	local loc_3 = i64_ZERO
	local loc_4 = i64_ZERO
	local loc_5 = i64_ZERO
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			while true do
				loc_4 = reinterpret_i64_f64(loc_1)
				loc_2 = shl_i64(loc_4, i64_ONE)
				if eq_i64(loc_2, i64_ZERO) then
					break
				end
				reg_0 = FUNC_LIST[488](loc_1)
				loc_3 = reg_0
				loc_5 = reinterpret_i64_f64(loc_0)
				loc_6 = band_i32(wrap_i32_i64(shr_u64(loc_5, i64_from_u32(52, 0))), 2047)
				if loc_6 == 2047 then
					break
				end
				if lt_u64(band_i64(loc_3, i64_from_u32(4294967295, 2147483647)), i64_from_u32(1, 2146435072)) then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = (loc_0 * loc_1)
			reg_0 = (loc_1 / loc_1)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_3 = shl_i64(loc_5, i64_ONE)
		if le_u64(loc_3, loc_2) then
			while true do
				reg_0 = (if eq_i64(loc_2, loc_3) then (loc_0 * 0e0) else loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_7 = band_i32(wrap_i32_i64(shr_u64(loc_4, i64_from_u32(52, 0))), 2047)
		while true do
			if loc_6 == 0 then
				while true do
					loc_6 = 0
					loc_2 = shl_i64(loc_5, i64_from_u32(12, 0))
					if ge_i64(loc_2, i64_ZERO) then
						while true do
							while true do
								loc_6 = sub_i32(loc_6, 1)
								loc_2 = shl_i64(loc_2, i64_ONE)
								if ge_i64(loc_2, i64_ZERO) then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					reg_0 = shl_i64(loc_5, extend_i64_u32(sub_i32(1, loc_6)))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = bor_i64(band_i64(loc_5, i64_from_u32(4294967295, 1048575)), i64_from_u32(0, 1048576))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_2 = reg_0
		while true do
			if loc_7 == 0 then
				while true do
					loc_7 = 0
					loc_3 = shl_i64(loc_4, i64_from_u32(12, 0))
					if ge_i64(loc_3, i64_ZERO) then
						while true do
							while true do
								loc_7 = sub_i32(loc_7, 1)
								loc_3 = shl_i64(loc_3, i64_ONE)
								if ge_i64(loc_3, i64_ZERO) then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					reg_0 = shl_i64(loc_4, extend_i64_u32(sub_i32(1, loc_7)))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = bor_i64(band_i64(loc_4, i64_from_u32(4294967295, 1048575)), i64_from_u32(0, 1048576))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_4 = reg_0
		if gt_i32(loc_6, loc_7) then
			while true do
				while true do
					while true do
						loc_3 = sub_i64(loc_2, loc_4)
						if lt_i64(loc_3, i64_ZERO) then
							break
						end
						loc_2 = loc_3
						if ne_i64(loc_2, i64_ZERO) then
							break
						end
						reg_0 = (loc_0 * 0e0)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_2 = shl_i64(loc_2, i64_ONE)
					loc_6 = sub_i32(loc_6, 1)
					if lt_i32(loc_7, loc_6) then
						continue
					end
					break
				end
				if desired then
					break
				end
				reg_0 = loc_7
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_6
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_6 = reg_0
		while true do
			loc_3 = sub_i64(loc_2, loc_4)
			if lt_i64(loc_3, i64_ZERO) then
				break
			end
			loc_2 = loc_3
			if ne_i64(loc_2, i64_ZERO) then
				break
			end
			reg_0 = (loc_0 * 0e0)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			if gt_u64(loc_2, i64_from_u32(4294967295, 1048575)) then
				while true do
					loc_3 = loc_2
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				loc_6 = sub_i32(loc_6, 1)
				loc_7 = (if lt_u64(loc_2, i64_from_u32(0, 524288)) then 1 else 0)
				loc_3 = shl_i64(loc_2, i64_ONE)
				loc_2 = loc_3
				if loc_7 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_2 = band_i64(loc_5, i64_from_u32(0, 2147483648))
		reg_0 = loc_2
		if gt_i32(loc_6, 0) then
			while true do
				reg_1 = bor_i64(sub_i64(loc_3, i64_from_u32(0, 1048576)), shl_i64(extend_i64_u32(loc_6), i64_from_u32(52, 0)))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_1 = shr_u64(loc_3, extend_i64_u32(sub_i32(1, loc_6)))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = reg_1
		reg_0 = reinterpret_f64_i64(bor_i64(reg_0, loc_3))
		break
	end
	return reg_0
end
FUNC_LIST[488] = --[[ __DOUBLE_BITS ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = reinterpret_i64_f64(loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[489] = --[[ ldexp ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[503](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[490] = --[[ __math_divzero ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[491]((if loc_0 ~= 0 then -1e0 else 1e0))
		reg_0 = (reg_0 / 0e0)
		break
	end
	return reg_0
end
FUNC_LIST[491] = --[[ fp_barrier.1 ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 16)
		store_f64(memory_at_0, loc_1 + 8, loc_0)
		reg_0 = load_f64(memory_at_0, loc_1 + 8)
		break
	end
	return reg_0
end
FUNC_LIST[492] = --[[ __math_invalid ]] function(loc_0)
	local reg_0
	while true do
		loc_0 = (loc_0 - loc_0)
		reg_0 = (loc_0 / loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[493] = --[[ log ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local loc_9 = i64_ZERO
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[494](loc_0)
		loc_7 = reg_0
		loc_8 = reinterpret_i64_f64(loc_0)
		if le_u64(sub_i64(loc_8, i64_from_u32(0, 1072562176)), i64_from_u32(4294967295, 198911)) then
			while true do
				if eq_i64(loc_8, i64_from_u32(0, 1072693248)) then
					while true do
						reg_0 = 0e0
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				loc_0 = (loc_0 + -1e0)
				loc_1 = (loc_0 * 1.34217728e8)
				loc_1 = ((loc_0 + loc_1) - loc_1)
				loc_4 = load_f64(memory_at_0, 34648)
				loc_5 = ((loc_1 * loc_1) * loc_4)
				loc_6 = (loc_0 + loc_5)
				loc_2 = (loc_0 * loc_0)
				loc_3 = (loc_0 * loc_2)
				reg_0 = (loc_6 + ((loc_3 * ((loc_3 * ((loc_3 * ((loc_3 * load_f64(memory_at_0, 34728)) + ((loc_2 * load_f64(memory_at_0, 34720)) + ((loc_0 * load_f64(memory_at_0, 34712)) + load_f64(memory_at_0, 34704))))) + ((loc_2 * load_f64(memory_at_0, 34696)) + ((loc_0 * load_f64(memory_at_0, 34688)) + load_f64(memory_at_0, 34680))))) + ((loc_2 * load_f64(memory_at_0, 34672)) + ((loc_0 * load_f64(memory_at_0, 34664)) + load_f64(memory_at_0, 34656))))) + ((((loc_0 - loc_1) * loc_4) * (loc_0 + loc_1)) + (loc_5 + (loc_0 - loc_6)))))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			if sub_i32(loc_7, 32752) <= 4294934559 then
				while true do
					if loc_0 == 0e0 then
						while true do
							reg_0 = FUNC_LIST[490](1)
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					if eq_i64(loc_8, i64_from_u32(0, 2146435072)) then
						desired = 1
						break
					end
					if band_i32((if band_i32(loc_7, 32752) ~= 32752 then 1 else 0), (if loc_7 <= 32767 then 1 else 0)) == 0 then
						while true do
							reg_0 = FUNC_LIST[492](loc_0)
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					reg_0 = sub_i64(reinterpret_i64_f64((loc_0 * 4.503599627370496e15)), i64_from_u32(0, 54525952))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_8
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = reg_0
			loc_9 = sub_i64(loc_8, i64_from_u32(0, 1072037888))
			loc_2 = convert_f64_i32(wrap_i32_i64(shr_i64(loc_9, i64_from_u32(52, 0))))
			loc_7 = shl_i32(band_i32(wrap_i32_i64(shr_u64(loc_9, i64_from_u32(45, 0))), 127), 4)
			loc_3 = ((loc_2 * load_f64(memory_at_0, 34592)) + load_f64(memory_at_0, add_i32(loc_7, 34744)))
			loc_0 = (load_f64(memory_at_0, add_i32(loc_7, 34736)) * ((reinterpret_f64_i64(sub_i64(loc_8, band_i64(loc_9, i64_from_u32(0, 4293918720)))) - load_f64(memory_at_0, add_i32(loc_7, 36784))) - load_f64(memory_at_0, add_i32(loc_7, 36792))))
			loc_4 = (loc_3 + loc_0)
			loc_1 = (loc_0 * loc_0)
			loc_0 = (loc_4 + (((loc_0 * loc_1) * ((loc_1 * ((loc_0 * load_f64(memory_at_0, 34640)) + load_f64(memory_at_0, 34632))) + ((loc_0 * load_f64(memory_at_0, 34624)) + load_f64(memory_at_0, 34616)))) + ((loc_1 * load_f64(memory_at_0, 34608)) + ((loc_2 * load_f64(memory_at_0, 34600)) + (loc_0 + (loc_3 - loc_4))))))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[494] = --[[ top16 ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = wrap_i32_i64(shr_u64(reinterpret_i64_f64(loc_0), i64_from_u32(48, 0)))
		break
	end
	return reg_0
end
FUNC_LIST[495] = --[[ log10 ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = i64_ZERO
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		while true do
			while true do
				while true do
					while true do
						loc_7 = reinterpret_i64_f64(loc_0)
						if ge_i64(loc_7, i64_ZERO) then
							while true do
								loc_8 = wrap_i32_i64(shr_u64(loc_7, i64_from_u32(32, 0)))
								if loc_8 > 1048575 then
									desired = 4
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_0 == 0e0 then
							while true do
								reg_0 = (-1e0 / (loc_0 * loc_0))
								desired = 0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if ge_i64(loc_7, i64_ZERO) then
							desired = 3
							break
						end
						reg_0 = ((loc_0 - loc_0) / 0e0)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_8 > 2146435071 then
						desired = 1
						break
					end
					loc_9 = 1072693248
					loc_10 = 4294966273
					if loc_8 ~= 1072693248 then
						while true do
							loc_9 = loc_8
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if wrap_i32_i64(loc_7) ~= 0 then
						desired = 2
						break
					end
					reg_0 = 0e0
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_7 = reinterpret_i64_f64((loc_0 * 1.8014398509481984e16))
				loc_9 = wrap_i32_i64(shr_u64(loc_7, i64_from_u32(32, 0)))
				loc_10 = 4294966219
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = add_i32(loc_9, 614242)
			loc_5 = convert_f64_i32(add_i32(shr_u32(loc_8, 20), loc_10))
			loc_1 = (loc_5 * 3.0102999566361177e-1)
			loc_0 = (reinterpret_f64_i64(bor_i64(band_i64(loc_7, i64_from_u32(4294967295, 0)), shl_i64(extend_i64_u32(add_i32(band_i32(loc_8, 1048575), 1072079006)), i64_from_u32(32, 0)))) + -1e0)
			loc_3 = (loc_0 * (loc_0 * 5e-1))
			loc_4 = reinterpret_f64_i64(band_i64(reinterpret_i64_f64((loc_0 - loc_3)), i64_from_u32(0, 4294967295)))
			loc_2 = (loc_4 * 4.342944818781689e-1)
			loc_6 = (loc_1 + loc_2)
			reg_1 = (loc_2 + (loc_1 - loc_6))
			loc_1 = (loc_0 / (loc_0 + 2e0))
			loc_2 = (loc_1 * loc_1)
			reg_2 = loc_1
			loc_1 = (loc_2 * loc_2)
			loc_0 = ((reg_2 * (loc_3 + ((loc_1 * ((loc_1 * ((loc_1 * 1.5313837699209373e-1) + 2.2222198432149784e-1)) + 3.999999999940942e-1)) + (loc_2 * ((loc_1 * ((loc_1 * ((loc_1 * 1.4798198605116586e-1) + 1.818357216161805e-1)) + 2.857142874366239e-1)) + 6.666666666666735e-1))))) + ((loc_0 - loc_4) - loc_3))
			loc_0 = (loc_6 + (reg_1 + ((loc_0 * 4.342944818781689e-1) + ((loc_5 * 3.694239077158931e-13) + ((loc_0 + loc_4) * 2.5082946711645275e-11)))))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[496] = --[[ log2 ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = 0
	local loc_9 = i64_ZERO
	local loc_10 = i64_ZERO
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[494](loc_0)
		loc_8 = reg_0
		loc_9 = reinterpret_i64_f64(loc_0)
		if le_u64(sub_i64(loc_9, i64_from_u32(0, 1072604335)), i64_from_u32(4294967295, 135337)) then
			while true do
				if eq_i64(loc_9, i64_from_u32(0, 1072693248)) then
					while true do
						reg_0 = 0e0
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				loc_2 = load_f64(memory_at_0, 32400)
				loc_0 = (loc_0 + -1e0)
				loc_3 = reinterpret_f64_i64(band_i64(reinterpret_i64_f64(loc_0), i64_from_u32(0, 4294967295)))
				loc_4 = (loc_2 * loc_3)
				loc_1 = (loc_0 * loc_0)
				loc_5 = (loc_1 * ((loc_0 * load_f64(memory_at_0, 32472)) + load_f64(memory_at_0, 32464)))
				loc_6 = (loc_4 + loc_5)
				loc_7 = (loc_1 * loc_1)
				reg_0 = (loc_6 + ((loc_7 * ((loc_7 * ((loc_1 * ((loc_0 * load_f64(memory_at_0, 32536)) + load_f64(memory_at_0, 32528))) + ((loc_0 * load_f64(memory_at_0, 32520)) + load_f64(memory_at_0, 32512)))) + ((loc_1 * ((loc_0 * load_f64(memory_at_0, 32504)) + load_f64(memory_at_0, 32496))) + ((loc_0 * load_f64(memory_at_0, 32488)) + load_f64(memory_at_0, 32480))))) + ((((loc_0 - loc_3) * loc_2) + (loc_0 * load_f64(memory_at_0, 32408))) + (loc_5 + (loc_4 - loc_6)))))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			if sub_i32(loc_8, 32752) <= 4294934559 then
				while true do
					if loc_0 == 0e0 then
						while true do
							reg_0 = FUNC_LIST[490](1)
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					if eq_i64(loc_9, i64_from_u32(0, 2146435072)) then
						desired = 1
						break
					end
					if band_i32((if band_i32(loc_8, 32752) ~= 32752 then 1 else 0), (if loc_8 <= 32767 then 1 else 0)) == 0 then
						while true do
							reg_0 = FUNC_LIST[492](loc_0)
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					reg_0 = sub_i64(reinterpret_i64_f64((loc_0 * 4.503599627370496e15)), i64_from_u32(0, 54525952))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_9
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_9 = reg_0
			loc_10 = sub_i64(loc_9, i64_from_u32(0, 1072037888))
			loc_8 = shl_i32(band_i32(wrap_i32_i64(shr_u64(loc_10, i64_from_u32(46, 0))), 63), 4)
			loc_2 = (load_f64(memory_at_0, add_i32(loc_8, 32552)) + convert_f64_i32(wrap_i32_i64(shr_i64(loc_10, i64_from_u32(52, 0)))))
			loc_3 = load_f64(memory_at_0, 32400)
			loc_0 = (load_f64(memory_at_0, add_i32(loc_8, 32544)) * ((reinterpret_f64_i64(sub_i64(loc_9, band_i64(loc_10, i64_from_u32(0, 4293918720)))) - load_f64(memory_at_0, add_i32(loc_8, 33568))) - load_f64(memory_at_0, add_i32(loc_8, 33576))))
			loc_4 = reinterpret_f64_i64(band_i64(reinterpret_i64_f64(loc_0), i64_from_u32(0, 4294967295)))
			loc_5 = (loc_3 * loc_4)
			loc_6 = (loc_2 + loc_5)
			loc_1 = (loc_0 * loc_0)
			loc_0 = (loc_6 + ((loc_1 * (((loc_1 * loc_1) * ((loc_0 * load_f64(memory_at_0, 32456)) + load_f64(memory_at_0, 32448))) + ((loc_1 * ((loc_0 * load_f64(memory_at_0, 32440)) + load_f64(memory_at_0, 32432))) + ((loc_0 * load_f64(memory_at_0, 32424)) + load_f64(memory_at_0, 32416))))) + ((((loc_0 - loc_4) * loc_3) + (load_f64(memory_at_0, 32408) * loc_0)) + (loc_5 + (loc_2 - loc_6)))))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[497] = --[[ pow ]] function(loc_0, loc_1)
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = i64_ZERO
	local loc_5 = i64_ZERO
	local loc_6 = i64_ZERO
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_9 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_9
		reg_0 = FUNC_LIST[483](loc_0)
		loc_8 = reg_0
		reg_0 = FUNC_LIST[483](loc_1)
		loc_11 = reg_0
		loc_12 = band_i32(loc_11, 2047)
		loc_10 = sub_i32(loc_12, 1086)
		loc_5 = reinterpret_i64_f64(loc_1)
		loc_4 = reinterpret_i64_f64(loc_0)
		while true do
			while true do
				if sub_i32(loc_8, 2047) >= 4294965250 then
					while true do
						if loc_10 > 4294967167 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[498](loc_5)
				if reg_0 ~= 0 then
					while true do
						loc_2 = 1e0
						if eq_i64(loc_4, i64_from_u32(0, 1072693248)) then
							desired = 1
							break
						end
						loc_6 = shl_i64(loc_5, i64_ONE)
						if eq_i64(loc_6, i64_ZERO) then
							desired = 1
							break
						end
						loc_4 = shl_i64(loc_4, i64_ONE)
						if band_i32((if lt_u64(loc_6, i64_from_u32(1, 4292870144)) then 1 else 0), (if le_u64(loc_4, i64_from_u32(0, 4292870144)) then 1 else 0)) == 0 then
							while true do
								loc_2 = (loc_0 + loc_1)
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						if eq_i64(loc_4, i64_from_u32(0, 2145386496)) then
							desired = 1
							break
						end
						loc_2 = (if bxor_i32((if lt_i64(loc_5, i64_ZERO) then 1 else 0), (if lt_u64(loc_4, i64_from_u32(0, 2145386496)) then 1 else 0)) ~= 0 then 0e0 else (loc_1 * loc_1))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[498](loc_4)
				if reg_0 ~= 0 then
					while true do
						loc_2 = (loc_0 * loc_0)
						if lt_i64(loc_4, i64_ZERO) then
							while true do
								reg_2 = FUNC_LIST[499](loc_5)
								reg_0 = (if reg_2 == 1 then neg_f64(loc_2) else loc_2)
								break
							end
							if desired then
								break
							end
						else
							while true do
								reg_0 = loc_2
								break
							end
							if desired then
								break
							end
						end
						loc_2 = reg_0
						if ge_i64(loc_5, i64_ZERO) then
							desired = 1
							break
						end
						reg_0 = FUNC_LIST[491]((1e0 / loc_2))
						loc_2 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if lt_i64(loc_4, i64_ZERO) then
					while true do
						reg_0 = FUNC_LIST[499](loc_5)
						loc_7 = reg_0
						if loc_7 == 0 then
							while true do
								reg_0 = FUNC_LIST[492](loc_0)
								loc_2 = reg_0
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						loc_8 = band_i32(loc_8, 2047)
						loc_7 = shl_i32((if loc_7 == 1 then 1 else 0), 18)
						reg_0 = band_i64(reinterpret_i64_f64(loc_0), i64_from_u32(4294967295, 2147483647))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_4
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = reg_0
				if loc_10 <= 4294967167 then
					while true do
						loc_2 = 1e0
						if eq_i64(loc_4, i64_from_u32(0, 1072693248)) then
							desired = 1
							break
						end
						if loc_12 <= 957 then
							while true do
								loc_2 = ((if gt_u64(loc_4, i64_from_u32(0, 1072693248)) then loc_1 else neg_f64(loc_1)) + 1e0)
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						if (if loc_11 > 2047 then 1 else 0) ~= (if gt_u64(loc_4, i64_from_u32(0, 1072693248)) then 1 else 0) then
							while true do
								reg_0 = FUNC_LIST[481](0)
								loc_2 = reg_0
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						reg_0 = FUNC_LIST[480](0)
						loc_2 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_8 ~= 0 then
					break
				end
				loc_4 = sub_i64(band_i64(reinterpret_i64_f64((loc_0 * 4.503599627370496e15)), i64_from_u32(4294967295, 2147483647)), i64_from_u32(0, 54525952))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = reinterpret_f64_i64(band_i64(loc_5, i64_from_u32(4160749568, 4294967295)))
			reg_1 = FUNC_LIST[500](loc_4, add_i32(loc_9, 8))
			loc_3 = reg_1
			loc_0 = reinterpret_f64_i64(band_i64(reinterpret_i64_f64(loc_3), i64_from_u32(4160749568, 4294967295)))
			reg_0 = FUNC_LIST[501]((loc_2 * loc_0), (((loc_1 - loc_2) * loc_0) + ((load_f64(memory_at_0, loc_9 + 8) + (loc_3 - loc_0)) * loc_1)), loc_7)
			loc_2 = reg_0
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_9, 16)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[498] = --[[ zeroinfnan ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = (if lt_u64(add_i64(shl_i64(loc_0, i64_ONE), i64_from_u32(0, 2097152)), i64_from_u32(1, 2097152)) then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[499] = --[[ checkint ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = i64_ZERO
	local reg_0
	while true do
		while true do
			loc_1 = band_i32(wrap_i32_i64(shr_u64(loc_0, i64_from_u32(52, 0))), 2047)
			reg_0 = 0
			if loc_1 < 1023 then
				break
			end
			reg_0 = 2
			if loc_1 > 1075 then
				break
			end
			loc_2 = shl_i64(i64_ONE, extend_i64_u32(sub_i32(1075, loc_1)))
			reg_0 = 0
			if ne_i64(band_i64(loc_0, sub_i64(loc_2, i64_ONE)), i64_ZERO) then
				break
			end
			reg_0 = (if eq_i64(band_i64(loc_0, loc_2), i64_ZERO) then 2 else 1)
			break
		end
		break
	end
	return reg_0
end
FUNC_LIST[500] = --[[ log_inline ]] function(loc_0, loc_1)
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = i64_ZERO
	local loc_9 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	while true do
		loc_8 = sub_i64(loc_0, i64_from_u32(0, 1072076117))
		loc_3 = convert_f64_i32(wrap_i32_i64(shr_i64(loc_8, i64_from_u32(52, 0))))
		loc_9 = shl_i32(band_i32(wrap_i32_i64(shr_u64(loc_8, i64_from_u32(45, 0))), 127), 5)
		loc_0 = sub_i64(loc_0, band_i64(loc_8, i64_from_u32(0, 4293918720)))
		loc_2 = reinterpret_f64_i64(band_i64(add_i64(loc_0, i64_from_u32(2147483648, 0)), i64_from_u32(0, 4294967295)))
		loc_5 = load_f64(memory_at_0, add_i32(loc_9, 38904))
		loc_4 = ((loc_2 * loc_5) + -1e0)
		loc_5 = ((reinterpret_f64_i64(loc_0) - loc_2) * loc_5)
		loc_2 = (loc_4 + loc_5)
		reg_1 = ((loc_3 * load_f64(memory_at_0, 38840)) + load_f64(memory_at_0, add_i32(loc_9, 38928)))
		loc_3 = ((loc_3 * load_f64(memory_at_0, 38832)) + load_f64(memory_at_0, add_i32(loc_9, 38920)))
		reg_3 = loc_3
		loc_3 = (loc_2 + loc_3)
		loc_6 = load_f64(memory_at_0, 38848)
		loc_7 = (loc_2 * loc_6)
		loc_6 = (loc_4 * loc_6)
		loc_4 = (loc_4 * loc_6)
		reg_2 = loc_4
		loc_4 = (loc_3 + loc_4)
		reg_1 = (((reg_1 + (loc_2 + (reg_3 - loc_3))) + (loc_5 * (loc_7 + loc_6))) + (reg_2 + (loc_3 - loc_4)))
		loc_3 = (loc_2 * loc_7)
		loc_2 = (reg_1 + ((loc_2 * loc_3) * ((loc_3 * ((loc_3 * ((loc_2 * load_f64(memory_at_0, 38896)) + load_f64(memory_at_0, 38888))) + ((loc_2 * load_f64(memory_at_0, 38880)) + load_f64(memory_at_0, 38872)))) + ((loc_2 * load_f64(memory_at_0, 38864)) + load_f64(memory_at_0, 38856)))))
		reg_1 = loc_2
		loc_2 = (loc_4 + loc_2)
		store_f64(memory_at_0, loc_1, (reg_1 + (loc_4 - loc_2)))
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[501] = --[[ exp_inline ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = i64_ZERO
	local loc_8 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			reg_0 = FUNC_LIST[483](loc_0)
			loc_4 = band_i32(reg_0, 2047)
			reg_1 = FUNC_LIST[483](5.551115123125783e-17)
			loc_3 = reg_1
			reg_1 = FUNC_LIST[483](5.12e2)
			if sub_i32(loc_4, loc_3) < sub_i32(reg_1, loc_3) then
				break
			end
			if loc_3 > loc_4 then
				while true do
					loc_0 = (loc_0 + 1e0)
					reg_0 = (if loc_2 ~= 0 then neg_f64(loc_0) else loc_0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[483](1.024e3)
			loc_3 = (if reg_0 > loc_4 then 1 else 0)
			loc_4 = 0
			if loc_3 ~= 0 then
				break
			end
			if lt_i64(reinterpret_i64_f64(loc_0), i64_ZERO) then
				while true do
					reg_0 = FUNC_LIST[480](loc_2)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[481](loc_2)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_5 = load_f64(memory_at_0, 30248)
		loc_6 = ((load_f64(memory_at_0, 30240) * loc_0) + loc_5)
		loc_5 = (loc_6 - loc_5)
		loc_0 = (((loc_5 * load_f64(memory_at_0, 30264)) + ((loc_5 * load_f64(memory_at_0, 30256)) + loc_0)) + loc_1)
		loc_1 = (loc_0 * loc_0)
		loc_7 = reinterpret_i64_f64(loc_6)
		loc_3 = band_i32(shl_i32(wrap_i32_i64(loc_7), 4), 2032)
		loc_0 = (((loc_1 * loc_1) * ((loc_0 * load_f64(memory_at_0, 30296)) + load_f64(memory_at_0, 30288))) + ((loc_1 * ((loc_0 * load_f64(memory_at_0, 30280)) + load_f64(memory_at_0, 30272))) + (load_f64(memory_at_0, add_i32(loc_3, 30352)) + loc_0)))
		loc_8 = add_i64(load_i64(memory_at_0, add_i32(loc_3, 30360)), shl_i64(add_i64(extend_i64_u32(loc_2), loc_7), i64_from_u32(45, 0)))
		if loc_4 == 0 then
			while true do
				reg_0 = FUNC_LIST[502](loc_0, loc_8, loc_7)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_1 = reinterpret_f64_i64(loc_8)
		reg_0 = ((loc_1 * loc_0) + loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[502] = --[[ specialcase.1 ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local reg_0
	local desired
	while true do
		if eq_i64(band_i64(loc_2, i64_from_u32(2147483648, 0)), i64_ZERO) then
			while true do
				loc_3 = reinterpret_f64_i64(sub_i64(loc_1, i64_from_u32(0, 1058013184)))
				reg_0 = (((loc_3 * loc_0) + loc_3) * 5.486124068793689e303)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = add_i64(loc_1, i64_from_u32(0, 1071644672))
		loc_3 = reinterpret_f64_i64(loc_2)
		loc_5 = (loc_3 * loc_0)
		loc_0 = (loc_5 + loc_3)
		reg_0 = FUNC_LIST[549](loc_0)
		if reg_0 < 1e0 then
			while true do
				reg_0 = FUNC_LIST[491](2.2250738585072014e-308)
				FUNC_LIST[486]((reg_0 * 2.2250738585072014e-308))
				loc_4 = (if loc_0 < 0e0 then -1e0 else 1e0)
				loc_6 = (loc_0 + loc_4)
				loc_0 = ((loc_6 + ((loc_5 + (loc_3 - loc_0)) + (loc_0 + (loc_4 - loc_6)))) - loc_4)
				reg_0 = (if loc_0 == 0e0 then reinterpret_f64_i64(band_i64(loc_2, i64_from_u32(0, 2147483648))) else loc_0)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = reg_0
		reg_0 = (loc_0 * 2.2250738585072014e-308)
		break
	end
	return reg_0
end
FUNC_LIST[503] = --[[ scalbn ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if ge_i32(loc_1, 1024) then
				while true do
					loc_0 = (loc_0 * 8.98846567431158e307)
					if loc_1 < 2047 then
						while true do
							loc_1 = sub_i32(loc_1, 1023)
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					loc_0 = (loc_0 * 8.98846567431158e307)
					loc_1 = sub_i32((if loc_1 >= 3069 then 3069 else loc_1), 2046)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if gt_i32(loc_1, 4294966273) then
				break
			end
			loc_0 = (loc_0 * 2.004168360008973e-292)
			if loc_1 > 4294965304 then
				while true do
					loc_1 = add_i32(loc_1, 969)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = (loc_0 * 2.004168360008973e-292)
			loc_1 = add_i32((if loc_1 <= 4294964336 then 4294964336 else loc_1), 1938)
			break
		end
		reg_0 = (loc_0 * reinterpret_f64_i64(shl_i64(extend_i64_u32(add_i32(loc_1, 1023)), i64_from_u32(52, 0))))
		break
	end
	return reg_0
end
FUNC_LIST[504] = --[[ strlen ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				loc_1 = loc_0
				if band_i32(loc_1, 3) == 0 then
					break
				end
				if load_i32_u8(memory_at_0, loc_1) == 0 then
					while true do
						reg_0 = 0
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					loc_1 = add_i32(loc_1, 1)
					if band_i32(loc_1, 3) == 0 then
						desired = 2
						break
					end
					if load_i32_u8(memory_at_0, loc_1) ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_2 = loc_1
				loc_1 = add_i32(loc_2, 4)
				loc_3 = load_i32(memory_at_0, loc_2)
				if band_i32(band_i32(bxor_i32(loc_3, 4294967295), sub_i32(loc_3, 16843009)), 2155905152) == 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_1 = loc_2
				loc_2 = add_i32(loc_1, 1)
				if load_i32_u8(memory_at_0, loc_1) ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = sub_i32(loc_1, loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[505] = --[[ __lockfile ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[506] = --[[ __unlockfile ]] function(loc_0)
	while true do
		break
	end
end
FUNC_LIST[507] = --[[ __fpclassifyl ]] function(loc_0, loc_1)
	local loc_2 = i64_ZERO
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = band_i64(loc_1, i64_from_u32(4294967295, 65535))
		while true do
			loc_3 = band_i32(wrap_i32_i64(shr_u64(loc_1, i64_from_u32(48, 0))), 32767)
			if loc_3 ~= 32767 then
				while true do
					reg_0 = 4
					if loc_3 ~= 0 then
						desired = 1
						break
					end
					reg_0 = (if eq_i64(bor_i64(loc_0, loc_2), i64_ZERO) then 2 else 3)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = (if eq_i64(bor_i64(loc_0, loc_2), i64_ZERO) then 1 else 0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
	return reg_0
end
FUNC_LIST[508] = --[[ fmodl ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = i64_ZERO
	local loc_10 = i64_ZERO
	local loc_11 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 128)
		GLOBAL_LIST[0].value = loc_5
		while true do
			while true do
				while true do
					reg_0 = FUNC_LIST[516](loc_3, loc_4, i64_ZERO, i64_ZERO)
					if reg_0 == 0 then
						break
					end
					reg_0 = FUNC_LIST[507](loc_3, loc_4)
					loc_7 = reg_0
					loc_8 = wrap_i32_i64(shr_u64(loc_2, i64_from_u32(48, 0)))
					loc_6 = band_i32(loc_8, 32767)
					if loc_6 == 32767 then
						break
					end
					if loc_7 ~= 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[521](add_i32(loc_5, 16), loc_1, loc_2, loc_3, loc_4)
				loc_4 = load_i64(memory_at_0, loc_5 + 16)
				loc_3 = load_i64(memory_at_0, loc_5 + 24)
				FUNC_LIST[519](loc_5, loc_4, loc_3, loc_4, loc_3)
				loc_2 = load_i64(memory_at_0, loc_5 + 8)
				loc_4 = load_i64(memory_at_0, loc_5)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_10 = band_i64(loc_2, i64_from_u32(4294967295, 2147483647))
			loc_9 = band_i64(loc_4, i64_from_u32(4294967295, 2147483647))
			reg_0 = FUNC_LIST[516](loc_1, loc_10, loc_3, loc_9)
			if le_i32(reg_0, 0) then
				while true do
					reg_0 = FUNC_LIST[516](loc_1, loc_10, loc_3, loc_9)
					if reg_0 ~= 0 then
						while true do
							loc_4 = loc_1
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					FUNC_LIST[521](add_i32(loc_5, 112), loc_1, loc_2, i64_ZERO, i64_ZERO)
					loc_2 = load_i64(memory_at_0, loc_5 + 120)
					loc_4 = load_i64(memory_at_0, loc_5 + 112)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = band_i32(wrap_i32_i64(shr_u64(loc_4, i64_from_u32(48, 0))), 32767)
			if loc_6 ~= 0 then
				while true do
					reg_0 = loc_1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					FUNC_LIST[521](add_i32(loc_5, 96), loc_1, loc_10, i64_ZERO, i64_from_u32(0, 1081540608))
					loc_10 = load_i64(memory_at_0, loc_5 + 104)
					loc_6 = sub_i32(wrap_i32_i64(shr_u64(loc_10, i64_from_u32(48, 0))), 120)
					reg_0 = load_i64(memory_at_0, loc_5 + 96)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = reg_0
			if loc_7 ~= 0 then
				while true do
					reg_0 = loc_3
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					FUNC_LIST[521](add_i32(loc_5, 80), loc_3, loc_9, i64_ZERO, i64_from_u32(0, 1081540608))
					loc_9 = load_i64(memory_at_0, loc_5 + 88)
					loc_7 = sub_i32(wrap_i32_i64(shr_u64(loc_9, i64_from_u32(48, 0))), 120)
					reg_0 = load_i64(memory_at_0, loc_5 + 80)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = reg_0
			loc_11 = bor_i64(band_i64(loc_9, i64_from_u32(4294967295, 65535)), i64_from_u32(0, 65536))
			loc_10 = bor_i64(band_i64(loc_10, i64_from_u32(4294967295, 65535)), i64_from_u32(0, 65536))
			if gt_i32(loc_6, loc_7) then
				while true do
					while true do
						while true do
							loc_9 = sub_i64(sub_i64(loc_10, loc_11), extend_i64_u32((if gt_u64(loc_3, loc_4) then 1 else 0)))
							if ge_i64(loc_9, i64_ZERO) then
								while true do
									loc_4 = sub_i64(loc_4, loc_3)
									if eq_i64(bor_i64(loc_4, loc_9), i64_ZERO) then
										while true do
											FUNC_LIST[521](add_i32(loc_5, 32), loc_1, loc_2, i64_ZERO, i64_ZERO)
											loc_2 = load_i64(memory_at_0, loc_5 + 40)
											loc_4 = load_i64(memory_at_0, loc_5 + 32)
											desired = 1
											break
										end
										if desired then
											break
										end
									end
									reg_0 = bor_i64(shl_i64(loc_9, i64_ONE), shr_u64(loc_4, i64_from_u32(63, 0)))
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							reg_0 = bor_i64(shl_i64(loc_10, i64_ONE), shr_u64(loc_4, i64_from_u32(63, 0)))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_10 = reg_0
						loc_4 = shl_i64(loc_4, i64_ONE)
						loc_6 = sub_i32(loc_6, 1)
						if lt_i32(loc_7, loc_6) then
							continue
						end
						break
					end
					if desired then
						break
					end
					reg_0 = loc_7
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_6
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_6 = reg_0
			while true do
				loc_9 = sub_i64(sub_i64(loc_10, loc_11), extend_i64_u32((if gt_u64(loc_3, loc_4) then 1 else 0)))
				if lt_i64(loc_9, i64_ZERO) then
					while true do
						loc_9 = loc_10
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = sub_i64(loc_4, loc_3)
				if ne_i64(bor_i64(loc_4, loc_9), i64_ZERO) then
					break
				end
				FUNC_LIST[521](add_i32(loc_5, 48), loc_1, loc_2, i64_ZERO, i64_ZERO)
				loc_2 = load_i64(memory_at_0, loc_5 + 56)
				loc_4 = load_i64(memory_at_0, loc_5 + 48)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if le_u64(loc_9, i64_from_u32(4294967295, 65535)) then
				while true do
					while true do
						loc_3 = shr_u64(loc_4, i64_from_u32(63, 0))
						loc_6 = sub_i32(loc_6, 1)
						loc_4 = shl_i64(loc_4, i64_ONE)
						loc_9 = bor_i64(shl_i64(loc_9, i64_ONE), loc_3)
						if lt_u64(loc_9, i64_from_u32(0, 65536)) then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = band_i32(loc_8, 32768)
			if le_i32(loc_6, 0) then
				while true do
					FUNC_LIST[521](sub_i32(loc_5, 4294967232), loc_4, bor_i64(band_i64(loc_9, i64_from_u32(4294967295, 65535)), shl_i64(extend_i64_u32(bor_i32(loc_7, add_i32(loc_6, 120))), i64_from_u32(48, 0))), i64_ZERO, i64_from_u32(0, 1065811968))
					loc_2 = load_i64(memory_at_0, loc_5 + 72)
					loc_4 = load_i64(memory_at_0, loc_5 + 64)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = bor_i64(band_i64(loc_9, i64_from_u32(4294967295, 65535)), shl_i64(extend_i64_u32(bor_i32(loc_6, loc_7)), i64_from_u32(48, 0)))
			break
		end
		store_i64(memory_at_0, loc_0, loc_4)
		store_i64(memory_at_0, loc_0 + 8, loc_2)
		GLOBAL_LIST[0].value = add_i32(loc_5, 128)
		break
	end
end
FUNC_LIST[509] = --[[ __towrite ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local desired
	while true do
		loc_1 = load_i32(memory_at_0, loc_0 + 72)
		store_i32(memory_at_0, loc_0 + 72, bor_i32(sub_i32(loc_1, 1), loc_1))
		loc_1 = load_i32(memory_at_0, loc_0)
		if band_i32(loc_1, 8) ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0, bor_i32(loc_1, 32))
				reg_0 = 4294967295
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		store_i64(memory_at_0, loc_0 + 4, i64_ZERO)
		loc_1 = load_i32(memory_at_0, loc_0 + 44)
		store_i32(memory_at_0, loc_0 + 28, loc_1)
		store_i32(memory_at_0, loc_0 + 20, loc_1)
		store_i32(memory_at_0, loc_0 + 16, add_i32(load_i32(memory_at_0, loc_0 + 48), loc_1))
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[510] = --[[ __fwritex ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			loc_3 = load_i32(memory_at_0, loc_2 + 16)
			if loc_3 ~= 0 then
				while true do
					reg_0 = loc_3
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = FUNC_LIST[509](loc_2)
					if reg_0 ~= 0 then
						desired = 1
						break
					end
					reg_0 = load_i32(memory_at_0, loc_2 + 16)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = reg_0
			loc_4 = load_i32(memory_at_0, loc_2 + 20)
			if sub_i32(loc_3, loc_4) < loc_1 then
				while true do
					reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_2 + 36)](loc_2, loc_0, loc_1)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				while true do
					if lt_i32(load_i32(memory_at_0, loc_2 + 80), 0) then
						break
					end
					if loc_1 == 0 then
						break
					end
					loc_3 = loc_1
					while true do
						loc_5 = add_i32(loc_0, loc_3)
						if load_i32_u8(memory_at_0, sub_i32(loc_5, 1)) ~= 10 then
							while true do
								loc_3 = sub_i32(loc_3, 1)
								if loc_3 ~= 0 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_1 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_2 + 36)](loc_2, loc_0, loc_3)
					loc_4 = reg_1
					if loc_3 > loc_4 then
						desired = 1
						break
					end
					loc_1 = sub_i32(loc_1, loc_3)
					loc_4 = load_i32(memory_at_0, loc_2 + 20)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = loc_0
				loc_3 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[477](loc_4, loc_5, loc_1)
			store_i32(memory_at_0, loc_2 + 20, add_i32(loc_1, load_i32(memory_at_0, loc_2 + 20)))
			loc_4 = add_i32(loc_1, loc_3)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[511] = --[[ emscripten_get_heap_size ]] function()
	local reg_0
	while true do
		reg_0 = shl_i32(rt.allocator.size(memory_at_0), 16)
		break
	end
	return reg_0
end
FUNC_LIST[512] = --[[ sbrk ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_1 = load_i32(memory_at_0, 47160)
		loc_2 = band_i32(add_i32(loc_0, 7), 4294967288)
		loc_0 = add_i32(loc_1, loc_2)
		while true do
			if (if loc_0 <= loc_1 then loc_2 else 0) == 0 then
				while true do
					reg_0 = FUNC_LIST[511]()
					if reg_0 >= loc_0 then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[2](loc_0)
					if reg_0 ~= 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[476]()
			store_i32(memory_at_0, reg_0, 48)
			reg_0 = 4294967295
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32(memory_at_0, 47160, loc_0)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[513] = --[[ dlmalloc ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_10 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_10
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												if loc_0 <= 244 then
													while true do
														loc_6 = load_i32(memory_at_0, 47788)
														loc_5 = (if loc_0 < 11 then 16 else band_i32(add_i32(loc_0, 11), 504))
														loc_1 = shr_u32(loc_5, 3)
														loc_0 = shr_u32(loc_6, loc_1)
														if band_i32(loc_0, 3) ~= 0 then
															while true do
																while true do
																	loc_5 = add_i32(loc_1, band_i32(bxor_i32(loc_0, 4294967295), 1))
																	loc_1 = shl_i32(loc_5, 3)
																	loc_0 = add_i32(loc_1, 47828)
																	loc_1 = load_i32(memory_at_0, add_i32(loc_1, 47836))
																	loc_2 = load_i32(memory_at_0, loc_1 + 8)
																	if loc_0 == loc_2 then
																		while true do
																			store_i32(memory_at_0, 47788, band_i32(rotl_i32(4294967294, loc_5), loc_6))
																			desired = 13
																			break
																		end
																		if desired then
																			if desired == 13 then
																				desired = nil
																			end
																			break
																		end
																	end
																	store_i32(memory_at_0, loc_2 + 12, loc_0)
																	store_i32(memory_at_0, loc_0 + 8, loc_2)
																	break
																end
																if desired then
																	break
																end
																loc_0 = add_i32(loc_1, 8)
																loc_5 = shl_i32(loc_5, 3)
																store_i32(memory_at_0, loc_1 + 4, bor_i32(loc_5, 3))
																loc_1 = add_i32(loc_1, loc_5)
																store_i32(memory_at_0, loc_1 + 4, bor_i32(load_i32(memory_at_0, loc_1 + 4), 1))
																desired = 1
																break
															end
															if desired then
																break
															end
														end
														loc_7 = load_i32(memory_at_0, 47796)
														if loc_7 >= loc_5 then
															desired = 10
															break
														end
														if loc_0 ~= 0 then
															while true do
																while true do
																	reg_0 = shl_i32(loc_0, loc_1)
																	loc_0 = shl_i32(2, loc_1)
																	loc_1 = ctz_i32(band_i32(reg_0, bor_i32(loc_0, sub_i32(0, loc_0))))
																	loc_0 = shl_i32(loc_1, 3)
																	loc_2 = add_i32(loc_0, 47828)
																	loc_0 = load_i32(memory_at_0, add_i32(loc_0, 47836))
																	loc_3 = load_i32(memory_at_0, loc_0 + 8)
																	if loc_2 == loc_3 then
																		while true do
																			loc_6 = band_i32(rotl_i32(4294967294, loc_1), loc_6)
																			store_i32(memory_at_0, 47788, loc_6)
																			desired = 13
																			break
																		end
																		if desired then
																			if desired == 13 then
																				desired = nil
																			end
																			break
																		end
																	end
																	store_i32(memory_at_0, loc_3 + 12, loc_2)
																	store_i32(memory_at_0, loc_2 + 8, loc_3)
																	break
																end
																if desired then
																	break
																end
																store_i32(memory_at_0, loc_0 + 4, bor_i32(loc_5, 3))
																loc_3 = add_i32(loc_0, loc_5)
																loc_1 = shl_i32(loc_1, 3)
																loc_5 = sub_i32(loc_1, loc_5)
																store_i32(memory_at_0, loc_3 + 4, bor_i32(loc_5, 1))
																store_i32(memory_at_0, add_i32(loc_0, loc_1), loc_5)
																if loc_7 ~= 0 then
																	while true do
																		loc_2 = add_i32(band_i32(loc_7, 4294967288), 47828)
																		loc_1 = load_i32(memory_at_0, 47808)
																		while true do
																			loc_4 = shl_i32(1, shr_u32(loc_7, 3))
																			if band_i32(loc_4, loc_6) == 0 then
																				while true do
																					store_i32(memory_at_0, 47788, bor_i32(loc_4, loc_6))
																					reg_0 = loc_2
																					desired = 14
																					break
																				end
																				if desired then
																					if desired == 14 then
																						desired = nil
																					end
																					break
																				end
																			end
																			reg_0 = load_i32(memory_at_0, loc_2 + 8)
																			break
																		end
																		if desired then
																			break
																		end
																		loc_4 = reg_0
																		store_i32(memory_at_0, loc_2 + 8, loc_1)
																		store_i32(memory_at_0, loc_4 + 12, loc_1)
																		store_i32(memory_at_0, loc_1 + 12, loc_2)
																		store_i32(memory_at_0, loc_1 + 8, loc_4)
																		break
																	end
																	if desired then
																		break
																	end
																end
																loc_0 = add_i32(loc_0, 8)
																store_i32(memory_at_0, 47808, loc_3)
																store_i32(memory_at_0, 47796, loc_5)
																desired = 1
																break
															end
															if desired then
																break
															end
														end
														loc_11 = load_i32(memory_at_0, 47792)
														if loc_11 == 0 then
															desired = 10
															break
														end
														loc_3 = load_i32(memory_at_0, add_i32(shl_i32(ctz_i32(loc_11), 2), 48092))
														loc_1 = sub_i32(band_i32(load_i32(memory_at_0, loc_3 + 4), 4294967288), loc_5)
														loc_2 = loc_3
														while true do
															while true do
																loc_0 = load_i32(memory_at_0, loc_2 + 16)
																if loc_0 == 0 then
																	while true do
																		loc_0 = load_i32(memory_at_0, loc_2 + 20)
																		if loc_0 == 0 then
																			desired = 13
																			break
																		end
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																loc_2 = sub_i32(band_i32(load_i32(memory_at_0, loc_0 + 4), 4294967288), loc_5)
																reg_0 = loc_2
																loc_2 = (if loc_1 > loc_2 then 1 else 0)
																loc_1 = (if loc_2 ~= 0 then reg_0 else loc_1)
																loc_3 = (if loc_2 ~= 0 then loc_0 else loc_3)
																loc_2 = loc_0
																desired = 12
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																	continue
																end
																break
															end
															break
														end
														if desired then
															break
														end
														loc_8 = load_i32(memory_at_0, loc_3 + 24)
														loc_0 = load_i32(memory_at_0, loc_3 + 12)
														if loc_0 ~= loc_3 then
															while true do
																loc_2 = load_i32(memory_at_0, loc_3 + 8)
																store_i32(memory_at_0, loc_2 + 12, loc_0)
																store_i32(memory_at_0, loc_0 + 8, loc_2)
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														loc_2 = load_i32(memory_at_0, loc_3 + 20)
														if loc_2 ~= 0 then
															while true do
																reg_0 = add_i32(loc_3, 20)
																break
															end
															if desired then
																break
															end
														else
															while true do
																loc_2 = load_i32(memory_at_0, loc_3 + 16)
																if loc_2 == 0 then
																	desired = 9
																	break
																end
																reg_0 = add_i32(loc_3, 16)
																break
															end
															if desired then
																break
															end
														end
														loc_4 = reg_0
														while true do
															loc_9 = loc_4
															loc_0 = loc_2
															loc_4 = add_i32(loc_0, 20)
															loc_2 = load_i32(memory_at_0, loc_0 + 20)
															if loc_2 ~= 0 then
																continue
															end
															loc_4 = add_i32(loc_0, 16)
															loc_2 = load_i32(memory_at_0, loc_0 + 16)
															if loc_2 ~= 0 then
																continue
															end
															break
														end
														if desired then
															break
														end
														store_i32(memory_at_0, loc_9, 0)
														desired = 2
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_5 = 4294967295
												if loc_0 > 4294967231 then
													break
												end
												loc_0 = add_i32(loc_0, 11)
												loc_5 = band_i32(loc_0, 4294967288)
												loc_8 = load_i32(memory_at_0, 47792)
												if loc_8 == 0 then
													break
												end
												loc_1 = sub_i32(0, loc_5)
												while true do
													while true do
														while true do
															while true do
																reg_0 = 0
																if loc_5 < 256 then
																	break
																end
																loc_7 = 31
																reg_0 = loc_7
																if loc_5 > 16777215 then
																	break
																end
																loc_0 = clz_i32(shr_u32(loc_0, 8))
																reg_0 = add_i32(sub_i32(band_i32(shr_u32(loc_5, sub_i32(38, loc_0)), 1), shl_i32(loc_0, 1)), 62)
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_7 = reg_0
															loc_2 = load_i32(memory_at_0, add_i32(shl_i32(loc_7, 2), 48092))
															if loc_2 == 0 then
																while true do
																	loc_0 = 0
																	desired = 13
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															loc_0 = 0
															loc_3 = shl_i32(loc_5, (if loc_7 ~= 31 then sub_i32(25, shr_u32(loc_7, 1)) else 0))
															while true do
																while true do
																	loc_6 = sub_i32(band_i32(load_i32(memory_at_0, loc_2 + 4), 4294967288), loc_5)
																	if loc_1 <= loc_6 then
																		break
																	end
																	loc_4 = loc_2
																	loc_1 = loc_6
																	if loc_1 ~= 0 then
																		break
																	end
																	loc_1 = 0
																	loc_0 = loc_2
																	desired = 12
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																		continue
																	end
																	break
																end
																loc_6 = load_i32(memory_at_0, loc_2 + 20)
																loc_9 = load_i32(memory_at_0, add_i32(band_i32(shr_u32(loc_3, 29), 4), loc_2) + 16)
																loc_0 = (if loc_6 ~= 0 then (if loc_9 == loc_6 then loc_0 else loc_6) else loc_0)
																loc_3 = shl_i32(loc_3, 1)
																loc_2 = loc_9
																if loc_2 ~= 0 then
																	continue
																end
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														if bor_i32(loc_0, loc_4) ~= 0 then
															while true do
																reg_0 = loc_0
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														else
															while true do
																loc_4 = 0
																loc_0 = shl_i32(2, loc_7)
																loc_0 = band_i32(loc_8, bor_i32(loc_0, sub_i32(0, loc_0)))
																if loc_0 == 0 then
																	desired = 10
																	break
																end
																reg_0 = load_i32(memory_at_0, add_i32(shl_i32(ctz_i32(loc_0), 2), 48092))
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														loc_0 = reg_0
														if loc_0 == 0 then
															desired = 11
															break
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													while true do
														loc_6 = sub_i32(band_i32(load_i32(memory_at_0, loc_0 + 4), 4294967288), loc_5)
														loc_3 = (if loc_1 > loc_6 then 1 else 0)
														loc_1 = (if loc_3 ~= 0 then loc_6 else loc_1)
														loc_4 = (if loc_3 ~= 0 then loc_0 else loc_4)
														loc_2 = load_i32(memory_at_0, loc_0 + 16)
														if loc_2 ~= 0 then
															while true do
																reg_0 = loc_2
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																	continue
																end
																break
															end
														else
															while true do
																reg_0 = load_i32(memory_at_0, loc_0 + 20)
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																	continue
																end
																break
															end
														end
														loc_2 = reg_0
														loc_0 = loc_2
														if loc_0 ~= 0 then
															continue
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												if loc_4 == 0 then
													break
												end
												if sub_i32(load_i32(memory_at_0, 47796), loc_5) <= loc_1 then
													break
												end
												loc_9 = load_i32(memory_at_0, loc_4 + 24)
												loc_0 = load_i32(memory_at_0, loc_4 + 12)
												if loc_0 ~= loc_4 then
													while true do
														loc_2 = load_i32(memory_at_0, loc_4 + 8)
														store_i32(memory_at_0, loc_2 + 12, loc_0)
														store_i32(memory_at_0, loc_0 + 8, loc_2)
														desired = 3
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_2 = load_i32(memory_at_0, loc_4 + 20)
												if loc_2 ~= 0 then
													while true do
														reg_0 = add_i32(loc_4, 20)
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												else
													while true do
														loc_2 = load_i32(memory_at_0, loc_4 + 16)
														if loc_2 == 0 then
															desired = 8
															break
														end
														reg_0 = add_i32(loc_4, 16)
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_3 = reg_0
												while true do
													loc_6 = loc_3
													loc_0 = loc_2
													loc_3 = add_i32(loc_0, 20)
													loc_2 = load_i32(memory_at_0, loc_0 + 20)
													if loc_2 ~= 0 then
														continue
													end
													loc_3 = add_i32(loc_0, 16)
													loc_2 = load_i32(memory_at_0, loc_0 + 16)
													if loc_2 ~= 0 then
														continue
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												store_i32(memory_at_0, loc_6, 0)
												desired = 3
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_0 = load_i32(memory_at_0, 47796)
											if loc_0 >= loc_5 then
												while true do
													loc_1 = load_i32(memory_at_0, 47808)
													while true do
														loc_2 = sub_i32(loc_0, loc_5)
														if loc_2 >= 16 then
															while true do
																loc_3 = add_i32(loc_1, loc_5)
																store_i32(memory_at_0, loc_3 + 4, bor_i32(loc_2, 1))
																store_i32(memory_at_0, add_i32(loc_0, loc_1), loc_2)
																store_i32(memory_at_0, loc_1 + 4, bor_i32(loc_5, 3))
																desired = 11
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														store_i32(memory_at_0, loc_1 + 4, bor_i32(loc_0, 3))
														loc_0 = add_i32(loc_0, loc_1)
														store_i32(memory_at_0, loc_0 + 4, bor_i32(load_i32(memory_at_0, loc_0 + 4), 1))
														loc_3 = 0
														loc_2 = 0
														break
													end
													if desired then
														break
													end
													store_i32(memory_at_0, 47796, loc_2)
													store_i32(memory_at_0, 47808, loc_3)
													loc_0 = add_i32(loc_1, 8)
													desired = 1
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_3 = load_i32(memory_at_0, 47800)
											if loc_3 > loc_5 then
												while true do
													loc_1 = sub_i32(loc_3, loc_5)
													store_i32(memory_at_0, 47800, loc_1)
													loc_0 = load_i32(memory_at_0, 47812)
													loc_2 = add_i32(loc_5, loc_0)
													store_i32(memory_at_0, 47812, loc_2)
													store_i32(memory_at_0, loc_2 + 4, bor_i32(loc_1, 1))
													store_i32(memory_at_0, loc_0 + 4, bor_i32(loc_5, 3))
													loc_0 = add_i32(loc_0, 8)
													desired = 1
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_0 = 0
											loc_7 = add_i32(loc_5, 47)
											reg_0 = loc_5
											reg_1 = loc_7
											while true do
												if load_i32(memory_at_0, 48260) ~= 0 then
													while true do
														reg_2 = load_i32(memory_at_0, 48268)
														desired = 10
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												store_i64(memory_at_0, 48272, i64_from_u32(4294967295, 4294967295))
												store_i64(memory_at_0, 48264, i64_from_u32(4096, 4096))
												store_i32(memory_at_0, 48260, bxor_i32(band_i32(add_i32(loc_10, 12), 4294967280), 1431655768))
												store_i32(memory_at_0, 48280, 0)
												store_i32(memory_at_0, 48232, 0)
												reg_2 = 4096
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_1 = reg_2
											loc_6 = add_i32(reg_1, loc_1)
											loc_9 = sub_i32(0, loc_1)
											loc_4 = band_i32(loc_6, loc_9)
											if reg_0 >= loc_4 then
												desired = 1
												break
											end
											loc_1 = load_i32(memory_at_0, 48228)
											if loc_1 ~= 0 then
												while true do
													loc_2 = load_i32(memory_at_0, 48220)
													loc_8 = add_i32(loc_4, loc_2)
													if loc_8 <= loc_2 then
														desired = 1
														break
													end
													if loc_1 < loc_8 then
														desired = 1
														break
													end
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											while true do
												if band_i32(load_i32_u8(memory_at_0, 48232), 4) == 0 then
													while true do
														while true do
															while true do
																while true do
																	while true do
																		loc_1 = load_i32(memory_at_0, 47812)
																		if loc_1 ~= 0 then
																			while true do
																				loc_0 = 48236
																				while true do
																					loc_2 = load_i32(memory_at_0, loc_0)
																					if loc_2 <= loc_1 then
																						while true do
																							if loc_1 < add_i32(load_i32(memory_at_0, loc_0 + 4), loc_2) then
																								desired = 15
																								break
																							end
																							break
																						end
																						if desired then
																							if desired == 17 then
																								desired = nil
																								continue
																							end
																							break
																						end
																					end
																					loc_0 = load_i32(memory_at_0, loc_0 + 8)
																					if loc_0 ~= 0 then
																						continue
																					end
																					break
																				end
																				if desired then
																					break
																				end
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		end
																		reg_0 = FUNC_LIST[512](0)
																		loc_3 = reg_0
																		if loc_3 == 4294967295 then
																			desired = 12
																			break
																		end
																		loc_6 = loc_4
																		loc_0 = load_i32(memory_at_0, 48264)
																		loc_1 = sub_i32(loc_0, 1)
																		if band_i32(loc_3, loc_1) ~= 0 then
																			while true do
																				reg_0 = add_i32(sub_i32(loc_4, loc_3), band_i32(add_i32(loc_1, loc_3), sub_i32(0, loc_0)))
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		else
																			while true do
																				reg_0 = loc_6
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		end
																		loc_6 = reg_0
																		if loc_6 <= loc_5 then
																			desired = 12
																			break
																		end
																		loc_0 = load_i32(memory_at_0, 48228)
																		if loc_0 ~= 0 then
																			while true do
																				loc_1 = load_i32(memory_at_0, 48220)
																				loc_2 = add_i32(loc_6, loc_1)
																				if loc_2 <= loc_1 then
																					desired = 12
																					break
																				end
																				if loc_0 < loc_2 then
																					desired = 12
																					break
																				end
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		end
																		reg_1 = FUNC_LIST[512](loc_6)
																		loc_0 = reg_1
																		if loc_3 ~= loc_0 then
																			desired = 14
																			break
																		end
																		desired = 10
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																	loc_6 = band_i32(loc_9, sub_i32(loc_6, loc_3))
																	reg_0 = FUNC_LIST[512](loc_6)
																	loc_3 = reg_0
																	if loc_3 == add_i32(load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_0 + 4)) then
																		desired = 13
																		break
																	end
																	loc_0 = loc_3
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																if loc_0 == 4294967295 then
																	desired = 12
																	break
																end
																if loc_6 >= add_i32(loc_5, 48) then
																	while true do
																		loc_3 = loc_0
																		desired = 10
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																loc_1 = load_i32(memory_at_0, 48268)
																loc_1 = band_i32(add_i32(loc_1, sub_i32(loc_7, loc_6)), sub_i32(0, loc_1))
																reg_0 = FUNC_LIST[512](loc_1)
																if reg_0 == 4294967295 then
																	desired = 12
																	break
																end
																loc_6 = add_i32(loc_1, loc_6)
																loc_3 = loc_0
																desired = 10
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															if loc_3 ~= 4294967295 then
																desired = 10
																break
															end
															break
														end
														if desired then
															break
														end
														store_i32(memory_at_0, 48232, bor_i32(load_i32(memory_at_0, 48232), 4))
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												reg_0 = FUNC_LIST[512](loc_4)
												loc_3 = reg_0
												reg_0 = FUNC_LIST[512](0)
												loc_0 = reg_0
												if loc_3 == 4294967295 then
													desired = 5
													break
												end
												if loc_0 == 4294967295 then
													desired = 5
													break
												end
												if loc_0 <= loc_3 then
													desired = 5
													break
												end
												loc_6 = sub_i32(loc_0, loc_3)
												if loc_6 <= add_i32(loc_5, 40) then
													desired = 5
													break
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_0 = add_i32(loc_6, load_i32(memory_at_0, 48220))
											store_i32(memory_at_0, 48220, loc_0)
											if loc_0 > load_i32(memory_at_0, 48224) then
												while true do
													store_i32(memory_at_0, 48224, loc_0)
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											while true do
												loc_1 = load_i32(memory_at_0, 47812)
												if loc_1 ~= 0 then
													while true do
														loc_0 = 48236
														while true do
															loc_2 = load_i32(memory_at_0, loc_0)
															loc_4 = load_i32(memory_at_0, loc_0 + 4)
															if add_i32(loc_2, loc_4) == loc_3 then
																desired = 10
																break
															end
															loc_0 = load_i32(memory_at_0, loc_0 + 8)
															if loc_0 ~= 0 then
																continue
															end
															break
														end
														if desired then
															break
														end
														desired = 7
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_0 = load_i32(memory_at_0, 47804)
												if (if loc_0 <= loc_3 then loc_0 else 0) == 0 then
													while true do
														store_i32(memory_at_0, 47804, loc_3)
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_0 = 0
												store_i32(memory_at_0, 48240, loc_6)
												store_i32(memory_at_0, 48236, loc_3)
												store_i32(memory_at_0, 47820, 4294967295)
												store_i32(memory_at_0, 47824, load_i32(memory_at_0, 48260))
												store_i32(memory_at_0, 48248, 0)
												while true do
													loc_1 = shl_i32(loc_0, 3)
													loc_2 = add_i32(loc_1, 47828)
													store_i32(memory_at_0, add_i32(loc_1, 47836), loc_2)
													store_i32(memory_at_0, add_i32(loc_1, 47840), loc_2)
													loc_0 = add_i32(loc_0, 1)
													if loc_0 ~= 32 then
														continue
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_0 = sub_i32(loc_6, 40)
												loc_1 = band_i32(sub_i32(4294967288, loc_3), 7)
												loc_2 = sub_i32(loc_0, loc_1)
												store_i32(memory_at_0, 47800, loc_2)
												loc_1 = add_i32(loc_1, loc_3)
												store_i32(memory_at_0, 47812, loc_1)
												store_i32(memory_at_0, loc_1 + 4, bor_i32(loc_2, 1))
												store_i32(memory_at_0, add_i32(loc_0, loc_3) + 4, 40)
												store_i32(memory_at_0, 47816, load_i32(memory_at_0, 48276))
												desired = 6
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if loc_1 >= loc_3 then
												desired = 7
												break
											end
											if loc_1 < loc_2 then
												desired = 7
												break
											end
											if band_i32(load_i32(memory_at_0, loc_0 + 12), 8) ~= 0 then
												desired = 7
												break
											end
											store_i32(memory_at_0, loc_0 + 4, add_i32(loc_4, loc_6))
											loc_0 = band_i32(sub_i32(4294967288, loc_1), 7)
											loc_2 = add_i32(loc_0, loc_1)
											store_i32(memory_at_0, 47812, loc_2)
											loc_3 = add_i32(loc_6, load_i32(memory_at_0, 47800))
											loc_0 = sub_i32(loc_3, loc_0)
											store_i32(memory_at_0, 47800, loc_0)
											store_i32(memory_at_0, loc_2 + 4, bor_i32(loc_0, 1))
											store_i32(memory_at_0, add_i32(loc_1, loc_3) + 4, 40)
											store_i32(memory_at_0, 47816, load_i32(memory_at_0, 48276))
											desired = 6
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_0 = 0
										desired = 2
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_0 = 0
									desired = 3
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_3 < load_i32(memory_at_0, 47804) then
									while true do
										store_i32(memory_at_0, 47804, loc_3)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_2 = add_i32(loc_3, loc_6)
								loc_0 = 48236
								while true do
									while true do
										if load_i32(memory_at_0, loc_0) ~= loc_2 then
											while true do
												loc_0 = load_i32(memory_at_0, loc_0 + 8)
												if loc_0 ~= 0 then
													desired = 8
													break
												end
												desired = 7
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if band_i32(load_i32_u8(memory_at_0, loc_0 + 12), 8) == 0 then
										desired = 4
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_0 = 48236
								while true do
									while true do
										loc_2 = load_i32(memory_at_0, loc_0)
										if loc_2 <= loc_1 then
											while true do
												loc_2 = add_i32(load_i32(memory_at_0, loc_0 + 4), loc_2)
												if loc_1 < loc_2 then
													desired = 8
													break
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_0 = load_i32(memory_at_0, loc_0 + 8)
										desired = 7
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_0 = sub_i32(loc_6, 40)
								loc_4 = band_i32(sub_i32(4294967288, loc_3), 7)
								loc_9 = sub_i32(loc_0, loc_4)
								store_i32(memory_at_0, 47800, loc_9)
								loc_4 = add_i32(loc_3, loc_4)
								store_i32(memory_at_0, 47812, loc_4)
								store_i32(memory_at_0, loc_4 + 4, bor_i32(loc_9, 1))
								store_i32(memory_at_0, add_i32(loc_0, loc_3) + 4, 40)
								store_i32(memory_at_0, 47816, load_i32(memory_at_0, 48276))
								loc_0 = sub_i32(add_i32(band_i32(sub_i32(39, loc_2), 7), loc_2), 47)
								loc_4 = (if add_i32(loc_1, 16) > loc_0 then loc_1 else loc_0)
								store_i32(memory_at_0, loc_4 + 4, 27)
								store_i64(memory_at_0, loc_4 + 16, load_i64(memory_at_0, 48244))
								store_i64(memory_at_0, loc_4 + 8, load_i64(memory_at_0, 48236))
								store_i32(memory_at_0, 48244, add_i32(loc_4, 8))
								store_i32(memory_at_0, 48240, loc_6)
								store_i32(memory_at_0, 48236, loc_3)
								store_i32(memory_at_0, 48248, 0)
								loc_0 = add_i32(loc_4, 24)
								while true do
									store_i32(memory_at_0, loc_0 + 4, 7)
									loc_3 = add_i32(loc_0, 8)
									loc_0 = add_i32(loc_0, 4)
									if loc_2 > loc_3 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_1 == loc_4 then
									break
								end
								store_i32(memory_at_0, loc_4 + 4, band_i32(load_i32(memory_at_0, loc_4 + 4), 4294967294))
								loc_3 = sub_i32(loc_4, loc_1)
								store_i32(memory_at_0, loc_1 + 4, bor_i32(loc_3, 1))
								store_i32(memory_at_0, loc_4, loc_3)
								while true do
									if loc_3 <= 255 then
										while true do
											loc_0 = add_i32(band_i32(loc_3, 4294967288), 47828)
											while true do
												loc_2 = load_i32(memory_at_0, 47788)
												loc_3 = shl_i32(1, shr_u32(loc_3, 3))
												if band_i32(loc_2, loc_3) == 0 then
													while true do
														store_i32(memory_at_0, 47788, bor_i32(loc_2, loc_3))
														reg_0 = loc_0
														desired = 9
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												end
												reg_0 = load_i32(memory_at_0, loc_0 + 8)
												break
											end
											if desired then
												break
											end
											loc_2 = reg_0
											store_i32(memory_at_0, loc_0 + 8, loc_1)
											store_i32(memory_at_0, loc_2 + 12, loc_1)
											loc_4 = 8
											reg_0 = 12
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_0 = 31
									reg_0 = loc_1
									if loc_3 <= 16777215 then
										while true do
											loc_0 = clz_i32(shr_u32(loc_3, 8))
											reg_1 = add_i32(sub_i32(band_i32(shr_u32(loc_3, sub_i32(38, loc_0)), 1), shl_i32(loc_0, 1)), 62)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									else
										while true do
											reg_1 = loc_0
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_0 = reg_1
									store_i32(memory_at_0, reg_0 + 28, loc_0)
									store_i64(memory_at_0, loc_1 + 16, i64_ZERO)
									loc_2 = add_i32(shl_i32(loc_0, 2), 48092)
									while true do
										while true do
											loc_4 = load_i32(memory_at_0, 47792)
											loc_6 = shl_i32(1, loc_0)
											if band_i32(loc_4, loc_6) == 0 then
												while true do
													store_i32(memory_at_0, 47792, bor_i32(loc_4, loc_6))
													store_i32(memory_at_0, loc_2, loc_1)
													desired = 9
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_0 = shl_i32(loc_3, (if loc_0 ~= 31 then sub_i32(25, shr_u32(loc_0, 1)) else 0))
											loc_4 = load_i32(memory_at_0, loc_2)
											while true do
												loc_2 = loc_4
												if loc_3 == band_i32(load_i32(memory_at_0, loc_2 + 4), 4294967288) then
													desired = 8
													break
												end
												loc_4 = shr_u32(loc_0, 29)
												loc_0 = shl_i32(loc_0, 1)
												loc_12 = add_i32(band_i32(loc_4, 4), loc_2)
												loc_6 = add_i32(loc_12, 16)
												loc_4 = load_i32(memory_at_0, loc_6)
												if loc_4 ~= 0 then
													continue
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											store_i32(memory_at_0, loc_12 + 16, loc_1)
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										store_i32(memory_at_0, loc_1 + 24, loc_2)
										loc_4 = 12
										loc_2 = loc_1
										loc_0 = loc_1
										reg_0 = 8
										desired = 7
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_0 = load_i32(memory_at_0, loc_2 + 8)
									store_i32(memory_at_0, loc_0 + 12, loc_1)
									store_i32(memory_at_0, loc_2 + 8, loc_1)
									store_i32(memory_at_0, loc_1 + 8, loc_0)
									loc_0 = 0
									loc_4 = 12
									reg_0 = 24
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_3 = reg_0
								store_i32(memory_at_0, add_i32(loc_1, loc_4), loc_2)
								store_i32(memory_at_0, add_i32(loc_1, loc_3), loc_0)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_0 = load_i32(memory_at_0, 47800)
							if loc_5 >= loc_0 then
								break
							end
							loc_1 = sub_i32(loc_0, loc_5)
							store_i32(memory_at_0, 47800, loc_1)
							loc_0 = load_i32(memory_at_0, 47812)
							loc_2 = add_i32(loc_5, loc_0)
							store_i32(memory_at_0, 47812, loc_2)
							store_i32(memory_at_0, loc_2 + 4, bor_i32(loc_1, 1))
							store_i32(memory_at_0, loc_0 + 4, bor_i32(loc_5, 3))
							loc_0 = add_i32(loc_0, 8)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[476]()
						store_i32(memory_at_0, reg_0, 48)
						loc_0 = 0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_0, loc_3)
					store_i32(memory_at_0, loc_0 + 4, add_i32(loc_6, load_i32(memory_at_0, loc_0 + 4)))
					reg_0 = FUNC_LIST[514](loc_3, loc_2, loc_5)
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if loc_9 == 0 then
						break
					end
					while true do
						loc_3 = load_i32(memory_at_0, loc_4 + 28)
						loc_2 = add_i32(shl_i32(loc_3, 2), 48092)
						if loc_4 == load_i32(memory_at_0, loc_2) then
							while true do
								store_i32(memory_at_0, loc_2, loc_0)
								if loc_0 ~= 0 then
									desired = 4
									break
								end
								loc_8 = band_i32(rotl_i32(4294967294, loc_3), loc_8)
								store_i32(memory_at_0, 47792, loc_8)
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						store_i32(memory_at_0, add_i32((if loc_4 == load_i32(memory_at_0, loc_9 + 16) then 16 else 20), loc_9), loc_0)
						if loc_0 == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_0 + 24, loc_9)
					loc_2 = load_i32(memory_at_0, loc_4 + 16)
					if loc_2 ~= 0 then
						while true do
							store_i32(memory_at_0, loc_0 + 16, loc_2)
							store_i32(memory_at_0, loc_2 + 24, loc_0)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = load_i32(memory_at_0, loc_4 + 20)
					if loc_2 == 0 then
						break
					end
					store_i32(memory_at_0, loc_0 + 20, loc_2)
					store_i32(memory_at_0, loc_2 + 24, loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if loc_1 <= 15 then
						while true do
							loc_0 = add_i32(loc_1, loc_5)
							store_i32(memory_at_0, loc_4 + 4, bor_i32(loc_0, 3))
							loc_0 = add_i32(loc_0, loc_4)
							store_i32(memory_at_0, loc_0 + 4, bor_i32(load_i32(memory_at_0, loc_0 + 4), 1))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					store_i32(memory_at_0, loc_4 + 4, bor_i32(loc_5, 3))
					loc_3 = add_i32(loc_4, loc_5)
					store_i32(memory_at_0, loc_3 + 4, bor_i32(loc_1, 1))
					store_i32(memory_at_0, add_i32(loc_1, loc_3), loc_1)
					if loc_1 <= 255 then
						while true do
							loc_0 = add_i32(band_i32(loc_1, 4294967288), 47828)
							while true do
								loc_5 = load_i32(memory_at_0, 47788)
								loc_1 = shl_i32(1, shr_u32(loc_1, 3))
								if band_i32(loc_5, loc_1) == 0 then
									while true do
										store_i32(memory_at_0, 47788, bor_i32(loc_1, loc_5))
										reg_0 = loc_0
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								reg_0 = load_i32(memory_at_0, loc_0 + 8)
								break
							end
							if desired then
								break
							end
							loc_1 = reg_0
							store_i32(memory_at_0, loc_0 + 8, loc_3)
							store_i32(memory_at_0, loc_1 + 12, loc_3)
							store_i32(memory_at_0, loc_3 + 12, loc_0)
							store_i32(memory_at_0, loc_3 + 8, loc_1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_0 = 31
					reg_0 = loc_3
					if loc_1 <= 16777215 then
						while true do
							loc_0 = clz_i32(shr_u32(loc_1, 8))
							reg_1 = add_i32(sub_i32(band_i32(shr_u32(loc_1, sub_i32(38, loc_0)), 1), shl_i32(loc_0, 1)), 62)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_1 = loc_0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_0 = reg_1
					store_i32(memory_at_0, reg_0 + 28, loc_0)
					store_i64(memory_at_0, loc_3 + 16, i64_ZERO)
					loc_5 = add_i32(shl_i32(loc_0, 2), 48092)
					while true do
						while true do
							loc_2 = shl_i32(1, loc_0)
							if band_i32(loc_2, loc_8) == 0 then
								while true do
									store_i32(memory_at_0, 47792, bor_i32(loc_2, loc_8))
									store_i32(memory_at_0, loc_5, loc_3)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_0 = shl_i32(loc_1, (if loc_0 ~= 31 then sub_i32(25, shr_u32(loc_0, 1)) else 0))
							loc_2 = load_i32(memory_at_0, loc_5)
							while true do
								loc_5 = loc_2
								if loc_1 == band_i32(load_i32(memory_at_0, loc_5 + 4), 4294967288) then
									desired = 4
									break
								end
								loc_2 = shr_u32(loc_0, 29)
								loc_0 = shl_i32(loc_0, 1)
								loc_13 = add_i32(band_i32(loc_2, 4), loc_5)
								loc_6 = add_i32(loc_13, 16)
								loc_2 = load_i32(memory_at_0, loc_6)
								if loc_2 ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							store_i32(memory_at_0, loc_13 + 16, loc_3)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						store_i32(memory_at_0, loc_3 + 24, loc_5)
						store_i32(memory_at_0, loc_3 + 12, loc_3)
						store_i32(memory_at_0, loc_3 + 8, loc_3)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_0 = load_i32(memory_at_0, loc_5 + 8)
					store_i32(memory_at_0, loc_0 + 12, loc_3)
					store_i32(memory_at_0, loc_5 + 8, loc_3)
					store_i32(memory_at_0, loc_3 + 24, 0)
					store_i32(memory_at_0, loc_3 + 12, loc_5)
					store_i32(memory_at_0, loc_3 + 8, loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_0 = add_i32(loc_4, 8)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_8 == 0 then
					break
				end
				while true do
					loc_4 = load_i32(memory_at_0, loc_3 + 28)
					loc_2 = add_i32(shl_i32(loc_4, 2), 48092)
					if loc_3 == load_i32(memory_at_0, loc_2) then
						while true do
							store_i32(memory_at_0, loc_2, loc_0)
							if loc_0 ~= 0 then
								desired = 3
								break
							end
							store_i32(memory_at_0, 47792, band_i32(rotl_i32(4294967294, loc_4), loc_11))
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					store_i32(memory_at_0, add_i32((if loc_3 == load_i32(memory_at_0, loc_8 + 16) then 16 else 20), loc_8), loc_0)
					if loc_0 == 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 24, loc_8)
				loc_2 = load_i32(memory_at_0, loc_3 + 16)
				if loc_2 ~= 0 then
					while true do
						store_i32(memory_at_0, loc_0 + 16, loc_2)
						store_i32(memory_at_0, loc_2 + 24, loc_0)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = load_i32(memory_at_0, loc_3 + 20)
				if loc_2 == 0 then
					break
				end
				store_i32(memory_at_0, loc_0 + 20, loc_2)
				store_i32(memory_at_0, loc_2 + 24, loc_0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_1 <= 15 then
					while true do
						loc_0 = add_i32(loc_1, loc_5)
						store_i32(memory_at_0, loc_3 + 4, bor_i32(loc_0, 3))
						loc_0 = add_i32(loc_0, loc_3)
						store_i32(memory_at_0, loc_0 + 4, bor_i32(load_i32(memory_at_0, loc_0 + 4), 1))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				store_i32(memory_at_0, loc_3 + 4, bor_i32(loc_5, 3))
				loc_5 = add_i32(loc_3, loc_5)
				store_i32(memory_at_0, loc_5 + 4, bor_i32(loc_1, 1))
				store_i32(memory_at_0, add_i32(loc_1, loc_5), loc_1)
				if loc_7 ~= 0 then
					while true do
						loc_2 = add_i32(band_i32(loc_7, 4294967288), 47828)
						loc_0 = load_i32(memory_at_0, 47808)
						while true do
							loc_4 = shl_i32(1, shr_u32(loc_7, 3))
							if band_i32(loc_6, loc_4) == 0 then
								while true do
									store_i32(memory_at_0, 47788, bor_i32(loc_4, loc_6))
									reg_0 = loc_2
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							reg_0 = load_i32(memory_at_0, loc_2 + 8)
							break
						end
						if desired then
							break
						end
						loc_4 = reg_0
						store_i32(memory_at_0, loc_2 + 8, loc_0)
						store_i32(memory_at_0, loc_4 + 12, loc_0)
						store_i32(memory_at_0, loc_0 + 12, loc_2)
						store_i32(memory_at_0, loc_0 + 8, loc_4)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				store_i32(memory_at_0, 47808, loc_5)
				store_i32(memory_at_0, 47796, loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_0 = add_i32(loc_3, 8)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_10, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[514] = --[[ prepend_alloc ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_8 = add_i32(band_i32(sub_i32(4294967288, loc_0), 7), loc_0)
		store_i32(memory_at_0, loc_8 + 4, bor_i32(loc_2, 3))
		loc_4 = add_i32(band_i32(sub_i32(4294967288, loc_1), 7), loc_1)
		loc_3 = add_i32(loc_2, loc_8)
		loc_0 = sub_i32(loc_4, loc_3)
		while true do
			if loc_4 == load_i32(memory_at_0, 47812) then
				while true do
					store_i32(memory_at_0, 47812, loc_3)
					loc_2 = add_i32(loc_0, load_i32(memory_at_0, 47800))
					store_i32(memory_at_0, 47800, loc_2)
					store_i32(memory_at_0, loc_3 + 4, bor_i32(loc_2, 1))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_4 == load_i32(memory_at_0, 47808) then
				while true do
					store_i32(memory_at_0, 47808, loc_3)
					loc_2 = add_i32(loc_0, load_i32(memory_at_0, 47796))
					store_i32(memory_at_0, 47796, loc_2)
					store_i32(memory_at_0, loc_3 + 4, bor_i32(loc_2, 1))
					store_i32(memory_at_0, add_i32(loc_2, loc_3), loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = load_i32(memory_at_0, loc_4 + 4)
			if band_i32(loc_1, 3) == 1 then
				while true do
					loc_9 = band_i32(loc_1, 4294967288)
					loc_2 = load_i32(memory_at_0, loc_4 + 12)
					while true do
						if loc_1 <= 255 then
							while true do
								loc_7 = shr_u32(loc_1, 3)
								loc_1 = add_i32(shl_i32(loc_7, 3), 47828)
								loc_5 = load_i32(memory_at_0, loc_4 + 8)
								if loc_2 == loc_5 then
									while true do
										store_i32(memory_at_0, 47788, band_i32(load_i32(memory_at_0, 47788), rotl_i32(4294967294, loc_7)))
										desired = 3
										break
									end
									if desired then
										break
									end
								end
								store_i32(memory_at_0, loc_5 + 12, loc_2)
								store_i32(memory_at_0, loc_2 + 8, loc_5)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_6 = load_i32(memory_at_0, loc_4 + 24)
						while true do
							if loc_2 ~= loc_4 then
								while true do
									loc_1 = load_i32(memory_at_0, loc_4 + 8)
									store_i32(memory_at_0, loc_1 + 12, loc_2)
									store_i32(memory_at_0, loc_2 + 8, loc_1)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							while true do
								loc_1 = load_i32(memory_at_0, loc_4 + 20)
								if loc_1 ~= 0 then
									while true do
										reg_0 = add_i32(loc_4, 20)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								else
									while true do
										loc_1 = load_i32(memory_at_0, loc_4 + 16)
										if loc_1 == 0 then
											desired = 5
											break
										end
										reg_0 = add_i32(loc_4, 16)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_5 = reg_0
								while true do
									loc_7 = loc_5
									loc_2 = loc_1
									loc_5 = add_i32(loc_2, 20)
									loc_1 = load_i32(memory_at_0, loc_2 + 20)
									if loc_1 ~= 0 then
										continue
									end
									loc_5 = add_i32(loc_2, 16)
									loc_1 = load_i32(memory_at_0, loc_2 + 16)
									if loc_1 ~= 0 then
										continue
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								store_i32(memory_at_0, loc_7, 0)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_2 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						if loc_6 == 0 then
							break
						end
						while true do
							loc_5 = load_i32(memory_at_0, loc_4 + 28)
							loc_1 = add_i32(shl_i32(loc_5, 2), 48092)
							if loc_4 == load_i32(memory_at_0, loc_1) then
								while true do
									store_i32(memory_at_0, loc_1, loc_2)
									if loc_2 ~= 0 then
										desired = 4
										break
									end
									store_i32(memory_at_0, 47792, band_i32(load_i32(memory_at_0, 47792), rotl_i32(4294967294, loc_5)))
									desired = 3
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							store_i32(memory_at_0, add_i32((if loc_4 == load_i32(memory_at_0, loc_6 + 16) then 16 else 20), loc_6), loc_2)
							if loc_2 == 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						store_i32(memory_at_0, loc_2 + 24, loc_6)
						loc_1 = load_i32(memory_at_0, loc_4 + 16)
						if loc_1 ~= 0 then
							while true do
								store_i32(memory_at_0, loc_2 + 16, loc_1)
								store_i32(memory_at_0, loc_1 + 24, loc_2)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_1 = load_i32(memory_at_0, loc_4 + 20)
						if loc_1 == 0 then
							break
						end
						store_i32(memory_at_0, loc_2 + 20, loc_1)
						store_i32(memory_at_0, loc_1 + 24, loc_2)
						break
					end
					if desired then
						break
					end
					loc_4 = add_i32(loc_4, loc_9)
					loc_1 = load_i32(memory_at_0, loc_4 + 4)
					reg_0 = add_i32(loc_0, loc_9)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = reg_0
			store_i32(memory_at_0, loc_4 + 4, band_i32(loc_1, 4294967294))
			store_i32(memory_at_0, loc_3 + 4, bor_i32(loc_0, 1))
			store_i32(memory_at_0, add_i32(loc_0, loc_3), loc_0)
			if loc_0 <= 255 then
				while true do
					loc_2 = add_i32(band_i32(loc_0, 4294967288), 47828)
					while true do
						loc_1 = load_i32(memory_at_0, 47788)
						loc_0 = shl_i32(1, shr_u32(loc_0, 3))
						if band_i32(loc_1, loc_0) == 0 then
							while true do
								store_i32(memory_at_0, 47788, bor_i32(loc_0, loc_1))
								reg_0 = loc_2
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						reg_0 = load_i32(memory_at_0, loc_2 + 8)
						break
					end
					if desired then
						break
					end
					loc_0 = reg_0
					store_i32(memory_at_0, loc_2 + 8, loc_3)
					store_i32(memory_at_0, loc_0 + 12, loc_3)
					store_i32(memory_at_0, loc_3 + 12, loc_2)
					store_i32(memory_at_0, loc_3 + 8, loc_0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = 31
			reg_0 = loc_3
			if loc_0 <= 16777215 then
				while true do
					loc_2 = clz_i32(shr_u32(loc_0, 8))
					reg_1 = add_i32(sub_i32(band_i32(shr_u32(loc_0, sub_i32(38, loc_2)), 1), shl_i32(loc_2, 1)), 62)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_1 = loc_2
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = reg_1
			store_i32(memory_at_0, reg_0 + 28, loc_2)
			store_i64(memory_at_0, loc_3 + 16, i64_ZERO)
			loc_1 = add_i32(shl_i32(loc_2, 2), 48092)
			while true do
				while true do
					loc_5 = load_i32(memory_at_0, 47792)
					loc_4 = shl_i32(1, loc_2)
					if band_i32(loc_5, loc_4) == 0 then
						while true do
							store_i32(memory_at_0, 47792, bor_i32(loc_4, loc_5))
							store_i32(memory_at_0, loc_1, loc_3)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = shl_i32(loc_0, (if loc_2 ~= 31 then sub_i32(25, shr_u32(loc_2, 1)) else 0))
					loc_5 = load_i32(memory_at_0, loc_1)
					while true do
						loc_1 = loc_5
						if loc_0 == band_i32(load_i32(memory_at_0, loc_1 + 4), 4294967288) then
							desired = 2
							break
						end
						loc_5 = shr_u32(loc_2, 29)
						loc_2 = shl_i32(loc_2, 1)
						loc_10 = add_i32(band_i32(loc_5, 4), loc_1)
						loc_4 = add_i32(loc_10, 16)
						loc_5 = load_i32(memory_at_0, loc_4)
						if loc_5 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_10 + 16, loc_3)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_3 + 24, loc_1)
				store_i32(memory_at_0, loc_3 + 12, loc_3)
				store_i32(memory_at_0, loc_3 + 8, loc_3)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = load_i32(memory_at_0, loc_1 + 8)
			store_i32(memory_at_0, loc_2 + 12, loc_3)
			store_i32(memory_at_0, loc_1 + 8, loc_3)
			store_i32(memory_at_0, loc_3 + 24, 0)
			store_i32(memory_at_0, loc_3 + 12, loc_1)
			store_i32(memory_at_0, loc_3 + 8, loc_2)
			break
		end
		reg_0 = add_i32(loc_8, 8)
		break
	end
	return reg_0
end
FUNC_LIST[515] = --[[ dlfree ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			if loc_0 == 0 then
				break
			end
			loc_3 = sub_i32(loc_0, 8)
			loc_1 = load_i32(memory_at_0, sub_i32(loc_0, 4))
			loc_0 = band_i32(loc_1, 4294967288)
			loc_4 = add_i32(loc_3, loc_0)
			while true do
				if band_i32(loc_1, 1) ~= 0 then
					break
				end
				if band_i32(loc_1, 2) == 0 then
					desired = 1
					break
				end
				loc_2 = load_i32(memory_at_0, loc_3)
				loc_3 = sub_i32(loc_3, loc_2)
				loc_5 = load_i32(memory_at_0, 47804)
				if loc_3 < loc_5 then
					desired = 1
					break
				end
				loc_0 = add_i32(loc_0, loc_2)
				while true do
					while true do
						if loc_3 ~= load_i32(memory_at_0, 47808) then
							while true do
								loc_1 = load_i32(memory_at_0, loc_3 + 12)
								if loc_2 <= 255 then
									while true do
										loc_7 = shr_u32(loc_2, 3)
										loc_2 = add_i32(shl_i32(loc_7, 3), 47828)
										loc_5 = load_i32(memory_at_0, loc_3 + 8)
										if loc_1 == loc_5 then
											while true do
												store_i32(memory_at_0, 47788, band_i32(load_i32(memory_at_0, 47788), rotl_i32(4294967294, loc_7)))
												desired = 2
												break
											end
											if desired then
												break
											end
										end
										store_i32(memory_at_0, loc_5 + 12, loc_1)
										store_i32(memory_at_0, loc_1 + 8, loc_5)
										desired = 2
										break
									end
									if desired then
										break
									end
								end
								loc_6 = load_i32(memory_at_0, loc_3 + 24)
								if loc_1 ~= loc_3 then
									while true do
										loc_2 = load_i32(memory_at_0, loc_3 + 8)
										store_i32(memory_at_0, loc_2 + 12, loc_1)
										store_i32(memory_at_0, loc_1 + 8, loc_2)
										desired = 3
										break
									end
									if desired then
										break
									end
								end
								loc_2 = load_i32(memory_at_0, loc_3 + 20)
								if loc_2 ~= 0 then
									while true do
										reg_0 = add_i32(loc_3, 20)
										break
									end
									if desired then
										break
									end
								else
									while true do
										loc_2 = load_i32(memory_at_0, loc_3 + 16)
										if loc_2 == 0 then
											desired = 4
											break
										end
										reg_0 = add_i32(loc_3, 16)
										break
									end
									if desired then
										break
									end
								end
								loc_5 = reg_0
								while true do
									loc_7 = loc_5
									loc_1 = loc_2
									loc_5 = add_i32(loc_1, 20)
									loc_2 = load_i32(memory_at_0, loc_1 + 20)
									if loc_2 ~= 0 then
										continue
									end
									loc_5 = add_i32(loc_1, 16)
									loc_2 = load_i32(memory_at_0, loc_1 + 16)
									if loc_2 ~= 0 then
										continue
									end
									break
								end
								if desired then
									break
								end
								store_i32(memory_at_0, loc_7, 0)
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_1 = load_i32(memory_at_0, loc_4 + 4)
						if band_i32(loc_1, 3) ~= 3 then
							desired = 2
							break
						end
						store_i32(memory_at_0, 47796, loc_0)
						store_i32(memory_at_0, loc_4 + 4, band_i32(loc_1, 4294967294))
						store_i32(memory_at_0, loc_3 + 4, bor_i32(loc_0, 1))
						store_i32(memory_at_0, loc_4, loc_0)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_6 == 0 then
					break
				end
				while true do
					loc_5 = load_i32(memory_at_0, loc_3 + 28)
					loc_2 = add_i32(shl_i32(loc_5, 2), 48092)
					if loc_3 == load_i32(memory_at_0, loc_2) then
						while true do
							store_i32(memory_at_0, loc_2, loc_1)
							if loc_1 ~= 0 then
								desired = 3
								break
							end
							store_i32(memory_at_0, 47792, band_i32(load_i32(memory_at_0, 47792), rotl_i32(4294967294, loc_5)))
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					store_i32(memory_at_0, add_i32((if loc_3 == load_i32(memory_at_0, loc_6 + 16) then 16 else 20), loc_6), loc_1)
					if loc_1 == 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_1 + 24, loc_6)
				loc_2 = load_i32(memory_at_0, loc_3 + 16)
				if loc_2 ~= 0 then
					while true do
						store_i32(memory_at_0, loc_1 + 16, loc_2)
						store_i32(memory_at_0, loc_2 + 24, loc_1)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = load_i32(memory_at_0, loc_3 + 20)
				if loc_2 == 0 then
					break
				end
				store_i32(memory_at_0, loc_1 + 20, loc_2)
				store_i32(memory_at_0, loc_2 + 24, loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_3 >= loc_4 then
				break
			end
			loc_2 = load_i32(memory_at_0, loc_4 + 4)
			if band_i32(loc_2, 1) == 0 then
				break
			end
			while true do
				while true do
					while true do
						while true do
							if band_i32(loc_2, 2) == 0 then
								while true do
									if loc_4 == load_i32(memory_at_0, 47812) then
										while true do
											store_i32(memory_at_0, 47812, loc_3)
											loc_0 = add_i32(loc_0, load_i32(memory_at_0, 47800))
											store_i32(memory_at_0, 47800, loc_0)
											store_i32(memory_at_0, loc_3 + 4, bor_i32(loc_0, 1))
											if load_i32(memory_at_0, 47808) ~= loc_3 then
												desired = 1
												break
											end
											store_i32(memory_at_0, 47796, 0)
											store_i32(memory_at_0, 47808, 0)
											desired = 0
											break
										end
										if desired then
											break
										end
									end
									if loc_4 == load_i32(memory_at_0, 47808) then
										while true do
											store_i32(memory_at_0, 47808, loc_3)
											loc_0 = add_i32(loc_0, load_i32(memory_at_0, 47796))
											store_i32(memory_at_0, 47796, loc_0)
											store_i32(memory_at_0, loc_3 + 4, bor_i32(loc_0, 1))
											store_i32(memory_at_0, add_i32(loc_0, loc_3), loc_0)
											desired = 0
											break
										end
										if desired then
											break
										end
									end
									loc_0 = add_i32(loc_0, band_i32(loc_2, 4294967288))
									loc_1 = load_i32(memory_at_0, loc_4 + 12)
									if loc_2 <= 255 then
										while true do
											loc_5 = load_i32(memory_at_0, loc_4 + 8)
											loc_4 = shr_u32(loc_2, 3)
											loc_2 = add_i32(shl_i32(loc_4, 3), 47828)
											if loc_1 == loc_5 then
												while true do
													store_i32(memory_at_0, 47788, band_i32(load_i32(memory_at_0, 47788), rotl_i32(4294967294, loc_4)))
													desired = 3
													break
												end
												if desired then
													break
												end
											end
											store_i32(memory_at_0, loc_5 + 12, loc_1)
											store_i32(memory_at_0, loc_1 + 8, loc_5)
											desired = 3
											break
										end
										if desired then
											break
										end
									end
									loc_6 = load_i32(memory_at_0, loc_4 + 24)
									if loc_1 ~= loc_4 then
										while true do
											loc_2 = load_i32(memory_at_0, loc_4 + 8)
											store_i32(memory_at_0, loc_2 + 12, loc_1)
											store_i32(memory_at_0, loc_1 + 8, loc_2)
											desired = 4
											break
										end
										if desired then
											break
										end
									end
									loc_2 = load_i32(memory_at_0, loc_4 + 20)
									if loc_2 ~= 0 then
										while true do
											reg_0 = add_i32(loc_4, 20)
											break
										end
										if desired then
											break
										end
									else
										while true do
											loc_2 = load_i32(memory_at_0, loc_4 + 16)
											if loc_2 == 0 then
												desired = 5
												break
											end
											reg_0 = add_i32(loc_4, 16)
											break
										end
										if desired then
											break
										end
									end
									loc_5 = reg_0
									while true do
										loc_7 = loc_5
										loc_1 = loc_2
										loc_5 = add_i32(loc_1, 20)
										loc_2 = load_i32(memory_at_0, loc_1 + 20)
										if loc_2 ~= 0 then
											continue
										end
										loc_5 = add_i32(loc_1, 16)
										loc_2 = load_i32(memory_at_0, loc_1 + 16)
										if loc_2 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									store_i32(memory_at_0, loc_7, 0)
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							store_i32(memory_at_0, loc_4 + 4, band_i32(loc_2, 4294967294))
							store_i32(memory_at_0, loc_3 + 4, bor_i32(loc_0, 1))
							store_i32(memory_at_0, add_i32(loc_0, loc_3), loc_0)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_1 = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_6 == 0 then
						break
					end
					while true do
						loc_5 = load_i32(memory_at_0, loc_4 + 28)
						loc_2 = add_i32(shl_i32(loc_5, 2), 48092)
						if loc_4 == load_i32(memory_at_0, loc_2) then
							while true do
								store_i32(memory_at_0, loc_2, loc_1)
								if loc_1 ~= 0 then
									desired = 4
									break
								end
								store_i32(memory_at_0, 47792, band_i32(load_i32(memory_at_0, 47792), rotl_i32(4294967294, loc_5)))
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						store_i32(memory_at_0, add_i32((if loc_4 == load_i32(memory_at_0, loc_6 + 16) then 16 else 20), loc_6), loc_1)
						if loc_1 == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_1 + 24, loc_6)
					loc_2 = load_i32(memory_at_0, loc_4 + 16)
					if loc_2 ~= 0 then
						while true do
							store_i32(memory_at_0, loc_1 + 16, loc_2)
							store_i32(memory_at_0, loc_2 + 24, loc_1)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = load_i32(memory_at_0, loc_4 + 20)
					if loc_2 == 0 then
						break
					end
					store_i32(memory_at_0, loc_1 + 20, loc_2)
					store_i32(memory_at_0, loc_2 + 24, loc_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_3 + 4, bor_i32(loc_0, 1))
				store_i32(memory_at_0, add_i32(loc_0, loc_3), loc_0)
				if load_i32(memory_at_0, 47808) ~= loc_3 then
					break
				end
				store_i32(memory_at_0, 47796, loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_0 <= 255 then
				while true do
					loc_1 = add_i32(band_i32(loc_0, 4294967288), 47828)
					while true do
						loc_2 = load_i32(memory_at_0, 47788)
						loc_0 = shl_i32(1, shr_u32(loc_0, 3))
						if band_i32(loc_2, loc_0) == 0 then
							while true do
								store_i32(memory_at_0, 47788, bor_i32(loc_0, loc_2))
								reg_0 = loc_1
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						reg_0 = load_i32(memory_at_0, loc_1 + 8)
						break
					end
					if desired then
						break
					end
					loc_0 = reg_0
					store_i32(memory_at_0, loc_1 + 8, loc_3)
					store_i32(memory_at_0, loc_0 + 12, loc_3)
					store_i32(memory_at_0, loc_3 + 12, loc_1)
					store_i32(memory_at_0, loc_3 + 8, loc_0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = 31
			reg_0 = loc_3
			if loc_0 <= 16777215 then
				while true do
					loc_1 = clz_i32(shr_u32(loc_0, 8))
					reg_1 = add_i32(sub_i32(band_i32(shr_u32(loc_0, sub_i32(38, loc_1)), 1), shl_i32(loc_1, 1)), 62)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_1 = loc_1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = reg_1
			store_i32(memory_at_0, reg_0 + 28, loc_1)
			store_i64(memory_at_0, loc_3 + 16, i64_ZERO)
			loc_4 = add_i32(shl_i32(loc_1, 2), 48092)
			while true do
				while true do
					while true do
						loc_2 = load_i32(memory_at_0, 47792)
						loc_5 = shl_i32(1, loc_1)
						if band_i32(loc_2, loc_5) == 0 then
							while true do
								store_i32(memory_at_0, 47792, bor_i32(loc_2, loc_5))
								loc_1 = 24
								loc_5 = loc_4
								reg_0 = 8
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_1 = shl_i32(loc_0, (if loc_1 ~= 31 then sub_i32(25, shr_u32(loc_1, 1)) else 0))
						loc_5 = load_i32(memory_at_0, loc_4)
						while true do
							loc_2 = loc_5
							if loc_0 == band_i32(load_i32(memory_at_0, loc_2 + 4), 4294967288) then
								desired = 3
								break
							end
							loc_5 = shr_u32(loc_1, 29)
							loc_1 = shl_i32(loc_1, 1)
							loc_4 = add_i32(add_i32(band_i32(loc_5, 4), loc_2), 16)
							loc_5 = load_i32(memory_at_0, loc_4)
							if loc_5 ~= 0 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_1 = 24
						loc_5 = loc_2
						reg_0 = 8
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_0 = reg_0
					loc_2 = loc_3
					reg_0 = loc_3
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = load_i32(memory_at_0, loc_2 + 8)
				store_i32(memory_at_0, loc_5 + 12, loc_3)
				loc_1 = 8
				loc_4 = add_i32(loc_2, 8)
				loc_0 = 24
				reg_0 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = reg_0
			store_i32(memory_at_0, loc_4, loc_3)
			store_i32(memory_at_0, add_i32(loc_1, loc_3), loc_5)
			store_i32(memory_at_0, loc_3 + 12, loc_2)
			store_i32(memory_at_0, add_i32(loc_0, loc_3), loc_7)
			loc_3 = sub_i32(load_i32(memory_at_0, 47820), 1)
			store_i32(memory_at_0, 47820, (if loc_3 ~= 0 then loc_3 else 4294967295))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[516] = --[[ __letf2 ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_4 = 1
		while true do
			loc_5 = band_i64(loc_1, i64_from_u32(4294967295, 2147483647))
			if (if eq_i64(loc_5, i64_from_u32(0, 2147418112)) then (if ne_i64(loc_0, i64_ZERO) then 1 else 0) else (if gt_u64(loc_5, i64_from_u32(0, 2147418112)) then 1 else 0)) ~= 0 then
				break
			end
			loc_6 = band_i64(loc_3, i64_from_u32(4294967295, 2147483647))
			if (if eq_i64(loc_6, i64_from_u32(0, 2147418112)) then (if ne_i64(loc_2, i64_ZERO) then 1 else 0) else (if gt_u64(loc_6, i64_from_u32(0, 2147418112)) then 1 else 0)) ~= 0 then
				break
			end
			if eq_i64(bor_i64(bor_i64(loc_0, loc_2), bor_i64(loc_5, loc_6)), i64_ZERO) then
				while true do
					reg_0 = 0
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if ge_i64(band_i64(loc_1, loc_3), i64_ZERO) then
				while true do
					loc_4 = 4294967295
					if (if eq_i64(loc_1, loc_3) then (if lt_u64(loc_0, loc_2) then 1 else 0) else (if lt_i64(loc_1, loc_3) then 1 else 0)) ~= 0 then
						desired = 1
						break
					end
					reg_0 = (if ne_i64(bor_i64(bxor_i64(loc_0, loc_2), bxor_i64(loc_1, loc_3)), i64_ZERO) then 1 else 0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = 4294967295
			if (if eq_i64(loc_1, loc_3) then (if gt_u64(loc_0, loc_2) then 1 else 0) else (if gt_i64(loc_1, loc_3) then 1 else 0)) ~= 0 then
				break
			end
			loc_4 = (if ne_i64(bor_i64(bxor_i64(loc_0, loc_2), bxor_i64(loc_1, loc_3)), i64_ZERO) then 1 else 0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[517] = --[[ __getf2 ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_4 = 4294967295
		while true do
			loc_5 = band_i64(loc_1, i64_from_u32(4294967295, 2147483647))
			if (if eq_i64(loc_5, i64_from_u32(0, 2147418112)) then (if ne_i64(loc_0, i64_ZERO) then 1 else 0) else (if gt_u64(loc_5, i64_from_u32(0, 2147418112)) then 1 else 0)) ~= 0 then
				break
			end
			loc_6 = band_i64(loc_3, i64_from_u32(4294967295, 2147483647))
			if (if eq_i64(loc_6, i64_from_u32(0, 2147418112)) then (if ne_i64(loc_2, i64_ZERO) then 1 else 0) else (if gt_u64(loc_6, i64_from_u32(0, 2147418112)) then 1 else 0)) ~= 0 then
				break
			end
			if eq_i64(bor_i64(bor_i64(loc_0, loc_2), bor_i64(loc_5, loc_6)), i64_ZERO) then
				while true do
					reg_0 = 0
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if ge_i64(band_i64(loc_1, loc_3), i64_ZERO) then
				while true do
					if (if eq_i64(loc_1, loc_3) then (if lt_u64(loc_0, loc_2) then 1 else 0) else (if lt_i64(loc_1, loc_3) then 1 else 0)) ~= 0 then
						desired = 1
						break
					end
					reg_0 = (if ne_i64(bor_i64(bxor_i64(loc_0, loc_2), bxor_i64(loc_1, loc_3)), i64_ZERO) then 1 else 0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if (if eq_i64(loc_1, loc_3) then (if gt_u64(loc_0, loc_2) then 1 else 0) else (if gt_i64(loc_1, loc_3) then 1 else 0)) ~= 0 then
				break
			end
			loc_4 = (if ne_i64(bor_i64(bxor_i64(loc_0, loc_2), bxor_i64(loc_1, loc_3)), i64_ZERO) then 1 else 0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[518] = --[[ __ashlti3 ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = i64_ZERO
	local desired
	while true do
		while true do
			if band_i32(loc_3, 64) ~= 0 then
				while true do
					loc_2 = shl_i64(loc_1, extend_i64_u32(add_i32(loc_3, 4294967232)))
					loc_1 = i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_3 == 0 then
				break
			end
			loc_4 = extend_i64_u32(loc_3)
			loc_2 = bor_i64(shl_i64(loc_2, loc_4), shr_u64(loc_1, extend_i64_u32(sub_i32(64, loc_3))))
			loc_1 = shl_i64(loc_1, loc_4)
			break
		end
		store_i64(memory_at_0, loc_0, loc_1)
		store_i64(memory_at_0, loc_0 + 8, loc_2)
		break
	end
end
FUNC_LIST[519] = --[[ __divtf3 ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = i64_ZERO
	local loc_11 = i64_ZERO
	local loc_12 = i64_ZERO
	local loc_13 = i64_ZERO
	local loc_14 = i64_ZERO
	local loc_15 = i64_ZERO
	local loc_16 = i64_ZERO
	local loc_17 = i64_ZERO
	local loc_18 = i64_ZERO
	local loc_19 = i64_ZERO
	local loc_20 = i64_ZERO
	local loc_21 = i64_ZERO
	local loc_22 = i64_ZERO
	local loc_23 = i64_ZERO
	local loc_24 = i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 336)
		GLOBAL_LIST[0].value = loc_5
		loc_11 = band_i64(loc_4, i64_from_u32(4294967295, 65535))
		loc_10 = band_i64(loc_2, i64_from_u32(4294967295, 65535))
		loc_12 = band_i64(bxor_i64(loc_2, loc_4), i64_from_u32(0, 2147483648))
		loc_6 = band_i32(wrap_i32_i64(shr_u64(loc_4, i64_from_u32(48, 0))), 32767)
		while true do
			while true do
				loc_9 = band_i32(wrap_i32_i64(shr_u64(loc_2, i64_from_u32(48, 0))), 32767)
				if sub_i32(loc_9, 32767) >= 4294934530 then
					while true do
						if sub_i32(loc_6, 32767) > 4294934529 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_13 = band_i64(loc_2, i64_from_u32(4294967295, 2147483647))
				if (if eq_i64(loc_13, i64_from_u32(0, 2147418112)) then (if eq_i64(loc_1, i64_ZERO) then 1 else 0) else (if lt_u64(loc_13, i64_from_u32(0, 2147418112)) then 1 else 0)) == 0 then
					while true do
						loc_12 = bor_i64(loc_2, i64_from_u32(0, 32768))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = band_i64(loc_4, i64_from_u32(4294967295, 2147483647))
				if (if eq_i64(loc_2, i64_from_u32(0, 2147418112)) then (if eq_i64(loc_3, i64_ZERO) then 1 else 0) else (if lt_u64(loc_2, i64_from_u32(0, 2147418112)) then 1 else 0)) == 0 then
					while true do
						loc_12 = bor_i64(loc_4, i64_from_u32(0, 32768))
						loc_1 = loc_3
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if eq_i64(bor_i64(bxor_i64(loc_13, i64_from_u32(0, 2147418112)), loc_1), i64_ZERO) then
					while true do
						if eq_i64(bor_i64(bxor_i64(loc_2, i64_from_u32(0, 2147418112)), loc_3), i64_ZERO) then
							while true do
								loc_1 = i64_ZERO
								loc_12 = i64_from_u32(0, 2147450880)
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						loc_12 = bor_i64(loc_12, i64_from_u32(0, 2147418112))
						loc_1 = i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if eq_i64(bor_i64(bxor_i64(loc_2, i64_from_u32(0, 2147418112)), loc_3), i64_ZERO) then
					while true do
						loc_1 = i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if eq_i64(bor_i64(loc_1, loc_13), i64_ZERO) then
					while true do
						loc_12 = (if eq_i64(bor_i64(loc_2, loc_3), i64_ZERO) then i64_from_u32(0, 2147450880) else loc_12)
						loc_1 = i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if eq_i64(bor_i64(loc_2, loc_3), i64_ZERO) then
					while true do
						loc_12 = bor_i64(loc_12, i64_from_u32(0, 2147418112))
						loc_1 = i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if le_u64(loc_13, i64_from_u32(4294967295, 65535)) then
					while true do
						loc_7 = (if eq_i64(loc_10, i64_ZERO) then 1 else 0)
						loc_7 = wrap_i32_i64(add_i64(clz_i64((if loc_7 ~= 0 then loc_1 else loc_10)), extend_i64_u32(shl_i32(loc_7, 6))))
						FUNC_LIST[518](add_i32(loc_5, 320), loc_1, loc_10, sub_i32(loc_7, 15))
						loc_7 = sub_i32(16, loc_7)
						loc_10 = load_i64(memory_at_0, loc_5 + 328)
						reg_0 = load_i64(memory_at_0, loc_5 + 320)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = reg_0
				if gt_u64(loc_2, i64_from_u32(4294967295, 65535)) then
					break
				end
				loc_8 = (if eq_i64(loc_11, i64_ZERO) then 1 else 0)
				loc_8 = wrap_i32_i64(add_i64(clz_i64((if loc_8 ~= 0 then loc_3 else loc_11)), extend_i64_u32(shl_i32(loc_8, 6))))
				FUNC_LIST[518](add_i32(loc_5, 304), loc_3, loc_11, sub_i32(loc_8, 15))
				loc_7 = sub_i32(add_i32(loc_7, loc_8), 16)
				loc_11 = load_i64(memory_at_0, loc_5 + 312)
				loc_3 = load_i64(memory_at_0, loc_5 + 304)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_17 = bor_i64(loc_11, i64_from_u32(0, 65536))
			loc_2 = bor_i64(shl_i64(loc_17, i64_from_u32(15, 0)), shr_u64(loc_3, i64_from_u32(49, 0)))
			loc_4 = sub_i64(i64_from_u32(0, 1963258675), loc_2)
			FUNC_LIST[522](add_i32(loc_5, 288), loc_2, i64_ZERO, loc_4, i64_ZERO)
			FUNC_LIST[522](add_i32(loc_5, 272), sub_i64(i64_ZERO, load_i64(memory_at_0, loc_5 + 296)), i64_ZERO, loc_4, i64_ZERO)
			loc_4 = bor_i64(shl_i64(load_i64(memory_at_0, loc_5 + 280), i64_ONE), shr_u64(load_i64(memory_at_0, loc_5 + 272), i64_from_u32(63, 0)))
			FUNC_LIST[522](add_i32(loc_5, 256), loc_4, i64_ZERO, loc_2, i64_ZERO)
			FUNC_LIST[522](add_i32(loc_5, 240), loc_4, i64_ZERO, sub_i64(i64_ZERO, load_i64(memory_at_0, loc_5 + 264)), i64_ZERO)
			loc_4 = bor_i64(shl_i64(load_i64(memory_at_0, loc_5 + 248), i64_ONE), shr_u64(load_i64(memory_at_0, loc_5 + 240), i64_from_u32(63, 0)))
			FUNC_LIST[522](add_i32(loc_5, 224), loc_4, i64_ZERO, loc_2, i64_ZERO)
			FUNC_LIST[522](add_i32(loc_5, 208), loc_4, i64_ZERO, sub_i64(i64_ZERO, load_i64(memory_at_0, loc_5 + 232)), i64_ZERO)
			loc_4 = bor_i64(shl_i64(load_i64(memory_at_0, loc_5 + 216), i64_ONE), shr_u64(load_i64(memory_at_0, loc_5 + 208), i64_from_u32(63, 0)))
			FUNC_LIST[522](add_i32(loc_5, 192), loc_4, i64_ZERO, loc_2, i64_ZERO)
			FUNC_LIST[522](add_i32(loc_5, 176), loc_4, i64_ZERO, sub_i64(i64_ZERO, load_i64(memory_at_0, loc_5 + 200)), i64_ZERO)
			loc_4 = sub_i64(bor_i64(shl_i64(load_i64(memory_at_0, loc_5 + 184), i64_ONE), shr_u64(load_i64(memory_at_0, loc_5 + 176), i64_from_u32(63, 0))), i64_ONE)
			FUNC_LIST[522](add_i32(loc_5, 160), loc_2, i64_ZERO, loc_4, i64_ZERO)
			FUNC_LIST[522](add_i32(loc_5, 144), shl_i64(loc_3, i64_from_u32(15, 0)), i64_ZERO, loc_4, i64_ZERO)
			loc_11 = load_i64(memory_at_0, loc_5 + 160)
			loc_2 = add_i64(loc_11, load_i64(memory_at_0, loc_5 + 152))
			FUNC_LIST[522](add_i32(loc_5, 112), loc_4, i64_ZERO, sub_i64(i64_ZERO, add_i64(add_i64(load_i64(memory_at_0, loc_5 + 168), extend_i64_u32((if lt_u64(loc_2, loc_11) then 1 else 0))), extend_i64_u32((if gt_u64(loc_2, i64_ONE) then 1 else 0)))), i64_ZERO)
			FUNC_LIST[522](add_i32(loc_5, 128), sub_i64(i64_ONE, loc_2), i64_ZERO, loc_4, i64_ZERO)
			loc_6 = add_i32(sub_i32(loc_9, loc_6), loc_7)
			while true do
				loc_18 = load_i64(memory_at_0, loc_5 + 112)
				loc_14 = shl_i64(loc_18, i64_ONE)
				loc_15 = load_i64(memory_at_0, loc_5 + 136)
				loc_13 = add_i64(loc_14, bor_i64(shl_i64(loc_15, i64_ONE), shr_u64(load_i64(memory_at_0, loc_5 + 128), i64_from_u32(63, 0))))
				loc_19 = sub_i64(loc_13, i64_from_u32(13927, 0))
				loc_2 = shr_u64(loc_19, i64_from_u32(32, 0))
				loc_21 = bor_i64(loc_10, i64_from_u32(0, 65536))
				loc_23 = shl_i64(loc_21, i64_ONE)
				loc_4 = shr_u64(loc_23, i64_from_u32(32, 0))
				loc_16 = mul_i64(loc_2, loc_4)
				loc_20 = shl_i64(loc_1, i64_ONE)
				loc_11 = shr_u64(loc_20, i64_from_u32(32, 0))
				loc_18 = sub_i64(add_i64(extend_i64_u32((if gt_u64(loc_13, loc_19) then 1 else 0)), add_i64(extend_i64_u32((if lt_u64(loc_13, loc_14) then 1 else 0)), add_i64(bor_i64(shl_i64(load_i64(memory_at_0, loc_5 + 120), i64_ONE), shr_u64(loc_18, i64_from_u32(63, 0))), shr_u64(loc_15, i64_from_u32(63, 0))))), i64_ONE)
				loc_13 = shr_u64(loc_18, i64_from_u32(32, 0))
				loc_14 = add_i64(loc_16, mul_i64(loc_11, loc_13))
				loc_18 = band_i64(loc_18, i64_from_u32(4294967295, 0))
				loc_24 = shr_u64(loc_1, i64_from_u32(63, 0))
				loc_10 = band_i64(bor_i64(loc_24, shl_i64(loc_10, i64_ONE)), i64_from_u32(4294967295, 0))
				loc_15 = add_i64(mul_i64(loc_18, loc_10), loc_14)
				reg_0 = add_i64(add_i64(extend_i64_u32((if lt_u64(loc_14, loc_16) then 1 else 0)), extend_i64_u32((if gt_u64(loc_14, loc_15) then 1 else 0))), mul_i64(loc_4, loc_13))
				loc_16 = mul_i64(loc_4, loc_18)
				loc_14 = add_i64(loc_16, mul_i64(loc_10, loc_13))
				reg_0 = add_i64(reg_0, bor_i64(shl_i64(extend_i64_u32((if lt_u64(loc_14, loc_16) then 1 else 0)), i64_from_u32(32, 0)), shr_u64(loc_14, i64_from_u32(32, 0))))
				loc_14 = add_i64(shl_i64(loc_14, i64_from_u32(32, 0)), loc_15)
				loc_19 = band_i64(loc_19, i64_from_u32(4294967295, 0))
				loc_16 = mul_i64(loc_10, loc_19)
				reg_0 = add_i64(reg_0, extend_i64_u32((if gt_u64(loc_15, loc_14) then 1 else 0)))
				loc_15 = add_i64(loc_16, mul_i64(loc_2, loc_11))
				reg_2 = extend_i64_u32((if lt_u64(loc_15, loc_16) then 1 else 0))
				loc_16 = band_i64(loc_20, i64_from_u32(4294967294, 0))
				loc_22 = add_i64(mul_i64(loc_16, loc_18), loc_15)
				loc_15 = add_i64(add_i64(reg_2, extend_i64_u32((if gt_u64(loc_15, loc_22) then 1 else 0))), loc_14)
				reg_0 = add_i64(reg_0, extend_i64_u32((if gt_u64(loc_14, loc_15) then 1 else 0)))
				loc_14 = mul_i64(loc_4, loc_19)
				loc_4 = add_i64(loc_14, mul_i64(loc_13, loc_16))
				loc_10 = add_i64(loc_4, mul_i64(loc_2, loc_10))
				loc_13 = add_i64(loc_10, mul_i64(loc_11, loc_18))
				loc_4 = add_i64(bor_i64(shr_u64(loc_13, i64_from_u32(32, 0)), shl_i64(add_i64(extend_i64_u32((if gt_u64(loc_10, loc_13) then 1 else 0)), add_i64(extend_i64_u32((if lt_u64(loc_4, loc_14) then 1 else 0)), extend_i64_u32((if gt_u64(loc_4, loc_10) then 1 else 0)))), i64_from_u32(32, 0))), loc_15)
				loc_2 = mul_i64(loc_2, loc_16)
				loc_10 = add_i64(loc_2, mul_i64(loc_11, loc_19))
				loc_2 = add_i64(bor_i64(shr_u64(loc_10, i64_from_u32(32, 0)), shl_i64(extend_i64_u32((if gt_u64(loc_2, loc_10) then 1 else 0)), i64_from_u32(32, 0))), loc_22)
				loc_2 = add_i64(add_i64(extend_i64_u32((if gt_u64(loc_22, loc_2) then 1 else 0)), extend_i64_u32((if gt_u64(loc_2, add_i64(shl_i64(loc_13, i64_from_u32(32, 0)), loc_2)) then 1 else 0))), loc_4)
				loc_4 = add_i64(add_i64(reg_0, extend_i64_u32((if gt_u64(loc_15, loc_4) then 1 else 0))), extend_i64_u32((if gt_u64(loc_4, loc_2) then 1 else 0)))
				if le_u64(loc_4, i64_from_u32(4294967295, 131071)) then
					while true do
						loc_21 = bor_i64(loc_23, loc_24)
						FUNC_LIST[522](add_i32(loc_5, 80), loc_2, loc_4, loc_3, loc_17)
						reg_0 = sub_i64(shl_i64(loc_1, i64_from_u32(49, 0)), load_i64(memory_at_0, loc_5 + 88))
						loc_1 = load_i64(memory_at_0, loc_5 + 80)
						loc_11 = sub_i64(reg_0, extend_i64_u32((if ne_i64(loc_1, i64_ZERO) then 1 else 0)))
						loc_6 = add_i32(loc_6, 16382)
						reg_0 = sub_i64(i64_ZERO, loc_1)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = bor_i64(shl_i64(loc_4, i64_from_u32(63, 0)), shr_u64(loc_2, i64_ONE))
				loc_4 = shr_u64(loc_4, i64_ONE)
				FUNC_LIST[522](add_i32(loc_5, 96), loc_2, loc_4, loc_3, loc_17)
				loc_10 = load_i64(memory_at_0, loc_5 + 96)
				loc_11 = sub_i64(sub_i64(shl_i64(loc_1, i64_from_u32(48, 0)), load_i64(memory_at_0, loc_5 + 104)), extend_i64_u32((if ne_i64(loc_10, i64_ZERO) then 1 else 0)))
				loc_6 = add_i32(loc_6, 16383)
				loc_20 = loc_1
				reg_0 = sub_i64(i64_ZERO, loc_10)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_10 = reg_0
			if ge_i32(loc_6, 32767) then
				while true do
					loc_12 = bor_i64(loc_12, i64_from_u32(0, 2147418112))
					loc_1 = i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				if gt_i32(loc_6, 0) then
					while true do
						loc_1 = bor_i64(shl_i64(loc_11, i64_ONE), shr_u64(loc_10, i64_from_u32(63, 0)))
						loc_11 = bor_i64(band_i64(loc_4, i64_from_u32(4294967295, 65535)), shl_i64(extend_i64_u32(loc_6), i64_from_u32(48, 0)))
						reg_0 = shl_i64(loc_10, i64_ONE)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if le_i32(loc_6, 4294967183) then
					while true do
						loc_1 = i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[520](sub_i32(loc_5, 4294967232), loc_2, loc_4, sub_i32(1, loc_6))
				FUNC_LIST[518](add_i32(loc_5, 48), loc_20, loc_21, add_i32(loc_6, 112))
				loc_2 = load_i64(memory_at_0, loc_5 + 64)
				loc_11 = load_i64(memory_at_0, loc_5 + 72)
				FUNC_LIST[522](add_i32(loc_5, 32), loc_3, loc_17, loc_2, loc_11)
				loc_1 = load_i64(memory_at_0, loc_5 + 32)
				loc_4 = load_i64(memory_at_0, loc_5 + 48)
				loc_10 = shl_i64(loc_1, i64_ONE)
				loc_1 = sub_i64(sub_i64(load_i64(memory_at_0, loc_5 + 56), bor_i64(shl_i64(load_i64(memory_at_0, loc_5 + 40), i64_ONE), shr_u64(loc_1, i64_from_u32(63, 0)))), extend_i64_u32((if lt_u64(loc_4, loc_10) then 1 else 0)))
				reg_0 = sub_i64(loc_4, loc_10)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = reg_0
			FUNC_LIST[522](add_i32(loc_5, 16), loc_3, loc_17, i64_from_u32(3, 0), i64_ZERO)
			FUNC_LIST[522](loc_5, loc_3, loc_17, i64_from_u32(5, 0), i64_ZERO)
			loc_10 = band_i64(loc_2, i64_ONE)
			loc_4 = add_i64(loc_4, loc_10)
			loc_1 = add_i64(extend_i64_u32((if lt_u64(loc_4, loc_10) then 1 else 0)), loc_1)
			loc_3 = add_i64(extend_i64_u32((if eq_i64(loc_1, loc_17) then (if lt_u64(loc_3, loc_4) then 1 else 0) else (if lt_u64(loc_17, loc_1) then 1 else 0))), loc_2)
			loc_2 = add_i64(extend_i64_u32((if gt_u64(loc_2, loc_3) then 1 else 0)), loc_11)
			reg_1 = loc_2
			reg_3 = (if lt_u64(loc_2, i64_from_u32(0, 2147418112)) then 1 else 0)
			loc_2 = load_i64(memory_at_0, loc_5 + 24)
			loc_2 = add_i64(extend_i64_u32(band_i32(reg_3, (if eq_i64(loc_1, loc_2) then (if lt_u64(load_i64(memory_at_0, loc_5 + 16), loc_4) then 1 else 0) else (if lt_u64(loc_2, loc_1) then 1 else 0)))), loc_3)
			loc_3 = add_i64(reg_1, extend_i64_u32((if gt_u64(loc_3, loc_2) then 1 else 0)))
			reg_4 = (if lt_u64(load_i64(memory_at_0, loc_5), loc_4) then 1 else 0)
			loc_4 = load_i64(memory_at_0, loc_5 + 8)
			loc_1 = add_i64(extend_i64_u32(band_i32((if lt_u64(loc_3, i64_from_u32(0, 2147418112)) then 1 else 0), (if eq_i64(loc_1, loc_4) then reg_4 else (if lt_u64(loc_4, loc_1) then 1 else 0)))), loc_2)
			loc_12 = bor_i64(loc_12, add_i64(loc_3, extend_i64_u32((if gt_u64(loc_2, loc_1) then 1 else 0))))
			break
		end
		store_i64(memory_at_0, loc_0, loc_1)
		store_i64(memory_at_0, loc_0 + 8, loc_12)
		GLOBAL_LIST[0].value = add_i32(loc_5, 336)
		break
	end
end
FUNC_LIST[520] = --[[ __lshrti3 ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = i64_ZERO
	local desired
	while true do
		while true do
			if band_i32(loc_3, 64) ~= 0 then
				while true do
					loc_1 = shr_u64(loc_2, extend_i64_u32(add_i32(loc_3, 4294967232)))
					loc_2 = i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_3 == 0 then
				break
			end
			loc_4 = extend_i64_u32(loc_3)
			loc_1 = bor_i64(shl_i64(loc_2, extend_i64_u32(sub_i32(64, loc_3))), shr_u64(loc_1, loc_4))
			loc_2 = shr_u64(loc_2, loc_4)
			break
		end
		store_i64(memory_at_0, loc_0, loc_1)
		store_i64(memory_at_0, loc_0 + 8, loc_2)
		break
	end
end
FUNC_LIST[521] = --[[ __multf3 ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = i64_ZERO
	local loc_11 = i64_ZERO
	local loc_12 = i64_ZERO
	local loc_13 = i64_ZERO
	local loc_14 = i64_ZERO
	local loc_15 = i64_ZERO
	local loc_16 = i64_ZERO
	local loc_17 = i64_ZERO
	local loc_18 = i64_ZERO
	local loc_19 = i64_ZERO
	local loc_20 = i64_ZERO
	local loc_21 = i64_ZERO
	local loc_22 = i64_ZERO
	local loc_23 = i64_ZERO
	local loc_24 = i64_ZERO
	local reg_0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_5
		loc_12 = band_i64(loc_4, i64_from_u32(4294967295, 65535))
		loc_10 = band_i64(bxor_i64(loc_2, loc_4), i64_from_u32(0, 2147483648))
		loc_13 = band_i64(loc_2, i64_from_u32(4294967295, 65535))
		loc_15 = shr_u64(loc_13, i64_from_u32(32, 0))
		loc_6 = band_i32(wrap_i32_i64(shr_u64(loc_4, i64_from_u32(48, 0))), 32767)
		while true do
			while true do
				loc_8 = band_i32(wrap_i32_i64(shr_u64(loc_2, i64_from_u32(48, 0))), 32767)
				if sub_i32(loc_8, 32767) >= 4294934530 then
					while true do
						if sub_i32(loc_6, 32767) > 4294934529 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_11 = band_i64(loc_2, i64_from_u32(4294967295, 2147483647))
				if (if eq_i64(loc_11, i64_from_u32(0, 2147418112)) then (if eq_i64(loc_1, i64_ZERO) then 1 else 0) else (if lt_u64(loc_11, i64_from_u32(0, 2147418112)) then 1 else 0)) == 0 then
					while true do
						loc_10 = bor_i64(loc_2, i64_from_u32(0, 32768))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = band_i64(loc_4, i64_from_u32(4294967295, 2147483647))
				if (if eq_i64(loc_2, i64_from_u32(0, 2147418112)) then (if eq_i64(loc_3, i64_ZERO) then 1 else 0) else (if lt_u64(loc_2, i64_from_u32(0, 2147418112)) then 1 else 0)) == 0 then
					while true do
						loc_10 = bor_i64(loc_4, i64_from_u32(0, 32768))
						loc_1 = loc_3
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if eq_i64(bor_i64(bxor_i64(loc_11, i64_from_u32(0, 2147418112)), loc_1), i64_ZERO) then
					while true do
						if eq_i64(bor_i64(loc_2, loc_3), i64_ZERO) then
							while true do
								loc_10 = i64_from_u32(0, 2147450880)
								loc_1 = i64_ZERO
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						loc_10 = bor_i64(loc_10, i64_from_u32(0, 2147418112))
						loc_1 = i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if eq_i64(bor_i64(bxor_i64(loc_2, i64_from_u32(0, 2147418112)), loc_3), i64_ZERO) then
					while true do
						loc_2 = bor_i64(loc_1, loc_11)
						loc_1 = i64_ZERO
						if eq_i64(loc_2, i64_ZERO) then
							while true do
								loc_10 = i64_from_u32(0, 2147450880)
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						loc_10 = bor_i64(loc_10, i64_from_u32(0, 2147418112))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if eq_i64(bor_i64(loc_1, loc_11), i64_ZERO) then
					while true do
						loc_1 = i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if eq_i64(bor_i64(loc_2, loc_3), i64_ZERO) then
					while true do
						loc_1 = i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if le_u64(loc_11, i64_from_u32(4294967295, 65535)) then
					while true do
						loc_7 = (if eq_i64(loc_13, i64_ZERO) then 1 else 0)
						loc_7 = wrap_i32_i64(add_i64(clz_i64((if loc_7 ~= 0 then loc_1 else loc_13)), extend_i64_u32(shl_i32(loc_7, 6))))
						FUNC_LIST[518](add_i32(loc_5, 80), loc_1, loc_13, sub_i32(loc_7, 15))
						loc_7 = sub_i32(16, loc_7)
						loc_13 = load_i64(memory_at_0, loc_5 + 88)
						loc_15 = shr_u64(loc_13, i64_from_u32(32, 0))
						reg_0 = load_i64(memory_at_0, loc_5 + 80)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = reg_0
				if gt_u64(loc_2, i64_from_u32(4294967295, 65535)) then
					break
				end
				loc_9 = (if eq_i64(loc_12, i64_ZERO) then 1 else 0)
				loc_9 = wrap_i32_i64(add_i64(clz_i64((if loc_9 ~= 0 then loc_3 else loc_12)), extend_i64_u32(shl_i32(loc_9, 6))))
				FUNC_LIST[518](sub_i32(loc_5, 4294967232), loc_3, loc_12, sub_i32(loc_9, 15))
				loc_7 = add_i32(sub_i32(loc_7, loc_9), 16)
				loc_12 = load_i64(memory_at_0, loc_5 + 72)
				loc_3 = load_i64(memory_at_0, loc_5 + 64)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_11 = shl_i64(loc_3, i64_from_u32(15, 0))
			loc_2 = band_i64(loc_11, i64_from_u32(4294934528, 0))
			loc_4 = shr_u64(loc_1, i64_from_u32(32, 0))
			loc_17 = mul_i64(loc_2, loc_4)
			loc_11 = shr_u64(loc_11, i64_from_u32(32, 0))
			loc_1 = band_i64(loc_1, i64_from_u32(4294967295, 0))
			loc_16 = add_i64(loc_17, mul_i64(loc_11, loc_1))
			loc_18 = shl_i64(loc_16, i64_from_u32(32, 0))
			loc_14 = add_i64(loc_18, mul_i64(loc_1, loc_2))
			loc_13 = band_i64(loc_13, i64_from_u32(4294967295, 0))
			loc_21 = mul_i64(loc_13, loc_2)
			reg_0 = extend_i64_u32((if lt_u64(loc_14, loc_18) then 1 else 0))
			loc_18 = add_i64(loc_21, mul_i64(loc_4, loc_11))
			loc_19 = shl_i64(loc_12, i64_from_u32(15, 0))
			loc_3 = band_i64(bor_i64(loc_19, shr_u64(loc_3, i64_from_u32(49, 0))), i64_from_u32(4294967295, 0))
			loc_20 = add_i64(loc_18, mul_i64(loc_1, loc_3))
			loc_16 = add_i64(loc_20, bor_i64(shl_i64(extend_i64_u32((if lt_u64(loc_16, loc_17) then 1 else 0)), i64_from_u32(32, 0)), shr_u64(loc_16, i64_from_u32(32, 0))))
			loc_12 = bor_i64(loc_15, i64_from_u32(65536, 0))
			loc_22 = mul_i64(loc_12, loc_2)
			loc_15 = add_i64(loc_22, mul_i64(loc_11, loc_13))
			loc_2 = bor_i64(shr_u64(loc_19, i64_from_u32(32, 0)), i64_from_u32(2147483648, 0))
			loc_17 = add_i64(loc_15, mul_i64(loc_1, loc_2))
			loc_19 = add_i64(loc_17, mul_i64(loc_3, loc_4))
			loc_23 = add_i64(loc_16, shl_i64(loc_19, i64_from_u32(32, 0)))
			loc_1 = add_i64(reg_0, loc_23)
			loc_6 = sub_i32(add_i32(loc_7, add_i32(loc_6, loc_8)), 16383)
			while true do
				loc_24 = mul_i64(loc_2, loc_4)
				loc_4 = add_i64(loc_24, mul_i64(loc_11, loc_12))
				loc_11 = add_i64(mul_i64(loc_3, loc_13), loc_4)
				reg_0 = add_i64(add_i64(extend_i64_u32((if lt_u64(loc_4, loc_24) then 1 else 0)), extend_i64_u32((if gt_u64(loc_4, loc_11) then 1 else 0))), mul_i64(loc_2, loc_12))
				loc_4 = add_i64(add_i64(extend_i64_u32((if lt_u64(loc_18, loc_21) then 1 else 0)), extend_i64_u32((if gt_u64(loc_18, loc_20) then 1 else 0))), loc_11)
				loc_3 = mul_i64(loc_3, loc_12)
				loc_2 = add_i64(loc_3, mul_i64(loc_2, loc_13))
				reg_0 = add_i64(add_i64(reg_0, extend_i64_u32((if gt_u64(loc_11, loc_4) then 1 else 0))), bor_i64(shl_i64(extend_i64_u32((if lt_u64(loc_2, loc_3) then 1 else 0)), i64_from_u32(32, 0)), shr_u64(loc_2, i64_from_u32(32, 0))))
				loc_2 = add_i64(shl_i64(loc_2, i64_from_u32(32, 0)), loc_4)
				reg_0 = add_i64(reg_0, extend_i64_u32((if gt_u64(loc_4, loc_2) then 1 else 0)))
				loc_4 = add_i64(bor_i64(shl_i64(add_i64(extend_i64_u32((if gt_u64(loc_17, loc_19) then 1 else 0)), add_i64(extend_i64_u32((if lt_u64(loc_15, loc_22) then 1 else 0)), extend_i64_u32((if gt_u64(loc_15, loc_17) then 1 else 0)))), i64_from_u32(32, 0)), shr_u64(loc_19, i64_from_u32(32, 0))), loc_2)
				reg_0 = add_i64(reg_0, extend_i64_u32((if gt_u64(loc_2, loc_4) then 1 else 0)))
				loc_2 = add_i64(add_i64(extend_i64_u32((if lt_u64(loc_16, loc_20) then 1 else 0)), extend_i64_u32((if gt_u64(loc_16, loc_23) then 1 else 0))), loc_4)
				loc_4 = add_i64(reg_0, extend_i64_u32((if gt_u64(loc_4, loc_2) then 1 else 0)))
				if ne_i64(band_i64(loc_4, i64_from_u32(0, 65536)), i64_ZERO) then
					while true do
						loc_6 = add_i32(loc_6, 1)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_3 = shr_u64(loc_14, i64_from_u32(63, 0))
				loc_4 = bor_i64(shl_i64(loc_4, i64_ONE), shr_u64(loc_2, i64_from_u32(63, 0)))
				loc_2 = bor_i64(shl_i64(loc_2, i64_ONE), shr_u64(loc_1, i64_from_u32(63, 0)))
				loc_14 = shl_i64(loc_14, i64_ONE)
				loc_1 = bor_i64(shl_i64(loc_1, i64_ONE), loc_3)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if ge_i32(loc_6, 32767) then
				while true do
					loc_10 = bor_i64(loc_10, i64_from_u32(0, 2147418112))
					loc_1 = i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				if le_i32(loc_6, 0) then
					while true do
						loc_8 = sub_i32(1, loc_6)
						if loc_8 <= 127 then
							while true do
								loc_6 = add_i32(loc_6, 127)
								FUNC_LIST[518](add_i32(loc_5, 48), loc_14, loc_1, loc_6)
								FUNC_LIST[518](add_i32(loc_5, 32), loc_2, loc_4, loc_6)
								FUNC_LIST[520](add_i32(loc_5, 16), loc_14, loc_1, loc_8)
								FUNC_LIST[520](loc_5, loc_2, loc_4, loc_8)
								loc_14 = bor_i64(extend_i64_u32((if ne_i64(bor_i64(load_i64(memory_at_0, loc_5 + 48), load_i64(memory_at_0, loc_5 + 56)), i64_ZERO) then 1 else 0)), bor_i64(load_i64(memory_at_0, loc_5 + 32), load_i64(memory_at_0, loc_5 + 16)))
								loc_1 = bor_i64(load_i64(memory_at_0, loc_5 + 40), load_i64(memory_at_0, loc_5 + 24))
								loc_2 = load_i64(memory_at_0, loc_5)
								reg_0 = load_i64(memory_at_0, loc_5 + 8)
								desired = 2
								break
							end
							if desired then
								break
							end
						end
						loc_1 = i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = bor_i64(band_i64(loc_4, i64_from_u32(4294967295, 65535)), shl_i64(extend_i64_u32(loc_6), i64_from_u32(48, 0)))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = reg_0
			loc_10 = bor_i64(loc_4, loc_10)
			if (if eq_i64(loc_1, i64_from_u32(0, 2147483648)) then (if eq_i64(loc_14, i64_ZERO) then 1 else 0) else (if ge_i64(loc_1, i64_ZERO) then 1 else 0)) == 0 then
				while true do
					loc_1 = add_i64(loc_2, i64_ONE)
					loc_10 = add_i64(extend_i64_u32((if eq_i64(loc_1, i64_ZERO) then 1 else 0)), loc_10)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if ne_i64(bor_i64(bxor_i64(loc_1, i64_from_u32(0, 2147483648)), loc_14), i64_ZERO) then
				while true do
					loc_1 = loc_2
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = add_i64(band_i64(loc_2, i64_ONE), loc_2)
			loc_10 = add_i64(extend_i64_u32((if gt_u64(loc_2, loc_1) then 1 else 0)), loc_10)
			break
		end
		store_i64(memory_at_0, loc_0, loc_1)
		store_i64(memory_at_0, loc_0 + 8, loc_10)
		GLOBAL_LIST[0].value = add_i32(loc_5, 96)
		break
	end
end
FUNC_LIST[522] = --[[ __multi3 ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = i64_ZERO
	local reg_0
	local reg_1
	while true do
		reg_1 = add_i64(mul_i64(loc_1, loc_4), mul_i64(loc_2, loc_3))
		loc_2 = shr_u64(loc_3, i64_from_u32(32, 0))
		loc_4 = shr_u64(loc_1, i64_from_u32(32, 0))
		loc_3 = band_i64(loc_3, i64_from_u32(4294967295, 0))
		loc_1 = band_i64(loc_1, i64_from_u32(4294967295, 0))
		loc_5 = mul_i64(loc_3, loc_1)
		loc_3 = add_i64(shr_u64(loc_5, i64_from_u32(32, 0)), mul_i64(loc_3, loc_4))
		loc_1 = add_i64(mul_i64(loc_1, loc_2), band_i64(loc_3, i64_from_u32(4294967295, 0)))
		store_i64(memory_at_0, loc_0 + 8, add_i64(add_i64(add_i64(reg_1, mul_i64(loc_2, loc_4)), shr_u64(loc_3, i64_from_u32(32, 0))), shr_u64(loc_1, i64_from_u32(32, 0))))
		store_i64(memory_at_0, loc_0, bor_i64(band_i64(loc_5, i64_from_u32(4294967295, 0)), shl_i64(loc_1, i64_from_u32(32, 0))))
		break
	end
end
FUNC_LIST[523] = --[[ stackSave ]] function()
	local reg_0
	while true do
		reg_0 = GLOBAL_LIST[0].value
		break
	end
	return reg_0
end
FUNC_LIST[524] = --[[ stackRestore ]] function(loc_0)
	while true do
		GLOBAL_LIST[0].value = loc_0
		break
	end
end
FUNC_LIST[525] = --[[ stackAlloc ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = band_i32(sub_i32(GLOBAL_LIST[0].value, loc_0), 4294967280)
		GLOBAL_LIST[0].value = loc_1
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[526] = --[[ __fe_getround ]] function()
	local reg_0
	while true do
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[527] = --[[ __addtf3 ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = i64_ZERO
	local loc_6 = i64_ZERO
	local loc_7 = i64_ZERO
	local loc_8 = i64_ZERO
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_10 = sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_10
		loc_6 = band_i64(loc_4, i64_from_u32(4294967295, 2147483647))
		while true do
			while true do
				loc_9 = (if eq_i64(loc_1, i64_ZERO) then 1 else 0)
				loc_5 = band_i64(loc_2, i64_from_u32(4294967295, 2147483647))
				if (if eq_i64(loc_5, i64_ZERO) then loc_9 else (if lt_u64(sub_i64(loc_5, i64_from_u32(0, 2147418112)), i64_from_u32(0, 2147549184)) then 1 else 0)) == 0 then
					while true do
						loc_8 = sub_i64(loc_6, i64_from_u32(0, 2147418112))
						if (if eq_i64(loc_8, i64_from_u32(0, 2147549184)) then (if ne_i64(loc_3, i64_ZERO) then 1 else 0) else (if gt_u64(loc_8, i64_from_u32(0, 2147549184)) then 1 else 0)) ~= 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if (if eq_i64(loc_5, i64_from_u32(0, 2147418112)) then loc_9 else (if lt_u64(loc_5, i64_from_u32(0, 2147418112)) then 1 else 0)) == 0 then
					while true do
						loc_4 = bor_i64(loc_2, i64_from_u32(0, 32768))
						loc_3 = loc_1
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if (if eq_i64(loc_6, i64_from_u32(0, 2147418112)) then (if eq_i64(loc_3, i64_ZERO) then 1 else 0) else (if lt_u64(loc_6, i64_from_u32(0, 2147418112)) then 1 else 0)) == 0 then
					while true do
						loc_4 = bor_i64(loc_4, i64_from_u32(0, 32768))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if eq_i64(bor_i64(bxor_i64(loc_5, i64_from_u32(0, 2147418112)), loc_1), i64_ZERO) then
					while true do
						loc_9 = (if eq_i64(bor_i64(bxor_i64(loc_1, loc_3), bxor_i64(bxor_i64(loc_2, loc_4), i64_from_u32(0, 2147483648))), i64_ZERO) then 1 else 0)
						loc_4 = (if loc_9 ~= 0 then i64_from_u32(0, 2147450880) else loc_2)
						loc_3 = (if loc_9 ~= 0 then i64_ZERO else loc_1)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if eq_i64(bor_i64(bxor_i64(loc_6, i64_from_u32(0, 2147418112)), loc_3), i64_ZERO) then
					desired = 1
					break
				end
				if eq_i64(bor_i64(loc_1, loc_5), i64_ZERO) then
					while true do
						if ne_i64(bor_i64(loc_3, loc_6), i64_ZERO) then
							desired = 1
							break
						end
						loc_3 = band_i64(loc_1, loc_3)
						loc_4 = band_i64(loc_2, loc_4)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if ne_i64(bor_i64(loc_3, loc_6), i64_ZERO) then
					break
				end
				loc_3 = loc_1
				loc_4 = loc_2
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_11 = (if eq_i64(loc_5, loc_6) then (if lt_u64(loc_1, loc_3) then 1 else 0) else (if lt_u64(loc_5, loc_6) then 1 else 0))
			loc_6 = (if loc_11 ~= 0 then loc_3 else loc_1)
			loc_8 = (if loc_11 ~= 0 then loc_4 else loc_2)
			loc_5 = band_i64(loc_8, i64_from_u32(4294967295, 65535))
			loc_7 = (if loc_11 ~= 0 then loc_2 else loc_4)
			loc_12 = band_i32(wrap_i32_i64(shr_u64(loc_7, i64_from_u32(48, 0))), 32767)
			loc_9 = band_i32(wrap_i32_i64(shr_u64(loc_8, i64_from_u32(48, 0))), 32767)
			if loc_9 ~= 0 then
				while true do
					reg_0 = loc_5
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					loc_9 = (if eq_i64(loc_5, i64_ZERO) then 1 else 0)
					loc_9 = wrap_i32_i64(add_i64(clz_i64((if loc_9 ~= 0 then loc_6 else loc_5)), extend_i64_u32(shl_i32(loc_9, 6))))
					FUNC_LIST[518](add_i32(loc_10, 96), loc_6, loc_5, sub_i32(loc_9, 15))
					loc_9 = sub_i32(16, loc_9)
					loc_6 = load_i64(memory_at_0, loc_10 + 96)
					reg_0 = load_i64(memory_at_0, loc_10 + 104)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_5 = reg_0
			loc_3 = (if loc_11 ~= 0 then loc_1 else loc_3)
			loc_1 = band_i64(loc_7, i64_from_u32(4294967295, 65535))
			if loc_12 ~= 0 then
				while true do
					reg_0 = loc_1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					loc_11 = (if eq_i64(loc_1, i64_ZERO) then 1 else 0)
					loc_11 = wrap_i32_i64(add_i64(clz_i64((if loc_11 ~= 0 then loc_3 else loc_1)), extend_i64_u32(shl_i32(loc_11, 6))))
					FUNC_LIST[518](add_i32(loc_10, 80), loc_3, loc_1, sub_i32(loc_11, 15))
					loc_12 = sub_i32(16, loc_11)
					loc_3 = load_i64(memory_at_0, loc_10 + 80)
					reg_0 = load_i64(memory_at_0, loc_10 + 88)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = reg_0
			loc_1 = bor_i64(bor_i64(shl_i64(loc_1, i64_from_u32(3, 0)), shr_u64(loc_3, i64_from_u32(61, 0))), i64_from_u32(0, 524288))
			loc_7 = bor_i64(shl_i64(loc_5, i64_from_u32(3, 0)), shr_u64(loc_6, i64_from_u32(61, 0)))
			loc_5 = shl_i64(loc_3, i64_from_u32(3, 0))
			loc_3 = bxor_i64(loc_2, loc_4)
			while true do
				if loc_9 == loc_12 then
					break
				end
				loc_11 = sub_i32(loc_9, loc_12)
				if loc_11 > 127 then
					while true do
						loc_1 = i64_ZERO
						loc_5 = i64_ONE
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[518](sub_i32(loc_10, 4294967232), loc_5, loc_1, sub_i32(128, loc_11))
				FUNC_LIST[520](add_i32(loc_10, 48), loc_5, loc_1, loc_11)
				loc_5 = bor_i64(load_i64(memory_at_0, loc_10 + 48), extend_i64_u32((if ne_i64(bor_i64(load_i64(memory_at_0, loc_10 + 64), load_i64(memory_at_0, loc_10 + 72)), i64_ZERO) then 1 else 0)))
				loc_1 = load_i64(memory_at_0, loc_10 + 56)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = bor_i64(loc_7, i64_from_u32(0, 524288))
			loc_6 = shl_i64(loc_6, i64_from_u32(3, 0))
			while true do
				if lt_i64(loc_3, i64_ZERO) then
					while true do
						loc_3 = i64_ZERO
						loc_4 = i64_ZERO
						if eq_i64(bor_i64(bxor_i64(loc_5, loc_6), bxor_i64(loc_1, loc_7)), i64_ZERO) then
							desired = 1
							break
						end
						loc_2 = sub_i64(loc_6, loc_5)
						loc_4 = sub_i64(sub_i64(loc_7, loc_1), extend_i64_u32((if gt_u64(loc_5, loc_6) then 1 else 0)))
						if gt_u64(loc_4, i64_from_u32(4294967295, 524287)) then
							desired = 2
							break
						end
						loc_11 = (if eq_i64(loc_4, i64_ZERO) then 1 else 0)
						loc_11 = sub_i32(wrap_i32_i64(add_i64(clz_i64((if loc_11 ~= 0 then loc_2 else loc_4)), extend_i64_u32(shl_i32(loc_11, 6)))), 12)
						FUNC_LIST[518](add_i32(loc_10, 32), loc_2, loc_4, loc_11)
						loc_9 = sub_i32(loc_9, loc_11)
						loc_4 = load_i64(memory_at_0, loc_10 + 40)
						loc_2 = load_i64(memory_at_0, loc_10 + 32)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = add_i64(loc_5, loc_6)
				loc_4 = add_i64(extend_i64_u32((if gt_u64(loc_5, loc_2) then 1 else 0)), add_i64(loc_1, loc_7))
				if eq_i64(band_i64(loc_4, i64_from_u32(0, 1048576)), i64_ZERO) then
					break
				end
				loc_2 = bor_i64(band_i64(loc_5, i64_ONE), bor_i64(shl_i64(loc_4, i64_from_u32(63, 0)), shr_u64(loc_2, i64_ONE)))
				loc_9 = add_i32(loc_9, 1)
				loc_4 = shr_u64(loc_4, i64_ONE)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = band_i64(loc_8, i64_from_u32(0, 2147483648))
			if ge_i32(loc_9, 32767) then
				while true do
					loc_4 = bor_i64(loc_5, i64_from_u32(0, 2147418112))
					loc_3 = i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_11 = 0
			while true do
				if gt_i32(loc_9, 0) then
					while true do
						loc_11 = loc_9
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[518](add_i32(loc_10, 16), loc_2, loc_4, add_i32(loc_9, 127))
				FUNC_LIST[520](loc_10, loc_2, loc_4, sub_i32(1, loc_9))
				loc_2 = bor_i64(load_i64(memory_at_0, loc_10), extend_i64_u32((if ne_i64(bor_i64(load_i64(memory_at_0, loc_10 + 16), load_i64(memory_at_0, loc_10 + 24)), i64_ZERO) then 1 else 0)))
				loc_4 = load_i64(memory_at_0, loc_10 + 8)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = bor_i64(shl_i64(loc_4, i64_from_u32(61, 0)), shr_u64(loc_2, i64_from_u32(3, 0)))
			loc_4 = bor_i64(loc_5, bor_i64(band_i64(shr_u64(loc_4, i64_from_u32(3, 0)), i64_from_u32(4294967295, 65535)), shl_i64(extend_i64_u32(loc_11), i64_from_u32(48, 0))))
			loc_9 = band_i32(wrap_i32_i64(loc_2), 7)
			while true do
				while true do
					while true do
						while true do
							while true do
								reg_0 = FUNC_LIST[526]()
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 0, 1, 2, }
									end)()
								end
								temp = br_map[1][reg_0] or 3
								if temp < 2 then
									if temp < 1 then
										break
									else
										desired = 5
										break
									end
								elseif temp > 2 then
									desired = 3
									break
								else
									desired = 4
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_9 ~= 4 then
								while true do
									loc_5 = add_i64(extend_i64_u32((if loc_9 > 4 then 1 else 0)), loc_3)
									loc_4 = add_i64(extend_i64_u32((if gt_u64(loc_3, loc_5) then 1 else 0)), loc_4)
									loc_3 = loc_5
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_5 = add_i64(band_i64(loc_3, i64_ONE), loc_3)
							loc_4 = add_i64(extend_i64_u32((if gt_u64(loc_3, loc_5) then 1 else 0)), loc_4)
							loc_3 = loc_5
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = add_i64(extend_i64_u32(band_i32((if loc_9 ~= 0 then 1 else 0), (if ne_i64(loc_5, i64_ZERO) then 1 else 0))), loc_3)
						loc_4 = add_i64(extend_i64_u32((if gt_u64(loc_3, loc_5) then 1 else 0)), loc_4)
						loc_3 = loc_5
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_5 = add_i64(extend_i64_u32(band_i32((if eq_i64(loc_5, i64_ZERO) then 1 else 0), (if loc_9 ~= 0 then 1 else 0))), loc_3)
					loc_4 = add_i64(extend_i64_u32((if gt_u64(loc_3, loc_5) then 1 else 0)), loc_4)
					loc_3 = loc_5
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_9 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[526]()
			break
		end
		store_i64(memory_at_0, loc_0, loc_3)
		store_i64(memory_at_0, loc_0 + 8, loc_4)
		GLOBAL_LIST[0].value = add_i32(loc_10, 112)
		break
	end
end
FUNC_LIST[528] = --[[ __subtf3 ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		FUNC_LIST[527](loc_5, loc_1, loc_2, loc_3, bxor_i64(loc_4, i64_from_u32(0, 2147483648)))
		loc_4 = load_i64(memory_at_0, loc_5)
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_5 + 8))
		store_i64(memory_at_0, loc_0, loc_4)
		GLOBAL_LIST[0].value = add_i32(loc_5, 16)
		break
	end
end
FUNC_LIST[529] = --[[ __trunctfdf2 ]] function(loc_0, loc_1)
	local loc_2 = i64_ZERO
	local loc_3 = i64_ZERO
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		while true do
			loc_2 = band_i64(loc_1, i64_from_u32(4294967295, 2147483647))
			if lt_u64(sub_i64(loc_2, i64_from_u32(0, 1006698496)), sub_i64(loc_2, i64_from_u32(0, 1140785152))) then
				while true do
					loc_2 = bor_i64(shl_i64(loc_1, i64_from_u32(4, 0)), shr_u64(loc_0, i64_from_u32(60, 0)))
					loc_0 = band_i64(loc_0, i64_from_u32(4294967295, 268435455))
					if ge_u64(loc_0, i64_from_u32(1, 134217728)) then
						while true do
							loc_3 = add_i64(loc_2, i64_from_u32(1, 1073741824))
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					loc_3 = sub_i64(loc_2, i64_from_u32(0, 3221225472))
					if ne_i64(loc_0, i64_from_u32(0, 134217728)) then
						desired = 1
						break
					end
					loc_3 = add_i64(band_i64(loc_2, i64_ONE), loc_3)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if (if eq_i64(loc_2, i64_from_u32(0, 2147418112)) then (if eq_i64(loc_0, i64_ZERO) then 1 else 0) else (if lt_u64(loc_2, i64_from_u32(0, 2147418112)) then 1 else 0)) == 0 then
				while true do
					loc_3 = bor_i64(band_i64(bor_i64(shl_i64(loc_1, i64_from_u32(4, 0)), shr_u64(loc_0, i64_from_u32(60, 0))), i64_from_u32(4294967295, 524287)), i64_from_u32(0, 2146959360))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = i64_from_u32(0, 2146435072)
			if gt_u64(loc_2, i64_from_u32(4294967295, 1140785151)) then
				break
			end
			loc_3 = i64_ZERO
			loc_5 = wrap_i32_i64(shr_u64(loc_2, i64_from_u32(48, 0)))
			if loc_5 < 15249 then
				break
			end
			loc_2 = bor_i64(band_i64(loc_1, i64_from_u32(4294967295, 65535)), i64_from_u32(0, 65536))
			FUNC_LIST[518](add_i32(loc_4, 16), loc_0, loc_2, sub_i32(loc_5, 15233))
			FUNC_LIST[520](loc_4, loc_0, loc_2, sub_i32(15361, loc_5))
			loc_2 = load_i64(memory_at_0, loc_4)
			loc_3 = bor_i64(shl_i64(load_i64(memory_at_0, loc_4 + 8), i64_from_u32(4, 0)), shr_u64(loc_2, i64_from_u32(60, 0)))
			loc_2 = bor_i64(extend_i64_u32((if ne_i64(bor_i64(load_i64(memory_at_0, loc_4 + 16), load_i64(memory_at_0, loc_4 + 24)), i64_ZERO) then 1 else 0)), band_i64(loc_2, i64_from_u32(4294967295, 268435455)))
			if ge_u64(loc_2, i64_from_u32(1, 134217728)) then
				while true do
					loc_3 = add_i64(loc_3, i64_ONE)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if ne_i64(loc_2, i64_from_u32(0, 134217728)) then
				break
			end
			loc_3 = add_i64(loc_3, band_i64(loc_3, i64_ONE))
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		reg_0 = reinterpret_f64_i64(bor_i64(band_i64(loc_1, i64_from_u32(0, 2147483648)), loc_3))
		break
	end
	return reg_0
end
FUNC_LIST[530] = --[[ __extendsftf2 ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local loc_6 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		while true do
			loc_4 = reinterpret_i32_f32(loc_1)
			loc_2 = band_i32(loc_4, 2147483647)
			if sub_i32(loc_2, 8388608) <= 2130706431 then
				while true do
					reg_0 = add_i64(shl_i64(extend_i64_u32(loc_2), i64_from_u32(25, 0)), i64_from_u32(0, 1065353216))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_2 >= 2139095040 then
				while true do
					reg_0 = bor_i64(shl_i64(extend_i64_u32(loc_4), i64_from_u32(25, 0)), i64_from_u32(0, 2147418112))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_2 == 0 then
				while true do
					reg_0 = i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_1 = extend_i64_u32(loc_2)
			loc_2 = clz_i32(loc_2)
			FUNC_LIST[518](loc_3, reg_1, i64_ZERO, add_i32(loc_2, 81))
			loc_5 = load_i64(memory_at_0, loc_3)
			reg_0 = bor_i64(bxor_i64(load_i64(memory_at_0, loc_3 + 8), i64_from_u32(0, 65536)), shl_i64(extend_i64_u32(sub_i32(16265, loc_2)), i64_from_u32(48, 0)))
			break
		end
		loc_6 = reg_0
		store_i64(memory_at_0, loc_0, loc_5)
		store_i64(memory_at_0, loc_0 + 8, bor_i64(shl_i64(extend_i64_u32(band_i32(loc_4, 2147483648)), i64_from_u32(32, 0)), loc_6))
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[531] = --[[ __floatsitf ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		reg_0 = loc_0
		while true do
			if loc_1 == 0 then
				while true do
					reg_1 = i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = shr_i32(loc_1, 31)
			loc_2 = sub_i32(bxor_i32(loc_2, loc_1), loc_2)
			reg_2 = extend_i64_u32(loc_2)
			loc_2 = clz_i32(loc_2)
			FUNC_LIST[518](loc_3, reg_2, i64_ZERO, add_i32(loc_2, 81))
			loc_4 = bor_i64(add_i64(bxor_i64(load_i64(memory_at_0, loc_3 + 8), i64_from_u32(0, 65536)), shl_i64(extend_i64_u32(sub_i32(16414, loc_2)), i64_from_u32(48, 0))), shl_i64(extend_i64_u32(band_i32(loc_1, 2147483648)), i64_from_u32(32, 0)))
			reg_1 = load_i64(memory_at_0, loc_3)
			break
		end
		store_i64(memory_at_0, reg_0, reg_1)
		store_i64(memory_at_0, loc_0 + 8, loc_4)
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[532] = --[[ __extenddftf2 ]] function(loc_0, loc_1)
	local loc_2 = i64_ZERO
	local loc_3 = i64_ZERO
	local loc_4 = i64_ZERO
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		while true do
			loc_4 = reinterpret_i64_f64(loc_1)
			loc_2 = band_i64(loc_4, i64_from_u32(4294967295, 2147483647))
			if le_u64(sub_i64(loc_2, i64_from_u32(0, 1048576)), i64_from_u32(4294967295, 2145386495)) then
				while true do
					loc_3 = shl_i64(loc_2, i64_from_u32(60, 0))
					reg_0 = add_i64(shr_u64(loc_2, i64_from_u32(4, 0)), i64_from_u32(0, 1006632960))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if ge_u64(loc_2, i64_from_u32(0, 2146435072)) then
				while true do
					loc_3 = shl_i64(loc_4, i64_from_u32(60, 0))
					reg_0 = bor_i64(shr_u64(loc_4, i64_from_u32(4, 0)), i64_from_u32(0, 2147418112))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if eq_i64(loc_2, i64_ZERO) then
				while true do
					reg_0 = i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_6 = (if lt_u64(loc_2, i64_from_u32(0, 1)) then add_i32(clz_i32(wrap_i32_i64(loc_2)), 32) else clz_i32(wrap_i32_i64(shr_u64(loc_2, i64_from_u32(32, 0)))))
			FUNC_LIST[518](loc_5, loc_2, i64_ZERO, add_i32(loc_6, 49))
			loc_3 = load_i64(memory_at_0, loc_5)
			reg_0 = bor_i64(bxor_i64(load_i64(memory_at_0, loc_5 + 8), i64_from_u32(0, 65536)), shl_i64(extend_i64_u32(sub_i32(15372, loc_6)), i64_from_u32(48, 0)))
			break
		end
		loc_2 = reg_0
		store_i64(memory_at_0, loc_0, loc_3)
		store_i64(memory_at_0, loc_0 + 8, bor_i64(band_i64(loc_4, i64_from_u32(0, 2147483648)), loc_2))
		GLOBAL_LIST[0].value = add_i32(loc_5, 16)
		break
	end
end
FUNC_LIST[533] = --[[ __floatunsitf ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		reg_0 = loc_0
		while true do
			if loc_1 == 0 then
				while true do
					reg_1 = i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_2 = extend_i64_u32(loc_1)
			loc_1 = clz_i32(loc_1)
			FUNC_LIST[518](loc_2, reg_2, i64_ZERO, sub_i32(112, bxor_i32(loc_1, 31)))
			loc_3 = add_i64(bxor_i64(load_i64(memory_at_0, loc_2 + 8), i64_from_u32(0, 65536)), shl_i64(extend_i64_u32(sub_i32(16414, loc_1)), i64_from_u32(48, 0)))
			reg_1 = load_i64(memory_at_0, loc_2)
			break
		end
		store_i64(memory_at_0, reg_0, reg_1)
		store_i64(memory_at_0, loc_0 + 8, loc_3)
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		break
	end
end
FUNC_LIST[534] = --[[ set_flag ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				loc_3 = load_i32(memory_at_0, 48284)
				if loc_3 ~= 0 then
					while true do
						loc_2 = load_i32_u8(memory_at_0, loc_0 + 11)
						loc_4 = extend_i32_n8(loc_2)
						loc_2 = (if lt_i32(loc_4, 0) then load_i32(memory_at_0, loc_0 + 4) else loc_2)
						while true do
							if lt_i32(loc_4, 0) then
								while true do
									loc_5 = (if loc_2 == 4294967295 then 1 else 0)
									while true do
										loc_4 = load_i32(memory_at_0, loc_3 + 4)
										reg_0 = FUNC_LIST[504](loc_4)
										if reg_0 == loc_2 then
											while true do
												if loc_5 ~= 0 then
													desired = 2
													break
												end
												reg_0 = FUNC_LIST[535](load_i32(memory_at_0, loc_0), loc_4, loc_2)
												if reg_0 == 0 then
													desired = 1
													break
												end
												break
											end
											if desired then
												if desired == 6 then
													desired = nil
													continue
												end
												break
											end
										end
										loc_3 = load_i32(memory_at_0, loc_3 + 8)
										if loc_3 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_5 = (if loc_2 ~= 4294967295 then 1 else 0)
							while true do
								loc_4 = load_i32(memory_at_0, loc_3 + 4)
								reg_0 = FUNC_LIST[504](loc_4)
								if reg_0 == loc_2 then
									while true do
										if loc_5 == 0 then
											desired = 2
											break
										end
										reg_0 = FUNC_LIST[535](loc_0, loc_4, loc_2)
										if reg_0 == 0 then
											desired = 1
											break
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								end
								loc_3 = load_i32(memory_at_0, loc_3 + 8)
								if loc_3 ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							break
						end
						reg_0 = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = reg_0
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[536](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32_n8(memory_at_0, loc_3, loc_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[535] = --[[ memcmp ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				if loc_2 >= 4 then
					while true do
						if band_i32(bor_i32(loc_0, loc_1), 3) ~= 0 then
							desired = 2
							break
						end
						while true do
							if load_i32(memory_at_0, loc_0) ~= load_i32(memory_at_0, loc_1) then
								desired = 2
								break
							end
							loc_1 = add_i32(loc_1, 4)
							loc_0 = add_i32(loc_0, 4)
							loc_2 = sub_i32(loc_2, 4)
							if loc_2 > 3 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_2 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_3 = load_i32_u8(memory_at_0, loc_0)
				loc_4 = load_i32_u8(memory_at_0, loc_1)
				if loc_3 == loc_4 then
					while true do
						loc_1 = add_i32(loc_1, 1)
						loc_0 = add_i32(loc_0, 1)
						loc_2 = sub_i32(loc_2, 1)
						if loc_2 ~= 0 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = sub_i32(loc_3, loc_4)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[536] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__throw_out_of_range[abi:ue170004]() const ]] function(loc_0)
	while true do
		FUNC_LIST[537](3709)
		error("out of code bounds")
	end
end
FUNC_LIST[537] = --[[ std::__2::__throw_out_of_range[abi:ue170004](char const*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[538](8)
		reg_0 = FUNC_LIST[539](reg_0, loc_0)
		FUNC_LIST[0](reg_0, 47016, 115)
		error("out of code bounds")
	end
end
FUNC_LIST[538] = --[[ __cxa_allocate_exception ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[513](add_i32(loc_0, 80))
		reg_0 = add_i32(reg_0, 80)
		break
	end
	return reg_0
end
FUNC_LIST[539] = --[[ std::out_of_range::out_of_range[abi:ue170004](char const*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[540](loc_0, loc_1)
		loc_1 = reg_0
		store_i32(memory_at_0, loc_1, 46984)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[540] = --[[ std::logic_error::logic_error(char const*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[610](loc_0)
		loc_0 = reg_0
		store_i32(memory_at_0, loc_0, 46884)
		reg_0 = FUNC_LIST[611](add_i32(loc_0, 4), loc_1)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[541] = --[[ set_all_flags ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = load_i32(memory_at_0, 48284)
		if loc_1 ~= 0 then
			while true do
				while true do
					reg_0 = FUNC_LIST[542](load_i32(memory_at_0, loc_1 + 4))
					if reg_0 == 0 then
						while true do
							store_i32_n8(memory_at_0, loc_1, loc_0)
							break
						end
					end
					loc_1 = load_i32(memory_at_0, loc_1 + 8)
					if loc_1 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		break
	end
end
FUNC_LIST[542] = --[[ strncmp ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_2 = 1234
		while true do
			loc_1 = load_i32_u8(memory_at_0, loc_0)
			if loc_1 == 0 then
				while true do
					loc_1 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = 4
			while true do
				while true do
					loc_4 = load_i32_u8(memory_at_0, loc_2)
					if loc_4 ~= loc_1 then
						desired = 2
						break
					end
					if loc_4 == 0 then
						desired = 2
						break
					end
					loc_3 = sub_i32(loc_3, 1)
					if loc_3 == 0 then
						desired = 2
						break
					end
					loc_2 = add_i32(loc_2, 1)
					loc_1 = load_i32_u8(memory_at_0, loc_0 + 1)
					loc_0 = add_i32(loc_0, 1)
					if loc_1 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = sub_i32(loc_1, load_i32_u8(memory_at_0, loc_2))
		break
	end
	return reg_0
end
FUNC_LIST[543] = --[[ reset_flags ]] function()
	local loc_0 = 0
	local loc_1 = 0
	local reg_0
	while true do
		loc_0 = load_i32(memory_at_0, 48284)
		if loc_0 ~= 0 then
			while true do
				while true do
					while true do
						loc_1 = load_i32(memory_at_0, loc_0 + 4)
						reg_0 = FUNC_LIST[542](loc_1)
						if reg_0 ~= 0 then
							break
						end
						reg_0 = FUNC_LIST[544](3882, loc_1)
						if reg_0 == 0 then
							break
						end
						reg_0 = FUNC_LIST[544](2259, loc_1)
						if reg_0 == 0 then
							break
						end
						reg_0 = FUNC_LIST[544](3850, loc_1)
						if reg_0 == 0 then
							break
						end
						store_i32_n8(memory_at_0, loc_0, 1)
						break
					end
					loc_0 = load_i32(memory_at_0, loc_0 + 8)
					if loc_0 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		break
	end
end
FUNC_LIST[544] = --[[ strcmp ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = load_i32_u8(memory_at_0, loc_1)
		while true do
			loc_3 = load_i32_u8(memory_at_0, loc_0)
			if loc_3 == 0 then
				break
			end
			if loc_2 ~= loc_3 then
				break
			end
			while true do
				loc_2 = load_i32_u8(memory_at_0, loc_1 + 1)
				loc_3 = load_i32_u8(memory_at_0, loc_0 + 1)
				if loc_3 == 0 then
					desired = 1
					break
				end
				loc_1 = add_i32(loc_1, 1)
				loc_0 = add_i32(loc_0, 1)
				if loc_2 == loc_3 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = sub_i32(loc_3, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[545] = --[[ acos ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = i64_ZERO
	local loc_4 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local desired
	while true do
		loc_3 = reinterpret_i64_f64(loc_0)
		loc_4 = band_i32(wrap_i32_i64(shr_u64(loc_3, i64_from_u32(32, 0))), 2147483647)
		if loc_4 >= 1072693248 then
			while true do
				if bor_i32(wrap_i32_i64(loc_3), sub_i32(loc_4, 1072693248)) == 0 then
					while true do
						reg_0 = (if ge_i64(loc_3, i64_ZERO) then 0e0 else 3.141592653589793e0)
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				reg_0 = (0e0 / (loc_0 - loc_0))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			if loc_4 <= 1071644671 then
				while true do
					loc_1 = 1.5707963267948966e0
					reg_0 = loc_1
					if loc_4 < 1012924417 then
						desired = 1
						break
					end
					reg_2 = FUNC_LIST[546]((loc_0 * loc_0))
					reg_0 = (((6.123233995736766e-17 - (loc_0 * reg_2)) - loc_0) + 1.5707963267948966e0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if lt_i64(loc_3, i64_ZERO) then
				while true do
					loc_0 = ((loc_0 + 1e0) * 5e-1)
					reg_1 = FUNC_LIST[547](loc_0)
					loc_1 = reg_1
					reg_3 = FUNC_LIST[546](loc_0)
					loc_0 = (1.5707963267948966e0 - (loc_1 + ((loc_1 * reg_3) + -6.123233995736766e-17)))
					reg_0 = (loc_0 + loc_0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = ((1e0 - loc_0) * 5e-1)
			reg_0 = FUNC_LIST[547](loc_1)
			loc_2 = reg_0
			reg_1 = FUNC_LIST[546](loc_1)
			loc_0 = reinterpret_f64_i64(band_i64(reinterpret_i64_f64(loc_2), i64_from_u32(0, 4294967295)))
			loc_0 = (((loc_2 * reg_1) + ((loc_1 - (loc_0 * loc_0)) / (loc_2 + loc_0))) + loc_0)
			reg_0 = (loc_0 + loc_0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_1 = reg_0
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[546] = --[[ R ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = ((((loc_0 * ((loc_0 * ((loc_0 * ((loc_0 * ((loc_0 * 3.479331075960212e-5) + 7.915349942898145e-4)) + -4.005553450067941e-2)) + 2.0121253213486293e-1)) + -3.255658186224009e-1)) + 1.6666666666666666e-1) * loc_0) / ((loc_0 * ((loc_0 * ((loc_0 * ((loc_0 * 7.703815055590194e-2) + -6.882839716054533e-1)) + 2.0209457602335057e0)) + -2.403394911734414e0)) + 1e0))
		break
	end
	return reg_0
end
FUNC_LIST[547] = --[[ sqrt ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = sqrt_f64(loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[548] = --[[ asin ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_5 = reinterpret_i64_f64(loc_0)
		loc_1 = band_i32(wrap_i32_i64(shr_u64(loc_5, i64_from_u32(32, 0))), 2147483647)
		if loc_1 >= 1072693248 then
			while true do
				if bor_i32(wrap_i32_i64(loc_5), sub_i32(loc_1, 1072693248)) == 0 then
					while true do
						reg_0 = ((loc_0 * 1.5707963267948966e0) + 7.52316384526264e-37)
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				reg_0 = (0e0 / (loc_0 - loc_0))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			if loc_1 <= 1071644671 then
				while true do
					if add_i32(loc_1, 4293918720) < 1044381696 then
						desired = 1
						break
					end
					reg_1 = FUNC_LIST[546]((loc_0 * loc_0))
					reg_0 = ((loc_0 * reg_1) + loc_0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_1 = FUNC_LIST[549](loc_0)
			loc_3 = ((1e0 - reg_1) * 5e-1)
			reg_0 = FUNC_LIST[547](loc_3)
			loc_0 = reg_0
			reg_0 = FUNC_LIST[546](loc_3)
			loc_4 = reg_0
			while true do
				if loc_1 >= 1072640819 then
					while true do
						loc_0 = ((loc_0 * loc_4) + loc_0)
						reg_0 = (1.5707963267948966e0 - ((loc_0 + loc_0) + -6.123233995736766e-17))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = reinterpret_f64_i64(band_i64(reinterpret_i64_f64(loc_0), i64_from_u32(0, 4294967295)))
				reg_1 = ((loc_0 + loc_0) * loc_4)
				loc_0 = ((loc_3 - (loc_2 * loc_2)) / (loc_0 + loc_2))
				reg_0 = (((7.853981633974483e-1 - (loc_2 + loc_2)) - (reg_1 - (6.123233995736766e-17 - (loc_0 + loc_0)))) + 7.853981633974483e-1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_0 = reg_0
			loc_0 = (if lt_i64(loc_5, i64_ZERO) then neg_f64(loc_0) else loc_0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[549] = --[[ fabs ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = abs_f64(loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[550] = --[[ atan ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_6 = reinterpret_i64_f64(loc_0)
		loc_4 = band_i32(wrap_i32_i64(shr_u64(loc_6, i64_from_u32(32, 0))), 2147483647)
		if loc_4 >= 1141899264 then
			while true do
				reg_2 = FUNC_LIST[488](loc_0)
				reg_0 = (if gt_u64(band_i64(reg_2, i64_from_u32(4294967295, 2147483647)), i64_from_u32(0, 2146435072)) then loc_0 else copysign_f64(1.5707963267948966e0, loc_0))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			while true do
				if loc_4 <= 1071382527 then
					while true do
						loc_5 = 4294967295
						reg_0 = loc_5
						if loc_4 >= 1044381696 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[549](loc_0)
				loc_0 = reg_0
				if loc_4 <= 1072889855 then
					while true do
						if loc_4 <= 1072037887 then
							while true do
								loc_0 = (((loc_0 + loc_0) + -1e0) / (loc_0 + 2e0))
								reg_0 = 0
								desired = 2
								break
							end
							if desired then
								break
							end
						end
						loc_0 = ((loc_0 + -1e0) / (loc_0 + 1e0))
						reg_0 = 1
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_4 <= 1073971199 then
					while true do
						loc_0 = ((loc_0 + -1.5e0) / ((loc_0 * 1.5e0) + 1e0))
						reg_0 = 2
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_0 = (-1e0 / loc_0)
				reg_0 = 3
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = reg_0
			loc_2 = (loc_0 * loc_0)
			loc_1 = (loc_2 * loc_2)
			loc_3 = (loc_1 * ((loc_1 * ((loc_1 * ((loc_1 * ((loc_1 * -3.6531572744216916e-2) + -5.8335701337905735e-2)) + -7.69187620504483e-2)) + -1.1111110405462356e-1)) + -1.9999999999876483e-1))
			loc_1 = (loc_2 * ((loc_1 * ((loc_1 * ((loc_1 * ((loc_1 * ((loc_1 * 1.6285820115365782e-2) + 4.9768779946159324e-2)) + 6.661073137387531e-2)) + 9.090887133436507e-2)) + 1.4285714272503466e-1)) + 3.333333333333293e-1))
			if loc_4 <= 1071382527 then
				while true do
					reg_0 = (loc_0 - (loc_0 * (loc_3 + loc_1)))
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = shl_i32(loc_5, 3)
			loc_0 = (load_f64(memory_at_0, add_i32(loc_4, 43008)) - (((loc_0 * (loc_3 + loc_1)) - load_f64(memory_at_0, add_i32(loc_4, 43040))) - loc_0))
			loc_0 = (if lt_i64(loc_6, i64_ZERO) then neg_f64(loc_0) else loc_0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[551] = --[[ atan2 ]] function(loc_0, loc_1)
	local loc_2 = 0.0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			reg_0 = FUNC_LIST[488](loc_1)
			if le_u64(band_i64(reg_0, i64_from_u32(4294967295, 2147483647)), i64_from_u32(0, 2146435072)) then
				while true do
					reg_0 = FUNC_LIST[488](loc_0)
					if lt_u64(band_i64(reg_0, i64_from_u32(4294967295, 2147483647)), i64_from_u32(1, 2146435072)) then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = (loc_0 + loc_1)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_8 = reinterpret_i64_f64(loc_1)
		loc_3 = wrap_i32_i64(shr_u64(loc_8, i64_from_u32(32, 0)))
		loc_6 = wrap_i32_i64(loc_8)
		if bor_i32(sub_i32(loc_3, 1072693248), loc_6) == 0 then
			while true do
				reg_0 = FUNC_LIST[550](loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_7 = band_i32(shr_u32(loc_3, 30), 2)
		loc_8 = reinterpret_i64_f64(loc_0)
		loc_4 = bor_i32(loc_7, wrap_i32_i64(shr_u64(loc_8, i64_from_u32(63, 0))))
		while true do
			loc_5 = band_i32(wrap_i32_i64(shr_u64(loc_8, i64_from_u32(32, 0))), 2147483647)
			if bor_i32(loc_5, wrap_i32_i64(loc_8)) == 0 then
				while true do
					loc_2 = loc_0
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 0, 1, }
								end)()
							end
							temp = br_map[1][sub_i32(loc_4, 2)] or 3
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 1
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						reg_0 = 3.141592653589793e0
						desired = 0
						break
					end
					if desired then
						break
					end
					reg_0 = -3.141592653589793e0
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = band_i32(loc_3, 2147483647)
			if bor_i32(loc_6, loc_3) == 0 then
				while true do
					reg_0 = copysign_f64(1.5707963267948966e0, loc_0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				if loc_3 == 2146435072 then
					while true do
						if loc_5 ~= 2146435072 then
							desired = 2
							break
						end
						reg_0 = load_f64(memory_at_0, add_i32(shl_i32(loc_4, 3), 43072))
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if band_i32((if loc_5 ~= 2146435072 then 1 else 0), (if loc_5 <= add_i32(loc_3, 67108864) then 1 else 0)) == 0 then
					while true do
						reg_0 = copysign_f64(1.5707963267948966e0, loc_0)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					if loc_7 ~= 0 then
						while true do
							reg_0 = 0e0
							if loc_3 > add_i32(loc_5, 67108864) then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[549]((loc_0 / loc_1))
					reg_0 = FUNC_LIST[550](reg_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = reg_0
				while true do
					while true do
						while true do
							if not br_map[2] then
								br_map[2] = (function()
									return { [0] = 4, 0, 1, }
								end)()
							end
							temp = br_map[2][loc_4] or 2
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								desired = 1
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = neg_f64(loc_2)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = (3.141592653589793e0 - (loc_2 + -1.2246467991473532e-16))
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = ((loc_2 + -1.2246467991473532e-16) + -3.141592653589793e0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = load_f64(memory_at_0, add_i32(shl_i32(loc_4, 3), 43104))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[552] = --[[ atoi ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			loc_2 = loc_0
			loc_0 = add_i32(loc_2, 1)
			loc_1 = load_i32_i8(memory_at_0, loc_2)
			reg_0 = FUNC_LIST[553](loc_1)
			if reg_0 ~= 0 then
				continue
			end
			break
		end
		loc_3 = 1
		while true do
			while true do
				while true do
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 1, 2, 0, }
						end)()
					end
					temp = br_map[1][sub_i32(band_i32(loc_1, 255), 43)] or 2
					if temp < 1 then
						break
					elseif temp > 1 then
						desired = 1
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = load_i32_i8(memory_at_0, loc_0)
			loc_2 = loc_0
			break
		end
		loc_0 = 0
		loc_1 = sub_i32(loc_1, 48)
		if loc_1 <= 9 then
			while true do
				while true do
					loc_0 = sub_i32(mul_i32(loc_0, 10), loc_1)
					loc_1 = load_i32_i8(memory_at_0, loc_2 + 1)
					loc_2 = add_i32(loc_2, 1)
					loc_1 = sub_i32(loc_1, 48)
					if loc_1 < 10 then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = (if loc_3 ~= 0 then sub_i32(0, loc_0) else loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[553] = --[[ __isspace ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = bor_i32((if loc_0 == 32 then 1 else 0), (if sub_i32(loc_0, 9) < 5 then 1 else 0))
		break
	end
	return reg_0
end
FUNC_LIST[554] = --[[ cos ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		while true do
			loc_3 = band_i32(wrap_i32_i64(shr_u64(reinterpret_i64_f64(loc_0), i64_from_u32(32, 0))), 2147483647)
			if loc_3 <= 1072243195 then
				while true do
					loc_1 = 1e0
					reg_0 = loc_1
					if loc_3 < 1044816030 then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[555](loc_0, 0e0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = (loc_0 - loc_0)
			if loc_3 >= 2146435072 then
				break
			end
			reg_0 = FUNC_LIST[556](loc_0, loc_2)
			loc_3 = reg_0
			loc_0 = load_f64(memory_at_0, loc_2 + 8)
			loc_1 = load_f64(memory_at_0, loc_2)
			while true do
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 0, 1, 2, }
								end)()
							end
							temp = br_map[1][band_i32(loc_3, 3)] or 3
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								desired = 2
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[555](loc_1, loc_0)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[557](loc_1, loc_0, 1)
					reg_0 = neg_f64(reg_0)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[555](loc_1, loc_0)
				reg_0 = neg_f64(reg_0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[557](loc_1, loc_0, 1)
			break
		end
		loc_1 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[555] = --[[ __cos ]] function(loc_0, loc_1)
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local reg_0
	local reg_1
	while true do
		loc_2 = (loc_0 * loc_0)
		loc_3 = (loc_2 * 5e-1)
		loc_4 = (1e0 - loc_3)
		reg_1 = ((1e0 - loc_4) - loc_3)
		loc_3 = (loc_2 * loc_2)
		reg_0 = (loc_4 + (reg_1 + ((loc_2 * ((loc_2 * ((loc_2 * ((loc_2 * 2.480158728947673e-5) + -1.388888888887411e-3)) + 4.16666666666666e-2)) + ((loc_3 * loc_3) * ((loc_2 * ((loc_2 * -1.1359647557788195e-11) + 2.087572321298175e-9)) + -2.7557314351390663e-7)))) - (loc_0 * loc_1))))
		break
	end
	return reg_0
end
FUNC_LIST[556] = --[[ __rem_pio2 ]] function(loc_0, loc_1)
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_7
		while true do
			while true do
				while true do
					loc_11 = reinterpret_i64_f64(loc_0)
					loc_6 = wrap_i32_i64(shr_u64(loc_11, i64_from_u32(32, 0)))
					loc_8 = band_i32(loc_6, 2147483647)
					if loc_8 <= 1074752122 then
						while true do
							if band_i32(loc_6, 1048575) == 598523 then
								desired = 3
								break
							end
							if loc_8 <= 1073928572 then
								while true do
									if ge_i64(loc_11, i64_ZERO) then
										while true do
											loc_0 = (loc_0 + -1.5707963267341256e0)
											loc_2 = (loc_0 + -6.077100506506192e-11)
											store_f64(memory_at_0, loc_1, loc_2)
											store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + -6.077100506506192e-11))
											loc_6 = 1
											desired = 1
											break
										end
										if desired then
											break
										end
									end
									loc_0 = (loc_0 + 1.5707963267341256e0)
									loc_2 = (loc_0 + 6.077100506506192e-11)
									store_f64(memory_at_0, loc_1, loc_2)
									store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + 6.077100506506192e-11))
									loc_6 = 4294967295
									desired = 1
									break
								end
								if desired then
									break
								end
							end
							if ge_i64(loc_11, i64_ZERO) then
								while true do
									loc_0 = (loc_0 + -3.1415926534682512e0)
									loc_2 = (loc_0 + -1.2154201013012384e-10)
									store_f64(memory_at_0, loc_1, loc_2)
									store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + -1.2154201013012384e-10))
									loc_6 = 2
									desired = 1
									break
								end
								if desired then
									break
								end
							end
							loc_0 = (loc_0 + 3.1415926534682512e0)
							loc_2 = (loc_0 + 1.2154201013012384e-10)
							store_f64(memory_at_0, loc_1, loc_2)
							store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + 1.2154201013012384e-10))
							loc_6 = 4294967294
							desired = 1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_8 <= 1075594811 then
						while true do
							if loc_8 <= 1075183036 then
								while true do
									if loc_8 == 1074977148 then
										desired = 3
										break
									end
									if ge_i64(loc_11, i64_ZERO) then
										while true do
											loc_0 = (loc_0 + -4.712388980202377e0)
											loc_2 = (loc_0 + -1.8231301519518578e-10)
											store_f64(memory_at_0, loc_1, loc_2)
											store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + -1.8231301519518578e-10))
											loc_6 = 3
											desired = 1
											break
										end
										if desired then
											break
										end
									end
									loc_0 = (loc_0 + 4.712388980202377e0)
									loc_2 = (loc_0 + 1.8231301519518578e-10)
									store_f64(memory_at_0, loc_1, loc_2)
									store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + 1.8231301519518578e-10))
									loc_6 = 4294967293
									desired = 1
									break
								end
								if desired then
									break
								end
							end
							if loc_8 == 1075388923 then
								desired = 3
								break
							end
							if ge_i64(loc_11, i64_ZERO) then
								while true do
									loc_0 = (loc_0 + -6.2831853069365025e0)
									loc_2 = (loc_0 + -2.430840202602477e-10)
									store_f64(memory_at_0, loc_1, loc_2)
									store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + -2.430840202602477e-10))
									loc_6 = 4
									desired = 1
									break
								end
								if desired then
									break
								end
							end
							loc_0 = (loc_0 + 6.2831853069365025e0)
							loc_2 = (loc_0 + 2.430840202602477e-10)
							store_f64(memory_at_0, loc_1, loc_2)
							store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + 2.430840202602477e-10))
							loc_6 = 4294967292
							desired = 1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_8 > 1094263290 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = (((loc_0 * 6.366197723675814e-1) + 6.755399441055744e15) + -6.755399441055744e15)
				loc_3 = (loc_0 + (loc_2 * -1.5707963267341256e0))
				loc_4 = (loc_2 * 6.077100506506192e-11)
				loc_5 = (loc_3 - loc_4)
				loc_9 = (if loc_5 < -7.853981633974483e-1 then 1 else 0)
				while true do
					if abs_f64(loc_2) < 2.147483648e9 then
						while true do
							reg_0 = truncate_i32_f64(loc_2)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = 2147483648
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = reg_0
				while true do
					if loc_9 ~= 0 then
						while true do
							loc_6 = sub_i32(loc_6, 1)
							loc_2 = (loc_2 + -1e0)
							loc_4 = (loc_2 * 6.077100506506192e-11)
							loc_3 = (loc_0 + (loc_2 * -1.5707963267341256e0))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if (if loc_5 > 7.853981633974483e-1 then 1 else 0) == 0 then
						break
					end
					loc_6 = add_i32(loc_6, 1)
					loc_2 = (loc_2 + 1e0)
					loc_4 = (loc_2 * 6.077100506506192e-11)
					loc_3 = (loc_0 + (loc_2 * -1.5707963267341256e0))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_0 = (loc_3 - loc_4)
				store_f64(memory_at_0, loc_1, loc_0)
				while true do
					loc_9 = shr_u32(loc_8, 20)
					if lt_i32(sub_i32(loc_9, band_i32(wrap_i32_i64(shr_u64(reinterpret_i64_f64(loc_0), i64_from_u32(52, 0))), 2047)), 17) then
						break
					end
					loc_0 = (loc_2 * 6.077100506303966e-11)
					loc_5 = (loc_3 - loc_0)
					loc_4 = ((loc_2 * 2.0222662487959506e-21) - ((loc_3 - loc_5) - loc_0))
					loc_0 = (loc_5 - loc_4)
					store_f64(memory_at_0, loc_1, loc_0)
					if lt_i32(sub_i32(loc_9, band_i32(wrap_i32_i64(shr_u64(reinterpret_i64_f64(loc_0), i64_from_u32(52, 0))), 2047)), 50) then
						while true do
							loc_3 = loc_5
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_0 = (loc_2 * 2.0222662487111665e-21)
					loc_3 = (loc_5 - loc_0)
					loc_4 = ((loc_2 * 8.4784276603689e-32) - ((loc_5 - loc_3) - loc_0))
					loc_0 = (loc_3 - loc_4)
					store_f64(memory_at_0, loc_1, loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_f64(memory_at_0, loc_1 + 8, ((loc_3 - loc_0) - loc_4))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_8 >= 2146435072 then
				while true do
					loc_0 = (loc_0 - loc_0)
					store_f64(memory_at_0, loc_1, loc_0)
					store_f64(memory_at_0, loc_1 + 8, loc_0)
					loc_6 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = reinterpret_f64_i64(bor_i64(band_i64(loc_11, i64_from_u32(4294967295, 1048575)), i64_from_u32(0, 1096810496)))
			loc_6 = 0
			loc_9 = 1
			while true do
				loc_6 = add_i32(add_i32(loc_7, 16), shl_i32(loc_6, 3))
				reg_0 = loc_6
				while true do
					if abs_f64(loc_0) < 2.147483648e9 then
						while true do
							reg_1 = truncate_i32_f64(loc_0)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_1 = 2147483648
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_10 = reg_1
				loc_2 = convert_f64_i32(loc_10)
				store_f64(memory_at_0, reg_0, loc_2)
				loc_0 = ((loc_0 - loc_2) * 1.6777216e7)
				loc_6 = 1
				loc_10 = band_i32(loc_9, 1)
				loc_9 = 0
				if loc_10 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_f64(memory_at_0, loc_7 + 32, loc_0)
			loc_6 = 2
			while true do
				loc_9 = loc_6
				loc_6 = sub_i32(loc_9, 1)
				if load_f64(memory_at_0, add_i32(add_i32(loc_7, 16), shl_i32(loc_9, 3))) == 0e0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[558](add_i32(loc_7, 16), loc_7, sub_i32(shr_u32(loc_8, 20), 1046), add_i32(loc_9, 1), 1)
			loc_6 = reg_0
			loc_0 = load_f64(memory_at_0, loc_7)
			if lt_i64(loc_11, i64_ZERO) then
				while true do
					store_f64(memory_at_0, loc_1, neg_f64(loc_0))
					store_f64(memory_at_0, loc_1 + 8, neg_f64(load_f64(memory_at_0, loc_7 + 8)))
					loc_6 = sub_i32(0, loc_6)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			store_f64(memory_at_0, loc_1, loc_0)
			store_f64(memory_at_0, loc_1 + 8, load_f64(memory_at_0, loc_7 + 8))
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_7, 48)
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[557] = --[[ __sin ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local reg_0
	local desired
	while true do
		loc_3 = (loc_0 * loc_0)
		loc_5 = (((loc_3 * (loc_3 * loc_3)) * ((loc_3 * 1.58969099521155e-10) + -2.5050760253406863e-8)) + ((loc_3 * ((loc_3 * 2.7557313707070068e-6) + -1.984126982985795e-4)) + 8.33333333332249e-3))
		loc_4 = (loc_3 * loc_0)
		if loc_2 == 0 then
			while true do
				reg_0 = ((loc_4 * ((loc_3 * loc_5) + -1.6666666666666632e-1)) + loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = (loc_0 - (((loc_3 * ((loc_1 * 5e-1) - (loc_5 * loc_4))) - loc_1) + (loc_4 * 1.6666666666666632e-1)))
		break
	end
	return reg_0
end
FUNC_LIST[558] = --[[ __rem_pio2_large ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local loc_23 = 0
	local loc_24 = 0
	local loc_25 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	local br_map = {}
	while true do
		loc_10 = sub_i32(GLOBAL_LIST[0].value, 560)
		GLOBAL_LIST[0].value = loc_10
		loc_9 = div_i32(sub_i32(loc_2, 3), 24)
		loc_19 = (if gt_i32(loc_9, 0) then loc_9 else 0)
		loc_12 = add_i32(loc_2, mul_i32(loc_19, 4294967272))
		loc_13 = load_i32(memory_at_0, add_i32(shl_i32(loc_4, 2), 43136))
		loc_15 = sub_i32(loc_3, 1)
		if ge_i32(add_i32(loc_13, loc_15), 0) then
			while true do
				loc_8 = add_i32(loc_3, loc_13)
				loc_2 = sub_i32(loc_19, loc_15)
				loc_9 = 0
				while true do
					reg_0 = add_i32(add_i32(loc_10, 320), shl_i32(loc_9, 3))
					if lt_i32(loc_2, 0) then
						while true do
							reg_1 = 0e0
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					else
						while true do
							reg_1 = convert_f64_i32(load_i32(memory_at_0, add_i32(shl_i32(loc_2, 2), 43152)))
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_5 = reg_1
					store_f64(memory_at_0, reg_0, loc_5)
					loc_2 = add_i32(loc_2, 1)
					loc_9 = add_i32(loc_9, 1)
					if loc_8 ~= loc_9 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_18 = sub_i32(loc_12, 24)
		loc_8 = 0
		loc_11 = (if gt_i32(loc_13, 0) then loc_13 else 0)
		loc_16 = (if le_i32(loc_3, 0) then 1 else 0)
		while true do
			while true do
				if loc_16 ~= 0 then
					while true do
						loc_5 = 0e0
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_9 = add_i32(loc_8, loc_15)
				loc_2 = 0
				loc_5 = 0e0
				while true do
					loc_5 = ((load_f64(memory_at_0, add_i32(shl_i32(loc_2, 3), loc_0)) * load_f64(memory_at_0, add_i32(add_i32(loc_10, 320), shl_i32(sub_i32(loc_9, loc_2), 3)))) + loc_5)
					loc_2 = add_i32(loc_2, 1)
					if loc_3 ~= loc_2 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			store_f64(memory_at_0, add_i32(shl_i32(loc_8, 3), loc_10), loc_5)
			loc_2 = (if loc_8 == loc_11 then 1 else 0)
			loc_8 = add_i32(loc_8, 1)
			if loc_2 == 0 then
				continue
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_22 = sub_i32(47, loc_12)
		loc_20 = sub_i32(48, loc_12)
		loc_21 = (if lt_i32(loc_12, 25) then 1 else 0)
		loc_23 = sub_i32(loc_12, 25)
		loc_8 = loc_13
		while true do
			loc_5 = load_f64(memory_at_0, add_i32(shl_i32(loc_8, 3), loc_10))
			loc_2 = 0
			loc_9 = loc_8
			loc_15 = (if le_i32(loc_8, 0) then 1 else 0)
			if loc_15 == 0 then
				while true do
					while true do
						loc_16 = add_i32(add_i32(loc_10, 480), shl_i32(loc_2, 2))
						reg_0 = loc_16
						while true do
							while true do
								loc_6 = (loc_5 * 5.960464477539063e-8)
								if abs_f64(loc_6) < 2.147483648e9 then
									while true do
										reg_1 = truncate_i32_f64(loc_6)
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								reg_1 = 2147483648
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_11 = reg_1
							loc_6 = convert_f64_i32(loc_11)
							loc_5 = ((loc_6 * -1.6777216e7) + loc_5)
							if abs_f64(loc_5) < 2.147483648e9 then
								while true do
									reg_1 = truncate_i32_f64(loc_5)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							reg_1 = 2147483648
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_11 = reg_1
						store_i32(memory_at_0, reg_0, loc_11)
						loc_9 = sub_i32(loc_9, 1)
						loc_5 = (load_f64(memory_at_0, add_i32(shl_i32(loc_9, 3), loc_10)) + loc_6)
						loc_2 = add_i32(loc_2, 1)
						if loc_8 ~= loc_2 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			while true do
				reg_0 = FUNC_LIST[503](loc_5, loc_18)
				loc_5 = reg_0
				reg_1 = FUNC_LIST[559]((loc_5 * 1.25e-1))
				loc_5 = (loc_5 + (reg_1 * -8e0))
				if abs_f64(loc_5) < 2.147483648e9 then
					while true do
						reg_0 = truncate_i32_f64(loc_5)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_17 = reg_0
			loc_5 = (loc_5 - convert_f64_i32(loc_17))
			while true do
				while true do
					while true do
						while true do
							if loc_21 == 0 then
								while true do
									loc_24 = add_i32(loc_10, shl_i32(loc_8, 2))
									loc_2 = add_i32(loc_24, 476)
									reg_0 = loc_2
									loc_2 = load_i32(memory_at_0, loc_24 + 476)
									reg_1 = loc_2
									loc_2 = shr_i32(loc_2, loc_20)
									loc_9 = sub_i32(reg_1, shl_i32(loc_2, loc_20))
									store_i32(memory_at_0, reg_0, loc_9)
									loc_17 = add_i32(loc_2, loc_17)
									reg_0 = shr_i32(loc_9, loc_22)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_18 ~= 0 then
								desired = 4
								break
							end
							reg_0 = shr_i32(load_i32(memory_at_0, add_i32(loc_10, shl_i32(loc_8, 2)) + 476), 23)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_14 = reg_0
						if le_i32(loc_14, 0) then
							desired = 2
							break
						end
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_14 = 2
					if loc_5 >= 5e-1 then
						break
					end
					loc_14 = 0
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = 0
				loc_16 = 0
				if loc_15 == 0 then
					while true do
						while true do
							loc_15 = add_i32(add_i32(loc_10, 480), shl_i32(loc_2, 2))
							loc_9 = load_i32(memory_at_0, loc_15)
							loc_11 = 16777215
							while true do
								while true do
									if loc_16 ~= 0 then
										break
									end
									loc_11 = 16777216
									if loc_9 ~= 0 then
										break
									end
									reg_0 = 0
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								store_i32(memory_at_0, loc_15, sub_i32(loc_11, loc_9))
								reg_0 = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							loc_16 = reg_0
							loc_2 = add_i32(loc_2, 1)
							if loc_8 ~= loc_2 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					if loc_21 ~= 0 then
						break
					end
					loc_2 = 8388607
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 0, }
								end)()
							end
							temp = br_map[1][loc_23] or 2
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = 4194303
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_25 = add_i32(loc_10, shl_i32(loc_8, 2))
					loc_9 = add_i32(loc_25, 476)
					store_i32(memory_at_0, loc_9, band_i32(loc_2, load_i32(memory_at_0, loc_25 + 476)))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_17 = add_i32(loc_17, 1)
				if loc_14 ~= 2 then
					break
				end
				loc_5 = (1e0 - loc_5)
				loc_14 = 2
				if loc_16 == 0 then
					break
				end
				reg_1 = FUNC_LIST[503](1e0, loc_18)
				loc_5 = (loc_5 - reg_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			while true do
				while true do
					if loc_5 == 0e0 then
						while true do
							loc_9 = 0
							loc_2 = loc_8
							if ge_i32(loc_13, loc_2) then
								desired = 2
								break
							end
							while true do
								loc_2 = sub_i32(loc_2, 1)
								loc_9 = bor_i32(loc_9, load_i32(memory_at_0, add_i32(add_i32(loc_10, 480), shl_i32(loc_2, 2))))
								if gt_i32(loc_2, loc_13) then
									continue
								end
								break
							end
							if desired then
								break
							end
							if loc_9 == 0 then
								desired = 2
								break
							end
							loc_12 = loc_18
							while true do
								loc_12 = sub_i32(loc_12, 24)
								loc_8 = sub_i32(loc_8, 1)
								if load_i32(memory_at_0, add_i32(add_i32(loc_10, 480), shl_i32(loc_8, 2))) == 0 then
									continue
								end
								break
							end
							if desired then
								break
							end
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						reg_0 = FUNC_LIST[503](loc_5, sub_i32(24, loc_12))
						loc_5 = reg_0
						if loc_5 >= 1.6777216e7 then
							while true do
								loc_3 = shl_i32(loc_8, 2)
								loc_3 = add_i32(loc_3, add_i32(loc_10, 480))
								reg_0 = loc_3
								while true do
									while true do
										loc_6 = (loc_5 * 5.960464477539063e-8)
										if abs_f64(loc_6) < 2.147483648e9 then
											while true do
												reg_1 = truncate_i32_f64(loc_6)
												desired = 7
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										reg_1 = 2147483648
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									loc_2 = reg_1
									loc_5 = ((convert_f64_i32(loc_2) * -1.6777216e7) + loc_5)
									if abs_f64(loc_5) < 2.147483648e9 then
										while true do
											reg_1 = truncate_i32_f64(loc_5)
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									reg_1 = 2147483648
									break
								end
								if desired then
									break
								end
								loc_9 = reg_1
								store_i32(memory_at_0, reg_0, loc_9)
								loc_8 = add_i32(loc_8, 1)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if abs_f64(loc_5) < 2.147483648e9 then
								while true do
									reg_0 = truncate_i32_f64(loc_5)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = 2147483648
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = reg_0
						loc_12 = loc_18
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, add_i32(add_i32(loc_10, 480), shl_i32(loc_8, 2)), loc_2)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[503](1e0, loc_12)
				loc_5 = reg_0
				if ge_i32(loc_8, 0) then
					while true do
						loc_3 = loc_8
						while true do
							loc_2 = loc_3
							store_f64(memory_at_0, add_i32(shl_i32(loc_2, 3), loc_10), (loc_5 * convert_f64_i32(load_i32(memory_at_0, add_i32(add_i32(loc_10, 480), shl_i32(loc_2, 2))))))
							loc_3 = sub_i32(loc_2, 1)
							loc_5 = (loc_5 * 5.960464477539063e-8)
							if loc_2 ~= 0 then
								continue
							end
							break
						end
						if desired then
							break
						end
						loc_9 = loc_8
						while true do
							loc_5 = 0e0
							loc_2 = 0
							loc_11 = sub_i32(loc_8, loc_9)
							loc_0 = (if gt_i32(loc_11, loc_13) then loc_13 else loc_11)
							if ge_i32(loc_0, 0) then
								while true do
									while true do
										loc_5 = ((load_f64(memory_at_0, add_i32(shl_i32(loc_2, 3), 45920)) * load_f64(memory_at_0, add_i32(shl_i32(add_i32(loc_2, loc_9), 3), loc_10))) + loc_5)
										loc_3 = (if loc_0 ~= loc_2 then 1 else 0)
										loc_2 = add_i32(loc_2, 1)
										if loc_3 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							store_f64(memory_at_0, add_i32(add_i32(loc_10, 160), shl_i32(loc_11, 3)), loc_5)
							loc_2 = (if gt_i32(loc_9, 0) then 1 else 0)
							loc_9 = sub_i32(loc_9, 1)
							if loc_2 ~= 0 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					while true do
						while true do
							while true do
								while true do
									if not br_map[2] then
										br_map[2] = (function()
											return { [0] = 2, 2, 0, }
										end)()
									end
									temp = br_map[2][sub_i32(loc_4, 1)] or 1
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 5
										break
									else
										desired = 6
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								while true do
									if le_i32(loc_8, 0) then
										break
									end
									loc_0 = add_i32(add_i32(loc_10, 160), shl_i32(loc_8, 3))
									loc_5 = load_f64(memory_at_0, loc_0)
									loc_2 = loc_8
									while true do
										loc_3 = sub_i32(loc_2, 1)
										loc_9 = add_i32(add_i32(loc_10, 160), shl_i32(loc_3, 3))
										loc_6 = load_f64(memory_at_0, loc_9)
										reg_2 = loc_6
										loc_6 = (loc_6 + loc_5)
										store_f64(memory_at_0, add_i32(add_i32(loc_10, 160), shl_i32(loc_2, 3)), (loc_5 + (reg_2 - loc_6)))
										store_f64(memory_at_0, loc_9, loc_6)
										loc_9 = (if loc_2 > 1 then 1 else 0)
										loc_5 = loc_6
										loc_2 = loc_3
										if loc_9 ~= 0 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_8 == 1 then
										break
									end
									loc_5 = load_f64(memory_at_0, loc_0)
									loc_2 = loc_8
									while true do
										loc_3 = sub_i32(loc_2, 1)
										loc_9 = add_i32(add_i32(loc_10, 160), shl_i32(loc_3, 3))
										loc_6 = load_f64(memory_at_0, loc_9)
										reg_2 = loc_6
										loc_6 = (loc_6 + loc_5)
										store_f64(memory_at_0, add_i32(add_i32(loc_10, 160), shl_i32(loc_2, 3)), (loc_5 + (reg_2 - loc_6)))
										store_f64(memory_at_0, loc_9, loc_6)
										loc_9 = (if loc_2 > 2 then 1 else 0)
										loc_5 = loc_6
										loc_2 = loc_3
										if loc_9 ~= 0 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									while true do
										loc_7 = (loc_7 + load_f64(memory_at_0, add_i32(add_i32(loc_10, 160), shl_i32(loc_8, 3))))
										loc_2 = (if gt_i32(loc_8, 2) then 1 else 0)
										loc_8 = sub_i32(loc_8, 1)
										if loc_2 ~= 0 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_5 = load_f64(memory_at_0, loc_10 + 160)
								if loc_14 ~= 0 then
									desired = 4
									break
								end
								store_f64(memory_at_0, loc_1, loc_5)
								loc_5 = load_f64(memory_at_0, loc_10 + 168)
								store_f64(memory_at_0, loc_1 + 16, loc_7)
								store_f64(memory_at_0, loc_1 + 8, loc_5)
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_5 = 0e0
							if ge_i32(loc_8, 0) then
								while true do
									while true do
										loc_2 = loc_8
										loc_8 = sub_i32(loc_2, 1)
										loc_5 = (loc_5 + load_f64(memory_at_0, add_i32(add_i32(loc_10, 160), shl_i32(loc_2, 3))))
										if loc_2 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							store_f64(memory_at_0, loc_1, (if loc_14 ~= 0 then neg_f64(loc_5) else loc_5))
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = 0e0
						if ge_i32(loc_8, 0) then
							while true do
								loc_3 = loc_8
								while true do
									loc_2 = loc_3
									loc_3 = sub_i32(loc_2, 1)
									loc_5 = (loc_5 + load_f64(memory_at_0, add_i32(add_i32(loc_10, 160), shl_i32(loc_2, 3))))
									if loc_2 ~= 0 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						store_f64(memory_at_0, loc_1, (if loc_14 ~= 0 then neg_f64(loc_5) else loc_5))
						loc_5 = (load_f64(memory_at_0, loc_10 + 160) - loc_5)
						loc_2 = 1
						if gt_i32(loc_8, 0) then
							while true do
								while true do
									loc_5 = (loc_5 + load_f64(memory_at_0, add_i32(add_i32(loc_10, 160), shl_i32(loc_2, 3))))
									loc_3 = (if loc_2 ~= loc_8 then 1 else 0)
									loc_2 = add_i32(loc_2, 1)
									if loc_3 ~= 0 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						store_f64(memory_at_0, loc_1 + 8, (if loc_14 ~= 0 then neg_f64(loc_5) else loc_5))
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_f64(memory_at_0, loc_1, neg_f64(loc_5))
					loc_5 = load_f64(memory_at_0, loc_10 + 168)
					store_f64(memory_at_0, loc_1 + 16, neg_f64(loc_7))
					store_f64(memory_at_0, loc_1 + 8, neg_f64(loc_5))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				GLOBAL_LIST[0].value = add_i32(loc_10, 560)
				reg_0 = band_i32(loc_17, 7)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_2 = 1
			while true do
				loc_9 = loc_2
				loc_2 = add_i32(loc_9, 1)
				if load_i32(memory_at_0, add_i32(add_i32(loc_10, 480), shl_i32(sub_i32(loc_13, loc_9), 2))) == 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_11 = add_i32(loc_8, loc_9)
			while true do
				loc_9 = add_i32(loc_3, loc_8)
				loc_8 = add_i32(loc_8, 1)
				store_f64(memory_at_0, add_i32(add_i32(loc_10, 320), shl_i32(loc_9, 3)), convert_f64_i32(load_i32(memory_at_0, add_i32(shl_i32(add_i32(loc_19, loc_8), 2), 43152))))
				loc_2 = 0
				loc_5 = 0e0
				if gt_i32(loc_3, 0) then
					while true do
						while true do
							loc_5 = ((load_f64(memory_at_0, add_i32(shl_i32(loc_2, 3), loc_0)) * load_f64(memory_at_0, add_i32(add_i32(loc_10, 320), shl_i32(sub_i32(loc_9, loc_2), 3)))) + loc_5)
							loc_2 = add_i32(loc_2, 1)
							if loc_3 ~= loc_2 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				store_f64(memory_at_0, add_i32(shl_i32(loc_8, 3), loc_10), loc_5)
				if lt_i32(loc_8, loc_11) then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_8 = loc_11
			continue
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[559] = --[[ floor ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = floor_f64(loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[560] = --[[ cosh ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_0 = abs_f64(loc_0)
			loc_1 = wrap_i32_i64(shr_u64(reinterpret_i64_f64(loc_0), i64_from_u32(32, 0)))
			if loc_1 <= 1072049729 then
				while true do
					reg_0 = 1e0
					if loc_1 < 1045430272 then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[561](loc_0)
					loc_0 = reg_0
					reg_0 = (loc_0 * loc_0)
					loc_0 = (loc_0 + 1e0)
					reg_0 = ((reg_0 / (loc_0 + loc_0)) + 1e0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_1 <= 1082535489 then
				while true do
					reg_0 = FUNC_LIST[482](loc_0)
					loc_0 = reg_0
					reg_0 = ((loc_0 + (1e0 / loc_0)) * 5e-1)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[562](loc_0, 1e0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
	return reg_0
end
FUNC_LIST[561] = --[[ expm1 ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0
	local loc_6 = i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_6 = reinterpret_i64_f64(loc_0)
							loc_5 = band_i32(wrap_i32_i64(shr_u64(loc_6, i64_from_u32(32, 0))), 2147483647)
							if loc_5 >= 1078159482 then
								while true do
									reg_0 = FUNC_LIST[488](loc_0)
									if gt_u64(band_i64(reg_0, i64_from_u32(4294967295, 2147483647)), i64_from_u32(0, 2146435072)) then
										desired = 1
										break
									end
									if lt_i64(loc_6, i64_ZERO) then
										while true do
											reg_0 = -1e0
											desired = 0
											break
										end
										if desired then
											break
										end
									end
									if (if loc_0 > 7.09782712893384e2 then 1 else 0) == 0 then
										desired = 5
										break
									end
									reg_0 = (loc_0 * 8.98846567431158e307)
									desired = 0
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_5 < 1071001155 then
								desired = 3
								break
							end
							if loc_5 > 1072734897 then
								break
							end
							if ge_i64(loc_6, i64_ZERO) then
								while true do
									loc_5 = 1
									loc_2 = 1.9082149292705877e-10
									reg_0 = (loc_0 + -6.931471803691238e-1)
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_5 = 4294967295
							loc_2 = -1.9082149292705877e-10
							reg_0 = (loc_0 + 6.931471803691238e-1)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							loc_1 = ((loc_0 * 1.4426950408889634e0) + copysign_f64(5e-1, loc_0))
							if abs_f64(loc_1) < 2.147483648e9 then
								while true do
									reg_0 = truncate_i32_f64(loc_1)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = 2147483648
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = reg_0
						loc_1 = convert_f64_i32(loc_5)
						loc_2 = (loc_1 * 1.9082149292705877e-10)
						reg_0 = (loc_0 + (loc_1 * -6.931471803691238e-1))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = reg_0
					loc_0 = (loc_1 - loc_2)
					loc_2 = ((loc_1 - loc_0) - loc_2)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_5 < 1016070144 then
					desired = 1
					break
				end
				loc_5 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = (loc_0 * 5e-1)
			loc_1 = (loc_0 * loc_3)
			loc_4 = ((loc_1 * ((loc_1 * ((loc_1 * ((loc_1 * ((loc_1 * -2.0109921818362437e-7) + 4.008217827329362e-6)) + -7.93650757867488e-5)) + 1.5873015872548146e-3)) + -3.333333333333313e-2)) + 1e0)
			loc_3 = (3e0 - (loc_4 * loc_3))
			loc_3 = (loc_1 * ((loc_4 - loc_3) / (6e0 - (loc_0 * loc_3))))
			if loc_5 == 0 then
				while true do
					reg_0 = (loc_0 - ((loc_0 * loc_3) - loc_1))
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = (((loc_0 * (loc_3 - loc_2)) - loc_2) - loc_1)
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 0, 2, 1, }
							end)()
						end
						temp = br_map[1][add_i32(loc_5, 1)] or 2
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = (((loc_0 - loc_1) * 5e-1) + -5e-1)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_0 < -2.5e-1 then
					while true do
						reg_0 = ((loc_1 - (loc_0 + 5e-1)) * -2e0)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_0 = (loc_0 - loc_1)
				reg_0 = ((loc_0 + loc_0) + 1e0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = reinterpret_f64_i64(shl_i64(extend_i64_u32(add_i32(loc_5, 1023)), i64_from_u32(52, 0)))
			if loc_5 >= 57 then
				while true do
					loc_0 = ((loc_0 - loc_1) + 1e0)
					reg_0 = ((if loc_5 == 1024 then ((loc_0 + loc_0) * 8.98846567431158e307) else (loc_0 * loc_2)) + -1e0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = reinterpret_f64_i64(shl_i64(extend_i64_u32(bxor_i32(loc_5, 1023)), i64_from_u32(52, 0)))
			if loc_5 <= 19 then
				while true do
					reg_0 = ((1e0 - loc_3) + (loc_0 - loc_1))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = ((loc_0 - (loc_1 + loc_3)) + 1e0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = reg_0
			loc_0 = (loc_0 * loc_2)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[562] = --[[ __expo2 ]] function(loc_0, loc_1)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[482]((loc_0 + -1.4160996898839683e3))
		reg_0 = (((loc_1 * 2.247116418577895e307) * reg_1) * 2.247116418577895e307)
		break
	end
	return reg_0
end
FUNC_LIST[563] = --[[ __math_xflow ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[491]((if loc_0 ~= 0 then neg_f64(loc_1) else loc_1))
		reg_0 = (reg_0 * loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[564] = --[[ memchr ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_3 = (if loc_2 ~= 0 then 1 else 0)
		while true do
			while true do
				while true do
					if band_i32(loc_0, 3) == 0 then
						break
					end
					if loc_2 == 0 then
						break
					end
					loc_4 = band_i32(loc_1, 255)
					while true do
						if loc_4 == load_i32_u8(memory_at_0, loc_0) then
							desired = 2
							break
						end
						loc_2 = sub_i32(loc_2, 1)
						loc_3 = (if loc_2 ~= 0 then 1 else 0)
						loc_0 = add_i32(loc_0, 1)
						if band_i32(loc_0, 3) == 0 then
							desired = 3
							break
						end
						if loc_2 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_3 == 0 then
					desired = 1
					break
				end
				while true do
					if load_i32_u8(memory_at_0, loc_0) == band_i32(loc_1, 255) then
						break
					end
					if loc_2 < 4 then
						break
					end
					loc_4 = mul_i32(band_i32(loc_1, 255), 16843009)
					while true do
						loc_3 = bxor_i32(loc_4, load_i32(memory_at_0, loc_0))
						if band_i32(band_i32(bxor_i32(loc_3, 4294967295), sub_i32(loc_3, 16843009)), 2155905152) ~= 0 then
							desired = 2
							break
						end
						loc_0 = add_i32(loc_0, 4)
						loc_2 = sub_i32(loc_2, 4)
						if loc_2 > 3 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_2 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = band_i32(loc_1, 255)
			while true do
				if load_i32_u8(memory_at_0, loc_0) == loc_3 then
					while true do
						reg_0 = loc_0
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				loc_0 = add_i32(loc_0, 1)
				loc_2 = sub_i32(loc_2, 1)
				if loc_2 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[565] = --[[ round ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = i64_ZERO
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = reinterpret_i64_f64(loc_0)
		loc_3 = band_i32(wrap_i32_i64(shr_u64(loc_2, i64_from_u32(52, 0))), 2047)
		if loc_3 <= 1074 then
			while true do
				if loc_3 <= 1021 then
					while true do
						reg_0 = (loc_0 * 0e0)
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				while true do
					loc_0 = abs_f64(loc_0)
					loc_1 = (((loc_0 + 4.503599627370496e15) + -4.503599627370496e15) - loc_0)
					if loc_1 > 5e-1 then
						while true do
							reg_0 = ((loc_0 + loc_1) + -1e0)
							desired = 2
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					loc_0 = (loc_0 + loc_1)
					reg_0 = loc_0
					if (if loc_1 <= -5e-1 then 1 else 0) == 0 then
						break
					end
					reg_0 = (loc_0 + 1e0)
					break
				end
				if desired then
					break
				end
				loc_0 = reg_0
				reg_0 = (if lt_i64(loc_2, i64_ZERO) then neg_f64(loc_0) else loc_0)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = reg_0
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[566] = --[[ sin ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0.0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		while true do
			loc_2 = band_i32(wrap_i32_i64(shr_u64(reinterpret_i64_f64(loc_0), i64_from_u32(32, 0))), 2147483647)
			if loc_2 <= 1072243195 then
				while true do
					if loc_2 < 1045430272 then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[557](loc_0, 0e0, 0)
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_2 >= 2146435072 then
				while true do
					loc_0 = (loc_0 - loc_0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[556](loc_0, loc_1)
			loc_2 = reg_0
			loc_0 = load_f64(memory_at_0, loc_1 + 8)
			loc_3 = load_f64(memory_at_0, loc_1)
			while true do
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 0, 1, 2, }
								end)()
							end
							temp = br_map[1][band_i32(loc_2, 3)] or 3
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								desired = 2
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[557](loc_3, loc_0, 1)
						loc_0 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[555](loc_3, loc_0)
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[557](loc_3, loc_0, 1)
				loc_0 = neg_f64(reg_0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[555](loc_3, loc_0)
			loc_0 = neg_f64(reg_0)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_1, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[567] = --[[ sinh ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = copysign_f64(5e-1, loc_0)
		while true do
			loc_1 = abs_f64(loc_0)
			loc_3 = wrap_i32_i64(shr_u64(reinterpret_i64_f64(loc_1), i64_from_u32(32, 0)))
			if loc_3 <= 1082535489 then
				while true do
					reg_0 = FUNC_LIST[561](loc_1)
					loc_1 = reg_0
					if loc_3 <= 1072693247 then
						while true do
							if loc_3 < 1045430272 then
								desired = 1
								break
							end
							reg_0 = (loc_2 * ((loc_1 + loc_1) - ((loc_1 * loc_1) / (loc_1 + 1e0))))
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					reg_0 = (loc_2 * (loc_1 + (loc_1 / (loc_1 + 1e0))))
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[562](loc_1, (loc_2 + loc_2))
			loc_0 = reg_0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[568] = --[[ snprintf ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local reg_0
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		store_i32(memory_at_0, loc_4 + 12, loc_3)
		reg_0 = FUNC_LIST[569](loc_0, loc_1, loc_2, loc_3)
		loc_3 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[569] = --[[ vsnprintf ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 160)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = (if loc_1 ~= 0 then loc_0 else add_i32(loc_4, 158))
		store_i32(memory_at_0, loc_4 + 148, loc_5)
		loc_0 = 4294967295
		loc_6 = sub_i32(loc_1, 1)
		store_i32(memory_at_0, loc_4 + 152, (if loc_1 >= loc_6 then loc_6 else 0))
		reg_0 = FUNC_LIST[479](loc_4, 0, 144)
		loc_4 = reg_0
		store_i32(memory_at_0, loc_4 + 76, 4294967295)
		store_i32(memory_at_0, loc_4 + 36, 177)
		store_i32(memory_at_0, loc_4 + 80, 4294967295)
		store_i32(memory_at_0, loc_4 + 44, add_i32(loc_4, 159))
		store_i32(memory_at_0, loc_4 + 84, add_i32(loc_4, 148))
		while true do
			if lt_i32(loc_1, 0) then
				while true do
					reg_0 = FUNC_LIST[476]()
					store_i32(memory_at_0, reg_0, 61)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			store_i32_n8(memory_at_0, loc_5, 0)
			reg_0 = FUNC_LIST[591](loc_4, loc_2, loc_3)
			loc_0 = reg_0
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_4, 160)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[570] = --[[ strnlen ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[564](loc_0, 0, loc_1)
		loc_2 = reg_0
		reg_0 = (if loc_2 ~= 0 then sub_i32(loc_2, loc_0) else loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[571] = --[[ strspn ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		store_i64(memory_at_0, loc_4 + 24, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 16, i64_ZERO)
		store_i64(memory_at_0, loc_4 + 8, i64_ZERO)
		store_i64(memory_at_0, loc_4, i64_ZERO)
		loc_2 = load_i32_u8(memory_at_0, loc_1)
		if loc_2 == 0 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if load_i32_u8(memory_at_0, loc_1 + 1) == 0 then
			while true do
				loc_1 = loc_0
				while true do
					loc_3 = loc_1
					loc_1 = add_i32(loc_3, 1)
					if loc_2 == load_i32_u8(memory_at_0, loc_3) then
						continue
					end
					break
				end
				if desired then
					break
				end
				reg_0 = sub_i32(loc_3, loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_3 = add_i32(band_i32(shr_u32(loc_2, 3), 28), loc_4)
			store_i32(memory_at_0, loc_3, bor_i32(load_i32(memory_at_0, loc_3), shl_i32(1, loc_2)))
			loc_2 = load_i32_u8(memory_at_0, loc_1 + 1)
			loc_1 = add_i32(loc_1, 1)
			if loc_2 ~= 0 then
				continue
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_3 = loc_0
		while true do
			loc_2 = load_i32_u8(memory_at_0, loc_0)
			if loc_2 == 0 then
				break
			end
			loc_1 = loc_0
			while true do
				if band_i32(shr_u32(load_i32(memory_at_0, add_i32(band_i32(shr_u32(loc_2, 3), 28), loc_4)), loc_2), 1) == 0 then
					while true do
						loc_3 = loc_1
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				loc_2 = load_i32_u8(memory_at_0, loc_1 + 1)
				loc_3 = add_i32(loc_1, 1)
				loc_1 = loc_3
				if loc_2 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = sub_i32(loc_3, loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[572] = --[[ strtod ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0.0
	local reg_0
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		FUNC_LIST[573](loc_2, loc_0, loc_1)
		reg_0 = FUNC_LIST[529](load_i64(memory_at_0, loc_2), load_i64(memory_at_0, loc_2 + 8))
		loc_3 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_2, 16)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[573] = --[[ strtox ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = i64_ZERO
	local loc_5 = i64_ZERO
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 160)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, loc_3 + 60, loc_1)
		store_i32(memory_at_0, loc_3 + 20, loc_1)
		store_i32(memory_at_0, loc_3 + 24, 4294967295)
		FUNC_LIST[574](add_i32(loc_3, 16))
		FUNC_LIST[575](loc_3, add_i32(loc_3, 16))
		loc_4 = load_i64(memory_at_0, loc_3 + 8)
		loc_5 = load_i64(memory_at_0, loc_3)
		if loc_2 ~= 0 then
			while true do
				store_i32(memory_at_0, loc_2, add_i32(load_i32(memory_at_0, loc_3 + 136), add_i32(sub_i32(load_i32(memory_at_0, loc_3 + 20), load_i32(memory_at_0, loc_3 + 60)), loc_1)))
				break
			end
		end
		store_i64(memory_at_0, loc_0 + 8, loc_4)
		store_i64(memory_at_0, loc_0, loc_5)
		GLOBAL_LIST[0].value = add_i32(loc_3, 160)
		break
	end
end
FUNC_LIST[574] = --[[ __shlim ]] function(loc_0)
	while true do
		store_i64(memory_at_0, loc_0 + 112, i64_ZERO)
		store_i32(memory_at_0, loc_0 + 104, load_i32(memory_at_0, loc_0 + 8))
		store_i64(memory_at_0, loc_0 + 120, extend_i64_i32(sub_i32(load_i32(memory_at_0, loc_0 + 44), load_i32(memory_at_0, loc_0 + 4))))
		break
	end
end
FUNC_LIST[575] = --[[ __floatscan ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = i64_ZERO
	local loc_8 = i64_ZERO
	local loc_9 = i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_5
		while true do
			while true do
				loc_2 = load_i32(memory_at_0, loc_1 + 4)
				if loc_2 ~= load_i32(memory_at_0, loc_1 + 104) then
					while true do
						store_i32(memory_at_0, loc_1 + 4, add_i32(loc_2, 1))
						reg_0 = load_i32_u8(memory_at_0, loc_2)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[576](loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_2 = reg_0
			reg_0 = FUNC_LIST[553](loc_2)
			if reg_0 ~= 0 then
				continue
			end
			break
		end
		loc_6 = 1
		while true do
			while true do
				if not br_map[1] then
					br_map[1] = (function()
						return { [0] = 0, 1, 0, }
					end)()
				end
				temp = br_map[1][sub_i32(loc_2, 43)] or 1
				if temp < 1 then
					break
				else
					desired = 1
					break
				end
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = (if loc_2 == 45 then 4294967295 else 1)
			loc_2 = load_i32(memory_at_0, loc_1 + 4)
			if loc_2 ~= load_i32(memory_at_0, loc_1 + 104) then
				while true do
					store_i32(memory_at_0, loc_1 + 4, add_i32(loc_2, 1))
					loc_2 = load_i32_u8(memory_at_0, loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[576](loc_1)
			loc_2 = reg_0
			break
		end
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_4 = band_i32(loc_2, 4294967263)
							if loc_4 == 78 then
								while true do
									while true do
										if loc_3 == 2 then
											desired = 4
											break
										end
										while true do
											loc_2 = load_i32(memory_at_0, loc_1 + 4)
											if loc_2 ~= load_i32(memory_at_0, loc_1 + 104) then
												while true do
													store_i32(memory_at_0, loc_1 + 4, add_i32(loc_2, 1))
													reg_0 = load_i32_u8(memory_at_0, loc_2)
													desired = 8
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
											end
											reg_0 = FUNC_LIST[576](loc_1)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
										loc_2 = reg_0
										loc_4 = add_i32(loc_3, 3494)
										loc_3 = add_i32(loc_3, 1)
										if load_i32_i8(memory_at_0, loc_4) == bor_i32(loc_2, 32) then
											continue
										end
										desired = 5
										break
									end
									if desired then
										break
									end
									error("out of code bounds")
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_4 ~= 73 then
								desired = 2
								break
							end
							while true do
								while true do
									loc_4 = loc_3
									if loc_4 == 7 then
										desired = 6
										break
									end
									while true do
										loc_2 = load_i32(memory_at_0, loc_1 + 4)
										if loc_2 ~= load_i32(memory_at_0, loc_1 + 104) then
											while true do
												store_i32(memory_at_0, loc_1 + 4, add_i32(loc_2, 1))
												reg_0 = load_i32_u8(memory_at_0, loc_2)
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										reg_0 = FUNC_LIST[576](loc_1)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									loc_2 = reg_0
									loc_3 = add_i32(loc_4, 1)
									if load_i32_i8(memory_at_0, add_i32(loc_4, 1055)) == bor_i32(loc_2, 32) then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								while true do
									if loc_4 == 2 then
										while true do
											loc_3 = 3
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									if loc_4 == 7 then
										desired = 6
										break
									end
									if loc_4 < 3 then
										desired = 5
										break
									end
									if loc_3 == 8 then
										desired = 6
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_7 = load_i64(memory_at_0, loc_1 + 112)
								if ge_i64(loc_7, i64_ZERO) then
									while true do
										store_i32(memory_at_0, loc_1 + 4, sub_i32(load_i32(memory_at_0, loc_1 + 4), 1))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								if loc_3 < 4 then
									break
								end
								loc_2 = (if lt_i64(loc_7, i64_ZERO) then 1 else 0)
								while true do
									if loc_2 == 0 then
										while true do
											store_i32(memory_at_0, loc_1 + 4, sub_i32(load_i32(memory_at_0, loc_1 + 4), 1))
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									loc_3 = sub_i32(loc_3, 1)
									if loc_3 > 3 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[530](add_i32(loc_5, 32), (convert_f32_i32(loc_6) * math.huge))
							loc_8 = load_i64(memory_at_0, loc_5 + 40)
							loc_7 = load_i64(memory_at_0, loc_5 + 32)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if not br_map[2] then
							br_map[2] = (function()
								return { [0] = 2, 1, 1, 0, }
							end)()
						end
						temp = br_map[2][loc_3] or 1
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							loc_2 = load_i32(memory_at_0, loc_1 + 4)
							if loc_2 ~= load_i32(memory_at_0, loc_1 + 104) then
								while true do
									store_i32(memory_at_0, loc_1 + 4, add_i32(loc_2, 1))
									reg_0 = load_i32_u8(memory_at_0, loc_2)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = FUNC_LIST[576](loc_1)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = reg_0
						if loc_2 == 40 then
							while true do
								loc_3 = 1
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_8 = i64_from_u32(0, 2147450880)
						if lt_i64(load_i64(memory_at_0, loc_1 + 112), i64_ZERO) then
							desired = 1
							break
						end
						store_i32(memory_at_0, loc_1 + 4, sub_i32(load_i32(memory_at_0, loc_1 + 4), 1))
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							loc_2 = load_i32(memory_at_0, loc_1 + 4)
							if loc_2 ~= load_i32(memory_at_0, loc_1 + 104) then
								while true do
									store_i32(memory_at_0, loc_1 + 4, add_i32(loc_2, 1))
									reg_0 = load_i32_u8(memory_at_0, loc_2)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = FUNC_LIST[576](loc_1)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_2 = reg_0
						loc_4 = sub_i32(loc_2, 65)
						while true do
							while true do
								if sub_i32(loc_2, 48) < 10 then
									break
								end
								if loc_4 < 26 then
									break
								end
								loc_4 = sub_i32(loc_2, 97)
								if loc_2 == 95 then
									break
								end
								if loc_4 >= 26 then
									desired = 5
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_3 = add_i32(loc_3, 1)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_8 = i64_from_u32(0, 2147450880)
					if loc_2 == 41 then
						desired = 1
						break
					end
					loc_9 = load_i64(memory_at_0, loc_1 + 112)
					if ge_i64(loc_9, i64_ZERO) then
						while true do
							store_i32(memory_at_0, loc_1 + 4, sub_i32(load_i32(memory_at_0, loc_1 + 4), 1))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_3 == 0 then
						desired = 1
						break
					end
					while true do
						if ge_i64(loc_9, i64_ZERO) then
							while true do
								store_i32(memory_at_0, loc_1 + 4, sub_i32(load_i32(memory_at_0, loc_1 + 4), 1))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						loc_3 = sub_i32(loc_3, 1)
						if loc_3 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if ge_i64(load_i64(memory_at_0, loc_1 + 112), i64_ZERO) then
					while true do
						store_i32(memory_at_0, loc_1 + 4, sub_i32(load_i32(memory_at_0, loc_1 + 4), 1))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[476]()
				store_i32(memory_at_0, reg_0, 28)
				FUNC_LIST[574](loc_1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_2 ~= 48 then
					break
				end
				while true do
					loc_3 = load_i32(memory_at_0, loc_1 + 4)
					if loc_3 ~= load_i32(memory_at_0, loc_1 + 104) then
						while true do
							store_i32(memory_at_0, loc_1 + 4, add_i32(loc_3, 1))
							reg_0 = load_i32_u8(memory_at_0, loc_3)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[576](loc_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = reg_0
				if band_i32(loc_3, 4294967263) == 88 then
					while true do
						FUNC_LIST[579](loc_5, loc_1, loc_6)
						loc_8 = load_i64(memory_at_0, loc_5 + 8)
						loc_7 = load_i64(memory_at_0, loc_5)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if lt_i64(load_i64(memory_at_0, loc_1 + 112), i64_ZERO) then
					break
				end
				store_i32(memory_at_0, loc_1 + 4, sub_i32(load_i32(memory_at_0, loc_1 + 4), 1))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[580](add_i32(loc_5, 16), loc_1, loc_2, loc_6)
			loc_8 = load_i64(memory_at_0, loc_5 + 24)
			loc_7 = load_i64(memory_at_0, loc_5 + 16)
			break
		end
		store_i64(memory_at_0, loc_0, loc_7)
		store_i64(memory_at_0, loc_0 + 8, loc_8)
		GLOBAL_LIST[0].value = add_i32(loc_5, 48)
		break
	end
end
FUNC_LIST[576] = --[[ __shgetc ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = i64_ZERO
	local loc_5 = i64_ZERO
	local reg_0
	local desired
	while true do
		while true do
			loc_4 = load_i64(memory_at_0, loc_0 + 112)
			loc_1 = load_i32(memory_at_0, loc_0 + 4)
			loc_2 = load_i32(memory_at_0, loc_0 + 44)
			loc_5 = add_i64(load_i64(memory_at_0, loc_0 + 120), extend_i64_i32(sub_i32(loc_1, loc_2)))
			if band_i32((if ne_i64(loc_4, i64_ZERO) then 1 else 0), (if ge_i64(loc_5, loc_4) then 1 else 0)) ~= 0 then
				while true do
					reg_0 = loc_1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = FUNC_LIST[577](loc_0)
					loc_2 = reg_0
					if ge_i32(loc_2, 0) then
						desired = 1
						break
					end
					loc_2 = load_i32(memory_at_0, loc_0 + 44)
					reg_0 = load_i32(memory_at_0, loc_0 + 4)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = reg_0
			store_i64(memory_at_0, loc_0 + 112, i64_from_u32(4294967295, 4294967295))
			store_i32(memory_at_0, loc_0 + 104, loc_1)
			store_i64(memory_at_0, loc_0 + 120, add_i64(extend_i64_i32(sub_i32(loc_2, loc_1)), loc_5))
			reg_0 = 4294967295
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_5 = add_i64(loc_5, i64_ONE)
		loc_1 = load_i32(memory_at_0, loc_0 + 4)
		loc_3 = load_i32(memory_at_0, loc_0 + 8)
		while true do
			loc_4 = load_i64(memory_at_0, loc_0 + 112)
			if eq_i64(loc_4, i64_ZERO) then
				break
			end
			loc_4 = sub_i64(loc_4, loc_5)
			if ge_i64(loc_4, extend_i64_i32(sub_i32(loc_3, loc_1))) then
				break
			end
			loc_3 = add_i32(wrap_i32_i64(loc_4), loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32(memory_at_0, loc_0 + 104, loc_3)
		loc_3 = load_i32(memory_at_0, loc_0 + 44)
		store_i64(memory_at_0, loc_0 + 120, add_i64(extend_i64_i32(sub_i32(loc_3, loc_1)), loc_5))
		if loc_1 <= loc_3 then
			while true do
				store_i32_n8(memory_at_0, sub_i32(loc_1, 1), loc_2)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[577] = --[[ __uflow ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		loc_2 = 4294967295
		while true do
			reg_0 = FUNC_LIST[578](loc_0)
			if reg_0 ~= 0 then
				break
			end
			reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_0 + 32)](loc_0, add_i32(loc_1, 15), 1)
			if reg_0 ~= 1 then
				break
			end
			loc_2 = load_i32_u8(memory_at_0, loc_1 + 15)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_1, 16)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[578] = --[[ __toread ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_1 = load_i32(memory_at_0, loc_0 + 72)
		store_i32(memory_at_0, loc_0 + 72, bor_i32(sub_i32(loc_1, 1), loc_1))
		if load_i32(memory_at_0, loc_0 + 20) ~= load_i32(memory_at_0, loc_0 + 28) then
			while true do
				reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_0 + 36)](loc_0, 0, 0)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		store_i32(memory_at_0, loc_0 + 28, 0)
		store_i64(memory_at_0, loc_0 + 16, i64_ZERO)
		loc_1 = load_i32(memory_at_0, loc_0)
		if band_i32(loc_1, 4) ~= 0 then
			while true do
				store_i32(memory_at_0, loc_0, bor_i32(loc_1, 32))
				reg_0 = 4294967295
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = add_i32(load_i32(memory_at_0, loc_0 + 44), load_i32(memory_at_0, loc_0 + 48))
		store_i32(memory_at_0, loc_0 + 8, loc_2)
		store_i32(memory_at_0, loc_0 + 4, loc_2)
		reg_0 = shr_i32(shl_i32(loc_1, 27), 31)
		break
	end
	return reg_0
end
FUNC_LIST[579] = --[[ hexfloat ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = i64_ZERO
	local loc_12 = i64_ZERO
	local loc_13 = i64_ZERO
	local loc_14 = i64_ZERO
	local loc_15 = i64_ZERO
	local loc_16 = i64_ZERO
	local loc_17 = i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 432)
		GLOBAL_LIST[0].value = loc_3
		while true do
			loc_4 = load_i32(memory_at_0, loc_1 + 4)
			if loc_4 ~= load_i32(memory_at_0, loc_1 + 104) then
				while true do
					store_i32(memory_at_0, loc_1 + 4, add_i32(loc_4, 1))
					reg_0 = load_i32_u8(memory_at_0, loc_4)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[576](loc_1)
			break
		end
		loc_4 = reg_0
		while true do
			while true do
				while true do
					while true do
						if loc_4 ~= 48 then
							while true do
								if loc_4 ~= 46 then
									desired = 1
									break
								end
								loc_4 = load_i32(memory_at_0, loc_1 + 4)
								if loc_4 == load_i32(memory_at_0, loc_1 + 104) then
									desired = 4
									break
								end
								store_i32(memory_at_0, loc_1 + 4, add_i32(loc_4, 1))
								reg_0 = load_i32_u8(memory_at_0, loc_4)
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_4 = load_i32(memory_at_0, loc_1 + 4)
						if loc_4 ~= load_i32(memory_at_0, loc_1 + 104) then
							while true do
								loc_7 = 1
								store_i32(memory_at_0, loc_1 + 4, add_i32(loc_4, 1))
								loc_4 = load_i32_u8(memory_at_0, loc_4)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								loc_7 = 1
								reg_0 = FUNC_LIST[576](loc_1)
								loc_4 = reg_0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[576](loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = reg_0
			loc_6 = 1
			if loc_4 ~= 48 then
				break
			end
			while true do
				loc_15 = sub_i64(loc_15, i64_ONE)
				while true do
					loc_4 = load_i32(memory_at_0, loc_1 + 4)
					if loc_4 ~= load_i32(memory_at_0, loc_1 + 104) then
						while true do
							store_i32(memory_at_0, loc_1 + 4, add_i32(loc_4, 1))
							reg_0 = load_i32_u8(memory_at_0, loc_4)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[576](loc_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_4 = reg_0
				if loc_4 == 48 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = 1
			break
		end
		loc_13 = i64_from_u32(0, 1073676288)
		while true do
			while true do
				while true do
					loc_9 = loc_4
					while true do
						while true do
							loc_10 = sub_i32(loc_4, 48)
							if loc_10 < 10 then
								break
							end
							loc_9 = bor_i32(loc_4, 32)
							if band_i32((if loc_4 ~= 46 then 1 else 0), (if sub_i32(loc_9, 97) > 5 then 1 else 0)) ~= 0 then
								desired = 1
								break
							end
							if loc_4 ~= 46 then
								break
							end
							if loc_6 ~= 0 then
								desired = 3
								break
							end
							loc_6 = 1
							loc_15 = loc_12
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = (if gt_i32(loc_4, 57) then sub_i32(loc_9, 87) else loc_10)
						while true do
							if le_i64(loc_12, i64_from_u32(7, 0)) then
								while true do
									loc_5 = add_i32(shl_i32(loc_5, 4), loc_4)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if le_u64(loc_12, i64_from_u32(28, 0)) then
								while true do
									FUNC_LIST[531](add_i32(loc_3, 48), loc_4)
									FUNC_LIST[521](add_i32(loc_3, 32), loc_16, loc_13, i64_ZERO, i64_from_u32(0, 1073414144))
									loc_16 = load_i64(memory_at_0, loc_3 + 32)
									loc_13 = load_i64(memory_at_0, loc_3 + 40)
									FUNC_LIST[521](add_i32(loc_3, 16), load_i64(memory_at_0, loc_3 + 48), load_i64(memory_at_0, loc_3 + 56), loc_16, loc_13)
									FUNC_LIST[527](loc_3, load_i64(memory_at_0, loc_3 + 16), load_i64(memory_at_0, loc_3 + 24), loc_11, loc_14)
									loc_14 = load_i64(memory_at_0, loc_3 + 8)
									loc_11 = load_i64(memory_at_0, loc_3)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_4 == 0 then
								break
							end
							if loc_8 ~= 0 then
								break
							end
							FUNC_LIST[521](add_i32(loc_3, 80), loc_16, loc_13, i64_ZERO, i64_from_u32(0, 1073610752))
							FUNC_LIST[527](sub_i32(loc_3, 4294967232), load_i64(memory_at_0, loc_3 + 80), load_i64(memory_at_0, loc_3 + 88), loc_11, loc_14)
							loc_14 = load_i64(memory_at_0, loc_3 + 72)
							loc_8 = 1
							loc_11 = load_i64(memory_at_0, loc_3 + 64)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_12 = add_i64(loc_12, i64_ONE)
						loc_7 = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = load_i32(memory_at_0, loc_1 + 4)
					if loc_4 ~= load_i32(memory_at_0, loc_1 + 104) then
						while true do
							store_i32(memory_at_0, loc_1 + 4, add_i32(loc_4, 1))
							loc_4 = load_i32_u8(memory_at_0, loc_4)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = FUNC_LIST[576](loc_1)
							loc_4 = reg_0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = 46
			break
		end
		while true do
			if loc_7 == 0 then
				while true do
					while true do
						if lt_i64(load_i64(memory_at_0, loc_1 + 112), i64_ZERO) then
							break
						end
						loc_4 = load_i32(memory_at_0, loc_1 + 4)
						store_i32(memory_at_0, loc_1 + 4, sub_i32(loc_4, 2))
						if loc_6 == 0 then
							break
						end
						store_i32(memory_at_0, loc_1 + 4, sub_i32(loc_4, 3))
						break
					end
					if desired then
						break
					end
					FUNC_LIST[532](add_i32(loc_3, 96), (convert_f64_i32(loc_2) * 0e0))
					loc_11 = load_i64(memory_at_0, loc_3 + 96)
					reg_0 = load_i64(memory_at_0, loc_3 + 104)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if le_i64(loc_12, i64_from_u32(7, 0)) then
				while true do
					loc_13 = loc_12
					while true do
						loc_5 = shl_i32(loc_5, 4)
						loc_13 = add_i64(loc_13, i64_ONE)
						if ne_i64(loc_13, i64_from_u32(8, 0)) then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				while true do
					while true do
						if band_i32(loc_4, 4294967263) == 80 then
							while true do
								reg_0 = FUNC_LIST[581](loc_1)
								loc_13 = reg_0
								if ne_i64(loc_13, i64_from_u32(0, 2147483648)) then
									desired = 2
									break
								end
								if ge_i64(load_i64(memory_at_0, loc_1 + 112), i64_ZERO) then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_13 = i64_ZERO
						if lt_i64(load_i64(memory_at_0, loc_1 + 112), i64_ZERO) then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_1 + 4, sub_i32(load_i32(memory_at_0, loc_1 + 4), 1))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_13 = i64_ZERO
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_5 == 0 then
				while true do
					FUNC_LIST[532](add_i32(loc_3, 112), (convert_f64_i32(loc_2) * 0e0))
					loc_11 = load_i64(memory_at_0, loc_3 + 112)
					reg_0 = load_i64(memory_at_0, loc_3 + 120)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_12 = sub_i64(add_i64(loc_13, shl_i64((if loc_6 ~= 0 then loc_15 else loc_12), i64_from_u32(2, 0))), i64_from_u32(32, 0))
			if ge_i64(loc_12, i64_from_u32(1075, 0)) then
				while true do
					reg_0 = FUNC_LIST[476]()
					store_i32(memory_at_0, reg_0, 68)
					FUNC_LIST[531](add_i32(loc_3, 160), loc_2)
					FUNC_LIST[521](add_i32(loc_3, 144), load_i64(memory_at_0, loc_3 + 160), load_i64(memory_at_0, loc_3 + 168), i64_from_u32(4294967295, 4294967295), i64_from_u32(4294967295, 2147418111))
					FUNC_LIST[521](add_i32(loc_3, 128), load_i64(memory_at_0, loc_3 + 144), load_i64(memory_at_0, loc_3 + 152), i64_from_u32(4294967295, 4294967295), i64_from_u32(4294967295, 2147418111))
					loc_11 = load_i64(memory_at_0, loc_3 + 128)
					reg_0 = load_i64(memory_at_0, loc_3 + 136)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if ge_i64(loc_12, i64_from_u32(4294965996, 4294967295)) then
				while true do
					if ge_i32(loc_5, 0) then
						while true do
							while true do
								FUNC_LIST[527](add_i32(loc_3, 416), loc_11, loc_14, i64_ZERO, i64_from_u32(0, 3221159936))
								reg_0 = FUNC_LIST[517](loc_11, loc_14, i64_ZERO, i64_from_u32(0, 1073610752))
								loc_4 = reg_0
								loc_4 = (if ge_i32(loc_4, 0) then 1 else 0)
								FUNC_LIST[527](add_i32(loc_3, 400), loc_11, loc_14, (if loc_4 ~= 0 then load_i64(memory_at_0, loc_3 + 416) else loc_11), (if loc_4 ~= 0 then load_i64(memory_at_0, loc_3 + 424) else loc_14))
								loc_12 = sub_i64(loc_12, i64_ONE)
								loc_14 = load_i64(memory_at_0, loc_3 + 408)
								loc_11 = load_i64(memory_at_0, loc_3 + 400)
								loc_5 = bor_i32(loc_4, shl_i32(loc_5, 1))
								if ge_i32(loc_5, 0) then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					while true do
						loc_15 = add_i64(loc_12, i64_from_u32(1106, 0))
						loc_4 = wrap_i32_i64(loc_15)
						loc_4 = (if ge_i64(loc_15, i64_from_u32(53, 0)) then 53 else (if gt_i32(loc_4, 0) then loc_4 else 0))
						if loc_4 >= 113 then
							while true do
								FUNC_LIST[531](add_i32(loc_3, 384), loc_2)
								loc_15 = load_i64(memory_at_0, loc_3 + 392)
								loc_16 = load_i64(memory_at_0, loc_3 + 384)
								reg_0 = i64_ZERO
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						reg_1 = FUNC_LIST[503](1e0, sub_i32(144, loc_4))
						FUNC_LIST[532](add_i32(loc_3, 352), reg_1)
						FUNC_LIST[531](add_i32(loc_3, 336), loc_2)
						loc_16 = load_i64(memory_at_0, loc_3 + 336)
						loc_15 = load_i64(memory_at_0, loc_3 + 344)
						FUNC_LIST[582](add_i32(loc_3, 368), load_i64(memory_at_0, loc_3 + 352), load_i64(memory_at_0, loc_3 + 360), loc_16, loc_15)
						loc_17 = load_i64(memory_at_0, loc_3 + 376)
						reg_0 = load_i64(memory_at_0, loc_3 + 368)
						break
					end
					if desired then
						break
					end
					loc_13 = reg_0
					reg_2 = FUNC_LIST[516](loc_11, loc_14, i64_ZERO, i64_ZERO)
					loc_4 = band_i32((if band_i32(loc_5, 1) == 0 then 1 else 0), band_i32((if reg_2 ~= 0 then 1 else 0), (if loc_4 < 32 then 1 else 0)))
					FUNC_LIST[533](add_i32(loc_3, 320), bor_i32(loc_4, loc_5))
					FUNC_LIST[521](add_i32(loc_3, 304), loc_16, loc_15, load_i64(memory_at_0, loc_3 + 320), load_i64(memory_at_0, loc_3 + 328))
					FUNC_LIST[527](add_i32(loc_3, 272), load_i64(memory_at_0, loc_3 + 304), load_i64(memory_at_0, loc_3 + 312), loc_13, loc_17)
					FUNC_LIST[521](add_i32(loc_3, 288), loc_16, loc_15, (if loc_4 ~= 0 then i64_ZERO else loc_11), (if loc_4 ~= 0 then i64_ZERO else loc_14))
					FUNC_LIST[527](add_i32(loc_3, 256), load_i64(memory_at_0, loc_3 + 288), load_i64(memory_at_0, loc_3 + 296), load_i64(memory_at_0, loc_3 + 272), load_i64(memory_at_0, loc_3 + 280))
					FUNC_LIST[528](add_i32(loc_3, 240), load_i64(memory_at_0, loc_3 + 256), load_i64(memory_at_0, loc_3 + 264), loc_13, loc_17)
					loc_11 = load_i64(memory_at_0, loc_3 + 240)
					loc_14 = load_i64(memory_at_0, loc_3 + 248)
					reg_0 = FUNC_LIST[516](loc_11, loc_14, i64_ZERO, i64_ZERO)
					if reg_0 == 0 then
						while true do
							reg_0 = FUNC_LIST[476]()
							store_i32(memory_at_0, reg_0, 68)
							break
						end
						if desired then
							break
						end
					end
					FUNC_LIST[583](add_i32(loc_3, 224), loc_11, loc_14, wrap_i32_i64(loc_12))
					loc_11 = load_i64(memory_at_0, loc_3 + 224)
					reg_0 = load_i64(memory_at_0, loc_3 + 232)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[476]()
			store_i32(memory_at_0, reg_0, 68)
			FUNC_LIST[531](add_i32(loc_3, 208), loc_2)
			FUNC_LIST[521](add_i32(loc_3, 192), load_i64(memory_at_0, loc_3 + 208), load_i64(memory_at_0, loc_3 + 216), i64_ZERO, i64_from_u32(0, 65536))
			FUNC_LIST[521](add_i32(loc_3, 176), load_i64(memory_at_0, loc_3 + 192), load_i64(memory_at_0, loc_3 + 200), i64_ZERO, i64_from_u32(0, 65536))
			loc_11 = load_i64(memory_at_0, loc_3 + 176)
			reg_0 = load_i64(memory_at_0, loc_3 + 184)
			break
		end
		loc_12 = reg_0
		store_i64(memory_at_0, loc_0, loc_11)
		store_i64(memory_at_0, loc_0 + 8, loc_12)
		GLOBAL_LIST[0].value = add_i32(loc_3, 432)
		break
	end
end
FUNC_LIST[580] = --[[ decfloat ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = i64_ZERO
	local loc_17 = i64_ZERO
	local loc_18 = i64_ZERO
	local loc_19 = i64_ZERO
	local loc_20 = i64_ZERO
	local loc_21 = i64_ZERO
	local loc_22 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 8976)
		GLOBAL_LIST[0].value = loc_4
		while true do
			while true do
				while true do
					while true do
						if loc_2 ~= 48 then
							while true do
								if loc_2 ~= 46 then
									desired = 1
									break
								end
								loc_2 = load_i32(memory_at_0, loc_1 + 4)
								if loc_2 == load_i32(memory_at_0, loc_1 + 104) then
									desired = 4
									break
								end
								store_i32(memory_at_0, loc_1 + 4, add_i32(loc_2, 1))
								reg_0 = load_i32_u8(memory_at_0, loc_2)
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_2 = load_i32(memory_at_0, loc_1 + 4)
						if loc_2 ~= load_i32(memory_at_0, loc_1 + 104) then
							while true do
								loc_9 = 1
								store_i32(memory_at_0, loc_1 + 4, add_i32(loc_2, 1))
								loc_2 = load_i32_u8(memory_at_0, loc_2)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								loc_9 = 1
								reg_0 = FUNC_LIST[576](loc_1)
								loc_2 = reg_0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[576](loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = reg_0
			loc_11 = 1
			if loc_2 ~= 48 then
				break
			end
			while true do
				loc_16 = sub_i64(loc_16, i64_ONE)
				while true do
					loc_2 = load_i32(memory_at_0, loc_1 + 4)
					if loc_2 ~= load_i32(memory_at_0, loc_1 + 104) then
						while true do
							store_i32(memory_at_0, loc_1 + 4, add_i32(loc_2, 1))
							reg_0 = load_i32_u8(memory_at_0, loc_2)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[576](loc_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_2 = reg_0
				if loc_2 == 48 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_9 = 1
			break
		end
		store_i32(memory_at_0, loc_4 + 784, 0)
		loc_7 = sub_i32(loc_2, 48)
		reg_0 = loc_0
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								loc_5 = (if loc_2 == 46 then 1 else 0)
								if loc_5 ~= 0 then
									break
								end
								if loc_7 <= 9 then
									break
								end
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								while true do
									if band_i32(loc_5, 1) ~= 0 then
										while true do
											if loc_11 == 0 then
												while true do
													loc_16 = loc_17
													loc_11 = 1
													desired = 7
													break
												end
												if desired then
													break
												end
											end
											loc_5 = (if loc_9 == 0 then 1 else 0)
											desired = 4
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_17 = add_i64(loc_17, i64_ONE)
									if le_i32(loc_8, 2044) then
										while true do
											loc_10 = (if loc_2 == 48 then loc_10 else wrap_i32_i64(loc_17))
											loc_5 = add_i32(add_i32(loc_4, 784), shl_i32(loc_8, 2))
											loc_15 = loc_5
											reg_1 = loc_15
											if loc_6 ~= 0 then
												while true do
													reg_2 = sub_i32(add_i32(mul_i32(load_i32(memory_at_0, loc_5), 10), loc_2), 48)
													break
												end
												if desired then
													break
												end
											else
												while true do
													reg_2 = loc_7
													break
												end
												if desired then
													break
												end
											end
											loc_7 = reg_2
											store_i32(memory_at_0, reg_1, loc_7)
											loc_9 = 1
											loc_2 = add_i32(loc_6, 1)
											reg_2 = loc_2
											loc_2 = (if loc_2 == 9 then 1 else 0)
											loc_6 = (if loc_2 ~= 0 then 0 else reg_2)
											loc_8 = add_i32(loc_2, loc_8)
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									if loc_2 == 48 then
										break
									end
									store_i32(memory_at_0, loc_4 + 8960, bor_i32(load_i32(memory_at_0, loc_4 + 8960), 1))
									loc_10 = 18396
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								while true do
									loc_2 = load_i32(memory_at_0, loc_1 + 4)
									if loc_2 ~= load_i32(memory_at_0, loc_1 + 104) then
										while true do
											store_i32(memory_at_0, loc_1 + 4, add_i32(loc_2, 1))
											reg_1 = load_i32_u8(memory_at_0, loc_2)
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									reg_1 = FUNC_LIST[576](loc_1)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								loc_2 = reg_1
								loc_7 = sub_i32(loc_2, 48)
								loc_5 = (if loc_2 == 46 then 1 else 0)
								if loc_5 ~= 0 then
									continue
								end
								if loc_7 < 10 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_16 = (if loc_11 ~= 0 then loc_16 else loc_17)
						while true do
							if loc_9 == 0 then
								break
							end
							if band_i32(loc_2, 4294967263) ~= 69 then
								break
							end
							while true do
								reg_1 = FUNC_LIST[581](loc_1)
								loc_18 = reg_1
								if ne_i64(loc_18, i64_from_u32(0, 2147483648)) then
									break
								end
								loc_18 = i64_ZERO
								if lt_i64(load_i64(memory_at_0, loc_1 + 112), i64_ZERO) then
									break
								end
								store_i32(memory_at_0, loc_1 + 4, sub_i32(load_i32(memory_at_0, loc_1 + 4), 1))
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_16 = add_i64(loc_16, loc_18)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = (if loc_9 == 0 then 1 else 0)
						if lt_i32(loc_2, 0) then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if lt_i64(load_i64(memory_at_0, loc_1 + 112), i64_ZERO) then
						break
					end
					store_i32(memory_at_0, loc_1 + 4, sub_i32(load_i32(memory_at_0, loc_1 + 4), 1))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_5 == 0 then
					break
				end
				reg_1 = FUNC_LIST[476]()
				store_i32(memory_at_0, reg_1, 28)
				FUNC_LIST[574](loc_1)
				loc_17 = i64_ZERO
				reg_1 = i64_ZERO
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = load_i32(memory_at_0, loc_4 + 784)
			if loc_1 == 0 then
				while true do
					FUNC_LIST[532](loc_4, (convert_f64_i32(loc_3) * 0e0))
					loc_17 = load_i64(memory_at_0, loc_4)
					reg_1 = load_i64(memory_at_0, loc_4 + 8)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				if gt_i64(loc_17, i64_from_u32(9, 0)) then
					break
				end
				if ne_i64(loc_16, loc_17) then
					break
				end
				FUNC_LIST[531](add_i32(loc_4, 48), loc_3)
				FUNC_LIST[533](add_i32(loc_4, 32), loc_1)
				FUNC_LIST[521](add_i32(loc_4, 16), load_i64(memory_at_0, loc_4 + 48), load_i64(memory_at_0, loc_4 + 56), load_i64(memory_at_0, loc_4 + 32), load_i64(memory_at_0, loc_4 + 40))
				loc_17 = load_i64(memory_at_0, loc_4 + 16)
				reg_1 = load_i64(memory_at_0, loc_4 + 24)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if ge_i64(loc_16, i64_from_u32(538, 0)) then
				while true do
					reg_1 = FUNC_LIST[476]()
					store_i32(memory_at_0, reg_1, 68)
					FUNC_LIST[531](add_i32(loc_4, 96), loc_3)
					FUNC_LIST[521](add_i32(loc_4, 80), load_i64(memory_at_0, loc_4 + 96), load_i64(memory_at_0, loc_4 + 104), i64_from_u32(4294967295, 4294967295), i64_from_u32(4294967295, 2147418111))
					FUNC_LIST[521](sub_i32(loc_4, 4294967232), load_i64(memory_at_0, loc_4 + 80), load_i64(memory_at_0, loc_4 + 88), i64_from_u32(4294967295, 4294967295), i64_from_u32(4294967295, 2147418111))
					loc_17 = load_i64(memory_at_0, loc_4 + 64)
					reg_1 = load_i64(memory_at_0, loc_4 + 72)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if le_i64(loc_16, i64_from_u32(4294965995, 4294967295)) then
				while true do
					reg_1 = FUNC_LIST[476]()
					store_i32(memory_at_0, reg_1, 68)
					FUNC_LIST[531](add_i32(loc_4, 144), loc_3)
					FUNC_LIST[521](add_i32(loc_4, 128), load_i64(memory_at_0, loc_4 + 144), load_i64(memory_at_0, loc_4 + 152), i64_ZERO, i64_from_u32(0, 65536))
					FUNC_LIST[521](add_i32(loc_4, 112), load_i64(memory_at_0, loc_4 + 128), load_i64(memory_at_0, loc_4 + 136), i64_ZERO, i64_from_u32(0, 65536))
					loc_17 = load_i64(memory_at_0, loc_4 + 112)
					reg_1 = load_i64(memory_at_0, loc_4 + 120)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_6 ~= 0 then
				while true do
					if le_i32(loc_6, 8) then
						while true do
							loc_2 = add_i32(add_i32(loc_4, 784), shl_i32(loc_8, 2))
							loc_1 = load_i32(memory_at_0, loc_2)
							while true do
								loc_1 = mul_i32(loc_1, 10)
								loc_6 = add_i32(loc_6, 1)
								if loc_6 ~= 9 then
									continue
								end
								break
							end
							if desired then
								break
							end
							store_i32(memory_at_0, loc_2, loc_1)
							break
						end
						if desired then
							break
						end
					end
					reg_1 = add_i32(loc_8, 1)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_1 = loc_8
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = reg_1
			loc_6 = wrap_i32_i64(loc_16)
			while true do
				if ge_i32(loc_10, 9) then
					break
				end
				if lt_i32(loc_6, loc_10) then
					break
				end
				if gt_i32(loc_6, 17) then
					break
				end
				if loc_6 == 9 then
					while true do
						FUNC_LIST[531](add_i32(loc_4, 192), loc_3)
						FUNC_LIST[533](add_i32(loc_4, 176), load_i32(memory_at_0, loc_4 + 784))
						FUNC_LIST[521](add_i32(loc_4, 160), load_i64(memory_at_0, loc_4 + 192), load_i64(memory_at_0, loc_4 + 200), load_i64(memory_at_0, loc_4 + 176), load_i64(memory_at_0, loc_4 + 184))
						loc_17 = load_i64(memory_at_0, loc_4 + 160)
						reg_1 = load_i64(memory_at_0, loc_4 + 168)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if le_i32(loc_6, 8) then
					while true do
						FUNC_LIST[531](add_i32(loc_4, 272), loc_3)
						FUNC_LIST[533](add_i32(loc_4, 256), load_i32(memory_at_0, loc_4 + 784))
						FUNC_LIST[521](add_i32(loc_4, 240), load_i64(memory_at_0, loc_4 + 272), load_i64(memory_at_0, loc_4 + 280), load_i64(memory_at_0, loc_4 + 256), load_i64(memory_at_0, loc_4 + 264))
						FUNC_LIST[531](add_i32(loc_4, 224), load_i32(memory_at_0, add_i32(shl_i32(sub_i32(0, loc_6), 2), 46032)))
						FUNC_LIST[519](add_i32(loc_4, 208), load_i64(memory_at_0, loc_4 + 240), load_i64(memory_at_0, loc_4 + 248), load_i64(memory_at_0, loc_4 + 224), load_i64(memory_at_0, loc_4 + 232))
						loc_17 = load_i64(memory_at_0, loc_4 + 208)
						reg_1 = load_i64(memory_at_0, loc_4 + 216)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = load_i32(memory_at_0, loc_4 + 784)
				if ge_i32(loc_6, 17) then
					while true do
						if shr_u32(loc_1, add_i32(mul_i32(loc_6, 4294967293), 80)) ~= 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[531](add_i32(loc_4, 352), loc_3)
				FUNC_LIST[533](add_i32(loc_4, 336), loc_1)
				FUNC_LIST[521](add_i32(loc_4, 320), load_i64(memory_at_0, loc_4 + 352), load_i64(memory_at_0, loc_4 + 360), load_i64(memory_at_0, loc_4 + 336), load_i64(memory_at_0, loc_4 + 344))
				FUNC_LIST[531](add_i32(loc_4, 304), load_i32(memory_at_0, add_i32(shl_i32(loc_6, 2), 45960)))
				FUNC_LIST[521](add_i32(loc_4, 288), load_i64(memory_at_0, loc_4 + 320), load_i64(memory_at_0, loc_4 + 328), load_i64(memory_at_0, loc_4 + 304), load_i64(memory_at_0, loc_4 + 312))
				loc_17 = load_i64(memory_at_0, loc_4 + 288)
				reg_1 = load_i64(memory_at_0, loc_4 + 296)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_5 = loc_8
				loc_8 = sub_i32(loc_5, 1)
				if load_i32(memory_at_0, add_i32(add_i32(loc_4, 784), shl_i32(loc_8, 2))) == 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_10 = 0
			while true do
				loc_1 = rem_i32(loc_6, 9)
				if loc_1 == 0 then
					while true do
						loc_7 = 0
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_7 = 0
				loc_12 = (if lt_i32(loc_6, 0) then add_i32(loc_1, 9) else loc_1)
				while true do
					if loc_5 == 0 then
						while true do
							loc_5 = 0
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_9 = load_i32(memory_at_0, add_i32(shl_i32(sub_i32(0, loc_12), 2), 46032))
					loc_13 = div_i32(1000000000, loc_9)
					loc_2 = 0
					loc_1 = 0
					while true do
						loc_8 = add_i32(add_i32(loc_4, 784), shl_i32(loc_1, 2))
						reg_1 = loc_8
						loc_8 = load_i32(memory_at_0, loc_8)
						loc_11 = div_u32(loc_8, loc_9)
						loc_2 = add_i32(loc_2, loc_11)
						store_i32(memory_at_0, reg_1, loc_2)
						loc_2 = band_i32((if loc_2 == 0 then 1 else 0), (if loc_1 == loc_7 then 1 else 0))
						loc_7 = (if loc_2 ~= 0 then band_i32(add_i32(loc_7, 1), 2047) else loc_7)
						loc_6 = (if loc_2 ~= 0 then sub_i32(loc_6, 9) else loc_6)
						loc_2 = mul_i32(sub_i32(loc_8, mul_i32(loc_9, loc_11)), loc_13)
						loc_1 = add_i32(loc_1, 1)
						if loc_5 ~= loc_1 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_2 == 0 then
						break
					end
					store_i32(memory_at_0, add_i32(add_i32(loc_4, 784), shl_i32(loc_5, 2)), loc_2)
					loc_5 = add_i32(loc_5, 1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = add_i32(sub_i32(loc_6, loc_12), 9)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_12 = add_i32(add_i32(loc_4, 784), shl_i32(loc_7, 2))
				loc_13 = (if lt_i32(loc_6, 36) then 1 else 0)
				while true do
					while true do
						while true do
							if loc_13 ~= 0 then
								break
							end
							if loc_6 ~= 36 then
								desired = 3
								break
							end
							if load_i32(memory_at_0, loc_12) <= 10384592 then
								break
							end
							loc_6 = 36
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_8 = add_i32(loc_5, 2047)
						loc_9 = 0
						while true do
							loc_2 = loc_5
							loc_1 = band_i32(loc_8, 2047)
							loc_5 = add_i32(add_i32(loc_4, 784), shl_i32(loc_1, 2))
							loc_16 = add_i64(extend_i64_u32(loc_9), shl_i64(load_i64_u32(memory_at_0, loc_5), i64_from_u32(29, 0)))
							if lt_u64(loc_16, i64_from_u32(1000000001, 0)) then
								while true do
									reg_1 = 0
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							else
								while true do
									loc_17 = div_u64(loc_16, i64_from_u32(1000000000, 0))
									loc_16 = add_i64(loc_16, mul_i64(loc_17, i64_from_u32(3294967296, 4294967295)))
									reg_1 = wrap_i32_i64(loc_17)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_9 = reg_1
							loc_8 = wrap_i32_i64(loc_16)
							store_i32(memory_at_0, loc_5, loc_8)
							loc_11 = band_i32(sub_i32(loc_2, 1), 2047)
							loc_5 = (if loc_11 ~= loc_1 then loc_2 else (if loc_1 == loc_7 then loc_2 else (if loc_8 ~= 0 then loc_2 else loc_1)))
							loc_8 = sub_i32(loc_1, 1)
							if loc_1 ~= loc_7 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_10 = sub_i32(loc_10, 29)
						loc_5 = loc_2
						if loc_9 == 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_7 = band_i32(sub_i32(loc_7, 1), 2047)
					if loc_7 ~= loc_2 then
						while true do
							reg_1 = loc_2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							loc_1 = add_i32(add_i32(loc_4, 784), shl_i32(band_i32(add_i32(loc_2, 2046), 2047), 2))
							store_i32(memory_at_0, loc_1, bor_i32(load_i32(memory_at_0, loc_1), load_i32(memory_at_0, add_i32(add_i32(loc_4, 784), shl_i32(loc_11, 2)))))
							reg_1 = loc_11
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = reg_1
					loc_6 = add_i32(loc_6, 9)
					store_i32(memory_at_0, add_i32(add_i32(loc_4, 784), shl_i32(loc_7, 2)), loc_9)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					loc_14 = band_i32(add_i32(loc_5, 1), 2047)
					loc_12 = add_i32(add_i32(loc_4, 784), shl_i32(band_i32(sub_i32(loc_5, 1), 2047), 2))
					while true do
						loc_8 = (if gt_i32(loc_6, 45) then 9 else 1)
						loc_11 = (if loc_6 ~= 36 then 1 else 0)
						while true do
							while true do
								loc_9 = loc_7
								loc_1 = 0
								while true do
									while true do
										while true do
											loc_2 = band_i32(add_i32(loc_1, loc_9), 2047)
											if loc_5 == loc_2 then
												break
											end
											loc_2 = load_i32(memory_at_0, add_i32(add_i32(loc_4, 784), shl_i32(loc_2, 2)))
											loc_7 = load_i32(memory_at_0, add_i32(shl_i32(loc_1, 2), 45984))
											if loc_2 < loc_7 then
												break
											end
											if loc_2 > loc_7 then
												desired = 7
												break
											end
											loc_1 = add_i32(loc_1, 1)
											if loc_1 ~= 4 then
												desired = 8
												break
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
												continue
											end
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_11 ~= 0 then
										break
									end
									loc_1 = 0
									loc_16 = i64_ZERO
									loc_17 = i64_ZERO
									while true do
										loc_2 = band_i32(add_i32(loc_1, loc_9), 2047)
										if loc_2 == loc_5 then
											while true do
												loc_5 = band_i32(add_i32(loc_5, 1), 2047)
												store_i32(memory_at_0, add_i32(loc_4, shl_i32(loc_5, 2)) + 780, 0)
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
										end
										FUNC_LIST[533](add_i32(loc_4, 768), load_i32(memory_at_0, add_i32(add_i32(loc_4, 784), shl_i32(loc_2, 2))))
										FUNC_LIST[521](add_i32(loc_4, 752), loc_16, loc_17, i64_ZERO, i64_from_u32(1342177280, 1075633366))
										FUNC_LIST[527](add_i32(loc_4, 736), load_i64(memory_at_0, loc_4 + 752), load_i64(memory_at_0, loc_4 + 760), load_i64(memory_at_0, loc_4 + 768), load_i64(memory_at_0, loc_4 + 776))
										loc_17 = load_i64(memory_at_0, loc_4 + 744)
										loc_16 = load_i64(memory_at_0, loc_4 + 736)
										loc_1 = add_i32(loc_1, 1)
										if loc_1 ~= 4 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									FUNC_LIST[531](add_i32(loc_4, 720), loc_3)
									FUNC_LIST[521](add_i32(loc_4, 704), loc_16, loc_17, load_i64(memory_at_0, loc_4 + 720), load_i64(memory_at_0, loc_4 + 728))
									loc_17 = load_i64(memory_at_0, loc_4 + 712)
									loc_16 = i64_ZERO
									loc_18 = load_i64(memory_at_0, loc_4 + 704)
									loc_2 = add_i32(loc_10, 1187)
									loc_1 = (if ge_i32(loc_10, 4294966162) then 53 else (if gt_i32(loc_2, 0) then loc_2 else 0))
									if loc_1 <= 112 then
										desired = 5
										break
									end
									desired = 2
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								loc_10 = add_i32(loc_8, loc_10)
								loc_7 = loc_5
								if loc_5 == loc_9 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_11 = shr_u32(1000000000, loc_8)
							loc_13 = bxor_i32(shl_i32(4294967295, loc_8), 4294967295)
							loc_1 = 0
							loc_7 = loc_9
							while true do
								loc_2 = add_i32(add_i32(loc_4, 784), shl_i32(loc_9, 2))
								reg_1 = loc_2
								loc_2 = load_i32(memory_at_0, loc_2)
								loc_1 = add_i32(loc_1, shr_u32(loc_2, loc_8))
								store_i32(memory_at_0, reg_1, loc_1)
								loc_1 = band_i32((if loc_1 == 0 then 1 else 0), (if loc_7 == loc_9 then 1 else 0))
								loc_7 = (if loc_1 ~= 0 then band_i32(add_i32(loc_7, 1), 2047) else loc_7)
								loc_6 = (if loc_1 ~= 0 then sub_i32(loc_6, 9) else loc_6)
								loc_1 = mul_i32(loc_11, band_i32(loc_2, loc_13))
								loc_9 = band_i32(add_i32(loc_9, 1), 2047)
								if loc_5 ~= loc_9 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_1 == 0 then
								desired = 4
								break
							end
							if loc_7 ~= loc_14 then
								while true do
									store_i32(memory_at_0, add_i32(add_i32(loc_4, 784), shl_i32(loc_5, 2)), loc_1)
									loc_5 = loc_14
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							store_i32(memory_at_0, loc_12, bor_i32(load_i32(memory_at_0, loc_12), 1))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_2 = FUNC_LIST[503](1e0, sub_i32(225, loc_1))
				FUNC_LIST[532](add_i32(loc_4, 656), reg_2)
				FUNC_LIST[582](add_i32(loc_4, 688), load_i64(memory_at_0, loc_4 + 656), load_i64(memory_at_0, loc_4 + 664), loc_18, loc_17)
				loc_21 = load_i64(memory_at_0, loc_4 + 696)
				loc_20 = load_i64(memory_at_0, loc_4 + 688)
				reg_2 = FUNC_LIST[503](1e0, sub_i32(113, loc_1))
				FUNC_LIST[532](add_i32(loc_4, 640), reg_2)
				FUNC_LIST[508](add_i32(loc_4, 672), loc_18, loc_17, load_i64(memory_at_0, loc_4 + 640), load_i64(memory_at_0, loc_4 + 648))
				loc_16 = load_i64(memory_at_0, loc_4 + 672)
				loc_19 = load_i64(memory_at_0, loc_4 + 680)
				FUNC_LIST[528](add_i32(loc_4, 624), loc_18, loc_17, loc_16, loc_19)
				FUNC_LIST[527](add_i32(loc_4, 608), loc_20, loc_21, load_i64(memory_at_0, loc_4 + 624), load_i64(memory_at_0, loc_4 + 632))
				loc_17 = load_i64(memory_at_0, loc_4 + 616)
				loc_18 = load_i64(memory_at_0, loc_4 + 608)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = add_i32(loc_10, 113)
			while true do
				loc_8 = band_i32(add_i32(loc_9, 4), 2047)
				if loc_5 == loc_8 then
					break
				end
				while true do
					loc_8 = load_i32(memory_at_0, add_i32(add_i32(loc_4, 784), shl_i32(loc_8, 2)))
					if loc_8 <= 499999999 then
						while true do
							if loc_8 == 0 then
								while true do
									if loc_5 == band_i32(add_i32(loc_9, 5), 2047) then
										desired = 3
										break
									end
									break
								end
								if desired then
									break
								end
							end
							FUNC_LIST[532](add_i32(loc_4, 496), (convert_f64_i32(loc_3) * 2.5e-1))
							FUNC_LIST[527](add_i32(loc_4, 480), loc_16, loc_19, load_i64(memory_at_0, loc_4 + 496), load_i64(memory_at_0, loc_4 + 504))
							loc_19 = load_i64(memory_at_0, loc_4 + 488)
							loc_16 = load_i64(memory_at_0, loc_4 + 480)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_8 ~= 500000000 then
						while true do
							FUNC_LIST[532](add_i32(loc_4, 592), (convert_f64_i32(loc_3) * 7.5e-1))
							FUNC_LIST[527](add_i32(loc_4, 576), loc_16, loc_19, load_i64(memory_at_0, loc_4 + 592), load_i64(memory_at_0, loc_4 + 600))
							loc_19 = load_i64(memory_at_0, loc_4 + 584)
							loc_16 = load_i64(memory_at_0, loc_4 + 576)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_22 = convert_f64_i32(loc_3)
					if band_i32(add_i32(loc_9, 5), 2047) == loc_5 then
						while true do
							FUNC_LIST[532](add_i32(loc_4, 528), (loc_22 * 5e-1))
							FUNC_LIST[527](add_i32(loc_4, 512), loc_16, loc_19, load_i64(memory_at_0, loc_4 + 528), load_i64(memory_at_0, loc_4 + 536))
							loc_19 = load_i64(memory_at_0, loc_4 + 520)
							loc_16 = load_i64(memory_at_0, loc_4 + 512)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[532](add_i32(loc_4, 560), (loc_22 * 7.5e-1))
					FUNC_LIST[527](add_i32(loc_4, 544), loc_16, loc_19, load_i64(memory_at_0, loc_4 + 560), load_i64(memory_at_0, loc_4 + 568))
					loc_19 = load_i64(memory_at_0, loc_4 + 552)
					loc_16 = load_i64(memory_at_0, loc_4 + 544)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_1 > 111 then
					break
				end
				FUNC_LIST[508](add_i32(loc_4, 464), loc_16, loc_19, i64_ZERO, i64_from_u32(0, 1073676288))
				reg_1 = FUNC_LIST[516](load_i64(memory_at_0, loc_4 + 464), load_i64(memory_at_0, loc_4 + 472), i64_ZERO, i64_ZERO)
				if reg_1 ~= 0 then
					break
				end
				FUNC_LIST[527](add_i32(loc_4, 448), loc_16, loc_19, i64_ZERO, i64_from_u32(0, 1073676288))
				loc_19 = load_i64(memory_at_0, loc_4 + 456)
				loc_16 = load_i64(memory_at_0, loc_4 + 448)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[527](add_i32(loc_4, 432), loc_18, loc_17, loc_16, loc_19)
			FUNC_LIST[528](add_i32(loc_4, 416), load_i64(memory_at_0, loc_4 + 432), load_i64(memory_at_0, loc_4 + 440), loc_20, loc_21)
			loc_17 = load_i64(memory_at_0, loc_4 + 424)
			loc_18 = load_i64(memory_at_0, loc_4 + 416)
			while true do
				if band_i32(loc_7, 2147483644) < 1020 then
					while true do
						loc_5 = loc_10
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[584](add_i32(loc_4, 400), loc_18, loc_17)
				FUNC_LIST[521](add_i32(loc_4, 384), loc_18, loc_17, i64_ZERO, i64_from_u32(0, 1073610752))
				reg_1 = FUNC_LIST[517](load_i64(memory_at_0, loc_4 + 400), load_i64(memory_at_0, loc_4 + 408), i64_ZERO, i64_from_u32(0, 1081081856))
				loc_7 = reg_1
				loc_5 = (if ge_i32(loc_7, 0) then 1 else 0)
				loc_17 = (if loc_5 ~= 0 then load_i64(memory_at_0, loc_4 + 392) else loc_17)
				loc_18 = (if loc_5 ~= 0 then load_i64(memory_at_0, loc_4 + 384) else loc_18)
				reg_1 = FUNC_LIST[516](loc_16, loc_19, i64_ZERO, i64_ZERO)
				loc_9 = reg_1
				loc_5 = add_i32(loc_5, loc_10)
				if le_i32(loc_5, 911) then
					while true do
						if band_i32(band_i32(bor_i32((if loc_1 ~= loc_2 then 1 else 0), (if lt_i32(loc_7, 0) then 1 else 0)), (if lt_i32(loc_10, 4294966162) then 1 else 0)), (if loc_9 ~= 0 then 1 else 0)) == 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = FUNC_LIST[476]()
				store_i32(memory_at_0, reg_1, 68)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[583](add_i32(loc_4, 368), loc_18, loc_17, loc_5)
			loc_17 = load_i64(memory_at_0, loc_4 + 368)
			reg_1 = load_i64(memory_at_0, loc_4 + 376)
			break
		end
		loc_16 = reg_1
		store_i64(memory_at_0, reg_0 + 8, loc_16)
		store_i64(memory_at_0, loc_0, loc_17)
		GLOBAL_LIST[0].value = add_i32(loc_4, 8976)
		break
	end
end
FUNC_LIST[581] = --[[ scanexp ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									loc_1 = load_i32(memory_at_0, loc_0 + 4)
									if loc_1 ~= load_i32(memory_at_0, loc_0 + 104) then
										while true do
											store_i32(memory_at_0, loc_0 + 4, add_i32(loc_1, 1))
											reg_0 = load_i32_u8(memory_at_0, loc_1)
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									reg_0 = FUNC_LIST[576](loc_0)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_1 = reg_0
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 0, 1, 0, }
									end)()
								end
								temp = br_map[1][sub_i32(loc_1, 43)] or 1
								if temp < 1 then
									break
								else
									desired = 5
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								loc_2 = load_i32(memory_at_0, loc_0 + 4)
								if loc_2 ~= load_i32(memory_at_0, loc_0 + 104) then
									while true do
										store_i32(memory_at_0, loc_0 + 4, add_i32(loc_2, 1))
										reg_0 = load_i32_u8(memory_at_0, loc_2)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = FUNC_LIST[576](loc_0)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_2 = reg_0
							if sub_i32(loc_2, 58) > 4294967285 then
								while true do
									loc_3 = (if loc_1 == 45 then 1 else 0)
									loc_1 = loc_2
									desired = 1
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if ge_i64(load_i64(memory_at_0, loc_0 + 112), i64_ZERO) then
								desired = 4
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if sub_i32(loc_1, 58) > 4294967285 then
							desired = 1
							break
						end
						if lt_i64(load_i64(memory_at_0, loc_0 + 112), i64_ZERO) then
							desired = 2
							break
						end
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32(memory_at_0, loc_0 + 4, sub_i32(load_i32(memory_at_0, loc_0 + 4), 1))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				store_i32(memory_at_0, loc_0 + 4, sub_i32(load_i32(memory_at_0, loc_0 + 4), 1))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = i64_from_u32(0, 2147483648)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			if sub_i32(loc_1, 48) >= 10 then
				break
			end
			loc_2 = 0
			while true do
				loc_2 = add_i32(mul_i32(loc_2, 10), loc_1)
				loc_2 = sub_i32(loc_2, 48)
				reg_0 = (if lt_i32(loc_2, 214748364) then 1 else 0)
				while true do
					loc_1 = load_i32(memory_at_0, loc_0 + 4)
					if loc_1 ~= load_i32(memory_at_0, loc_0 + 104) then
						while true do
							store_i32(memory_at_0, loc_0 + 4, add_i32(loc_1, 1))
							reg_1 = load_i32_u8(memory_at_0, loc_1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_1 = FUNC_LIST[576](loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_1 = reg_1
				loc_4 = sub_i32(loc_1, 48)
				if band_i32(reg_0, (if loc_4 <= 9 then 1 else 0)) ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = extend_i64_i32(loc_2)
			if loc_4 >= 10 then
				break
			end
			while true do
				loc_5 = add_i64(extend_i64_u32(loc_1), mul_i64(loc_5, i64_from_u32(10, 0)))
				while true do
					loc_1 = load_i32(memory_at_0, loc_0 + 4)
					if loc_1 ~= load_i32(memory_at_0, loc_0 + 104) then
						while true do
							store_i32(memory_at_0, loc_0 + 4, add_i32(loc_1, 1))
							reg_0 = load_i32_u8(memory_at_0, loc_1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[576](loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_1 = reg_0
				loc_2 = sub_i32(loc_1, 48)
				loc_5 = sub_i64(loc_5, i64_from_u32(48, 0))
				if band_i32((if loc_2 <= 9 then 1 else 0), (if lt_i64(loc_5, i64_from_u32(2061584302, 21474836)) then 1 else 0)) ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_2 >= 10 then
				break
			end
			while true do
				while true do
					loc_1 = load_i32(memory_at_0, loc_0 + 4)
					if loc_1 ~= load_i32(memory_at_0, loc_0 + 104) then
						while true do
							store_i32(memory_at_0, loc_0 + 4, add_i32(loc_1, 1))
							reg_0 = load_i32_u8(memory_at_0, loc_1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[576](loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_1 = reg_0
				if sub_i32(loc_1, 48) < 10 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		if ge_i64(load_i64(memory_at_0, loc_0 + 112), i64_ZERO) then
			while true do
				store_i32(memory_at_0, loc_0 + 4, sub_i32(load_i32(memory_at_0, loc_0 + 4), 1))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = (if loc_3 ~= 0 then sub_i64(i64_ZERO, loc_5) else loc_5)
		break
	end
	return reg_0
end
FUNC_LIST[582] = --[[ copysignl ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	while true do
		store_i64(memory_at_0, loc_0, loc_1)
		store_i64(memory_at_0, loc_0 + 8, bor_i64(band_i64(loc_2, i64_from_u32(4294967295, 65535)), shl_i64(extend_i64_u32(bor_i32(wrap_i32_i64(shr_u64(band_i64(loc_2, i64_from_u32(0, 2147418112)), i64_from_u32(48, 0))), band_i32(wrap_i32_i64(shr_u64(loc_4, i64_from_u32(48, 0))), 32768))), i64_from_u32(48, 0))))
		break
	end
end
FUNC_LIST[583] = --[[ scalbnl ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local desired
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_4
		while true do
			if ge_i32(loc_3, 16384) then
				while true do
					FUNC_LIST[521](add_i32(loc_4, 32), loc_1, loc_2, i64_ZERO, i64_from_u32(0, 2147352576))
					loc_2 = load_i64(memory_at_0, loc_4 + 40)
					loc_1 = load_i64(memory_at_0, loc_4 + 32)
					if loc_3 < 32767 then
						while true do
							loc_3 = sub_i32(loc_3, 16383)
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					FUNC_LIST[521](add_i32(loc_4, 16), loc_1, loc_2, i64_ZERO, i64_from_u32(0, 2147352576))
					loc_3 = sub_i32((if loc_3 >= 49149 then 49149 else loc_3), 32766)
					loc_2 = load_i64(memory_at_0, loc_4 + 24)
					loc_1 = load_i64(memory_at_0, loc_4 + 16)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if gt_i32(loc_3, 4294950913) then
				break
			end
			FUNC_LIST[521](sub_i32(loc_4, 4294967232), loc_1, loc_2, i64_ZERO, i64_from_u32(0, 7471104))
			loc_2 = load_i64(memory_at_0, loc_4 + 72)
			loc_1 = load_i64(memory_at_0, loc_4 + 64)
			if loc_3 > 4294934644 then
				while true do
					loc_3 = add_i32(loc_3, 16269)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[521](add_i32(loc_4, 48), loc_1, loc_2, i64_ZERO, i64_from_u32(0, 7471104))
			loc_3 = add_i32((if loc_3 <= 4294918376 then 4294918376 else loc_3), 32538)
			loc_2 = load_i64(memory_at_0, loc_4 + 56)
			loc_1 = load_i64(memory_at_0, loc_4 + 48)
			break
		end
		FUNC_LIST[521](loc_4, loc_1, loc_2, i64_ZERO, shl_i64(extend_i64_u32(add_i32(loc_3, 16383)), i64_from_u32(48, 0)))
		store_i64(memory_at_0, loc_0 + 8, load_i64(memory_at_0, loc_4 + 8))
		store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_4))
		GLOBAL_LIST[0].value = add_i32(loc_4, 80)
		break
	end
end
FUNC_LIST[584] = --[[ fabsl ]] function(loc_0, loc_1, loc_2)
	while true do
		store_i64(memory_at_0, loc_0 + 8, band_i64(loc_2, i64_from_u32(4294967295, 2147483647)))
		store_i64(memory_at_0, loc_0, loc_1)
		break
	end
end
FUNC_LIST[585] = --[[ strtoull ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[586](loc_0, loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[586] = --[[ strtox.49 ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = i64_ZERO
	local loc_10 = i64_ZERO
	local loc_11 = i64_ZERO
	local loc_12 = i64_ZERO
	local loc_13 = i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_6 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		while true do
			while true do
				while true do
					if le_i32(loc_2, 36) then
						while true do
							loc_4 = load_i32_u8(memory_at_0, loc_0)
							if loc_4 ~= 0 then
								desired = 3
								break
							end
							loc_3 = loc_0
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[476]()
					store_i32(memory_at_0, reg_0, 28)
					reg_0 = i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = loc_0
				while true do
					while true do
						reg_0 = FUNC_LIST[553](extend_i32_n8(loc_4))
						if reg_0 == 0 then
							desired = 3
							break
						end
						loc_4 = load_i32_u8(memory_at_0, loc_3 + 1)
						loc_5 = add_i32(loc_3, 1)
						loc_3 = loc_5
						if loc_4 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					loc_4 = band_i32(loc_4, 255)
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 0, 1, 0, }
						end)()
					end
					temp = br_map[1][sub_i32(loc_4, 43)] or 1
					if temp < 1 then
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_10 = (if loc_4 == 45 then i64_from_u32(4294967295, 4294967295) else i64_ZERO)
				loc_3 = add_i32(loc_3, 1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					if bor_i32(loc_2, 16) ~= 16 then
						break
					end
					if load_i32_u8(memory_at_0, loc_3) ~= 48 then
						break
					end
					loc_7 = 1
					if band_i32(load_i32_u8(memory_at_0, loc_3 + 1), 223) == 88 then
						while true do
							loc_3 = add_i32(loc_3, 2)
							reg_0 = 16
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = add_i32(loc_3, 1)
					reg_0 = (if loc_2 ~= 0 then loc_2 else 8)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = (if loc_2 ~= 0 then loc_2 else 10)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = reg_0
			loc_11 = extend_i64_u32(loc_8)
			loc_2 = 0
			while true do
				while true do
					while true do
						loc_5 = load_i32_u8(memory_at_0, loc_3)
						loc_4 = sub_i32(loc_5, 48)
						if band_i32(loc_4, 255) < 10 then
							break
						end
						if band_i32(sub_i32(loc_5, 97), 255) <= 25 then
							while true do
								loc_4 = sub_i32(loc_5, 87)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if band_i32(sub_i32(loc_5, 65), 255) > 25 then
							desired = 3
							break
						end
						loc_4 = sub_i32(loc_5, 55)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if ge_i32(band_i32(loc_4, 255), loc_8) then
						break
					end
					FUNC_LIST[522](loc_6, loc_11, i64_ZERO, loc_9, i64_ZERO)
					loc_5 = 1
					while true do
						if ne_i64(load_i64(memory_at_0, loc_6 + 8), i64_ZERO) then
							break
						end
						loc_12 = mul_i64(loc_9, loc_11)
						loc_13 = band_i64(extend_i64_u32(loc_4), i64_from_u32(255, 0))
						if gt_u64(loc_12, bxor_i64(loc_13, i64_from_u32(4294967295, 4294967295))) then
							break
						end
						loc_9 = add_i64(loc_12, loc_13)
						loc_7 = 1
						loc_5 = loc_2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = add_i32(loc_3, 1)
					loc_2 = loc_5
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_1 ~= 0 then
				while true do
					store_i32(memory_at_0, loc_1, (if loc_7 ~= 0 then loc_3 else loc_0))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_2 ~= 0 then
				while true do
					reg_0 = FUNC_LIST[476]()
					store_i32(memory_at_0, reg_0, 68)
					loc_10 = i64_ZERO
					reg_0 = i64_from_u32(4294967295, 4294967295)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_9
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_9 = reg_0
			reg_0 = sub_i64(bxor_i64(loc_9, loc_10), loc_10)
			break
		end
		loc_9 = reg_0
		GLOBAL_LIST[0].value = add_i32(loc_6, 16)
		reg_0 = loc_9
		break
	end
	return reg_0
end
FUNC_LIST[587] = --[[ tan ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_1 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		while true do
			loc_2 = band_i32(wrap_i32_i64(shr_u64(reinterpret_i64_f64(loc_0), i64_from_u32(32, 0))), 2147483647)
			if loc_2 <= 1072243195 then
				while true do
					if loc_2 < 1044381696 then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[588](loc_0, 0e0, 0)
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_2 >= 2146435072 then
				while true do
					loc_0 = (loc_0 - loc_0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[556](loc_0, loc_1)
			loc_2 = reg_0
			reg_0 = FUNC_LIST[588](load_f64(memory_at_0, loc_1), load_f64(memory_at_0, loc_1 + 8), band_i32(loc_2, 1))
			loc_0 = reg_0
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_1, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[588] = --[[ __tan ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = i64_ZERO
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_6 = reinterpret_i64_f64(loc_0)
		loc_7 = (if lt_u64(band_i64(loc_6, i64_from_u32(0, 2147483640)), i64_from_u32(1, 1072010279)) then 1 else 0)
		if loc_7 ~= 0 then
			while true do
				reg_0 = loc_1
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				loc_8 = (if ge_i64(loc_6, i64_ZERO) then 1 else 0)
				loc_0 = ((7.853981633974483e-1 - abs_f64(loc_0)) + (3.061616997868383e-17 - (if loc_8 ~= 0 then loc_1 else neg_f64(loc_1))))
				reg_0 = 0e0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_1 = reg_0
		loc_4 = (loc_0 * loc_0)
		loc_5 = (loc_0 * loc_4)
		loc_3 = (loc_4 * loc_4)
		loc_4 = ((loc_5 * 3.333333333333341e-1) + ((loc_4 * ((loc_5 * (((loc_3 * ((loc_3 * ((loc_3 * ((loc_3 * ((loc_3 * -1.8558637485527546e-5) + 7.817944429395571e-5)) + 5.880412408202641e-4)) + 3.5920791075913124e-3)) + 2.1869488294859542e-2)) + 1.3333333333320124e-1) + (loc_4 * ((loc_3 * ((loc_3 * ((loc_3 * ((loc_3 * ((loc_3 * 2.590730518636337e-5) + 7.140724913826082e-5)) + 2.464631348184699e-4)) + 1.4562094543252903e-3)) + 8.8632398235993e-3)) + 5.396825397622605e-2)))) + loc_1)) + loc_1))
		loc_3 = (loc_0 + loc_4)
		if loc_7 == 0 then
			while true do
				loc_1 = convert_f64_i32(sub_i32(1, shl_i32(loc_2, 1)))
				loc_3 = (loc_0 + (loc_4 - ((loc_3 * loc_3) / (loc_3 + loc_1))))
				loc_3 = (loc_1 - (loc_3 + loc_3))
				reg_0 = (if loc_8 ~= 0 then loc_3 else neg_f64(loc_3))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_2 ~= 0 then
			while true do
				loc_1 = (-1e0 / loc_3)
				reg_0 = loc_1
				loc_1 = reinterpret_f64_i64(band_i64(reinterpret_i64_f64(loc_1), i64_from_u32(0, 4294967295)))
				loc_3 = reinterpret_f64_i64(band_i64(reinterpret_i64_f64(loc_3), i64_from_u32(0, 4294967295)))
				reg_0 = ((reg_0 * ((loc_1 * (loc_4 - (loc_3 - loc_0))) + ((loc_1 * loc_3) + 1e0))) + loc_1)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_3
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = reg_0
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[589] = --[[ tanh ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		while true do
			loc_1 = abs_f64(loc_0)
			loc_2 = wrap_i32_i64(shr_u64(reinterpret_i64_f64(loc_1), i64_from_u32(32, 0)))
			if loc_2 >= 1071748075 then
				while true do
					if loc_2 >= 1077149697 then
						while true do
							loc_1 = ((-0e0 / loc_1) + 1e0)
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					reg_2 = FUNC_LIST[561]((loc_1 + loc_1))
					loc_1 = (1e0 - (2e0 / (reg_2 + 2e0)))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_2 >= 1070618799 then
				while true do
					reg_0 = FUNC_LIST[561]((loc_1 + loc_1))
					loc_1 = reg_0
					loc_1 = (loc_1 / (loc_1 + 2e0))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_2 < 1048576 then
				break
			end
			reg_0 = FUNC_LIST[561]((loc_1 * -2e0))
			loc_1 = reg_0
			loc_1 = (neg_f64(loc_1) / (loc_1 + 2e0))
			break
		end
		reg_0 = (if lt_i64(reinterpret_i64_f64(loc_0), i64_ZERO) then neg_f64(loc_1) else loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[590] = --[[ sn_write ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		loc_3 = load_i32(memory_at_0, loc_0 + 84)
		loc_5 = load_i32(memory_at_0, loc_3)
		loc_4 = load_i32(memory_at_0, loc_3 + 4)
		loc_7 = load_i32(memory_at_0, loc_0 + 28)
		loc_6 = sub_i32(load_i32(memory_at_0, loc_0 + 20), loc_7)
		loc_6 = (if loc_4 < loc_6 then loc_4 else loc_6)
		if loc_6 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[477](loc_5, loc_7, loc_6)
				loc_5 = add_i32(loc_6, load_i32(memory_at_0, loc_3))
				store_i32(memory_at_0, loc_3, loc_5)
				loc_4 = sub_i32(load_i32(memory_at_0, loc_3 + 4), loc_6)
				store_i32(memory_at_0, loc_3 + 4, loc_4)
				break
			end
		end
		loc_4 = (if loc_2 > loc_4 then loc_4 else loc_2)
		if loc_4 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[477](loc_5, loc_1, loc_4)
				loc_5 = add_i32(loc_4, load_i32(memory_at_0, loc_3))
				store_i32(memory_at_0, loc_3, loc_5)
				store_i32(memory_at_0, loc_3 + 4, sub_i32(load_i32(memory_at_0, loc_3 + 4), loc_4))
				break
			end
		end
		store_i32_n8(memory_at_0, loc_5, 0)
		loc_3 = load_i32(memory_at_0, loc_0 + 44)
		store_i32(memory_at_0, loc_0 + 28, loc_3)
		store_i32(memory_at_0, loc_0 + 20, loc_3)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[591] = --[[ vfprintf ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[592](loc_0, loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[592] = --[[ __vfprintf_internal ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 208)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, loc_3 + 204, loc_2)
		reg_0 = FUNC_LIST[479](add_i32(loc_3, 160), 0, 40)
		store_i32(memory_at_0, loc_3 + 200, load_i32(memory_at_0, loc_3 + 204))
		while true do
			reg_0 = FUNC_LIST[593](0, loc_1, add_i32(loc_3, 200), add_i32(loc_3, 80), add_i32(loc_3, 160))
			if lt_i32(reg_0, 0) then
				while true do
					loc_1 = 4294967295
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if lt_i32(load_i32(memory_at_0, loc_0 + 76), 0) then
				while true do
					reg_0 = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = FUNC_LIST[505](loc_0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_5 = (if reg_0 == 0 then 1 else 0)
			loc_6 = load_i32(memory_at_0, loc_0)
			store_i32(memory_at_0, loc_0, band_i32(loc_6, 4294967263))
			while true do
				while true do
					while true do
						if load_i32(memory_at_0, loc_0 + 48) == 0 then
							while true do
								store_i32(memory_at_0, loc_0 + 48, 80)
								store_i32(memory_at_0, loc_0 + 28, 0)
								store_i64(memory_at_0, loc_0 + 16, i64_ZERO)
								loc_4 = load_i32(memory_at_0, loc_0 + 44)
								store_i32(memory_at_0, loc_0 + 44, loc_3)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if load_i32(memory_at_0, loc_0 + 16) ~= 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = 4294967295
					reg_1 = FUNC_LIST[509](loc_0)
					reg_0 = loc_2
					if reg_1 ~= 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[593](loc_0, loc_1, add_i32(loc_3, 200), add_i32(loc_3, 80), add_i32(loc_3, 160))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = reg_0
			loc_1 = band_i32(loc_6, 32)
			if loc_4 ~= 0 then
				while true do
					reg_0 = TABLE_LIST[0].data[load_i32(memory_at_0, loc_0 + 36)](loc_0, 0, 0)
					store_i32(memory_at_0, loc_0 + 48, 0)
					store_i32(memory_at_0, loc_0 + 44, loc_4)
					store_i32(memory_at_0, loc_0 + 28, 0)
					loc_4 = load_i32(memory_at_0, loc_0 + 20)
					store_i64(memory_at_0, loc_0 + 16, i64_ZERO)
					reg_0 = (if loc_4 ~= 0 then loc_2 else 4294967295)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_2
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = reg_0
			loc_4 = load_i32(memory_at_0, loc_0)
			store_i32(memory_at_0, loc_0, bor_i32(loc_1, loc_4))
			loc_1 = (if band_i32(loc_4, 32) ~= 0 then 4294967295 else loc_2)
			if loc_5 ~= 0 then
				break
			end
			FUNC_LIST[506](loc_0)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 208)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[593] = --[[ printf_core ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local loc_23 = i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local reg_5
	local desired
	local br_map = {}
	while true do
		loc_6 = sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_6
		store_i32(memory_at_0, loc_6 + 76, loc_1)
		loc_22 = add_i32(loc_6, 55)
		loc_16 = add_i32(loc_6, 56)
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_5 = 0
							while true do
								loc_11 = loc_1
								if lt_i32(bxor_i32(loc_12, 2147483647), loc_5) then
									desired = 4
									break
								end
								loc_12 = add_i32(loc_5, loc_12)
								while true do
									while true do
										while true do
											loc_5 = loc_1
											loc_10 = load_i32_u8(memory_at_0, loc_5)
											if loc_10 ~= 0 then
												while true do
													while true do
														while true do
															while true do
																loc_10 = band_i32(loc_10, 255)
																if loc_10 == 0 then
																	while true do
																		loc_1 = loc_5
																		desired = 13
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																if loc_10 ~= 37 then
																	desired = 12
																	break
																end
																loc_10 = loc_5
																while true do
																	if load_i32_u8(memory_at_0, loc_10 + 1) ~= 37 then
																		while true do
																			loc_1 = loc_10
																			desired = 13
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																				continue
																			end
																			break
																		end
																	end
																	loc_5 = add_i32(loc_5, 1)
																	loc_7 = load_i32_u8(memory_at_0, loc_10 + 2)
																	loc_1 = add_i32(loc_10, 2)
																	loc_10 = loc_1
																	if loc_7 == 37 then
																		continue
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															loc_5 = sub_i32(loc_5, loc_11)
															loc_10 = bxor_i32(loc_12, 2147483647)
															if gt_i32(loc_5, loc_10) then
																desired = 4
																break
															end
															if loc_0 ~= 0 then
																while true do
																	FUNC_LIST[594](loc_0, loc_11, loc_5)
																	break
																end
																if desired then
																	if desired == 12 then
																		desired = nil
																	end
																	break
																end
															end
															if loc_5 ~= 0 then
																desired = 6
																break
															end
															store_i32(memory_at_0, loc_6 + 76, loc_1)
															loc_5 = add_i32(loc_1, 1)
															loc_13 = 4294967295
															while true do
																loc_7 = sub_i32(load_i32_i8(memory_at_0, loc_1 + 1), 48)
																if loc_7 > 9 then
																	break
																end
																if load_i32_u8(memory_at_0, loc_1 + 2) ~= 36 then
																	break
																end
																loc_5 = add_i32(loc_1, 3)
																loc_17 = 1
																loc_13 = loc_7
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															store_i32(memory_at_0, loc_6 + 76, loc_5)
															loc_9 = 0
															while true do
																loc_18 = load_i32_i8(memory_at_0, loc_5)
																loc_1 = sub_i32(loc_18, 32)
																if loc_1 > 31 then
																	while true do
																		loc_7 = loc_5
																		desired = 13
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																loc_7 = loc_5
																loc_1 = shl_i32(1, loc_1)
																if band_i32(loc_1, 75913) == 0 then
																	break
																end
																while true do
																	loc_7 = add_i32(loc_5, 1)
																	store_i32(memory_at_0, loc_6 + 76, loc_7)
																	loc_9 = bor_i32(loc_1, loc_9)
																	loc_18 = load_i32_i8(memory_at_0, loc_5 + 1)
																	loc_1 = sub_i32(loc_18, 32)
																	if loc_1 >= 32 then
																		desired = 13
																		break
																	end
																	loc_5 = loc_7
																	loc_1 = shl_i32(1, loc_1)
																	if band_i32(loc_1, 75913) ~= 0 then
																		continue
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															while true do
																if loc_18 == 42 then
																	while true do
																		while true do
																			while true do
																				loc_5 = sub_i32(load_i32_i8(memory_at_0, loc_7 + 1), 48)
																				if loc_5 > 9 then
																					break
																				end
																				if load_i32_u8(memory_at_0, loc_7 + 2) ~= 36 then
																					break
																				end
																				loc_1 = add_i32(loc_7, 3)
																				loc_17 = 1
																				while true do
																					if loc_0 == 0 then
																						while true do
																							store_i32(memory_at_0, add_i32(shl_i32(loc_5, 2), loc_4), 10)
																							reg_0 = 0
																							desired = 17
																							break
																						end
																						if desired then
																							if desired == 17 then
																								desired = nil
																							end
																							break
																						end
																					end
																					reg_0 = load_i32(memory_at_0, add_i32(shl_i32(loc_5, 3), loc_3))
																					break
																				end
																				if desired then
																					if desired == 16 then
																						desired = nil
																					end
																					break
																				end
																				desired = 15
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																			if loc_17 ~= 0 then
																				desired = 9
																				break
																			end
																			loc_1 = add_i32(loc_7, 1)
																			if loc_0 == 0 then
																				while true do
																					store_i32(memory_at_0, loc_6 + 76, loc_1)
																					loc_17 = 0
																					loc_15 = 0
																					desired = 13
																					break
																				end
																				if desired then
																					if desired == 15 then
																						desired = nil
																					end
																					break
																				end
																			end
																			loc_5 = load_i32(memory_at_0, loc_2)
																			store_i32(memory_at_0, loc_2, add_i32(loc_5, 4))
																			loc_17 = 0
																			reg_0 = load_i32(memory_at_0, loc_5)
																			break
																		end
																		if desired then
																			break
																		end
																		loc_15 = reg_0
																		store_i32(memory_at_0, loc_6 + 76, loc_1)
																		if ge_i32(loc_15, 0) then
																			desired = 13
																			break
																		end
																		loc_15 = sub_i32(0, loc_15)
																		loc_9 = bor_i32(loc_9, 8192)
																		desired = 13
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																reg_0 = FUNC_LIST[595](add_i32(loc_6, 76))
																loc_15 = reg_0
																if lt_i32(loc_15, 0) then
																	desired = 4
																	break
																end
																loc_1 = load_i32(memory_at_0, loc_6 + 76)
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															loc_5 = 0
															loc_8 = 4294967295
															while true do
																reg_0 = 0
																if load_i32_u8(memory_at_0, loc_1) ~= 46 then
																	break
																end
																if load_i32_u8(memory_at_0, loc_1 + 1) == 42 then
																	while true do
																		while true do
																			while true do
																				loc_7 = sub_i32(load_i32_i8(memory_at_0, loc_1 + 2), 48)
																				if loc_7 > 9 then
																					break
																				end
																				if load_i32_u8(memory_at_0, loc_1 + 3) ~= 36 then
																					break
																				end
																				loc_1 = add_i32(loc_1, 4)
																				while true do
																					if loc_0 == 0 then
																						while true do
																							store_i32(memory_at_0, add_i32(shl_i32(loc_7, 2), loc_4), 10)
																							reg_0 = 0
																							desired = 17
																							break
																						end
																						if desired then
																							if desired == 17 then
																								desired = nil
																							end
																							break
																						end
																					end
																					reg_0 = load_i32(memory_at_0, add_i32(shl_i32(loc_7, 3), loc_3))
																					break
																				end
																				if desired then
																					if desired == 16 then
																						desired = nil
																					end
																					break
																				end
																				desired = 15
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																			if loc_17 ~= 0 then
																				desired = 9
																				break
																			end
																			loc_1 = add_i32(loc_1, 2)
																			reg_0 = 0
																			if loc_0 == 0 then
																				break
																			end
																			loc_7 = load_i32(memory_at_0, loc_2)
																			store_i32(memory_at_0, loc_2, add_i32(loc_7, 4))
																			reg_0 = load_i32(memory_at_0, loc_7)
																			break
																		end
																		if desired then
																			break
																		end
																		loc_8 = reg_0
																		store_i32(memory_at_0, loc_6 + 76, loc_1)
																		reg_0 = (if ge_i32(loc_8, 0) then 1 else 0)
																		desired = 13
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																store_i32(memory_at_0, loc_6 + 76, add_i32(loc_1, 1))
																reg_0 = FUNC_LIST[595](add_i32(loc_6, 76))
																loc_8 = reg_0
																loc_1 = load_i32(memory_at_0, loc_6 + 76)
																reg_0 = 1
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															loc_20 = reg_0
															while true do
																loc_7 = loc_5
																loc_14 = 28
																loc_18 = loc_1
																loc_5 = load_i32_i8(memory_at_0, loc_18)
																if sub_i32(loc_5, 123) < 4294967238 then
																	desired = 3
																	break
																end
																loc_1 = add_i32(loc_1, 1)
																loc_5 = load_i32_u8(memory_at_0, add_i32(add_i32(mul_i32(loc_7, 58), loc_5), 45967))
																if sub_i32(loc_5, 1) < 8 then
																	continue
																end
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															store_i32(memory_at_0, loc_6 + 76, loc_1)
															while true do
																if loc_5 ~= 27 then
																	while true do
																		if loc_5 == 0 then
																			desired = 3
																			break
																		end
																		if ge_i32(loc_13, 0) then
																			while true do
																				if loc_0 == 0 then
																					while true do
																						store_i32(memory_at_0, add_i32(shl_i32(loc_13, 2), loc_4), loc_5)
																						desired = 5
																						break
																					end
																					if desired then
																						break
																					end
																				end
																				store_i64(memory_at_0, loc_6 + 64, load_i64(memory_at_0, add_i32(shl_i32(loc_13, 3), loc_3)))
																				desired = 13
																				break
																			end
																			if desired then
																				break
																			end
																		end
																		if loc_0 == 0 then
																			desired = 7
																			break
																		end
																		FUNC_LIST[596](sub_i32(loc_6, 4294967232), loc_5, loc_2)
																		desired = 13
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																if ge_i32(loc_13, 0) then
																	desired = 3
																	break
																end
																loc_5 = 0
																if loc_0 == 0 then
																	desired = 6
																	break
																end
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															if band_i32(load_i32_u8(memory_at_0, loc_0), 32) ~= 0 then
																desired = 2
																break
															end
															loc_21 = band_i32(loc_9, 4294901759)
															loc_9 = (if band_i32(loc_9, 8192) ~= 0 then loc_21 else loc_9)
															loc_13 = 0
															loc_19 = 1125
															loc_14 = loc_16
															while true do
																while true do
																	reg_0 = loc_0
																	reg_1 = 32
																	reg_2 = loc_15
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									while true do
																										while true do
																											while true do
																												while true do
																													while true do
																														while true do
																															loc_5 = load_i32_i8(memory_at_0, loc_18)
																															loc_5 = (if loc_7 ~= 0 then (if band_i32(loc_5, 15) == 3 then band_i32(loc_5, 4294967251) else loc_5) else loc_5)
																															if not br_map[1] then
																																br_map[1] = (function()
																																	return { [0] = 4, 20, 20, 20, 20, 20, 20, 20, 20, 14, 20, 15, 6, 14, 14, 14, 20, 6, 20, 20, 20, 20, 2, 5, 3, 20, 20, 9, 20, 1, 20, 20, 4, }
																																end)()
																															end
																															temp = br_map[1][sub_i32(loc_5, 88)] or 0
																															if temp < 5 then
																																if temp < 2 then
																																	if temp < 1 then
																																		break
																																	else
																																		desired = 27
																																		break
																																	end
																																elseif temp > 2 then
																																	if temp < 4 then
																																		desired = 25
																																		break
																																	else
																																		desired = 24
																																		break
																																	end
																																else
																																	desired = 26
																																	break
																																end
																															elseif temp > 5 then
																																if temp < 14 then
																																	if temp < 9 then
																																		desired = 22
																																		break
																																	else
																																		desired = 19
																																		break
																																	end
																																elseif temp > 14 then
																																	if temp < 20 then
																																		desired = 13
																																		break
																																	else
																																		desired = 8
																																		break
																																	end
																																else
																																	desired = 14
																																	break
																																end
																															else
																																desired = 23
																																break
																															end
																														end
																														if desired then
																															if desired == 27 then
																																desired = nil
																															end
																															break
																														end
																														while true do
																															if not br_map[2] then
																																br_map[2] = (function()
																																	return { [0] = 14, 20, 11, 20, 14, 14, 14, }
																																end)()
																															end
																															temp = br_map[2][sub_i32(loc_5, 65)] or 0
																															if temp < 14 then
																																if temp < 11 then
																																	break
																																else
																																	desired = 17
																																	break
																																end
																															elseif temp > 14 then
																																desired = 8
																																break
																															else
																																desired = 14
																																break
																															end
																														end
																														if desired then
																															if desired == 27 then
																																desired = nil
																															end
																															break
																														end
																														if loc_5 == 83 then
																															desired = 18
																															break
																														end
																														desired = 8
																														break
																													end
																													if desired then
																														if desired == 26 then
																															desired = nil
																														end
																														break
																													end
																													loc_23 = load_i64(memory_at_0, loc_6 + 64)
																													reg_3 = 1125
																													desired = 21
																													break
																												end
																												if desired then
																													if desired == 25 then
																														desired = nil
																													end
																													break
																												end
																												loc_5 = 0
																												while true do
																													while true do
																														while true do
																															while true do
																																while true do
																																	while true do
																																		while true do
																																			if not br_map[3] then
																																				br_map[3] = (function()
																																					return { [0] = 0, 1, 2, 3, 4, 26, 5, 6, }
																																				end)()
																																			end
																																			temp = br_map[3][band_i32(loc_7, 255)] or 26
																																			if temp < 4 then
																																				if temp < 2 then
																																					if temp < 1 then
																																						break
																																					else
																																						desired = 31
																																						break
																																					end
																																				elseif temp > 2 then
																																					desired = 29
																																					break
																																				else
																																					desired = 30
																																					break
																																				end
																																			elseif temp > 4 then
																																				if temp < 6 then
																																					desired = 27
																																					break
																																				elseif temp > 6 then
																																					desired = 6
																																					break
																																				else
																																					desired = 26
																																					break
																																				end
																																			else
																																				desired = 28
																																				break
																																			end
																																		end
																																		if desired then
																																			if desired == 31 then
																																				desired = nil
																																			end
																																			break
																																		end
																																		store_i32(memory_at_0, load_i32(memory_at_0, loc_6 + 64), loc_12)
																																		desired = 6
																																		break
																																	end
																																	if desired then
																																		if desired == 30 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	store_i32(memory_at_0, load_i32(memory_at_0, loc_6 + 64), loc_12)
																																	desired = 6
																																	break
																																end
																																if desired then
																																	if desired == 29 then
																																		desired = nil
																																	end
																																	break
																																end
																																store_i64(memory_at_0, load_i32(memory_at_0, loc_6 + 64), extend_i64_i32(loc_12))
																																desired = 6
																																break
																															end
																															if desired then
																																if desired == 28 then
																																	desired = nil
																																end
																																break
																															end
																															store_i32_n16(memory_at_0, load_i32(memory_at_0, loc_6 + 64), loc_12)
																															desired = 6
																															break
																														end
																														if desired then
																															if desired == 27 then
																																desired = nil
																															end
																															break
																														end
																														store_i32_n8(memory_at_0, load_i32(memory_at_0, loc_6 + 64), loc_12)
																														desired = 6
																														break
																													end
																													if desired then
																														if desired == 26 then
																															desired = nil
																														end
																														break
																													end
																													store_i32(memory_at_0, load_i32(memory_at_0, loc_6 + 64), loc_12)
																													desired = 6
																													break
																												end
																												if desired then
																													if desired == 25 then
																														desired = nil
																													end
																													break
																												end
																												store_i64(memory_at_0, load_i32(memory_at_0, loc_6 + 64), extend_i64_i32(loc_12))
																												desired = 6
																												break
																											end
																											if desired then
																												if desired == 24 then
																													desired = nil
																												end
																												break
																											end
																											loc_8 = (if loc_8 <= 8 then 8 else loc_8)
																											loc_9 = bor_i32(loc_9, 8)
																											loc_5 = 120
																											break
																										end
																										if desired then
																											if desired == 23 then
																												desired = nil
																											end
																											break
																										end
																										loc_23 = load_i64(memory_at_0, loc_6 + 64)
																										reg_3 = FUNC_LIST[597](loc_23, loc_16, band_i32(loc_5, 32))
																										loc_11 = reg_3
																										if eq_i64(loc_23, i64_ZERO) then
																											desired = 20
																											break
																										end
																										if band_i32(loc_9, 8) == 0 then
																											desired = 20
																											break
																										end
																										loc_19 = add_i32(shr_u32(loc_5, 4), 1125)
																										loc_13 = 2
																										desired = 20
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																									loc_23 = load_i64(memory_at_0, loc_6 + 64)
																									reg_3 = FUNC_LIST[598](loc_23, loc_16)
																									loc_11 = reg_3
																									if band_i32(loc_9, 8) == 0 then
																										desired = 20
																										break
																									end
																									loc_5 = sub_i32(loc_16, loc_11)
																									loc_8 = (if lt_i32(loc_5, loc_8) then loc_8 else add_i32(loc_5, 1))
																									desired = 20
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																								loc_23 = load_i64(memory_at_0, loc_6 + 64)
																								if lt_i64(loc_23, i64_ZERO) then
																									while true do
																										loc_23 = sub_i64(i64_ZERO, loc_23)
																										store_i64(memory_at_0, loc_6 + 64, loc_23)
																										loc_13 = 1
																										reg_3 = 1125
																										desired = 21
																										break
																									end
																									if desired then
																										if desired == 21 then
																											desired = nil
																										end
																										break
																									end
																								end
																								if band_i32(loc_9, 2048) ~= 0 then
																									while true do
																										loc_13 = 1
																										reg_3 = 1126
																										desired = 21
																										break
																									end
																									if desired then
																										if desired == 21 then
																											desired = nil
																										end
																										break
																									end
																								end
																								loc_13 = band_i32(loc_9, 1)
																								reg_3 = (if loc_13 ~= 0 then 1127 else 1125)
																								break
																							end
																							if desired then
																								if desired == 20 then
																									desired = nil
																								end
																								break
																							end
																							loc_19 = reg_3
																							reg_3 = FUNC_LIST[599](loc_23, loc_16)
																							loc_11 = reg_3
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																						if band_i32((if lt_i32(loc_8, 0) then 1 else 0), loc_20) ~= 0 then
																							desired = 4
																							break
																						end
																						loc_9 = (if loc_20 ~= 0 then band_i32(loc_9, 4294901759) else loc_9)
																						while true do
																							if ne_i64(loc_23, i64_ZERO) then
																								break
																							end
																							if loc_8 ~= 0 then
																								break
																							end
																							loc_11 = loc_16
																							loc_8 = 0
																							desired = 8
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																						loc_5 = add_i32((if eq_i64(loc_23, i64_ZERO) then 1 else 0), sub_i32(loc_16, loc_11))
																						loc_8 = (if lt_i32(loc_5, loc_8) then loc_8 else loc_5)
																						desired = 8
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																					loc_5 = load_i32(memory_at_0, loc_6 + 64)
																					loc_11 = (if loc_5 ~= 0 then loc_5 else 7031)
																					reg_3 = FUNC_LIST[570](loc_11, (if loc_8 >= 2147483647 then 2147483647 else loc_8))
																					loc_5 = reg_3
																					loc_14 = add_i32(loc_5, loc_11)
																					if ge_i32(loc_8, 0) then
																						while true do
																							loc_9 = loc_21
																							loc_8 = loc_5
																							desired = 8
																							break
																						end
																						if desired then
																							if desired == 18 then
																								desired = nil
																							end
																							break
																						end
																					end
																					loc_9 = loc_21
																					loc_8 = loc_5
																					if load_i32_u8(memory_at_0, loc_14) ~= 0 then
																						desired = 4
																						break
																					end
																					desired = 8
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																					end
																					break
																				end
																				if loc_8 ~= 0 then
																					while true do
																						reg_3 = load_i32(memory_at_0, loc_6 + 64)
																						desired = 16
																						break
																					end
																					if desired then
																						if desired == 17 then
																							desired = nil
																						end
																						break
																					end
																				end
																				FUNC_LIST[600](loc_0, 32, loc_15, 0, loc_9)
																				reg_3 = 0
																				desired = 15
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																			store_i32(memory_at_0, loc_6 + 12, 0)
																			store_i64_n32(memory_at_0, loc_6 + 8, load_i64(memory_at_0, loc_6 + 64))
																			store_i32(memory_at_0, loc_6 + 64, add_i32(loc_6, 8))
																			loc_8 = 4294967295
																			reg_3 = add_i32(loc_6, 8)
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																		loc_11 = reg_3
																		loc_5 = 0
																		loc_10 = loc_11
																		while true do
																			while true do
																				loc_7 = load_i32(memory_at_0, loc_10)
																				if loc_7 == 0 then
																					break
																				end
																				reg_3 = FUNC_LIST[601](add_i32(loc_6, 4), loc_7)
																				loc_7 = reg_3
																				if lt_i32(loc_7, 0) then
																					desired = 2
																					break
																				end
																				if sub_i32(loc_8, loc_5) < loc_7 then
																					break
																				end
																				loc_10 = add_i32(loc_10, 4)
																				loc_5 = add_i32(loc_5, loc_7)
																				if loc_8 > loc_5 then
																					desired = 16
																					break
																				end
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																					continue
																				end
																				break
																			end
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																		loc_14 = 61
																		if lt_i32(loc_5, 0) then
																			desired = 3
																			break
																		end
																		FUNC_LIST[600](loc_0, 32, loc_15, loc_5, loc_9)
																		loc_10 = 0
																		reg_3 = loc_10
																		if loc_5 == 0 then
																			break
																		end
																		while true do
																			while true do
																				loc_7 = load_i32(memory_at_0, loc_11)
																				if loc_7 == 0 then
																					break
																				end
																				reg_5 = FUNC_LIST[601](add_i32(loc_6, 4), loc_7)
																				loc_7 = reg_5
																				loc_10 = add_i32(loc_10, loc_7)
																				if loc_5 < loc_10 then
																					break
																				end
																				FUNC_LIST[594](loc_0, add_i32(loc_6, 4), loc_7)
																				loc_11 = add_i32(loc_11, 4)
																				if loc_5 > loc_10 then
																					desired = 16
																					break
																				end
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																					continue
																				end
																				break
																			end
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																		reg_3 = loc_5
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																	loc_10 = reg_3
																	FUNC_LIST[600](reg_0, reg_1, reg_2, loc_10, bxor_i32(loc_9, 8192))
																	loc_5 = (if lt_i32(loc_10, loc_15) then loc_15 else loc_10)
																	desired = 6
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																if band_i32((if lt_i32(loc_8, 0) then 1 else 0), loc_20) ~= 0 then
																	desired = 4
																	break
																end
																loc_14 = 61
																reg_0 = FUNC_LIST[602](loc_0, load_f64(memory_at_0, loc_6 + 64), loc_15, loc_8, loc_9, loc_5)
																loc_5 = reg_0
																if ge_i32(loc_5, 0) then
																	desired = 6
																	break
																end
																desired = 3
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															store_i64_n8(memory_at_0, loc_6 + 55, load_i64(memory_at_0, loc_6 + 64))
															loc_8 = 1
															loc_11 = loc_22
															loc_9 = loc_21
															desired = 8
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
																continue
															end
															break
														end
														loc_10 = load_i32_u8(memory_at_0, loc_5 + 1)
														loc_5 = add_i32(loc_5, 1)
														continue
													end
													if desired then
														break
													end
													error("out of code bounds")
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											if loc_0 ~= 0 then
												desired = 1
												break
											end
											if loc_17 == 0 then
												desired = 7
												break
											end
											loc_5 = 1
											while true do
												loc_10 = load_i32(memory_at_0, add_i32(shl_i32(loc_5, 2), loc_4))
												if loc_10 ~= 0 then
													while true do
														FUNC_LIST[596](add_i32(shl_i32(loc_5, 3), loc_3), loc_10, loc_2)
														loc_12 = 1
														loc_5 = add_i32(loc_5, 1)
														if loc_5 ~= 10 then
															desired = 10
															break
														end
														desired = 1
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
															continue
														end
														break
													end
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_12 = 1
											if loc_5 >= 10 then
												desired = 1
												break
											end
											while true do
												if load_i32(memory_at_0, add_i32(shl_i32(loc_5, 2), loc_4)) ~= 0 then
													desired = 9
													break
												end
												loc_5 = add_i32(loc_5, 1)
												if loc_5 ~= 10 then
													continue
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											desired = 1
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_14 = 28
										desired = 3
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_1 = sub_i32(loc_14, loc_11)
									loc_18 = (if lt_i32(loc_1, loc_8) then loc_8 else loc_1)
									if gt_i32(loc_18, bxor_i32(loc_13, 2147483647)) then
										desired = 4
										break
									end
									loc_14 = 61
									loc_7 = add_i32(loc_13, loc_18)
									loc_5 = (if lt_i32(loc_7, loc_15) then loc_15 else loc_7)
									if lt_i32(loc_10, loc_5) then
										desired = 3
										break
									end
									FUNC_LIST[600](loc_0, 32, loc_5, loc_7, loc_9)
									FUNC_LIST[594](loc_0, loc_19, loc_13)
									FUNC_LIST[600](loc_0, 48, loc_5, loc_7, bxor_i32(loc_9, 65536))
									FUNC_LIST[600](loc_0, 48, loc_18, loc_1, 0)
									FUNC_LIST[594](loc_0, loc_11, loc_1)
									FUNC_LIST[600](loc_0, 32, loc_5, loc_7, bxor_i32(loc_9, 8192))
									loc_1 = load_i32(memory_at_0, loc_6 + 76)
									desired = 6
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_12 = 0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_14 = 61
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[476]()
				store_i32(memory_at_0, reg_0, loc_14)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_12 = 4294967295
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_6, 80)
		reg_0 = loc_12
		break
	end
	return reg_0
end
FUNC_LIST[594] = --[[ out ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		if band_i32(load_i32_u8(memory_at_0, loc_0), 32) == 0 then
			while true do
				reg_0 = FUNC_LIST[510](loc_1, loc_2, loc_0)
				break
			end
		end
		break
	end
end
FUNC_LIST[595] = --[[ getint ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_3 = load_i32(memory_at_0, loc_0)
		loc_2 = sub_i32(load_i32_i8(memory_at_0, loc_3), 48)
		if loc_2 > 9 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_4 = 4294967295
			if loc_1 <= 214748364 then
				while true do
					loc_1 = mul_i32(loc_1, 10)
					reg_0 = (if bxor_i32(loc_1, 2147483647) < loc_2 then 4294967295 else add_i32(loc_1, loc_2))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			else
				while true do
					reg_0 = loc_4
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			loc_4 = reg_0
			loc_2 = add_i32(loc_3, 1)
			store_i32(memory_at_0, loc_0, loc_2)
			loc_5 = load_i32_i8(memory_at_0, loc_3 + 1)
			loc_1 = loc_4
			loc_3 = loc_2
			loc_2 = sub_i32(loc_5, 48)
			if loc_2 < 10 then
				continue
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[596] = --[[ pop_arg ]] function(loc_0, loc_1, loc_2)
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													if not br_map[1] then
														br_map[1] = (function()
															return { [0] = 0, 8, 9, 10, 8, 9, 1, 2, 3, 4, 10, 9, 10, 10, 8, 9, 5, 6, }
														end)()
													end
													temp = br_map[1][sub_i32(loc_1, 9)] or 7
													if temp < 5 then
														if temp < 2 then
															if temp < 1 then
																break
															else
																desired = 10
																break
															end
														elseif temp > 2 then
															if temp < 4 then
																desired = 8
																break
															else
																desired = 7
																break
															end
														else
															desired = 9
															break
														end
													elseif temp > 5 then
														if temp < 8 then
															if temp < 7 then
																desired = 5
																break
															else
																desired = 4
																break
															end
														elseif temp > 8 then
															if temp < 10 then
																desired = 2
																break
															else
																desired = 1
																break
															end
														else
															desired = 3
															break
														end
													else
														desired = 6
														break
													end
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_1 = load_i32(memory_at_0, loc_2)
												store_i32(memory_at_0, loc_2, add_i32(loc_1, 4))
												store_i32(memory_at_0, loc_0, load_i32(memory_at_0, loc_1))
												desired = 0
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_1 = load_i32(memory_at_0, loc_2)
											store_i32(memory_at_0, loc_2, add_i32(loc_1, 4))
											store_i64(memory_at_0, loc_0, load_i64_i16(memory_at_0, loc_1))
											desired = 0
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_1 = load_i32(memory_at_0, loc_2)
										store_i32(memory_at_0, loc_2, add_i32(loc_1, 4))
										store_i64(memory_at_0, loc_0, load_i64_u16(memory_at_0, loc_1))
										desired = 0
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_1 = load_i32(memory_at_0, loc_2)
									store_i32(memory_at_0, loc_2, add_i32(loc_1, 4))
									store_i64(memory_at_0, loc_0, load_i64_i8(memory_at_0, loc_1))
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_1 = load_i32(memory_at_0, loc_2)
								store_i32(memory_at_0, loc_2, add_i32(loc_1, 4))
								store_i64(memory_at_0, loc_0, load_i64_u8(memory_at_0, loc_1))
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_1 = band_i32(add_i32(load_i32(memory_at_0, loc_2), 7), 4294967288)
							store_i32(memory_at_0, loc_2, add_i32(loc_1, 8))
							store_f64(memory_at_0, loc_0, load_f64(memory_at_0, loc_1))
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[603](loc_0, loc_2)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = load_i32(memory_at_0, loc_2)
				store_i32(memory_at_0, loc_2, add_i32(loc_1, 4))
				store_i64(memory_at_0, loc_0, load_i64_i32(memory_at_0, loc_1))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = load_i32(memory_at_0, loc_2)
			store_i32(memory_at_0, loc_2, add_i32(loc_1, 4))
			store_i64(memory_at_0, loc_0, load_i64_u32(memory_at_0, loc_1))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_1 = band_i32(add_i32(load_i32(memory_at_0, loc_2), 7), 4294967288)
		store_i32(memory_at_0, loc_2, add_i32(loc_1, 8))
		store_i64(memory_at_0, loc_0, load_i64(memory_at_0, loc_1))
		break
	end
end
FUNC_LIST[597] = --[[ fmt_x ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		if ne_i64(loc_0, i64_ZERO) then
			while true do
				while true do
					loc_1 = sub_i32(loc_1, 1)
					store_i32_n8(memory_at_0, loc_1, bor_i32(loc_2, load_i32_u8(memory_at_0, add_i32(band_i32(wrap_i32_i64(loc_0), 15), 46496))))
					loc_3 = (if gt_u64(loc_0, i64_from_u32(15, 0)) then 1 else 0)
					loc_0 = shr_u64(loc_0, i64_from_u32(4, 0))
					if loc_3 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[598] = --[[ fmt_o ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		if ne_i64(loc_0, i64_ZERO) then
			while true do
				while true do
					loc_1 = sub_i32(loc_1, 1)
					store_i32_n8(memory_at_0, loc_1, bor_i32(band_i32(wrap_i32_i64(loc_0), 7), 48))
					loc_2 = (if gt_u64(loc_0, i64_from_u32(7, 0)) then 1 else 0)
					loc_0 = shr_u64(loc_0, i64_from_u32(3, 0))
					if loc_2 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[599] = --[[ fmt_u ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = i64_ZERO
	local reg_0
	local desired
	while true do
		while true do
			if lt_u64(loc_0, i64_from_u32(0, 1)) then
				while true do
					loc_5 = loc_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				loc_1 = sub_i32(loc_1, 1)
				loc_5 = div_u64(loc_0, i64_from_u32(10, 0))
				store_i32_n8(memory_at_0, loc_1, bor_i32(wrap_i32_i64(add_i64(loc_0, mul_i64(loc_5, i64_from_u32(246, 0)))), 48))
				loc_2 = (if gt_u64(loc_0, i64_from_u32(4294967295, 9)) then 1 else 0)
				loc_0 = loc_5
				if loc_2 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		loc_2 = wrap_i32_i64(loc_5)
		if loc_2 ~= 0 then
			while true do
				while true do
					loc_1 = sub_i32(loc_1, 1)
					loc_3 = div_u32(loc_2, 10)
					store_i32_n8(memory_at_0, loc_1, bor_i32(add_i32(loc_2, mul_i32(loc_3, 246)), 48))
					loc_4 = (if loc_2 > 9 then 1 else 0)
					loc_2 = loc_3
					if loc_4 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[600] = --[[ pad ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local reg_0
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 256)
		GLOBAL_LIST[0].value = loc_5
		while true do
			if le_i32(loc_2, loc_3) then
				break
			end
			if band_i32(loc_4, 73728) ~= 0 then
				break
			end
			loc_3 = sub_i32(loc_2, loc_3)
			loc_2 = (if loc_3 < 256 then 1 else 0)
			reg_0 = FUNC_LIST[479](loc_5, loc_1, (if loc_2 ~= 0 then loc_3 else 256))
			if loc_2 == 0 then
				while true do
					while true do
						FUNC_LIST[594](loc_0, loc_5, 256)
						loc_3 = sub_i32(loc_3, 256)
						if loc_3 > 255 then
							continue
						end
						break
					end
					break
				end
			end
			FUNC_LIST[594](loc_0, loc_5, loc_3)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_5, 256)
		break
	end
end
FUNC_LIST[601] = --[[ wctomb ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		if loc_0 == 0 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = FUNC_LIST[605](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[602] = --[[ fmt_fp ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local loc_23 = 0
	local loc_24 = 0.0
	local loc_25 = i64_ZERO
	local loc_26 = i64_ZERO
	local loc_27 = i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_10 = sub_i32(GLOBAL_LIST[0].value, 560)
		GLOBAL_LIST[0].value = loc_10
		store_i32(memory_at_0, loc_10 + 44, 0)
		while true do
			reg_0 = FUNC_LIST[488](loc_1)
			loc_25 = reg_0
			if lt_i64(loc_25, i64_ZERO) then
				while true do
					loc_17 = 1
					loc_19 = 1135
					loc_1 = neg_f64(loc_1)
					reg_0 = FUNC_LIST[488](loc_1)
					loc_25 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if band_i32(loc_4, 2048) ~= 0 then
				while true do
					loc_17 = 1
					loc_19 = 1138
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_17 = band_i32(loc_4, 1)
			loc_19 = (if loc_17 ~= 0 then 1141 else 1136)
			loc_23 = (if loc_17 == 0 then 1 else 0)
			break
		end
		while true do
			if eq_i64(band_i64(loc_25, i64_from_u32(0, 2146435072)), i64_from_u32(0, 2146435072)) then
				while true do
					loc_6 = add_i32(loc_17, 3)
					FUNC_LIST[600](loc_0, 32, loc_2, loc_6, band_i32(loc_4, 4294901759))
					FUNC_LIST[594](loc_0, loc_19, loc_17)
					loc_7 = band_i32(loc_5, 32)
					FUNC_LIST[594](loc_0, (if loc_1 ~= loc_1 then (if loc_7 ~= 0 then 3493 else 5808) else (if loc_7 ~= 0 then 3920 else 5815)), 3)
					FUNC_LIST[600](loc_0, 32, loc_2, loc_6, bxor_i32(loc_4, 8192))
					loc_8 = (if lt_i32(loc_2, loc_6) then loc_6 else loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_18 = add_i32(loc_10, 16)
			while true do
				while true do
					while true do
						reg_0 = FUNC_LIST[604](loc_1, add_i32(loc_10, 44))
						loc_1 = reg_0
						loc_1 = (loc_1 + loc_1)
						if loc_1 ~= 0e0 then
							while true do
								loc_6 = load_i32(memory_at_0, loc_10 + 44)
								store_i32(memory_at_0, loc_10 + 44, sub_i32(loc_6, 1))
								loc_21 = bor_i32(loc_5, 32)
								if loc_21 ~= 97 then
									desired = 4
									break
								end
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_21 = bor_i32(loc_5, 32)
						if loc_21 == 97 then
							desired = 2
							break
						end
						loc_20 = load_i32(memory_at_0, loc_10 + 44)
						reg_0 = (if lt_i32(loc_3, 0) then 6 else loc_3)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_20 = sub_i32(loc_6, 29)
					store_i32(memory_at_0, loc_10 + 44, loc_20)
					loc_1 = (loc_1 * 2.68435456e8)
					reg_0 = (if lt_i32(loc_3, 0) then 6 else loc_3)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_12 = reg_0
				loc_15 = add_i32(add_i32(loc_10, 48), (if ge_i32(loc_20, 0) then 288 else 0))
				loc_7 = loc_15
				while true do
					reg_0 = loc_7
					while true do
						if band_i32((if loc_1 < 4.294967296e9 then 1 else 0), (if loc_1 >= 0e0 then 1 else 0)) ~= 0 then
							while true do
								reg_1 = truncate_u32_f64(loc_1)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_1 = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_6 = reg_1
					store_i32(memory_at_0, reg_0, loc_6)
					loc_7 = add_i32(loc_7, 4)
					loc_1 = ((loc_1 - convert_f64_u32(loc_6)) * 1e9)
					if loc_1 ~= 0e0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if le_i32(loc_20, 0) then
						while true do
							loc_3 = loc_20
							loc_6 = loc_7
							loc_9 = loc_15
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_9 = loc_15
					loc_3 = loc_20
					while true do
						loc_3 = (if loc_3 >= 29 then 29 else loc_3)
						while true do
							loc_6 = sub_i32(loc_7, 4)
							if loc_9 > loc_6 then
								break
							end
							loc_26 = extend_i64_u32(loc_3)
							loc_25 = i64_ZERO
							while true do
								loc_27 = add_i64(band_i64(loc_25, i64_from_u32(4294967295, 0)), shl_i64(load_i64_u32(memory_at_0, loc_6), loc_26))
								loc_25 = div_u64(loc_27, i64_from_u32(1000000000, 0))
								store_i64_n32(memory_at_0, loc_6, add_i64(mul_i64(loc_25, i64_from_u32(3294967296, 0)), loc_27))
								loc_6 = sub_i32(loc_6, 4)
								if loc_9 <= loc_6 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_6 = wrap_i32_i64(loc_25)
							if loc_6 == 0 then
								break
							end
							loc_9 = sub_i32(loc_9, 4)
							store_i32(memory_at_0, loc_9, loc_6)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						while true do
							loc_6 = loc_7
							if loc_6 > loc_9 then
								while true do
									loc_7 = sub_i32(loc_6, 4)
									if load_i32(memory_at_0, loc_7) == 0 then
										desired = 5
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_3 = sub_i32(load_i32(memory_at_0, loc_10 + 44), loc_3)
						store_i32(memory_at_0, loc_10 + 44, loc_3)
						loc_7 = loc_6
						if gt_i32(loc_3, 0) then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if lt_i32(loc_3, 0) then
					while true do
						loc_16 = add_i32(div_u32(add_i32(loc_12, 25), 9), 1)
						loc_22 = (if loc_21 == 102 then 1 else 0)
						while true do
							loc_7 = sub_i32(0, loc_3)
							loc_11 = (if loc_7 >= 9 then 9 else loc_7)
							while true do
								if loc_6 <= loc_9 then
									while true do
										loc_7 = shl_i32((if load_i32(memory_at_0, loc_9) == 0 then 1 else 0), 2)
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_13 = shr_u32(1000000000, loc_11)
								loc_14 = bxor_i32(shl_i32(4294967295, loc_11), 4294967295)
								loc_3 = 0
								loc_7 = loc_9
								while true do
									loc_8 = load_i32(memory_at_0, loc_7)
									store_i32(memory_at_0, loc_7, add_i32(loc_3, shr_u32(loc_8, loc_11)))
									loc_3 = mul_i32(loc_13, band_i32(loc_8, loc_14))
									loc_7 = add_i32(loc_7, 4)
									if loc_6 > loc_7 then
										continue
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								loc_7 = shl_i32((if load_i32(memory_at_0, loc_9) == 0 then 1 else 0), 2)
								if loc_3 == 0 then
									break
								end
								store_i32(memory_at_0, loc_6, loc_3)
								loc_6 = add_i32(loc_6, 4)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							loc_3 = add_i32(loc_11, load_i32(memory_at_0, loc_10 + 44))
							store_i32(memory_at_0, loc_10 + 44, loc_3)
							loc_9 = add_i32(loc_7, loc_9)
							loc_7 = (if loc_22 ~= 0 then loc_15 else loc_9)
							loc_6 = (if lt_i32(loc_16, shr_i32(sub_i32(loc_6, loc_7), 2)) then add_i32(loc_7, shl_i32(loc_16, 2)) else loc_6)
							if lt_i32(loc_3, 0) then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_3 = 0
				while true do
					if loc_6 <= loc_9 then
						break
					end
					loc_3 = mul_i32(shr_i32(sub_i32(loc_15, loc_9), 2), 9)
					loc_7 = 10
					loc_8 = load_i32(memory_at_0, loc_9)
					if loc_8 < 10 then
						break
					end
					while true do
						loc_3 = add_i32(loc_3, 1)
						loc_7 = mul_i32(loc_7, 10)
						if loc_7 <= loc_8 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_7 = sub_i32(sub_i32(loc_12, (if loc_21 ~= 102 then loc_3 else 0)), band_i32((if loc_21 == 103 then 1 else 0), (if loc_12 ~= 0 then 1 else 0)))
				if lt_i32(loc_7, sub_i32(mul_i32(shr_i32(sub_i32(loc_6, loc_15), 2), 9), 9)) then
					while true do
						loc_8 = add_i32(loc_7, 9216)
						loc_13 = div_i32(loc_8, 9)
						loc_16 = add_i32(add_i32(add_i32(loc_10, 48), (if lt_i32(loc_20, 0) then 4 else 292)), shl_i32(loc_13, 2))
						loc_11 = sub_i32(loc_16, 4096)
						loc_7 = 10
						loc_8 = add_i32(loc_8, mul_i32(loc_13, 4294967287))
						if le_i32(loc_8, 7) then
							while true do
								while true do
									loc_7 = mul_i32(loc_7, 10)
									loc_8 = add_i32(loc_8, 1)
									if loc_8 ~= 8 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								break
							end
						end
						while true do
							loc_8 = load_i32(memory_at_0, loc_11)
							loc_22 = div_u32(loc_8, loc_7)
							loc_13 = mul_i32(loc_7, loc_22)
							loc_14 = sub_i32(loc_16, 4092)
							if band_i32((if loc_8 == loc_13 then 1 else 0), (if loc_6 == loc_14 then 1 else 0)) ~= 0 then
								break
							end
							loc_8 = sub_i32(loc_8, loc_13)
							while true do
								if band_i32(loc_22, 1) == 0 then
									while true do
										loc_1 = 9.007199254740992e15
										if loc_7 ~= 1000000000 then
											desired = 5
											break
										end
										if loc_9 >= loc_11 then
											desired = 5
											break
										end
										if band_i32(load_i32_u8(memory_at_0, sub_i32(loc_16, 4100)), 1) == 0 then
											desired = 5
											break
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_1 = 9.007199254740994e15
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							reg_1 = (if loc_6 == loc_14 then 1e0 else 1.5e0)
							loc_14 = shr_u32(loc_7, 1)
							loc_24 = (if loc_8 < loc_14 then 5e-1 else (if loc_14 == loc_8 then reg_1 else 1.5e0))
							while true do
								if loc_23 ~= 0 then
									break
								end
								if load_i32_u8(memory_at_0, loc_19) ~= 45 then
									break
								end
								loc_24 = neg_f64(loc_24)
								loc_1 = neg_f64(loc_1)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							store_i32(memory_at_0, loc_11, loc_13)
							if loc_1 == (loc_1 + loc_24) then
								break
							end
							loc_7 = add_i32(loc_7, loc_13)
							store_i32(memory_at_0, loc_11, loc_7)
							if loc_7 >= 1000000000 then
								while true do
									while true do
										store_i32(memory_at_0, loc_11, 0)
										loc_11 = sub_i32(loc_11, 4)
										if loc_11 < loc_9 then
											while true do
												loc_9 = sub_i32(loc_9, 4)
												store_i32(memory_at_0, loc_9, 0)
												break
											end
											if desired then
												if desired == 6 then
													desired = nil
													continue
												end
												break
											end
										end
										loc_7 = add_i32(load_i32(memory_at_0, loc_11), 1)
										store_i32(memory_at_0, loc_11, loc_7)
										if loc_7 > 999999999 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_3 = mul_i32(shr_i32(sub_i32(loc_15, loc_9), 2), 9)
							loc_7 = 10
							loc_8 = load_i32(memory_at_0, loc_9)
							if loc_8 < 10 then
								break
							end
							while true do
								loc_3 = add_i32(loc_3, 1)
								loc_7 = mul_i32(loc_7, 10)
								if loc_7 <= loc_8 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							break
						end
						loc_7 = add_i32(loc_11, 4)
						reg_0 = (if loc_6 > loc_7 then loc_7 else loc_6)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_6
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_6 = reg_0
				while true do
					loc_7 = loc_6
					loc_8 = (if loc_9 >= loc_7 then 1 else 0)
					if loc_8 == 0 then
						while true do
							loc_6 = sub_i32(loc_6, 4)
							if load_i32(memory_at_0, loc_6) == 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if loc_21 ~= 103 then
						while true do
							loc_11 = band_i32(loc_4, 8)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = (if loc_12 ~= 0 then loc_12 else 1)
					loc_11 = band_i32((if lt_i32(loc_3, loc_6) then 1 else 0), (if gt_i32(loc_3, 4294967291) then 1 else 0))
					loc_12 = add_i32((if loc_11 ~= 0 then bxor_i32(loc_3, 4294967295) else 4294967295), loc_6)
					loc_5 = add_i32(loc_5, (if loc_11 ~= 0 then 4294967295 else 4294967294))
					loc_11 = band_i32(loc_4, 8)
					if loc_11 ~= 0 then
						break
					end
					loc_6 = 4294967287
					while true do
						if loc_8 ~= 0 then
							break
						end
						loc_11 = load_i32(memory_at_0, sub_i32(loc_7, 4))
						if loc_11 == 0 then
							break
						end
						loc_8 = 10
						loc_6 = 0
						if (loc_11 % 10) ~= 0 then
							break
						end
						while true do
							loc_13 = loc_6
							loc_6 = add_i32(loc_13, 1)
							loc_8 = mul_i32(loc_8, 10)
							if (loc_11 % loc_8) == 0 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_6 = bxor_i32(loc_13, 4294967295)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_8 = mul_i32(shr_i32(sub_i32(loc_7, loc_15), 2), 9)
					if band_i32(loc_5, 4294967263) == 70 then
						while true do
							loc_11 = 0
							loc_6 = sub_i32(add_i32(loc_6, loc_8), 9)
							loc_6 = (if gt_i32(loc_6, 0) then loc_6 else 0)
							loc_12 = (if gt_i32(loc_6, loc_12) then loc_12 else loc_6)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_11 = 0
					loc_6 = sub_i32(add_i32(loc_6, add_i32(loc_3, loc_8)), 9)
					loc_6 = (if gt_i32(loc_6, 0) then loc_6 else 0)
					loc_12 = (if gt_i32(loc_6, loc_12) then loc_12 else loc_6)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_8 = 4294967295
				loc_13 = bor_i32(loc_11, loc_12)
				if lt_i32((if loc_13 ~= 0 then 2147483645 else 2147483646), loc_12) then
					desired = 1
					break
				end
				loc_14 = add_i32(add_i32((if loc_13 ~= 0 then 1 else 0), loc_12), 1)
				while true do
					loc_22 = band_i32(loc_5, 4294967263)
					if loc_22 == 70 then
						while true do
							if lt_i32(bxor_i32(loc_14, 2147483647), loc_3) then
								desired = 1
								break
							end
							loc_6 = (if gt_i32(loc_3, 0) then loc_3 else 0)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = shr_i32(loc_3, 31)
					reg_1 = FUNC_LIST[599](extend_i64_u32(sub_i32(bxor_i32(loc_6, loc_3), loc_6)), loc_18)
					loc_6 = reg_1
					if le_i32(sub_i32(loc_18, loc_6), 1) then
						while true do
							while true do
								loc_6 = sub_i32(loc_6, 1)
								store_i32_n8(memory_at_0, loc_6, 48)
								if lt_i32(sub_i32(loc_18, loc_6), 2) then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_16 = sub_i32(loc_6, 2)
					store_i32_n8(memory_at_0, loc_16, loc_5)
					store_i32_n8(memory_at_0, sub_i32(loc_6, 1), (if lt_i32(loc_3, 0) then 45 else 43))
					loc_6 = sub_i32(loc_18, loc_16)
					if gt_i32(loc_6, bxor_i32(loc_14, 2147483647)) then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = add_i32(loc_6, loc_14)
				if gt_i32(loc_6, bxor_i32(loc_17, 2147483647)) then
					desired = 1
					break
				end
				loc_14 = add_i32(loc_6, loc_17)
				FUNC_LIST[600](loc_0, 32, loc_2, loc_14, loc_4)
				FUNC_LIST[594](loc_0, loc_19, loc_17)
				FUNC_LIST[600](loc_0, 48, loc_2, loc_14, bxor_i32(loc_4, 65536))
				while true do
					while true do
						while true do
							if loc_22 == 70 then
								while true do
									loc_11 = bor_i32(add_i32(loc_10, 16), 8)
									loc_3 = bor_i32(add_i32(loc_10, 16), 9)
									loc_8 = (if loc_9 > loc_15 then loc_15 else loc_9)
									loc_9 = loc_8
									while true do
										reg_0 = FUNC_LIST[599](load_i64_u32(memory_at_0, loc_9), loc_3)
										loc_6 = reg_0
										while true do
											if loc_8 ~= loc_9 then
												while true do
													if add_i32(loc_10, 16) >= loc_6 then
														desired = 8
														break
													end
													while true do
														loc_6 = sub_i32(loc_6, 1)
														store_i32_n8(memory_at_0, loc_6, 48)
														if add_i32(loc_10, 16) < loc_6 then
															continue
														end
														break
													end
													if desired then
														break
													end
													desired = 8
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
											end
											if loc_3 ~= loc_6 then
												break
											end
											store_i32_n8(memory_at_0, loc_10 + 24, 48)
											loc_6 = loc_11
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
										FUNC_LIST[594](loc_0, loc_6, sub_i32(loc_3, loc_6))
										loc_9 = add_i32(loc_9, 4)
										if loc_15 >= loc_9 then
											continue
										end
										break
									end
									if desired then
										break
									end
									if loc_13 ~= 0 then
										while true do
											FUNC_LIST[594](loc_0, 6835, 1)
											break
										end
										if desired then
											break
										end
									end
									if loc_7 <= loc_9 then
										desired = 5
										break
									end
									if le_i32(loc_12, 0) then
										desired = 5
										break
									end
									while true do
										reg_0 = FUNC_LIST[599](load_i64_u32(memory_at_0, loc_9), loc_3)
										loc_6 = reg_0
										if loc_6 > add_i32(loc_10, 16) then
											while true do
												while true do
													loc_6 = sub_i32(loc_6, 1)
													store_i32_n8(memory_at_0, loc_6, 48)
													if add_i32(loc_10, 16) < loc_6 then
														continue
													end
													break
												end
												if desired then
													break
												end
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										end
										FUNC_LIST[594](loc_0, loc_6, (if ge_i32(loc_12, 9) then 9 else loc_12))
										loc_6 = sub_i32(loc_12, 9)
										loc_9 = add_i32(loc_9, 4)
										if loc_7 <= loc_9 then
											desired = 4
											break
										end
										loc_8 = (if gt_i32(loc_12, 9) then 1 else 0)
										loc_12 = loc_6
										if loc_8 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							while true do
								if lt_i32(loc_12, 0) then
									break
								end
								loc_13 = (if loc_7 > loc_9 then loc_7 else add_i32(loc_9, 4))
								loc_15 = bor_i32(add_i32(loc_10, 16), 8)
								loc_3 = bor_i32(add_i32(loc_10, 16), 9)
								loc_7 = loc_9
								while true do
									reg_0 = FUNC_LIST[599](load_i64_u32(memory_at_0, loc_7), loc_3)
									loc_6 = reg_0
									if loc_6 == loc_3 then
										while true do
											store_i32_n8(memory_at_0, loc_10 + 24, 48)
											reg_0 = loc_15
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									else
										while true do
											reg_0 = loc_6
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									loc_6 = reg_0
									while true do
										if loc_7 ~= loc_9 then
											while true do
												if add_i32(loc_10, 16) >= loc_6 then
													desired = 8
													break
												end
												while true do
													loc_6 = sub_i32(loc_6, 1)
													store_i32_n8(memory_at_0, loc_6, 48)
													if add_i32(loc_10, 16) < loc_6 then
														continue
													end
													break
												end
												if desired then
													break
												end
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										FUNC_LIST[594](loc_0, loc_6, 1)
										loc_6 = add_i32(loc_6, 1)
										if bor_i32(loc_11, loc_12) == 0 then
											break
										end
										FUNC_LIST[594](loc_0, 6835, 1)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									loc_8 = sub_i32(loc_3, loc_6)
									FUNC_LIST[594](loc_0, loc_6, (if lt_i32(loc_8, loc_12) then loc_8 else loc_12))
									loc_12 = sub_i32(loc_12, loc_8)
									loc_7 = add_i32(loc_7, 4)
									if loc_13 <= loc_7 then
										desired = 6
										break
									end
									if ge_i32(loc_12, 0) then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[600](loc_0, 48, add_i32(loc_12, 18), 18, 0)
							FUNC_LIST[594](loc_0, loc_16, sub_i32(loc_18, loc_16))
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_6 = loc_12
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[600](loc_0, 48, add_i32(loc_6, 9), 9, 0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[600](loc_0, 32, loc_2, loc_14, bxor_i32(loc_4, 8192))
				loc_8 = (if lt_i32(loc_2, loc_14) then loc_14 else loc_2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_14 = add_i32(band_i32(shr_i32(shl_i32(loc_5, 26), 31), 9), loc_19)
			while true do
				if loc_3 > 11 then
					break
				end
				loc_6 = sub_i32(12, loc_3)
				loc_24 = 1.6e1
				while true do
					loc_24 = (loc_24 * 1.6e1)
					loc_6 = sub_i32(loc_6, 1)
					if loc_6 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if load_i32_u8(memory_at_0, loc_14) == 45 then
					while true do
						loc_1 = neg_f64((loc_24 + (neg_f64(loc_1) - loc_24)))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = ((loc_1 + loc_24) - loc_24)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_11 = bor_i32(loc_17, 2)
			loc_9 = band_i32(loc_5, 32)
			loc_7 = load_i32(memory_at_0, loc_10 + 44)
			loc_6 = shr_i32(loc_7, 31)
			reg_0 = FUNC_LIST[599](extend_i64_u32(sub_i32(bxor_i32(loc_7, loc_6), loc_6)), loc_18)
			loc_6 = reg_0
			if loc_6 == loc_18 then
				while true do
					store_i32_n8(memory_at_0, loc_10 + 15, 48)
					reg_0 = add_i32(loc_10, 15)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_6
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_6 = reg_0
			loc_13 = sub_i32(loc_6, 2)
			store_i32_n8(memory_at_0, loc_13, add_i32(loc_5, 15))
			store_i32_n8(memory_at_0, sub_i32(loc_6, 1), (if lt_i32(loc_7, 0) then 45 else 43))
			loc_8 = band_i32(loc_4, 8)
			loc_7 = add_i32(loc_10, 16)
			while true do
				loc_6 = loc_7
				reg_0 = loc_6
				reg_1 = loc_9
				while true do
					if abs_f64(loc_1) < 2.147483648e9 then
						while true do
							reg_2 = truncate_i32_f64(loc_1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_2 = 2147483648
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_7 = reg_2
				store_i32_n8(memory_at_0, reg_0, bor_i32(reg_1, load_i32_u8(memory_at_0, add_i32(loc_7, 46496))))
				loc_1 = ((loc_1 - convert_f64_i32(loc_7)) * 1.6e1)
				while true do
					loc_7 = add_i32(loc_6, 1)
					if sub_i32(loc_7, add_i32(loc_10, 16)) ~= 1 then
						break
					end
					while true do
						if loc_8 ~= 0 then
							break
						end
						if gt_i32(loc_3, 0) then
							break
						end
						if loc_1 == 0e0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					store_i32_n8(memory_at_0, loc_6 + 1, 46)
					loc_7 = add_i32(loc_6, 2)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				if loc_1 ~= 0e0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = 4294967295
			loc_9 = sub_i32(loc_18, loc_13)
			loc_16 = add_i32(loc_9, loc_11)
			if gt_i32(loc_3, sub_i32(2147483645, loc_16)) then
				break
			end
			loc_6 = sub_i32(loc_7, add_i32(loc_10, 16))
			loc_3 = (if loc_3 ~= 0 then (if gt_i32(loc_3, sub_i32(loc_6, 2)) then add_i32(loc_3, 2) else loc_6) else loc_6)
			loc_7 = add_i32(loc_3, loc_16)
			FUNC_LIST[600](loc_0, 32, loc_2, loc_7, loc_4)
			FUNC_LIST[594](loc_0, loc_14, loc_11)
			FUNC_LIST[600](loc_0, 48, loc_2, loc_7, bxor_i32(loc_4, 65536))
			FUNC_LIST[594](loc_0, add_i32(loc_10, 16), loc_6)
			FUNC_LIST[600](loc_0, 48, sub_i32(loc_3, loc_6), 0, 0)
			FUNC_LIST[594](loc_0, loc_13, loc_9)
			FUNC_LIST[600](loc_0, 32, loc_2, loc_7, bxor_i32(loc_4, 8192))
			loc_8 = (if lt_i32(loc_2, loc_7) then loc_7 else loc_2)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_10, 560)
		reg_0 = loc_8
		break
	end
	return reg_0
end
FUNC_LIST[603] = --[[ pop_arg_long_double ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local reg_1
	while true do
		loc_2 = band_i32(add_i32(load_i32(memory_at_0, loc_1), 7), 4294967288)
		store_i32(memory_at_0, loc_1, add_i32(loc_2, 16))
		reg_1 = FUNC_LIST[529](load_i64(memory_at_0, loc_2), load_i64(memory_at_0, loc_2 + 8))
		store_f64(memory_at_0, loc_0, reg_1)
		break
	end
end
FUNC_LIST[604] = --[[ frexp ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = reinterpret_i64_f64(loc_0)
		loc_2 = band_i32(wrap_i32_i64(shr_u64(loc_3, i64_from_u32(52, 0))), 2047)
		if loc_2 ~= 2047 then
			while true do
				if loc_2 == 0 then
					while true do
						reg_0 = loc_1
						if loc_0 == 0e0 then
							while true do
								reg_1 = 0
								break
							end
							if desired then
								break
							end
						else
							while true do
								reg_1 = FUNC_LIST[604]((loc_0 * 1.8446744073709552e19), loc_1)
								loc_0 = reg_1
								reg_1 = add_i32(load_i32(memory_at_0, loc_1), 4294967232)
								break
							end
							if desired then
								break
							end
						end
						loc_2 = reg_1
						store_i32(memory_at_0, reg_0, loc_2)
						reg_0 = loc_0
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				store_i32(memory_at_0, loc_1, sub_i32(loc_2, 1022))
				reg_0 = reinterpret_f64_i64(bor_i64(band_i64(loc_3, i64_from_u32(4294967295, 2148532223)), i64_from_u32(0, 1071644672)))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = reg_0
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[605] = --[[ wcrtomb ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if loc_1 <= 127 then
				break
			end
			if band_i32(loc_1, 4294967168) == 57216 then
				break
			end
			reg_0 = FUNC_LIST[476]()
			store_i32(memory_at_0, reg_0, 25)
			reg_0 = 4294967295
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		store_i32_n8(memory_at_0, loc_0, loc_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[606] = --[[ operator new(unsigned long) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local desired
	while true do
		loc_1 = (if loc_0 <= 1 then 1 else loc_0)
		while true do
			while true do
				reg_0 = FUNC_LIST[513](loc_1)
				loc_0 = reg_0
				if loc_0 ~= 0 then
					desired = 1
					break
				end
				reg_0 = FUNC_LIST[607]()
				loc_0 = reg_0
				if loc_0 ~= 0 then
					while true do
						TABLE_LIST[0].data[loc_0]()
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[3]()
			error("out of code bounds")
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[607] = --[[ std::get_new_handler() ]] function()
	local reg_0
	while true do
		reg_0 = FUNC_LIST[690](48288)
		break
	end
	return reg_0
end
FUNC_LIST[608] = --[[ operator new[](unsigned long) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[606](loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[609] = --[[ operator delete(void*) ]] function(loc_0)
	while true do
		FUNC_LIST[515](loc_0)
		break
	end
end
FUNC_LIST[610] = --[[ std::exception::exception[abi:un170004]() ]] function(loc_0)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0, 47148)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[611] = --[[ std::__2::__libcpp_refstring::__libcpp_refstring(char const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local reg_1
	while true do
		reg_0 = FUNC_LIST[504](loc_1)
		loc_2 = reg_0
		reg_0 = FUNC_LIST[606](add_i32(loc_2, 13))
		loc_3 = reg_0
		store_i32(memory_at_0, loc_3 + 8, 0)
		store_i32(memory_at_0, loc_3 + 4, loc_2)
		store_i32(memory_at_0, loc_3, loc_2)
		reg_1 = FUNC_LIST[612](loc_3)
		reg_1 = FUNC_LIST[477](reg_1, loc_1, add_i32(loc_2, 1))
		store_i32(memory_at_0, loc_0, reg_1)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[612] = --[[ std::__2::__refstring_imp::(anonymous namespace)::data_from_rep(std::__2::__refstring_imp::(anonymous namespace)::_Rep_base*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = add_i32(loc_0, 12)
		break
	end
	return reg_0
end
FUNC_LIST[613] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::data[abi:un170004]() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[614](loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[614] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__get_pointer[abi:un170004]() const ]] function(loc_0)
	local reg_0
	local reg_1
	local reg_2
	while true do
		reg_0 = load_i32(memory_at_0, loc_0)
		reg_2 = FUNC_LIST[615](load_i32_u8(memory_at_0, loc_0 + 11))
		reg_0 = (if reg_2 ~= 0 then reg_0 else loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[615] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__is_long[abi:un170004]() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = shr_u32(band_i32(loc_0, 128), 7)
		break
	end
	return reg_0
end
FUNC_LIST[616] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::size[abi:un170004]() const ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[615](loc_1)
		if reg_0 ~= 0 then
			while true do
				reg_0 = loc_0
				break
			end
		else
			while true do
				reg_0 = FUNC_LIST[617](loc_1)
				break
			end
		end
		loc_0 = reg_0
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[617] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__get_short_size[abi:un170004]() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = band_i32(loc_0, 127)
		break
	end
	return reg_0
end
FUNC_LIST[618] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__throw_out_of_range[abi:un170004]() const ]] function()
	while true do
		FUNC_LIST[619]()
		error("out of code bounds")
	end
end
FUNC_LIST[619] = --[[ std::__2::__throw_out_of_range[abi:un170004](char const*) ]] function()
	while true do
		FUNC_LIST[3]()
		error("out of code bounds")
	end
end
FUNC_LIST[620] = --[[ unsigned long const& std::__2::min[abi:un170004]<unsigned long>(unsigned long const&, unsigned long const&) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[621](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[621] = --[[ unsigned long const& std::__2::min[abi:un170004]<unsigned long, std::__2::__less<void, void>>(unsigned long const&, unsigned long const&, std::__2::__less<void, void>) ]] function(loc_0, loc_1)
	local reg_0
	local reg_1
	local reg_2
	while true do
		reg_2 = FUNC_LIST[622](load_i32(memory_at_0, loc_1), load_i32(memory_at_0, loc_0))
		reg_0 = (if reg_2 ~= 0 then loc_1 else loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[622] = --[[ bool std::__2::__less<void, void>::operator()[abi:un170004]<unsigned long, unsigned long>(unsigned long const&, unsigned long const&) const ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = (if loc_0 < loc_1 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[623] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::capacity[abi:un170004]() const ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = 10
		reg_0 = FUNC_LIST[615](load_i32_u8(memory_at_0, loc_0 + 11))
		if reg_0 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[624](load_i32(memory_at_0, loc_0 + 8))
				reg_0 = sub_i32(reg_0, 1)
				break
			end
		else
			while true do
				reg_0 = loc_1
				break
			end
		end
		loc_1 = reg_0
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[624] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__get_long_cap[abi:un170004]() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = band_i32(loc_0, 2147483647)
		break
	end
	return reg_0
end
FUNC_LIST[625] = --[[ std::__2::char_traits<char>::move[abi:un170004](char*, char const*, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[626](loc_0, loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[626] = --[[ char* std::__2::__constexpr_memmove[abi:un170004]<char, char const, 0>(char*, char const*, std::__2::__element_count) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		if loc_2 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[478](loc_0, loc_1, loc_2)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[627] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__null_terminate_at[abi:un170004](char*, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		FUNC_LIST[628](loc_0, loc_2)
		FUNC_LIST[629](add_i32(loc_1, loc_2), 0)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[628] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__set_size[abi:un170004](unsigned long) ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[615](load_i32_u8(memory_at_0, loc_0 + 11))
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[630](loc_0, loc_1)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[631](loc_0, loc_1)
		break
	end
end
FUNC_LIST[629] = --[[ std::__2::char_traits<char>::assign[abi:un170004](char&, char const&) ]] function(loc_0, loc_1)
	while true do
		store_i32_n8(memory_at_0, loc_0, loc_1)
		break
	end
end
FUNC_LIST[630] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__set_long_size[abi:un170004](unsigned long) ]] function(loc_0, loc_1)
	while true do
		store_i32(memory_at_0, loc_0 + 4, loc_1)
		break
	end
end
FUNC_LIST[631] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__set_short_size[abi:un170004](unsigned long) ]] function(loc_0, loc_1)
	while true do
		store_i32_n8(memory_at_0, loc_0 + 11, band_i32(loc_1, 127))
		break
	end
end
FUNC_LIST[632] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__grow_by_and_replace(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, char const*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7)
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_8 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_8
		if sub_i32(2147483630, loc_1) >= loc_2 then
			while true do
				reg_0 = FUNC_LIST[614](loc_0)
				loc_10 = reg_0
				loc_9 = 2147483631
				reg_0 = add_i32(loc_8, 4)
				if loc_1 <= 1073741798 then
					while true do
						store_i32(memory_at_0, loc_8 + 12, shl_i32(loc_1, 1))
						store_i32(memory_at_0, loc_8 + 4, add_i32(loc_1, loc_2))
						reg_1 = FUNC_LIST[633](add_i32(loc_8, 4), add_i32(loc_8, 12))
						reg_1 = FUNC_LIST[634](load_i32(memory_at_0, reg_1))
						reg_1 = add_i32(reg_1, 1)
						break
					end
					if desired then
						break
					end
				else
					while true do
						reg_1 = loc_9
						break
					end
					if desired then
						break
					end
				end
				loc_9 = reg_1
				FUNC_LIST[635](reg_0, loc_9)
				loc_2 = load_i32(memory_at_0, loc_8 + 4)
				if loc_4 ~= 0 then
					while true do
						reg_0 = FUNC_LIST[636](loc_2, loc_10, loc_4)
						break
					end
					if desired then
						break
					end
				end
				if loc_6 ~= 0 then
					while true do
						reg_0 = FUNC_LIST[636](add_i32(loc_2, loc_4), loc_7, loc_6)
						break
					end
					if desired then
						break
					end
				end
				loc_7 = add_i32(loc_4, loc_5)
				loc_9 = sub_i32(loc_3, loc_7)
				if loc_3 ~= loc_7 then
					while true do
						reg_0 = FUNC_LIST[636](add_i32(loc_6, add_i32(loc_2, loc_4)), add_i32(loc_5, add_i32(loc_4, loc_10)), loc_9)
						break
					end
					if desired then
						break
					end
				end
				if loc_1 ~= 10 then
					while true do
						FUNC_LIST[637](loc_10)
						break
					end
					if desired then
						break
					end
				end
				FUNC_LIST[638](loc_0, loc_2)
				FUNC_LIST[639](loc_0, load_i32(memory_at_0, loc_8 + 8))
				loc_4 = add_i32(loc_9, add_i32(loc_4, loc_6))
				FUNC_LIST[630](loc_0, loc_4)
				FUNC_LIST[629](add_i32(loc_2, loc_4), 0)
				GLOBAL_LIST[0].value = add_i32(loc_8, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[618]()
		error("out of code bounds")
	end
end
FUNC_LIST[633] = --[[ unsigned long const& std::__2::max[abi:un170004]<unsigned long>(unsigned long const&, unsigned long const&) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[640](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[634] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__recommend[abi:un170004](unsigned long) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = 10
		if loc_0 >= 11 then
			while true do
				reg_0 = FUNC_LIST[641](add_i32(loc_0, 1))
				loc_0 = reg_0
				reg_0 = loc_0
				loc_0 = sub_i32(loc_0, 1)
				reg_0 = (if loc_0 == 11 then reg_0 else loc_0)
				break
			end
		else
			while true do
				reg_0 = loc_1
				break
			end
		end
		loc_1 = reg_0
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[635] = --[[ std::__2::__allocation_result<std::__2::allocator_traits<std::__2::allocator<char>>::pointer> std::__2::__allocate_at_least[abi:un170004]<std::__2::allocator<char>>(std::__2::allocator<char>&, unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[642](loc_1)
		loc_2 = reg_0
		store_i32(memory_at_0, loc_0 + 4, loc_1)
		store_i32(memory_at_0, loc_0, loc_2)
		break
	end
end
FUNC_LIST[636] = --[[ std::__2::char_traits<char>::copy[abi:un170004](char*, char const*, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		FUNC_LIST[643](loc_1, loc_2, loc_0)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[637] = --[[ std::__2::allocator_traits<std::__2::allocator<char>>::deallocate[abi:un170004](std::__2::allocator<char>&, char*, unsigned long) ]] function(loc_0)
	while true do
		FUNC_LIST[644](loc_0)
		break
	end
end
FUNC_LIST[638] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__set_long_pointer[abi:un170004](char*) ]] function(loc_0, loc_1)
	while true do
		store_i32(memory_at_0, loc_0, loc_1)
		break
	end
end
FUNC_LIST[639] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__set_long_cap[abi:un170004](unsigned long) ]] function(loc_0, loc_1)
	while true do
		store_i32(memory_at_0, loc_0 + 8, bor_i32(loc_1, 2147483648))
		break
	end
end
FUNC_LIST[640] = --[[ unsigned long const& std::__2::max[abi:un170004]<unsigned long, std::__2::__less<void, void>>(unsigned long const&, unsigned long const&, std::__2::__less<void, void>) ]] function(loc_0, loc_1)
	local reg_0
	local reg_1
	local reg_2
	while true do
		reg_2 = FUNC_LIST[622](load_i32(memory_at_0, loc_0), load_i32(memory_at_0, loc_1))
		reg_0 = (if reg_2 ~= 0 then loc_1 else loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[641] = --[[ unsigned long std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__align_it[abi:un170004]<16ul>(unsigned long) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = band_i32(add_i32(loc_0, 15), 4294967280)
		break
	end
	return reg_0
end
FUNC_LIST[642] = --[[ std::__2::allocator<char>::allocate[abi:un170004](unsigned long) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[661](loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[643] = --[[ std::__2::enable_if<__has_random_access_iterator_category<char const*>::value, char*>::type std::__2::copy_n[abi:un170004]<char const*, unsigned long, char*>(char const*, unsigned long, char*) ]] function(loc_0, loc_1, loc_2)
	while true do
		FUNC_LIST[647](loc_0, add_i32(loc_0, loc_1), loc_2)
		break
	end
end
FUNC_LIST[644] = --[[ std::__2::allocator<char>::deallocate[abi:un170004](char*, unsigned long) ]] function(loc_0)
	while true do
		FUNC_LIST[645](loc_0)
		break
	end
end
FUNC_LIST[645] = --[[ std::__2::__libcpp_deallocate[abi:un170004](void*, unsigned long, unsigned long) ]] function(loc_0)
	while true do
		FUNC_LIST[646](loc_0)
		break
	end
end
FUNC_LIST[646] = --[[ void std::__2::__do_deallocate_handle_size[abi:un170004]<>(void*, unsigned long) ]] function(loc_0)
	while true do
		FUNC_LIST[8](loc_0)
		break
	end
end
FUNC_LIST[647] = --[[ char* std::__2::copy[abi:un170004]<char const*, char*>(char const*, char const*, char*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		FUNC_LIST[648](add_i32(loc_3, 8), loc_0, loc_1, loc_2)
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[648] = --[[ std::__2::pair<char const*, char*> std::__2::__copy[abi:un170004]<std::__2::_ClassicAlgPolicy, char const*, char const*, char*>(char const*, char const*, char*) ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		FUNC_LIST[649](loc_0, loc_1, loc_2, loc_3)
		break
	end
end
FUNC_LIST[649] = --[[ std::__2::pair<char const*, char*> std::__2::__dispatch_copy_or_move[abi:un170004]<std::__2::_ClassicAlgPolicy, std::__2::__copy_loop<std::__2::_ClassicAlgPolicy>, std::__2::__copy_trivial, char const*, char const*, char*>(char const*, char const*, char*) ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		FUNC_LIST[650](loc_0, loc_1, loc_2, loc_3)
		break
	end
end
FUNC_LIST[650] = --[[ std::__2::pair<char const*, char*> std::__2::__unwrap_and_dispatch[abi:un170004]<std::__2::__overload<std::__2::__copy_loop<std::__2::_ClassicAlgPolicy>, std::__2::__copy_trivial>, char const*, char const*, char*, 0>(char const*, char const*, char*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local reg_0
	local reg_1
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[651](add_i32(loc_4, 24), loc_1, loc_2)
		FUNC_LIST[652](add_i32(loc_4, 16), load_i32(memory_at_0, loc_4 + 24), load_i32(memory_at_0, loc_4 + 28), loc_3)
		reg_0 = FUNC_LIST[653](loc_1, load_i32(memory_at_0, loc_4 + 16))
		loc_1 = reg_0
		reg_1 = FUNC_LIST[654](loc_3, load_i32(memory_at_0, loc_4 + 20))
		store_i32(memory_at_0, loc_4 + 12, reg_1)
		FUNC_LIST[655](loc_0, loc_1, add_i32(loc_4, 12))
		GLOBAL_LIST[0].value = add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[651] = --[[ auto std::__2::__unwrap_range[abi:un170004]<char const*, char const*>(char const*, char const*) ]] function(loc_0, loc_1, loc_2)
	while true do
		FUNC_LIST[656](loc_0, loc_1, loc_2)
		break
	end
end
FUNC_LIST[652] = --[[ std::__2::pair<char const*, char*> std::__2::__copy_trivial::operator()[abi:un170004]<char const, char, 0>(char const*, char const*, char*) const ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		FUNC_LIST[657](loc_0, loc_1, loc_2, loc_3)
		break
	end
end
FUNC_LIST[653] = --[[ char const* std::__2::__rewrap_range[abi:un170004]<char const*, char const*, char const*>(char const*, char const*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[658](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[654] = --[[ char* std::__2::__rewrap_iter[abi:un170004]<char*, char*, std::__2::__unwrap_iter_impl<char*, true>>(char*, char*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[659](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[655] = --[[ std::__2::pair<std::__2::__unwrap_ref_decay<char const*>::type, std::__2::__unwrap_ref_decay<char*>::type> std::__2::make_pair[abi:un170004]<char const*, char*>(char const*&&, char*&&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[660](loc_0, loc_1, loc_2)
		break
	end
end
FUNC_LIST[656] = --[[ std::__2::__unwrap_range_impl<char const*, char const*>::__unwrap[abi:un170004](char const*, char const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, loc_3 + 12, loc_2)
		reg_0 = FUNC_LIST[660](loc_0, loc_1, add_i32(loc_3, 12))
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[657] = --[[ std::__2::pair<char const*, char*> std::__2::__copy_trivial_impl[abi:un170004]<char const, char>(char const*, char const*, char*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	while true do
		loc_4 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = sub_i32(loc_2, loc_1)
		reg_1 = FUNC_LIST[626](loc_3, loc_1, loc_5)
		store_i32(memory_at_0, loc_4 + 12, add_i32(reg_1, loc_5))
		FUNC_LIST[655](loc_0, loc_2, add_i32(loc_4, 12))
		GLOBAL_LIST[0].value = add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[658] = --[[ std::__2::__unwrap_range_impl<char const*, char const*>::__rewrap[abi:un170004](char const*, char const*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[654](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[659] = --[[ std::__2::__unwrap_iter_impl<char*, true>::__rewrap[abi:un170004](char*, char*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[660] = --[[ std::__2::pair<char const*, char*>::pair[abi:un170004]<char const*, char*, (void*)0>(char const*&&, char*&&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0, loc_1)
		store_i32(memory_at_0, loc_0 + 4, load_i32(memory_at_0, loc_2))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[661] = --[[ std::__2::__libcpp_allocate[abi:un170004](unsigned long, unsigned long) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[608](loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[662] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__fits_in_sso[abi:un170004](unsigned long) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = (if loc_0 < 11 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[663] = --[[ std::__2::char_traits<char>::length[abi:un170004](char const*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[664](loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[664] = --[[ std::__2::__constexpr_strlen[abi:un170004](char const*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[504](loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[665] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__grow_by_without_replace[abi:un170004](unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	while true do
		FUNC_LIST[666](loc_0, loc_1, loc_2, loc_3, loc_4)
		FUNC_LIST[630](loc_0, loc_3)
		break
	end
end
FUNC_LIST[666] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__grow_by[abi:un170004](unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		loc_7 = 2147483631
		if sub_i32(2147483631, loc_1) >= loc_2 then
			while true do
				reg_0 = FUNC_LIST[614](loc_0)
				loc_6 = reg_0
				reg_0 = add_i32(loc_5, 4)
				if loc_1 <= 1073741798 then
					while true do
						store_i32(memory_at_0, loc_5 + 12, shl_i32(loc_1, 1))
						store_i32(memory_at_0, loc_5 + 4, add_i32(loc_1, loc_2))
						reg_1 = FUNC_LIST[633](add_i32(loc_5, 4), add_i32(loc_5, 12))
						reg_1 = FUNC_LIST[634](load_i32(memory_at_0, reg_1))
						reg_1 = add_i32(reg_1, 1)
						break
					end
					if desired then
						break
					end
				else
					while true do
						reg_1 = loc_7
						break
					end
					if desired then
						break
					end
				end
				loc_7 = reg_1
				FUNC_LIST[635](reg_0, loc_7)
				loc_2 = load_i32(memory_at_0, loc_5 + 4)
				if loc_4 ~= 0 then
					while true do
						reg_0 = FUNC_LIST[636](loc_2, loc_6, loc_4)
						break
					end
					if desired then
						break
					end
				end
				if loc_3 ~= loc_4 then
					while true do
						reg_0 = FUNC_LIST[636](add_i32(loc_2, loc_4), add_i32(loc_4, loc_6), sub_i32(loc_3, loc_4))
						break
					end
					if desired then
						break
					end
				end
				if loc_1 ~= 10 then
					while true do
						FUNC_LIST[637](loc_6)
						break
					end
					if desired then
						break
					end
				end
				FUNC_LIST[638](loc_0, loc_2)
				FUNC_LIST[639](loc_0, load_i32(memory_at_0, loc_5 + 8))
				GLOBAL_LIST[0].value = add_i32(loc_5, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[618]()
		error("out of code bounds")
	end
end
FUNC_LIST[667] = --[[ std::__2::char_traits<char>::assign[abi:un170004](char*, unsigned long, char) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		store_i32_n8(memory_at_0, loc_3 + 15, loc_2)
		FUNC_LIST[668](loc_0, loc_1, add_i32(loc_3, 15))
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[668] = --[[ char* std::__2::fill_n[abi:un170004]<char*, unsigned long, char>(char*, unsigned long, char const&) ]] function(loc_0, loc_1, loc_2)
	while true do
		FUNC_LIST[669](loc_0, loc_1, loc_2)
		break
	end
end
FUNC_LIST[669] = --[[ char* std::__2::__fill_n[abi:un170004]<char*, unsigned long, char>(char*, unsigned long, char const&) ]] function(loc_0, loc_1, loc_2)
	local desired
	while true do
		while true do
			if loc_1 ~= 0 then
				while true do
					store_i32_n8(memory_at_0, loc_0, load_i32_u8(memory_at_0, loc_2))
					loc_1 = sub_i32(loc_1, 1)
					loc_0 = add_i32(loc_0, 1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			break
		end
		break
	end
end
FUNC_LIST[670] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::operator=(char) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		while true do
			reg_0 = FUNC_LIST[615](load_i32_u8(memory_at_0, loc_0 + 11))
			if reg_0 ~= 0 then
				while true do
					loc_2 = load_i32(memory_at_0, loc_0)
					FUNC_LIST[630](loc_0, 1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[631](loc_0, 1)
			loc_2 = loc_0
			break
		end
		FUNC_LIST[629](loc_2, loc_1)
		FUNC_LIST[629](add_i32(loc_2, 1), 0)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[671] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__init_copy_ctor_external(char const*, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				reg_0 = FUNC_LIST[662](loc_2)
				if reg_0 ~= 0 then
					while true do
						FUNC_LIST[631](loc_0, loc_2)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_2 >= 2147483632 then
					desired = 1
					break
				end
				reg_1 = FUNC_LIST[634](loc_2)
				FUNC_LIST[635](add_i32(loc_3, 8), add_i32(reg_1, 1))
				loc_4 = load_i32(memory_at_0, loc_3 + 8)
				FUNC_LIST[638](loc_0, loc_4)
				FUNC_LIST[639](loc_0, load_i32(memory_at_0, loc_3 + 12))
				FUNC_LIST[630](loc_0, loc_2)
				loc_0 = loc_4
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[636](loc_0, loc_1, add_i32(loc_2, 1))
			GLOBAL_LIST[0].value = add_i32(loc_3, 16)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[618]()
		error("out of code bounds")
	end
end
FUNC_LIST[672] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__assign_external(char const*, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local desired
	while true do
		reg_1 = FUNC_LIST[623](loc_0)
		loc_3 = reg_1
		if loc_2 <= loc_3 then
			while true do
				reg_1 = FUNC_LIST[614](loc_0)
				reg_1 = FUNC_LIST[625](reg_1, loc_1, loc_2)
				reg_0 = FUNC_LIST[627](loc_0, reg_1, loc_2)
				reg_0 = loc_0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_3 = FUNC_LIST[616](load_i32(memory_at_0, loc_0 + 4), load_i32_u8(memory_at_0, loc_0 + 11))
		loc_4 = reg_3
		FUNC_LIST[632](loc_0, loc_3, sub_i32(loc_2, loc_3), loc_4, 0, loc_4, loc_2, loc_1)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[673] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::reserve(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		store_i32(memory_at_0, loc_2 + 12, loc_1)
		if loc_1 < 2147483632 then
			while true do
				while true do
					reg_0 = FUNC_LIST[623](loc_0)
					if reg_0 >= loc_1 then
						break
					end
					reg_1 = FUNC_LIST[616](load_i32(memory_at_0, loc_0 + 4), load_i32_u8(memory_at_0, loc_0 + 11))
					store_i32(memory_at_0, loc_2 + 8, reg_1)
					reg_0 = FUNC_LIST[633](add_i32(loc_2, 12), add_i32(loc_2, 8))
					reg_0 = FUNC_LIST[634](load_i32(memory_at_0, reg_0))
					loc_1 = reg_0
					reg_1 = FUNC_LIST[623](loc_0)
					if loc_1 == reg_1 then
						break
					end
					FUNC_LIST[674](loc_0, loc_1)
					break
				end
				if desired then
					break
				end
				GLOBAL_LIST[0].value = add_i32(loc_2, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[618]()
		error("out of code bounds")
	end
end
FUNC_LIST[674] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__shrink_or_extend[abi:un170004](unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		reg_0 = FUNC_LIST[616](load_i32(memory_at_0, loc_0 + 4), load_i32_u8(memory_at_0, loc_0 + 11))
		loc_4 = reg_0
		while true do
			while true do
				reg_0 = FUNC_LIST[662](loc_1)
				loc_8 = reg_0
				if loc_8 ~= 0 then
					while true do
						loc_6 = 1
						loc_7 = add_i32(loc_1, 1)
						loc_1 = load_i32(memory_at_0, loc_0)
						loc_2 = loc_0
						reg_0 = loc_4
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = add_i32(loc_1, 1)
				while true do
					reg_0 = FUNC_LIST[623](loc_0)
					if reg_0 < loc_1 then
						while true do
							FUNC_LIST[635](add_i32(loc_3, 8), loc_2)
							loc_2 = load_i32(memory_at_0, loc_3 + 8)
							reg_0 = load_i32(memory_at_0, loc_3 + 12)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[635](add_i32(loc_3, 8), loc_2)
					loc_2 = load_i32(memory_at_0, loc_3 + 8)
					if loc_2 == 0 then
						desired = 1
						break
					end
					reg_0 = load_i32(memory_at_0, loc_3 + 12)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_7 = reg_0
				loc_5 = load_i32_u8(memory_at_0, loc_0 + 11)
				reg_0 = FUNC_LIST[615](loc_5)
				loc_6 = reg_0
				reg_0 = FUNC_LIST[614](loc_0)
				loc_1 = reg_0
				reg_0 = FUNC_LIST[616](load_i32(memory_at_0, loc_0 + 4), loc_5)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = reg_0
			reg_0 = FUNC_LIST[636](loc_2, loc_1, add_i32(loc_5, 1))
			loc_2 = reg_0
			if loc_6 ~= 0 then
				while true do
					FUNC_LIST[637](loc_1)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 == 0 then
				while true do
					FUNC_LIST[639](loc_0, loc_7)
					FUNC_LIST[630](loc_0, loc_4)
					FUNC_LIST[638](loc_0, loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[631](loc_0, loc_4)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[675] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::append(char const*, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			reg_0 = FUNC_LIST[623](loc_0)
			loc_4 = reg_0
			reg_1 = FUNC_LIST[616](load_i32(memory_at_0, loc_0 + 4), load_i32_u8(memory_at_0, loc_0 + 11))
			loc_3 = reg_1
			if sub_i32(loc_4, loc_3) >= loc_2 then
				while true do
					if loc_2 == 0 then
						desired = 1
						break
					end
					reg_1 = FUNC_LIST[614](loc_0)
					loc_4 = reg_1
					reg_0 = FUNC_LIST[636](add_i32(loc_3, loc_4), loc_1, loc_2)
					loc_2 = add_i32(loc_2, loc_3)
					FUNC_LIST[628](loc_0, loc_2)
					FUNC_LIST[629](add_i32(loc_2, loc_4), 0)
					reg_0 = loc_0
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[632](loc_0, loc_4, add_i32(loc_3, sub_i32(loc_2, loc_4)), loc_3, loc_3, 0, loc_2, loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[676] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::find(char, unsigned long) const ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local reg_1
	while true do
		reg_0 = FUNC_LIST[613](loc_0)
		reg_1 = FUNC_LIST[616](load_i32(memory_at_0, loc_0 + 4), load_i32_u8(memory_at_0, loc_0 + 11))
		reg_0 = FUNC_LIST[677](reg_0, reg_1, loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[677] = --[[ unsigned long std::__2::__str_find[abi:un170004]<char, unsigned long, std::__2::char_traits<char>, 4294967295ul>(char const*, unsigned long, char, unsigned long) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local reg_0
	while true do
		loc_4 = 4294967295
		if loc_1 > loc_3 then
			while true do
				reg_0 = FUNC_LIST[678](add_i32(loc_0, loc_3), sub_i32(loc_1, loc_3), loc_2)
				loc_3 = reg_0
				reg_0 = (if loc_3 ~= 0 then sub_i32(loc_3, loc_0) else 4294967295)
				break
			end
		else
			while true do
				reg_0 = loc_4
				break
			end
		end
		loc_4 = reg_0
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[678] = --[[ std::__2::char_traits<char>::find[abi:un170004](char const*, unsigned long, char const&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local desired
	while true do
		if loc_1 == 0 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = FUNC_LIST[679](loc_0, extend_i32_n8(loc_2), loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[679] = --[[ char const* std::__2::__constexpr_memchr[abi:un170004]<char const, char>(char const*, char, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[564](loc_0, loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[680] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::push_back(char) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			while true do
				while true do
					while true do
						loc_3 = load_i32_u8(memory_at_0, loc_0 + 11)
						reg_0 = FUNC_LIST[615](loc_3)
						if reg_0 ~= 0 then
							while true do
								loc_3 = load_i32(memory_at_0, loc_0 + 4)
								reg_1 = FUNC_LIST[624](load_i32(memory_at_0, loc_0 + 8))
								loc_2 = sub_i32(reg_1, 1)
								if loc_3 == loc_2 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_2 = 10
						reg_0 = FUNC_LIST[617](loc_3)
						loc_3 = reg_0
						if loc_3 ~= 10 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[665](loc_0, loc_2, 1, loc_2, loc_2)
					loc_3 = loc_2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = load_i32(memory_at_0, loc_0)
				FUNC_LIST[630](loc_0, add_i32(loc_3, 1))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[631](loc_0, add_i32(loc_3, 1))
			loc_2 = loc_0
			break
		end
		loc_0 = add_i32(loc_2, loc_3)
		FUNC_LIST[629](loc_0, loc_1)
		FUNC_LIST[629](add_i32(loc_0, 1), 0)
		break
	end
end
FUNC_LIST[681] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::append(unsigned long, char) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	while true do
		if loc_1 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[623](loc_0)
				loc_4 = reg_0
				reg_1 = FUNC_LIST[616](load_i32(memory_at_0, loc_0 + 4), load_i32_u8(memory_at_0, loc_0 + 11))
				loc_3 = reg_1
				if sub_i32(loc_4, loc_3) < loc_1 then
					while true do
						FUNC_LIST[665](loc_0, loc_4, add_i32(loc_3, sub_i32(loc_1, loc_4)), loc_3, loc_3)
						break
					end
				end
				reg_1 = FUNC_LIST[614](loc_0)
				loc_4 = reg_1
				reg_0 = FUNC_LIST[667](add_i32(loc_3, loc_4), loc_1, loc_2)
				loc_1 = add_i32(loc_1, loc_3)
				FUNC_LIST[628](loc_0, loc_1)
				FUNC_LIST[629](add_i32(loc_1, loc_4), 0)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[682] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__erase_external_with_move(unsigned long, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		store_i32(memory_at_0, loc_3 + 12, loc_2)
		if loc_2 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[616](load_i32(memory_at_0, loc_0 + 4), load_i32_u8(memory_at_0, loc_0 + 11))
				loc_5 = reg_0
				reg_0 = FUNC_LIST[614](loc_0)
				loc_6 = reg_0
				loc_4 = sub_i32(loc_5, loc_1)
				store_i32(memory_at_0, loc_3 + 8, loc_4)
				while true do
					reg_1 = FUNC_LIST[620](add_i32(loc_3, 12), add_i32(loc_3, 8))
					loc_2 = load_i32(memory_at_0, reg_1)
					if loc_4 == loc_2 then
						while true do
							loc_2 = loc_4
							desired = 2
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					loc_1 = add_i32(loc_1, loc_6)
					reg_0 = FUNC_LIST[625](loc_1, add_i32(loc_1, loc_2), sub_i32(loc_4, loc_2))
					break
				end
				reg_0 = FUNC_LIST[627](loc_0, loc_6, sub_i32(loc_5, loc_2))
				break
			end
		end
		GLOBAL_LIST[0].value = add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[683] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::compare(unsigned long, unsigned long, char const*, unsigned long) const ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_5 = sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		store_i32(memory_at_0, loc_5 + 8, loc_4)
		store_i32(memory_at_0, loc_5 + 12, loc_2)
		while true do
			reg_1 = FUNC_LIST[616](load_i32(memory_at_0, loc_0 + 4), load_i32_u8(memory_at_0, loc_0 + 11))
			loc_2 = reg_1
			if loc_1 > loc_2 then
				break
			end
			if loc_4 == 4294967295 then
				break
			end
			store_i32(memory_at_0, loc_5, sub_i32(loc_2, loc_1))
			reg_1 = FUNC_LIST[620](add_i32(loc_5, 12), loc_5)
			loc_2 = load_i32(memory_at_0, reg_1)
			store_i32(memory_at_0, loc_5 + 4, loc_2)
			while true do
				reg_0 = FUNC_LIST[613](loc_0)
				reg_2 = FUNC_LIST[620](add_i32(loc_5, 4), add_i32(loc_5, 8))
				reg_0 = FUNC_LIST[684](add_i32(reg_0, loc_1), loc_3, load_i32(memory_at_0, reg_2))
				loc_0 = reg_0
				if loc_0 ~= 0 then
					break
				end
				loc_0 = 4294967295
				if loc_2 < loc_4 then
					break
				end
				loc_0 = (if loc_2 > loc_4 then 1 else 0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = add_i32(loc_5, 16)
			reg_0 = loc_0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[618]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[684] = --[[ std::__2::char_traits<char>::compare[abi:un170004](char const*, char const*, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[535](loc_0, loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[685] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::compare(unsigned long, unsigned long, char const*) const ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	while true do
		reg_4 = FUNC_LIST[663](loc_3)
		reg_0 = FUNC_LIST[683](loc_0, loc_1, loc_2, loc_3, reg_4)
		break
	end
	return reg_0
end
FUNC_LIST[686] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::append(char const*) ]] function(loc_0, loc_1)
	local reg_0
	local reg_1
	local reg_2
	while true do
		reg_2 = FUNC_LIST[663](loc_1)
		reg_0 = FUNC_LIST[675](loc_0, loc_1, reg_2)
		break
	end
	return reg_0
end
FUNC_LIST[687] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::resize(unsigned long, char) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		reg_1 = FUNC_LIST[616](load_i32(memory_at_0, loc_0 + 4), load_i32_u8(memory_at_0, loc_0 + 11))
		loc_3 = reg_1
		if loc_1 > loc_3 then
			while true do
				reg_0 = FUNC_LIST[681](loc_0, sub_i32(loc_1, loc_3), loc_2)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[688](loc_0, loc_1)
		break
	end
end
FUNC_LIST[688] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__erase_to_end[abi:un170004](unsigned long) ]] function(loc_0, loc_1)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[614](loc_0)
		reg_0 = FUNC_LIST[627](loc_0, reg_1, loc_1)
		break
	end
end
FUNC_LIST[689] = --[[ std::get_terminate() ]] function()
	local reg_0
	while true do
		reg_0 = FUNC_LIST[690](47164)
		break
	end
	return reg_0
end
FUNC_LIST[690] = --[[ void (*std::__2::(anonymous namespace)::__libcpp_atomic_load[abi:un170004]<void (*)()>(void (* const*)(), int))() ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = load_i32(memory_at_0, loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[691] = --[[ std::__terminate(void (*)()) ]] function(loc_0)
	while true do
		TABLE_LIST[0].data[loc_0]()
		FUNC_LIST[619]()
		error("out of code bounds")
	end
end
FUNC_LIST[692] = --[[ std::terminate() ]] function()
	local reg_0
	while true do
		reg_0 = FUNC_LIST[689]()
		FUNC_LIST[691](reg_0)
		error("out of code bounds")
	end
end
FUNC_LIST[693] = --[[ __cxa_increment_exception_refcount ]] function(loc_0)
	while true do
		if loc_0 ~= 0 then
			while true do
				FUNC_LIST[692]()
				error("out of code bounds")
			end
		end
		break
	end
end
FUNC_LIST[694] = --[[ __cxxabiv1::__class_type_info::can_catch(__cxxabiv1::__shim_type_info const*, void*&) const ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	while true do
		loc_3 = add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_3
		while true do
			loc_4 = 1
			reg_1 = FUNC_LIST[695](loc_0, loc_1, 0)
			reg_0 = loc_4
			if reg_1 ~= 0 then
				break
			end
			reg_0 = 0
			if loc_1 == 0 then
				break
			end
			loc_4 = 0
			reg_1 = FUNC_LIST[696](loc_1, 46596)
			loc_1 = reg_1
			reg_0 = loc_4
			if loc_1 == 0 then
				break
			end
			reg_0 = FUNC_LIST[479](add_i32(loc_3, 12), 0, 52)
			store_i32(memory_at_0, loc_3 + 56, 1)
			store_i32(memory_at_0, loc_3 + 20, 4294967295)
			store_i32(memory_at_0, loc_3 + 16, loc_0)
			store_i32(memory_at_0, loc_3 + 8, loc_1)
			TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_1) + 28)](loc_1, add_i32(loc_3, 8), load_i32(memory_at_0, loc_2), 1)
			loc_1 = load_i32(memory_at_0, loc_3 + 32)
			if loc_1 == 1 then
				while true do
					store_i32(memory_at_0, loc_2, load_i32(memory_at_0, loc_3 + 24))
					break
				end
			end
			reg_0 = (if loc_1 == 1 then 1 else 0)
			break
		end
		loc_4 = reg_0
		GLOBAL_LIST[0].value = sub_i32(loc_3, 4294967232)
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[695] = --[[ is_equal(std::type_info const*, std::type_info const*, bool) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local desired
	while true do
		if loc_2 == 0 then
			while true do
				reg_0 = (if load_i32(memory_at_0, loc_0 + 4) == load_i32(memory_at_0, loc_1 + 4) then 1 else 0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_0 == loc_1 then
			while true do
				reg_0 = 1
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = FUNC_LIST[544](load_i32(memory_at_0, loc_0 + 4), load_i32(memory_at_0, loc_1 + 4))
		reg_0 = (if reg_0 == 0 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[696] = --[[ __dynamic_cast ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_2 = sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = load_i32(memory_at_0, loc_0)
		loc_4 = load_i32(memory_at_0, sub_i32(loc_3, 4))
		loc_3 = load_i32(memory_at_0, sub_i32(loc_3, 8))
		store_i64(memory_at_0, loc_2 + 76, i64_ZERO)
		store_i64(memory_at_0, loc_2 + 84, i64_ZERO)
		store_i64(memory_at_0, loc_2 + 92, i64_ZERO)
		store_i64(memory_at_0, loc_2 + 100, i64_ZERO)
		store_i32(memory_at_0, loc_2 + 107, 0)
		store_i64(memory_at_0, loc_2 + 68, i64_ZERO)
		store_i32(memory_at_0, loc_2 + 64, 46548)
		store_i32(memory_at_0, loc_2 + 60, loc_0)
		store_i32(memory_at_0, loc_2 + 56, loc_1)
		while true do
			reg_0 = FUNC_LIST[695](loc_4, loc_1, 0)
			if reg_0 ~= 0 then
				while true do
					loc_0 = (if loc_3 ~= 0 then 0 else loc_0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = add_i32(loc_0, loc_3)
			if le_i32(loc_3, loc_0) then
				while true do
					store_i64(memory_at_0, loc_2 + 44, i64_ZERO)
					store_i32(memory_at_0, loc_2 + 51, 0)
					store_i64(memory_at_0, loc_2 + 20, i64_ZERO)
					store_i64(memory_at_0, loc_2 + 28, i64_ZERO)
					store_i64(memory_at_0, loc_2 + 36, i64_ZERO)
					store_i64(memory_at_0, loc_2 + 12, i64_ZERO)
					store_i32(memory_at_0, loc_2 + 8, loc_1)
					store_i32(memory_at_0, loc_2 + 4, loc_0)
					store_i32(memory_at_0, loc_2, loc_4)
					store_i32(memory_at_0, loc_2 + 48, 1)
					TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_4) + 20)](loc_4, loc_2, loc_3, loc_3, 1, 0)
					if load_i32(memory_at_0, loc_2 + 24) ~= 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = 0
			TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_4) + 24)](loc_4, add_i32(loc_2, 56), loc_3, 1, 0)
			while true do
				while true do
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 0, 1, }
						end)()
					end
					temp = br_map[1][load_i32(memory_at_0, loc_2 + 92)] or 2
					if temp < 1 then
						break
					elseif temp > 1 then
						desired = 1
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_0 = (if load_i32(memory_at_0, loc_2 + 96) == 1 then (if load_i32(memory_at_0, loc_2 + 84) == 1 then (if load_i32(memory_at_0, loc_2 + 88) == 1 then load_i32(memory_at_0, loc_2 + 76) else 0) else 0) else 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if load_i32(memory_at_0, loc_2 + 80) ~= 1 then
				while true do
					if load_i32(memory_at_0, loc_2 + 96) ~= 0 then
						desired = 1
						break
					end
					if load_i32(memory_at_0, loc_2 + 84) ~= 1 then
						desired = 1
						break
					end
					if load_i32(memory_at_0, loc_2 + 88) ~= 1 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = load_i32(memory_at_0, loc_2 + 72)
			break
		end
		GLOBAL_LIST[0].value = add_i32(loc_2, 112)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[697] = --[[ __cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, void const*, void const*, int, bool) const ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[695](loc_0, load_i32(memory_at_0, loc_1 + 8), loc_5)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[698](loc_1, loc_2, loc_3, loc_4)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = load_i32(memory_at_0, loc_0 + 8)
		TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0) + 20)](loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
		break
	end
end
FUNC_LIST[698] = --[[ __cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, void const*, void const*, int) const ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	local desired
	while true do
		store_i32_n8(memory_at_0, loc_0 + 53, 1)
		while true do
			if loc_2 ~= load_i32(memory_at_0, loc_0 + 4) then
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 52, 1)
			while true do
				loc_2 = load_i32(memory_at_0, loc_0 + 16)
				if loc_2 == 0 then
					while true do
						store_i32(memory_at_0, loc_0 + 36, 1)
						store_i32(memory_at_0, loc_0 + 24, loc_3)
						store_i32(memory_at_0, loc_0 + 16, loc_1)
						if loc_3 ~= 1 then
							desired = 1
							break
						end
						if load_i32(memory_at_0, loc_0 + 48) == 1 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_1 == loc_2 then
					while true do
						loc_2 = load_i32(memory_at_0, loc_0 + 24)
						if loc_2 == 2 then
							while true do
								store_i32(memory_at_0, loc_0 + 24, loc_3)
								reg_0 = loc_3
								break
							end
							if desired then
								break
							end
						else
							while true do
								reg_0 = loc_2
								break
							end
							if desired then
								break
							end
						end
						loc_2 = reg_0
						if load_i32(memory_at_0, loc_0 + 48) ~= 1 then
							desired = 1
							break
						end
						if loc_2 == 1 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				store_i32(memory_at_0, loc_0 + 36, add_i32(load_i32(memory_at_0, loc_0 + 36), 1))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32_n8(memory_at_0, loc_0 + 54, 1)
			break
		end
		break
	end
end
FUNC_LIST[699] = --[[ __cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int, bool) const ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[695](loc_0, load_i32(memory_at_0, loc_1 + 8), loc_4)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[700](loc_1, loc_2, loc_3)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			reg_0 = FUNC_LIST[695](loc_0, load_i32(memory_at_0, loc_1), loc_4)
			if reg_0 ~= 0 then
				while true do
					while true do
						if load_i32(memory_at_0, loc_1 + 16) ~= loc_2 then
							while true do
								if loc_2 ~= load_i32(memory_at_0, loc_1 + 20) then
									desired = 3
									break
								end
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if loc_3 ~= 1 then
							desired = 1
							break
						end
						store_i32(memory_at_0, loc_1 + 32, 1)
						desired = 0
						break
					end
					if desired then
						break
					end
					store_i32(memory_at_0, loc_1 + 32, loc_3)
					while true do
						if load_i32(memory_at_0, loc_1 + 44) == 4 then
							break
						end
						store_i32_n16(memory_at_0, loc_1 + 52, 0)
						loc_0 = load_i32(memory_at_0, loc_0 + 8)
						TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0) + 20)](loc_0, loc_1, loc_2, loc_2, 1, loc_4)
						if load_i32_u8(memory_at_0, loc_1 + 53) ~= 0 then
							while true do
								store_i32(memory_at_0, loc_1 + 44, 3)
								if load_i32_u8(memory_at_0, loc_1 + 52) == 0 then
									desired = 3
									break
								end
								desired = 1
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						store_i32(memory_at_0, loc_1 + 44, 4)
						break
					end
					if desired then
						break
					end
					store_i32(memory_at_0, loc_1 + 20, loc_2)
					store_i32(memory_at_0, loc_1 + 40, add_i32(load_i32(memory_at_0, loc_1 + 40), 1))
					if load_i32(memory_at_0, loc_1 + 36) ~= 1 then
						desired = 1
						break
					end
					if load_i32(memory_at_0, loc_1 + 24) ~= 2 then
						desired = 1
						break
					end
					store_i32_n8(memory_at_0, loc_1 + 54, 1)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = load_i32(memory_at_0, loc_0 + 8)
			TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0) + 24)](loc_0, loc_1, loc_2, loc_3, loc_4)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[700] = --[[ __cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const ]] function(loc_0, loc_1, loc_2)
	while true do
		while true do
			if loc_1 ~= load_i32(memory_at_0, loc_0 + 4) then
				break
			end
			if load_i32(memory_at_0, loc_0 + 28) == 1 then
				break
			end
			store_i32(memory_at_0, loc_0 + 28, loc_2)
			break
		end
		break
	end
end
FUNC_LIST[701] = --[[ __cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[695](loc_0, load_i32(memory_at_0, loc_1 + 8), 0)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[702](loc_1, loc_2, loc_3)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = load_i32(memory_at_0, loc_0 + 8)
		TABLE_LIST[0].data[load_i32(memory_at_0, load_i32(memory_at_0, loc_0) + 28)](loc_0, loc_1, loc_2, loc_3)
		break
	end
end
FUNC_LIST[702] = --[[ __cxxabiv1::__class_type_info::process_found_base_class(__cxxabiv1::__dynamic_cast_info*, void*, int) const ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local desired
	while true do
		loc_3 = load_i32(memory_at_0, loc_0 + 16)
		if loc_3 == 0 then
			while true do
				store_i32(memory_at_0, loc_0 + 36, 1)
				store_i32(memory_at_0, loc_0 + 24, loc_2)
				store_i32(memory_at_0, loc_0 + 16, loc_1)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			if loc_1 == loc_3 then
				while true do
					if load_i32(memory_at_0, loc_0 + 24) ~= 2 then
						desired = 1
						break
					end
					store_i32(memory_at_0, loc_0 + 24, loc_2)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			store_i32_n8(memory_at_0, loc_0 + 54, 1)
			store_i32(memory_at_0, loc_0 + 24, 2)
			store_i32(memory_at_0, loc_0 + 36, add_i32(load_i32(memory_at_0, loc_0 + 36), 1))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[703] = --[[ __cxxabiv1::__class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[695](loc_0, load_i32(memory_at_0, loc_1 + 8), 0)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[702](loc_1, loc_2, loc_3)
				break
			end
		end
		break
	end
end
FUNC_LIST[704] = --[[ __cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int, bool) const ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[695](loc_0, load_i32(memory_at_0, loc_1 + 8), loc_4)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[700](loc_1, loc_2, loc_3)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			reg_0 = FUNC_LIST[695](loc_0, load_i32(memory_at_0, loc_1), loc_4)
			if reg_0 == 0 then
				break
			end
			while true do
				if load_i32(memory_at_0, loc_1 + 16) ~= loc_2 then
					while true do
						if loc_2 ~= load_i32(memory_at_0, loc_1 + 20) then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_3 ~= 1 then
					desired = 1
					break
				end
				store_i32(memory_at_0, loc_1 + 32, 1)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_1 + 20, loc_2)
			store_i32(memory_at_0, loc_1 + 32, loc_3)
			store_i32(memory_at_0, loc_1 + 40, add_i32(load_i32(memory_at_0, loc_1 + 40), 1))
			while true do
				if load_i32(memory_at_0, loc_1 + 36) ~= 1 then
					break
				end
				if load_i32(memory_at_0, loc_1 + 24) ~= 2 then
					break
				end
				store_i32_n8(memory_at_0, loc_1 + 54, 1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			store_i32(memory_at_0, loc_1 + 44, 4)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[705] = --[[ __cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, void const*, void const*, int, bool) const ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[695](loc_0, load_i32(memory_at_0, loc_1 + 8), loc_5)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[698](loc_1, loc_2, loc_3, loc_4)
				break
			end
		end
		break
	end
end
FUNC_LIST[706] = --[[ __cxa_is_pointer_type ]] function(loc_0)
	local reg_0
	local desired
	while true do
		if loc_0 == 0 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = FUNC_LIST[696](loc_0, 46692)
		reg_0 = (if reg_0 ~= 0 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[707] = --[[ std::exception::~exception().1 ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[159](loc_0)
		FUNC_LIST[609](loc_0)
		break
	end
end
FUNC_LIST[708] = --[[ std::exception::what() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = 3228
		break
	end
	return reg_0
end
FUNC_LIST[709] = --[[ std::bad_alloc::bad_alloc() ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[610](loc_0)
		loc_0 = reg_0
		store_i32(memory_at_0, loc_0, 46764)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[710] = --[[ std::bad_alloc::what() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = 5737
		break
	end
	return reg_0
end
FUNC_LIST[711] = --[[ std::bad_array_new_length::bad_array_new_length() ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[709](loc_0)
		loc_0 = reg_0
		store_i32(memory_at_0, loc_0, 46784)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[712] = --[[ std::bad_array_new_length::what() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = 3655
		break
	end
	return reg_0
end
FUNC_LIST[713] = --[[ std::out_of_range::~out_of_range() ]] function(loc_0)
	local reg_0
	while true do
		store_i32(memory_at_0, loc_0, 46884)
		reg_0 = FUNC_LIST[714](add_i32(loc_0, 4))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[714] = --[[ std::__2::__libcpp_refstring::~__libcpp_refstring() ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[715](load_i32(memory_at_0, loc_0))
		loc_1 = reg_0
		reg_0 = FUNC_LIST[716](add_i32(loc_1, 8))
		if lt_i32(reg_0, 0) then
			while true do
				FUNC_LIST[609](loc_1)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[715] = --[[ std::__2::__refstring_imp::(anonymous namespace)::rep_from_data(char const*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = sub_i32(loc_0, 12)
		break
	end
	return reg_0
end
FUNC_LIST[716] = --[[ int std::__2::(anonymous namespace)::__libcpp_atomic_add[abi:un170004]<int, int>(int*, int, int) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = sub_i32(load_i32(memory_at_0, loc_0), 1)
		store_i32(memory_at_0, loc_0, loc_1)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[717] = --[[ std::logic_error::~logic_error() ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[713](loc_0)
		FUNC_LIST[609](reg_0)
		break
	end
end
FUNC_LIST[718] = --[[ std::logic_error::what() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = load_i32(memory_at_0, loc_0 + 4)
		break
	end
	return reg_0
end
FUNC_LIST[719] = --[[ std::length_error::~length_error() ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[713](loc_0)
		FUNC_LIST[609](loc_0)
		break
	end
end
local function run_init_code()
	TABLE_LIST[0] = { min = 201, max = 201, data = {} }
	MEMORY_LIST[0] = rt.allocator.new(256, 256)
	GLOBAL_LIST[0] = { value = 113840 }
	do
		local target = TABLE_LIST[0].data
		local offset = 1
		local data = { FUNC_LIST[159],FUNC_LIST[8],FUNC_LIST[164],FUNC_LIST[165],FUNC_LIST[166],FUNC_LIST[166],FUNC_LIST[166],FUNC_LIST[166],FUNC_LIST[166],FUNC_LIST[166],FUNC_LIST[166],FUNC_LIST[166],FUNC_LIST[166],FUNC_LIST[166],FUNC_LIST[166],FUNC_LIST[166],FUNC_LIST[166],FUNC_LIST[166],FUNC_LIST[166],FUNC_LIST[166],FUNC_LIST[166],FUNC_LIST[166],FUNC_LIST[166],FUNC_LIST[165],FUNC_LIST[168],FUNC_LIST[168],FUNC_LIST[168],FUNC_LIST[168],FUNC_LIST[168],FUNC_LIST[168],FUNC_LIST[168],FUNC_LIST[168],FUNC_LIST[9],FUNC_LIST[168],FUNC_LIST[168],FUNC_LIST[11],FUNC_LIST[12],FUNC_LIST[13],FUNC_LIST[14],FUNC_LIST[168],FUNC_LIST[168],FUNC_LIST[168],FUNC_LIST[168],FUNC_LIST[168],FUNC_LIST[169],FUNC_LIST[170],FUNC_LIST[170],FUNC_LIST[170],FUNC_LIST[170],FUNC_LIST[170],FUNC_LIST[170],FUNC_LIST[170],FUNC_LIST[170],FUNC_LIST[170],FUNC_LIST[169],FUNC_LIST[171],FUNC_LIST[171],FUNC_LIST[171],FUNC_LIST[8],FUNC_LIST[19],FUNC_LIST[168],FUNC_LIST[168],FUNC_LIST[168],FUNC_LIST[168],FUNC_LIST[168],FUNC_LIST[26],FUNC_LIST[27],FUNC_LIST[28],FUNC_LIST[30],FUNC_LIST[45],FUNC_LIST[46],FUNC_LIST[47],FUNC_LIST[48],FUNC_LIST[49],FUNC_LIST[52],FUNC_LIST[56],FUNC_LIST[57],FUNC_LIST[58],FUNC_LIST[61],FUNC_LIST[63],FUNC_LIST[127],FUNC_LIST[130],FUNC_LIST[131],FUNC_LIST[133],FUNC_LIST[134],FUNC_LIST[134],FUNC_LIST[135],FUNC_LIST[135],FUNC_LIST[136],FUNC_LIST[137],FUNC_LIST[138],FUNC_LIST[139],FUNC_LIST[140],FUNC_LIST[144],FUNC_LIST[159],FUNC_LIST[145],FUNC_LIST[146],FUNC_LIST[8],FUNC_LIST[167],FUNC_LIST[8],FUNC_LIST[172],FUNC_LIST[229],FUNC_LIST[230],FUNC_LIST[231],FUNC_LIST[232],FUNC_LIST[8],FUNC_LIST[236],FUNC_LIST[237],FUNC_LIST[238],FUNC_LIST[239],FUNC_LIST[169],FUNC_LIST[8],FUNC_LIST[169],FUNC_LIST[240],FUNC_LIST[713],FUNC_LIST[246],FUNC_LIST[159],FUNC_LIST[349],FUNC_LIST[349],FUNC_LIST[248],FUNC_LIST[250],FUNC_LIST[252],FUNC_LIST[254],FUNC_LIST[256],FUNC_LIST[258],FUNC_LIST[260],FUNC_LIST[262],FUNC_LIST[264],FUNC_LIST[266],FUNC_LIST[268],FUNC_LIST[270],FUNC_LIST[272],FUNC_LIST[274],FUNC_LIST[276],FUNC_LIST[278],FUNC_LIST[282],FUNC_LIST[281],FUNC_LIST[284],FUNC_LIST[349],FUNC_LIST[159],FUNC_LIST[286],FUNC_LIST[288],FUNC_LIST[290],FUNC_LIST[292],FUNC_LIST[294],FUNC_LIST[296],FUNC_LIST[298],FUNC_LIST[300],FUNC_LIST[302],FUNC_LIST[304],FUNC_LIST[306],FUNC_LIST[308],FUNC_LIST[310],FUNC_LIST[312],FUNC_LIST[314],FUNC_LIST[316],FUNC_LIST[318],FUNC_LIST[320],FUNC_LIST[322],FUNC_LIST[324],FUNC_LIST[159],FUNC_LIST[326],FUNC_LIST[329],FUNC_LIST[331],FUNC_LIST[333],FUNC_LIST[335],FUNC_LIST[337],FUNC_LIST[339],FUNC_LIST[341],FUNC_LIST[343],FUNC_LIST[345],FUNC_LIST[347],FUNC_LIST[618],FUNC_LIST[391],FUNC_LIST[471],FUNC_LIST[146],FUNC_LIST[590],FUNC_LIST[618],FUNC_LIST[707],FUNC_LIST[710],FUNC_LIST[707],FUNC_LIST[712],FUNC_LIST[717],FUNC_LIST[718],FUNC_LIST[719],FUNC_LIST[719],FUNC_LIST[159],FUNC_LIST[8],FUNC_LIST[506],FUNC_LIST[506],FUNC_LIST[694],FUNC_LIST[705],FUNC_LIST[704],FUNC_LIST[703],FUNC_LIST[8],FUNC_LIST[697],FUNC_LIST[699],FUNC_LIST[701],FUNC_LIST[707],FUNC_LIST[708], }
		table.move(data, 1, #data, offset, target)
	end
	rt.store.string(MEMORY_LIST[0], 1024,"}%.*s{\x00`%.*s{\x00countrz\x00countlz\x00infinity\x00any\x00LuauReadWritePropertySyntax\x00LuauCheckedFunctionSyntax\x00max\x00-+   0X0x\x00-0X+0X 0X-0x+0x 0x\x00Unicode character U+%x\x00pow\x00inlining failed: module uses getfenv/setfenv\x00getfenv\x00Luau\x00Unexpected \'...\' after type name; type pack is not allowed in this context\x00next\x00LuauCompileLoopUnrollThresholdMaxBoost\x00LuauCompileInlineThresholdMaxBoost\x00btest\x00sqrt\x00export\x00assert\x00insert\x00function parameter list start\x00bnot\x00loop unroll failed: invalid iteration count\x00assignment\x00unfinished comment\x00if statement\x00Expected \',\' after table constructor element\x00LuauParseErrorLimit\x00LuauRecursionLimit\x00LuauTypeLengthLimit\x00Local %s used in the repeat..until condition is undefined because continue statement on line %d jumps over it\x00arshift\x00lshift\x00rawset\x00inlining failed: can\'t convert fixed returns to multret\x00rawget\x00LuauCompileNoJumpLineRetarget\x00select\x00extract\x00format\x00repeat\x00Ambiguous syntax: this looks like an argument list for a function call, but could also be a start of new statement; use \';\' to separate statements\x00expression only compiled for side effects\x00class\x00ipairs\x00function parameters\x00acos\x00inlining failed: can\'t inline recursive calls\x00LuauCompileRepeatUntilSkippedLocals\x00Generic types come before generic type packs\x00LuauTinyControlFlowAnalysis\x00allocation: closure with %d upvalues\x00Interpolated string literals cannot be used as types\x00inlining failed: too many inlined frames\x00extends\x00abs\x00type alias\x00Expected %s (to close %s at column %d), got %s%s\x00Expected %s (to close %s at line %d), got %s%s\x00builtin %s.%s/%d%s\x00builtin %s/%d%s\x00Expected %s when parsing %s, got %s\x00Expected identifier when parsing %s, got %s\x00Expected %s, got %s\x00Expected identifier, got %s\x00Expected \'(\', \'{\' or <string> when parsing function call, got %s\x00Malformed interpolated string, got %s\x00Expected type, got %s\x00:%d: %s\x00bxor\x00vector\x00floor\x00for\x00bor\x00Cannot have more than one class indexer\x00Cannot have more than one table indexer\x00\'self\' must be present as the unannotated first parameter\x00identifier\x00buffer\x00tonumber\x00Malformed number\x00char\x00frexp\x00ldexp\x00for loop\x00while loop\x00break statement must be inside a loop\x00continue statement must be inside a loop\x00clamp\x00byteswap\x00do\x00unknown\x00return\x00DebugLuauDeferredConstraintResolution\x00std::exception\x00Cannot use \'...\' outside of a vararg function\x00generic type pack annotation\x00property type annotation\x00Unexpected \'...\' after type annotation\x00global function declaration\x00global variable declaration\x00if then else expression\x00asin\x00min\x00sign\x00rawlen\x00then\x00atan\x00nan\x00boolean\x00Incomplete statement: expected assignment or a function call\x00until\x00nil\x00ceil\x00rawequal\x00table literal\x00local\x00block\x00unpack\x00break\x00pi\x00LuauCompileInlineDepth\x00bad_array_new_length\x00math\x00cosh\x00sinh\x00tanh\x00log\x00tostring\x00basic_string\x00the beginning of an interpolated string\x00the middle of an interpolated string\x00the end of an interpolated string\x00malformed string\x00LuauFixIndexerSubtypingOrdering\x00LuauInstantiateInSubtyping\x00deg\x00typeof\x00inf\x00self\x00elseif\x00modf\x00%.0f\x00native\x00true\x00continue\x00byte\x00write\x00rrotate\x00lrotate\x00else\x00false\x00inlining failed: high register pressure\x00declare\x00Expected type pack after \'=\', got type\x00function type\x00typeof type\x00table type\x00LuauLexerLookaheadRemembersBraceType\x00property name\x00superclass name\x00global function name\x00Expected default type pack after type pack name\x00Expected default type after type name\x00global variable name\x00method name\x00field name\x00generic name\x00Exceeded function instruction limit; split the function into parts to compile\x00Exceeded constant limit; simplify the code to compile\x00Exceeded closure limit; simplify the code to compile\x00Exceeded jump distance limit; simplify the code to compile\x00Exceeded allowed recursion depth; simplify your %s to make the code compile\x00Exceeded allowed type length; simplify your type annotation to make the code compile\x00while\x00setmetatable\x00getmetatable\x00loop unroll failed: mutable loop variable\x00huge\x00index range\x00Interpolated string literal contains malformed escape sequence\x00String literal contains malformed escape sequence\x00invalid UTF-8 sequence\x00replace\x00fmod\x00round\x00end\x00band\x00LuauCompileLoopUnrollThreshold\x00LuauCompileInlineThreshold\x00table field\x00Assigned expression must be a variable or a field\x00All declaration parameters must be annotated\x00All declaration parameters aside from \'self\' must be annotated\x00@checked\x00rad\x00Expected type after \',\' but got \'>\' instead\x00Expected expression after \',\' but got \')\' instead\x00Expected type after \',\' but got \')\' instead\x00thread\x00allocation: table array %d\x00allocation: table hash %d array %d\x00Out of registers when trying to allocate %d registers: exceeded limit %d\x00Out of local registers when trying to allocate %s: exceeded limit %d\x00Out of upvalue registers when trying to allocate %s: exceeded limit %d\x00allocation: table hash %d\x00allocation: table template %d\x00std::bad_alloc\x00inlining failed: function is variadic\x00sub\x00}%.*s`\x00`%.*s`\x00NAN\x00_G\x00INF\x00Malformed string; did you forget to finish it?\x00Expected a statement, got \',\'; did you forget to wrap the list of return types in parentheses?\x00; did you mean to use \'{\' when defining a table?\x00; did you forget to close %s at line %d?\x00Malformed interpolated string; did you forget to add a \'}\'?\x00Double braces are not permitted within interpolated strings; did you mean \'\\{\'?\x00Unexpected \'!\'; did you mean \'not\'?\x00Unexpected \'||\'; did you mean \'or\'?\x00Expected \'->\' after \'()\' when parsing function type; did you mean \'nil\'?\x00Unexpected \'&&\'; did you mean \'and\'?\x00Malformed interpolated string; did you forget to add a \'`\'?\x00Unexpected \'!=\'; did you mean \'~=\'?\x00<unknown>\x00<eof>\x000123456789\x00writeu8\x00readu8\x00writei8\x00readi8\x00writeu16\x00readu16\x00writei16\x00readi16\x00writef64\x00readf64\x00atan2\x00writeu32\x00readu32\x00bit32\x00writei32\x00readi32\x00writef32\x00readf32\x00String literal contains malformed escape sequence or \\0\x00log10\x00Mixing union and intersection types is not allowed; consider wrapping in parentheses.\x00Composite type was not an intersection or union.\x00+\x00%*\x00inlining failed: too expensive (cost %d, profit %.2fx)\x00loop unroll failed: too expensive (iterations %d, cost %d, profit %.2fx)\x00loop unroll succeeded (iterations %d, cost %d, profit %.2fx)\x00(null)\x00Reached error limit (%d)\x00loop unroll failed: too many iterations (%d)\x00inlining succeeded (cost %d, profit %.2fx, depth %d)\x00\'{{\', which is invalid (did you mean \'\\{\'?)\x00Unicode character U+%x (did you mean \'%s\'?)\x00Malformed interpolated string, expected expression inside \'{}\'\x00Using \'function\' as a type annotation is not supported, consider replacing with a function type annotation e.g. \'(...any) -> ...any\'\x00declare must be followed by an identifier, \'function\', or \'class\'\x00\'%.*s\'\x00\'%s\'\x00\'%c\'\x00Function return type annotations are written after \':\' instead of \'->\'\x00\'//=\'\x00\'..=\'\x00Return types in function type annotations are written after \'->\' instead of \':\'\x00\'...\'\x00Expected function call arguments after \'(\'\x00%error-id%\x00\"%.*s\"\x00optimize \x00\x00\x00\x00\x00h\x1f\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00\"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00N4Luau7Compile12ValueVisitorE\x00\x00\x00\xfc\xb7\x00\x00H\x1f\x00\x00\x00*\x00\x00\x00\x00\x00\x00\x84 \x00\x00\x01\x00\x00\x00;\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00<\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00=\x00\x00\x00\"\x00\x00\x00#\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00N4Luau7Compile14BuiltinVisitorE\x00\xfc\xb7\x00\x00d \x00\x00\x00*\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x00\x00\x00\x02\x00\x00\x00\xff\xff\xff\xff\x02\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\xff\xff\xff\xff\x03\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01")
	rt.store.string(MEMORY_LIST[0], 8968,"\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01")
	rt.store.string(MEMORY_LIST[0], 9040,"\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01")
	rt.store.string(MEMORY_LIST[0], 9100,"\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01")
	rt.store.string(MEMORY_LIST[0], 9132,"\x01")
	rt.store.string(MEMORY_LIST[0], 9144,"\x01\x00\x00\x00\x01\x00\x00\x00\x01")
	rt.store.string(MEMORY_LIST[0], 9180,"\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01")
	rt.store.string(MEMORY_LIST[0], 9216,"\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00L%\x00\x00B\x00\x00\x00C\x00\x00\x00\x03\x00\x00\x00D\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00E\x00\x00\x00\"\x00\x00\x00#\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00N4Luau7Compile15ConstantVisitorE\x00\x00\x00\x00\xfc\xb7\x00\x00(%\x00\x00\x00*\x00\x00\x00\x00\x00\x00h&\x00\x00F\x00\x00\x00G\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00H\x00\x00\x00I\x00\x00\x00#\x00\x00\x00J\x00\x00\x00?\x00\x00\x00K\x00\x00\x00A\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00N4Luau7Compile12ShapeVisitorE\x00\x00\x00\xfc\xb7\x00\x00H&\x00\x00\x00*\x00\x00\x00\x00\x00\x00|\'\x00\x00L\x00\x00\x00M\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00N\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00O\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00P\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00=\x00\x00\x00\"\x00\x00\x00#\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00N4Luau14TypeMapVisitorE\x00\xfc\xb7\x00\x00d\'\x00\x00\x00*\x00\x00\x00\x00\x00\x00\x98(\x00\x00Q\x00\x00\x00R\x00\x00\x00\x03\x00\x00\x00S\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00@\x00\x00\x00A\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00N4Luau7Compile11CostVisitorE\x00\x00\x00\x00\xfc\xb7\x00\x00x(\x00\x00\x00*\x00\x00\x00\x00\x00\x00\xd0(\x00\x00^\x00\x00\x00`\x00\x00\x00a\x00\x00\x00N4Luau12CompileErrorE\x00\x00\x00\xfc\xb7\x00\x00\xb8(\x00\x00\x1c\xb8\x00\x00\x00\x00\x00\x00\x08*\x00\x00\x01\x00\x00\x00b\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00c\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00=\x00\x00\x00\"\x00\x00\x00#\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00N4Luau8Compiler11FenvVisitorE\x00N4Luau10AstVisitorE\x00\x00\x00\xbc\xb7\x00\x00\xea)\x00\x00\xfc\xb7\x00\x00\xcc)\x00\x00\x00*\x00\x00\x00\x00\x00\x00(+\x00\x00\x01\x00\x00\x00d\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00e\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00=\x00\x00\x00\"\x00\x00\x00#\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00N4Luau8Compiler15FunctionVisitorE\x00\x00\x00\xfc\xb7\x00\x00\x04+\x00\x00\x00*\x00\x00\x00\x00\x00\x00L,\x00\x00f\x00\x00\x00g\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00h\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00i\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00=\x00\x00\x00\"\x00\x00\x00#\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00N4Luau8Compiler21UndefinedLocalVisitorE\x00\xfc\xb7\x00\x00$,\x00\x00\x00*\x00\x00\x00\x00\x00\x00\xe0-\x00\x00\x01\x00\x00\x00j\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00k\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00=\x00\x00\x00\"\x00\x00\x00#\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00ZN4Luau8Compiler22resolveAssignConflictsEPNS_7AstStatERNSt3__26vectorINS0_10AssignmentENS3_9allocatorIS5_EEEERKNS_8AstArrayIPNS_7AstExprEEEE7Visitor\x00\x00\x00\x00\xfc\xb7\x00\x00H-\x00\x00\x00*\x00\x00\x00\x00\x00\x00\x04/\x00\x00l\x00\x00\x00m\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00o\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00=\x00\x00\x00\"\x00\x00\x00#\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00N4Luau8Compiler19ConstUpvalueVisitorE\x00\x00\x00\xfc\xb7\x00\x00\xdc.\x00\x00\x00*\x00\x00\x00\x00\x00\x00 0\x00\x00\x01\x00\x00\x00p\x00\x00\x00\x03\x00\x00\x00q\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00r\x00\x00\x00 \x00\x00\x00=\x00\x00\x00\"\x00\x00\x00#\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00N4Luau8Compiler13ReturnVisitorE\x00\xfc\xb7\x00\x00\x000\x00\x00\x00*\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00R\x00\x00\x00+\x00\x00\x00,\x00\x00\x00!\x00\x00\x00\"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00Q\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\x00\x00\x00\x00x5\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\xa05\x00\x00x\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\xcc5\x00\x00y\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\xf85\x00\x00z\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00$6\x00\x00{\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00H6\x00\x00|\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00l6\x00\x00}\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\x906\x00\x00~\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\xb46\x00\x00\x7f\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\xdc6\x00\x00\x80\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\x047\x00\x00\x81\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00,7\x00\x00\x82\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00P7\x00\x00\x83\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00t7\x00\x00\x84\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\x987\x00\x00\x85\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\xc47\x00\x00\x86\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\xe87\x00\x00\x87\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\x0c8\x00\x00\x88\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x0088\x00\x00\x89\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00x8\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\x988\x00\x00\x8d\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\xbc8\x00\x00\x8e\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\xe08\x00\x00\x8f\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\x049\x00\x00\x90\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00,9\x00\x00\x91\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00P9\x00\x00\x92\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00t9\x00\x00\x93\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\x989\x00\x00\x94\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\xb89\x00\x00\x95\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\xdc9\x00\x00\x96\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\x00:\x00\x00\x97\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00,:\x00\x00\x98\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00T:\x00\x00\x99\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\x80:\x00\x00\x9a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\xa8:\x00\x00\x9b\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\xd4:\x00\x00\x9c\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\x00;\x00\x00\x9d\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00,;\x00\x00\x9e\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00P;\x00\x00\x9f\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00\x94;\x00\x00\xa0\x00\x00\x00\x8b\x00\x00\x00v\x00\x00\x00\xa1\x00\x00\x00\x00\x00\x00\x00\xb8;\x00\x00\xa2\x00\x00\x00\x8b\x00\x00\x00v\x00\x00\x00\xa1\x00\x00\x00\x00\x00\x00\x00\xe0;\x00\x00\xa3\x00\x00\x00\x8b\x00\x00\x00v\x00\x00\x00\xa1\x00\x00\x00\x00\x00\x00\x00\x04<\x00\x00\xa4\x00\x00\x00\x8b\x00\x00\x00v\x00\x00\x00\xa1\x00\x00\x00\x00\x00\x00\x00(<\x00\x00\xa5\x00\x00\x00\x8b\x00\x00\x00v\x00\x00\x00\xa1\x00\x00\x00\x00\x00\x00\x00T<\x00\x00\xa6\x00\x00\x00\x8b\x00\x00\x00v\x00\x00\x00\xa1\x00\x00\x00\x00\x00\x00\x00\x80<\x00\x00\xa7\x00\x00\x00\x8b\x00\x00\x00v\x00\x00\x00\xa1\x00\x00\x00\x00\x00\x00\x00\xac<\x00\x00\xa8\x00\x00\x00\x8b\x00\x00\x00v\x00\x00\x00\xa1\x00\x00\x00\x00\x00\x00\x00\xd0<\x00\x00\xa9\x00\x00\x00\x8b\x00\x00\x00v\x00\x00\x00\xa1\x00\x00\x00\x00\x00\x00\x00\x1c=\x00\x00\xaa\x00\x00\x00\x8b\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00H=\x00\x00\xab\x00\x00\x00\x8b\x00\x00\x00v\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00p=\x00\x00\xac\x00\x00\x00\x8b\x00\x00\x00v\x00\x00\x00w\x00\x00\x00N4Luau12AstExprGroupE\x00N4Luau7AstExprE\x00N4Luau7AstNodeE\x00\x00\x00\xbc\xb7\x00\x00R5\x00\x00\xfc\xb7\x00\x00B5\x00\x00d5\x00\x00\xfc\xb7\x00\x00,5\x00\x00l5\x00\x00N4Luau18AstExprConstantNilE\x00\xfc\xb7\x00\x00\x845\x00\x00l5\x00\x00N4Luau19AstExprConstantBoolE\x00\x00\x00\x00\xfc\xb7\x00\x00\xac5\x00\x00l5\x00\x00N4Luau21AstExprConstantNumberE\x00\x00\xfc\xb7\x00\x00\xd85\x00\x00l5\x00\x00N4Luau21AstExprConstantStringE\x00\x00\xfc\xb7\x00\x00\x046\x00\x00l5\x00\x00N4Luau12AstExprLocalE\x00\x00\x00\xfc\xb7\x00\x0006\x00\x00l5\x00\x00N4Luau13AstExprGlobalE\x00\x00\xfc\xb7\x00\x00T6\x00\x00l5\x00\x00N4Luau14AstExprVarargsE\x00\xfc\xb7\x00\x00x6\x00\x00l5\x00\x00N4Luau11AstExprCallE\x00\x00\x00\x00\xfc\xb7\x00\x00\x9c6\x00\x00l5\x00\x00N4Luau16AstExprIndexNameE\x00\x00\x00\xfc\xb7\x00\x00\xc06\x00\x00l5\x00\x00N4Luau16AstExprIndexExprE\x00\x00\x00\xfc\xb7\x00\x00\xe86\x00\x00l5\x00\x00N4Luau15AstExprFunctionE\x00\x00\x00\x00\xfc\xb7\x00\x00\x107\x00\x00l5\x00\x00N4Luau12AstExprTableE\x00\x00\x00\xfc\xb7\x00\x0087\x00\x00l5\x00\x00N4Luau12AstExprUnaryE\x00\x00\x00\xfc\xb7\x00\x00\\7\x00\x00l5\x00\x00N4Luau13AstExprBinaryE\x00\x00\xfc\xb7\x00\x00\x807\x00\x00l5\x00\x00N4Luau20AstExprTypeAssertionE\x00\x00\x00\xfc\xb7\x00\x00\xa47\x00\x00l5\x00\x00N4Luau13AstExprIfElseE\x00\x00\xfc\xb7\x00\x00\xd07\x00\x00l5\x00\x00N4Luau12AstExprErrorE\x00\x00\x00\xfc\xb7\x00\x00\xf47\x00\x00l5\x00\x00N4Luau19AstExprInterpStringE\x00\x00\x00\x00\xfc\xb7\x00\x00\x188\x00\x00l5\x00\x00N4Luau12AstStatBlockE\x00N4Luau7AstStatE\x00\x00\x00\xfc\xb7\x00\x00Z8\x00\x00d5\x00\x00\xfc\xb7\x00\x00D8\x00\x00l8\x00\x00N4Luau9AstStatIfE\x00\x00\x00\xfc\xb7\x00\x00\x848\x00\x00l8\x00\x00N4Luau12AstStatWhileE\x00\x00\x00\xfc\xb7\x00\x00\xa48\x00\x00l8\x00\x00N4Luau13AstStatRepeatE\x00\x00\xfc\xb7\x00\x00\xc88\x00\x00l8\x00\x00N4Luau12AstStatBreakE\x00\x00\x00\xfc\xb7\x00\x00\xec8\x00\x00l8\x00\x00N4Luau15AstStatContinueE\x00\x00\x00\x00\xfc\xb7\x00\x00\x109\x00\x00l8\x00\x00N4Luau13AstStatReturnE\x00\x00\xfc\xb7\x00\x0089\x00\x00l8\x00\x00N4Luau11AstStatExprE\x00\x00\x00\x00\xfc\xb7\x00\x00\\9\x00\x00l8\x00\x00N4Luau12AstStatLocalE\x00\x00\x00\xfc\xb7\x00\x00\x809\x00\x00l8\x00\x00N4Luau10AstStatForE\x00\xfc\xb7\x00\x00\xa49\x00\x00l8\x00\x00N4Luau12AstStatForInE\x00\x00\x00\xfc\xb7\x00\x00\xc49\x00\x00l8\x00\x00N4Luau13AstStatAssignE\x00\x00\xfc\xb7\x00\x00\xe89\x00\x00l8\x00\x00N4Luau21AstStatCompoundAssignE\x00\x00\xfc\xb7\x00\x00\x0c:\x00\x00l8\x00\x00N4Luau15AstStatFunctionE\x00\x00\x00\x00\xfc\xb7\x00\x008:\x00\x00l8\x00\x00N4Luau20AstStatLocalFunctionE\x00\x00\x00\xfc\xb7\x00\x00`:\x00\x00l8\x00\x00N4Luau16AstStatTypeAliasE\x00\x00\x00\xfc\xb7\x00\x00\x8c:\x00\x00l8\x00\x00N4Luau20AstStatDeclareGlobalE\x00\x00\x00\xfc\xb7\x00\x00\xb4:\x00\x00l8\x00\x00N4Luau22AstStatDeclareFunctionE\x00\xfc\xb7\x00\x00\xe0:\x00\x00l8\x00\x00N4Luau19AstStatDeclareClassE\x00\x00\x00\x00\xfc\xb7\x00\x00\x0c;\x00\x00l8\x00\x00N4Luau12AstStatErrorE\x00\x00\x00\xfc\xb7\x00\x008;\x00\x00l8\x00\x00N4Luau16AstTypeReferenceE\x00N4Luau7AstTypeE\x00\x00\x00\xfc\xb7\x00\x00v;\x00\x00d5\x00\x00\xfc\xb7\x00\x00\\;\x00\x00\x88;\x00\x00N4Luau12AstTypeTableE\x00\x00\x00\xfc\xb7\x00\x00\xa0;\x00\x00\x88;\x00\x00N4Luau15AstTypeFunctionE\x00\x00\x00\x00\xfc\xb7\x00\x00\xc4;\x00\x00\x88;\x00\x00N4Luau13AstTypeTypeofE\x00\x00\xfc\xb7\x00\x00\xec;\x00\x00\x88;\x00\x00N4Luau12AstTypeUnionE\x00\x00\x00\xfc\xb7\x00\x00\x10<\x00\x00\x88;\x00\x00N4Luau19AstTypeIntersectionE\x00\x00\x00\x00\xfc\xb7\x00\x004<\x00\x00\x88;\x00\x00N4Luau20AstTypeSingletonBoolE\x00\x00\x00\xfc\xb7\x00\x00`<\x00\x00\x88;\x00\x00N4Luau22AstTypeSingletonStringE\x00\xfc\xb7\x00\x00\x8c<\x00\x00\x88;\x00\x00N4Luau12AstTypeErrorE\x00\x00\x00\xfc\xb7\x00\x00\xb8<\x00\x00\x88;\x00\x00N4Luau19AstTypePackExplicitE\x00N4Luau11AstTypePackE\x00\x00\x00\xfc\xb7\x00\x00\xf9<\x00\x00d5\x00\x00\xfc\xb7\x00\x00\xdc<\x00\x00\x10=\x00\x00N4Luau19AstTypePackVariadicE\x00\x00\x00\x00\xfc\xb7\x00\x00(=\x00\x00\x10=\x00\x00N4Luau18AstTypePackGenericE\x00\xfc\xb7\x00\x00T=\x00\x00\x10=\x00\x00\x00\x00\x00\x00d5\x00\x00\xad\x00\x00\x00\x8b\x00\x00\x00v\x00\x00\x00w")
	rt.store.string(MEMORY_LIST[0], 15776,"\"\x00\x00\"\x00\x00\x00\x000\x00\x00O\x00\x00\x00\x001\x00\x00l\x00\x00\x00\x00I\x00\x00l\x00\x00\x00\x00`\x00\x00\'\x00\x00\x00\x00m\x00\x00rn\x00\x00\x00|\x00\x00l\x00\x00\x00\x00\xa0\x00\x00 \x00\x00\x00\x00\xb4\x00\x00\'\x00\x00\x00\x00\xb8\x00\x00,\x00\x00\x00\x00\xc6\x00\x00AE\x00\x00\x00\xd7\x00\x00x\x00\x00\x00\x00\xe6\x00\x00ae\x00\x00\x001\x01\x00i\x00\x00\x00\x002\x01\x00lJ\x00\x00\x003\x01\x00ij\x00\x00\x00I\x01\x00\'n\x00\x00\x00R\x01\x00OE\x00\x00\x00S\x01\x00oe\x00\x00\x00\x7f\x01\x00f\x00\x00\x00\x00\x81\x01\x00\'B\x00\x00\x00\x84\x01\x00b\x00\x00\x00\x00\x87\x01\x00C\'\x00\x00\x00\x8a\x01\x00\'D\x00\x00\x00\x8d\x01\x00g\x00\x00\x00\x00\x93\x01\x00G\'\x00\x00\x00\x96\x01\x00l\x00\x00\x00\x00\x98\x01\x00K\'\x00\x00\x00\xa0\x01\x00O\'\x00\x00\x00\xa1\x01\x00o\'\x00\x00\x00\xa4\x01\x00\'P\x00\x00\x00\xa6\x01\x00R\x00\x00\x00\x00\xa7\x01\x002\x00\x00\x00\x00\xac\x01\x00\'T\x00\x00\x00\xb3\x01\x00\'Y\x00\x00\x00\xb7\x01\x003\x00\x00\x00\x00\xbc\x01\x005\x00\x00\x00\x00\xbd\x01\x00s\x00\x00\x00\x00\xc0\x01\x00l\x00\x00\x00\x00\xc1\x01\x00ll\x00\x00\x00\xc3\x01\x00!\x00\x00\x00\x00\xc7\x01\x00LJ\x00\x00\x00\xc8\x01\x00Lj\x00\x00\x00\xc9\x01\x00lj\x00\x00\x00\xca\x01\x00NJ\x00\x00\x00\xcb\x01\x00Nj\x00\x00\x00\xcc\x01\x00nj\x00\x00\x00\xf1\x01\x00DZ\x00\x00\x00\xf2\x01\x00Dz\x00\x00\x00\xf3\x01\x00dz\x00\x00\x00\x1c\x02\x003\x00\x00\x00\x00\"\x02\x008\x00\x00\x00\x00#\x02\x008\x00\x00\x00\x00A\x02\x00?\x00\x00\x00\x00Q\x02\x00a\x00\x00\x00\x00a\x02\x00g\x00\x00\x00\x00c\x02\x00y\x00\x00\x00\x00i\x02\x00i\x00\x00\x00\x00j\x02\x00i\x00\x00\x00\x00o\x02\x00w\x00\x00\x00\x00\x8b\x02\x00u\x00\x00\x00\x00\x8f\x02\x00y\x00\x00\x00\x00\x94\x02\x00?\x00\x00\x00\x00\xa3\x02\x00dz\x00\x00\x00\xa6\x02\x00ts\x00\x00\x00\xaa\x02\x00ls\x00\x00\x00\xab\x02\x00lz\x00\x00\x00\xb9\x02\x00\'\x00\x00\x00\x00\xba\x02\x00\"\x00\x00\x00\x00\xbb\x02\x00\'\x00\x00\x00\x00\xbc\x02\x00\'\x00\x00\x00\x00\xbd\x02\x00\'\x00\x00\x00\x00\xbe\x02\x00\'\x00\x00\x00\x00\xc2\x02\x00<\x00\x00\x00\x00\xc3\x02\x00>\x00\x00\x00\x00\xc4\x02\x00^\x00\x00\x00\x00\xc6\x02\x00^\x00\x00\x00\x00\xc8\x02\x00\'\x00\x00\x00\x00\xca\x02\x00\'\x00\x00\x00\x00\xcb\x02\x00\'\x00\x00\x00\x00\xd0\x02\x00:\x00\x00\x00\x00\xd7\x02\x00-\x00\x00\x00\x00\xdb\x02\x00i\x00\x00\x00\x00\xdc\x02\x00~\x00\x00\x00\x00\xdd\x02\x00\"\x00\x00\x00\x00\xee\x02\x00\"\x00\x00\x00\x00\xf4\x02\x00\'\x00\x00\x00\x00\xf6\x02\x00\"\x00\x00\x00\x00\xf8\x02\x00:\x00\x00\x00\x00t\x03\x00\'\x00\x00\x00\x00z\x03\x00i\x00\x00\x00\x00~\x03\x00;\x00\x00\x00\x00\x7f\x03\x00J\x00\x00\x00\x00\x84\x03\x00\'\x00\x00\x00\x00\x91\x03\x00A\x00\x00\x00\x00\x92\x03\x00B\x00\x00\x00\x00\x95\x03\x00E\x00\x00\x00\x00\x96\x03\x00Z\x00\x00\x00\x00\x97\x03\x00H\x00\x00\x00\x00\x99\x03\x00l\x00\x00\x00\x00\x9a\x03\x00K\x00\x00\x00\x00\x9c\x03\x00M\x00\x00\x00\x00\x9d\x03\x00N\x00\x00\x00\x00\x9f\x03\x00O\x00\x00\x00\x00\xa1\x03\x00P\x00\x00\x00\x00\xa4\x03\x00T\x00\x00\x00\x00\xa5\x03\x00Y\x00\x00\x00\x00\xa7\x03\x00X\x00\x00\x00\x00\xb1\x03\x00a\x00\x00\x00\x00\xb3\x03\x00y\x00\x00\x00\x00\xb9\x03\x00i\x00\x00\x00\x00\xbd\x03\x00v\x00\x00\x00\x00\xbf\x03\x00o\x00\x00\x00\x00\xc1\x03\x00p\x00\x00\x00\x00\xc3\x03\x00o\x00\x00\x00\x00\xc5\x03\x00u\x00\x00\x00\x00\xd2\x03\x00Y\x00\x00\x00\x00\xdc\x03\x00F\x00\x00\x00\x00\xe8\x03\x002\x00\x00\x00\x00\xf1\x03\x00p\x00\x00\x00\x00\xf2\x03\x00c\x00\x00\x00\x00\xf3\x03\x00j\x00\x00\x00\x00\xf9\x03\x00C\x00\x00\x00\x00\xfa\x03\x00M\x00\x00\x00\x00\x05\x04\x00S\x00\x00\x00\x00\x06\x04\x00l\x00\x00\x00\x00\x08\x04\x00J\x00\x00\x00\x00\x10\x04\x00A\x00\x00\x00\x00\x12\x04\x00B\x00\x00\x00\x00\x15\x04\x00E\x00\x00\x00\x00\x17\x04\x003\x00\x00\x00\x00\x1a\x04\x00K\x00\x00\x00\x00\x1c\x04\x00M\x00\x00\x00\x00\x1d\x04\x00H\x00\x00\x00\x00\x1e\x04\x00O\x00\x00\x00\x00 \x04\x00P\x00\x00\x00\x00!\x04\x00C\x00\x00\x00\x00\"\x04\x00T\x00\x00\x00\x00#\x04\x00Y\x00\x00\x00\x00%\x04\x00X\x00\x00\x00\x00+\x04\x00bl\x00\x00\x00,\x04\x00b\x00\x00\x00\x00.\x04\x00lO\x00\x00\x000\x04\x00a\x00\x00\x00\x001\x04\x006\x00\x00\x00\x003\x04\x00r\x00\x00\x00\x005\x04\x00e\x00\x00\x00\x00>\x04\x00o\x00\x00\x00\x00@\x04\x00p\x00\x00\x00\x00A\x04\x00c\x00\x00\x00\x00C\x04\x00y\x00\x00\x00\x00E\x04\x00x\x00\x00\x00\x00U\x04\x00s\x00\x00\x00\x00V\x04\x00i\x00\x00\x00\x00X\x04\x00j\x00\x00\x00\x00a\x04\x00w\x00\x00\x00\x00t\x04\x00V\x00\x00\x00\x00u\x04\x00v\x00\x00\x00\x00\x91\x04\x00r\'\x00\x00\x00\xae\x04\x00Y\x00\x00\x00\x00\xaf\x04\x00y\x00\x00\x00\x00\xbb\x04\x00h\x00\x00\x00\x00\xbd\x04\x00e\x00\x00\x00\x00\xc0\x04\x00l\x00\x00\x00\x00\xcf\x04\x00i\x00\x00\x00\x00\xd4\x04\x00AE\x00\x00\x00\xd5\x04\x00ae\x00\x00\x00\xe0\x04\x003\x00\x00\x00\x00\x01\x05\x00d\x00\x00\x00\x00\x0c\x05\x00G\x00\x00\x00\x00\x1b\x05\x00q\x00\x00\x00\x00\x1c\x05\x00W\x00\x00\x00\x00\x1d\x05\x00w\x00\x00\x00\x00M\x05\x00U\x00\x00\x00\x00O\x05\x00S\x00\x00\x00\x00U\x05\x00O\x00\x00\x00\x00Z\x05\x00\'\x00\x00\x00\x00]\x05\x00\'\x00\x00\x00\x00a\x05\x00w\x00\x00\x00\x00c\x05\x00q\x00\x00\x00\x00f\x05\x00q\x00\x00\x00\x00p\x05\x00h\x00\x00\x00\x00x\x05\x00n\x00\x00\x00\x00|\x05\x00n\x00\x00\x00\x00}\x05\x00u\x00\x00\x00\x00\x81\x05\x00g\x00\x00\x00\x00\x84\x05\x00f\x00\x00\x00\x00\x85\x05\x00o\x00\x00\x00\x00\x89\x05\x00:\x00\x00\x00\x00\xc0\x05\x00l\x00\x00\x00\x00\xc3\x05\x00:\x00\x00\x00\x00\xd5\x05\x00l\x00\x00\x00\x00\xd8\x05\x00v\x00\x00\x00\x00\xd9\x05\x00\'\x00\x00\x00\x00\xdf\x05\x00l\x00\x00\x00\x00\xe1\x05\x00o\x00\x00\x00\x00\xf0\x05\x00ll\x00\x00\x00\xf1\x05\x00l\'\x00\x00\x00\xf2\x05\x00\"\x00\x00\x00\x00\xf3\x05\x00\'\x00\x00\x00\x00\xf4\x05\x00\"\x00\x00\x00\x00\r\x06\x00,\x00\x00\x00\x00\'\x06\x00l\x00\x00\x00\x00G\x06\x00o\x00\x00\x00\x00`\x06\x00.\x00\x00\x00\x00a\x06\x00l\x00\x00\x00\x00e\x06\x00o\x00\x00\x00\x00g\x06\x00V\x00\x00\x00\x00k\x06\x00,\x00\x00\x00\x00m\x06\x00*\x00\x00\x00\x00\xbe\x06\x00o\x00\x00\x00\x00\xc1\x06\x00o\x00\x00\x00\x00\xd4\x06\x00-\x00\x00\x00\x00\xd5\x06\x00o\x00\x00\x00\x00\xf0\x06\x00.\x00\x00\x00\x00\xf1\x06\x00l\x00\x00\x00\x00\xf5\x06\x00o\x00\x00\x00\x00\xf7\x06\x00V\x00\x00\x00\x00\x01\x07\x00.\x00\x00\x00\x00\x02\x07\x00.\x00\x00\x00\x00\x03\x07\x00:\x00\x00\x00\x00\x04\x07\x00:\x00\x00\x00\x00\xc0\x07\x00O\x00\x00\x00\x00\xca\x07\x00l\x00\x00\x00\x00\xf4\x07\x00\'\x00\x00\x00\x00\xf5\x07\x00\'\x00\x00\x00\x00\xfa\x07\x00_\x00\x00\x00\x00\x03\t\x00:\x00\x00\x00\x00f\t\x00o\x00\x00\x00\x00}\t\x00?\x00\x00\x00\x00\xe6\t\x00O\x00\x00\x00\x00\xea\t\x008\x00\x00\x00\x00\xed\t\x009\x00\x00\x00\x00f\n\x00o\x00\x00\x00\x00g\n\x009\x00\x00\x00\x00j\n\x008\x00\x00\x00\x00\x83\n\x00:\x00\x00\x00\x00\xe6\n\x00o\x00\x00\x00\x00\x03\x0b\x008\x00\x00\x00\x00 \x0b\x00O\x00\x00\x00\x00f\x0b\x00O\x00\x00\x00\x00h\x0b\x009\x00\x00\x00\x00\xe6\x0b\x00o\x00\x00\x00\x00\x02\x0c\x00o\x00\x00\x00\x00f\x0c\x00o\x00\x00\x00\x00\x82\x0c\x00o\x00\x00\x00\x00\xe6\x0c\x00o\x00\x00\x00\x00\x02\r\x00o\x00\x00\x00\x00 \r\x00o\x00\x00\x00\x00f\r\x00o\x00\x00\x00\x00m\r\x009\x00\x00\x00\x00\x82\r\x00o\x00\x00\x00\x00P\x0e\x00o\x00\x00\x00\x00\xd0\x0e\x00o\x00\x00\x00\x00\x1d\x10\x00o\x00\x00\x00\x00@\x10\x00o\x00\x00\x00\x00\xe7\x10\x00y\x00\x00\x00\x00\xff\x10\x00o\x00\x00\x00\x00\x00\x12\x00U\x00\x00\x00\x00\xd0\x12\x00O\x00\x00\x00\x00\xa0\x13\x00D\x00\x00\x00\x00\xa1\x13\x00R\x00\x00\x00\x00\xa2\x13\x00T\x00\x00\x00\x00\xa4\x13\x00O\'\x00\x00\x00\xa5\x13\x00i\x00\x00\x00\x00\xa9\x13\x00Y\x00\x00\x00\x00\xaa\x13\x00A\x00\x00\x00\x00\xab\x13\x00J\x00\x00\x00\x00\xac\x13\x00E\x00\x00\x00\x00\xae\x13\x00?\x00\x00\x00\x00\xb3\x13\x00W\x00\x00\x00\x00\xb7\x13\x00M\x00\x00\x00\x00\xbb\x13\x00H\x00\x00\x00\x00\xbd\x13\x00Y\x00\x00\x00\x00\xc0\x13\x00G\x00\x00\x00\x00\xc2\x13\x00h\x00\x00\x00\x00\xc3\x13\x00Z\x00\x00\x00\x00\xce\x13\x004\x00\x00\x00\x00\xcf\x13\x00b\x00\x00\x00\x00\xd2\x13\x00R\x00\x00\x00\x00\xd4\x13\x00W\x00\x00\x00\x00\xd5\x13\x00S\x00\x00\x00\x00\xd9\x13\x00V\x00\x00\x00\x00\xda\x13\x00S\x00\x00\x00\x00\xde\x13\x00L\x00\x00\x00\x00\xdf\x13\x00C\x00\x00\x00\x00\xe2\x13\x00P\x00\x00\x00\x00\xe6\x13\x00K\x00\x00\x00\x00\xe7\x13\x00d\x00\x00\x00\x00\xee\x13\x006\x00\x00\x00\x00\xf3\x13\x00G\x00\x00\x00\x00\xf4\x13\x00B\x00\x00\x00\x00\x00\x14\x00=\x00\x00\x00\x00/\x14\x00V\x00\x00\x00\x003\x14\x00>\x00\x00\x00\x008\x14\x00<\x00\x00\x00\x00J\x14\x00\'\x00\x00\x00\x00L\x14\x00U\x00\x00\x00\x00g\x14\x00U\'\x00\x00\x00m\x14\x00P\x00\x00\x00\x00o\x14\x00d\x00\x00\x00\x00\x86\x14\x00P\'\x00\x00\x00\x87\x14\x00d\'\x00\x00\x00\x8d\x14\x00J\x00\x00\x00\x00\xaa\x14\x00L\x00\x00\x00\x00\xbf\x14\x002\x00\x00\x00\x00A\x15\x00x\x00\x00\x00\x00|\x15\x00H\x00\x00\x00\x00}\x15\x00x\x00\x00\x00\x00\x87\x15\x00R\x00\x00\x00\x00\xaf\x15\x00b\x00\x00\x00\x00\xb4\x15\x00F\x00\x00\x00\x00\xc5\x15\x00A\x00\x00\x00\x00\xde\x15\x00D\x00\x00\x00\x00\xea\x15\x00D\x00\x00\x00\x00\xf0\x15\x00M\x00\x00\x00\x00\xf7\x15\x00B\x00\x00\x00\x00m\x16\x00X\x00\x00\x00\x00n\x16\x00x\x00\x00\x00\x00\x80\x16\x00 \x00\x00\x00\x00\xb2\x16\x00<\x00\x00\x00\x00\xb7\x16\x00X\x00\x00\x00\x00\xc1\x16\x00l\x00\x00\x00\x00\xcc\x16\x00\'\x00\x00\x00\x00\xd5\x16\x00K\x00\x00\x00\x00\xd6\x16\x00M\x00\x00\x00\x00\xec\x16\x00:\x00\x00\x00\x00\xed\x16\x00+\x00\x00\x00\x005\x17\x00/\x00\x00\x00\x00\x03\x18\x00:\x00\x00\x00\x00\t\x18\x00:\x00\x00\x00\x00\xd3\x1c\x00\"\x00\x00\x00\x00\x04\x1d\x00c\x00\x00\x00\x00\x0f\x1d\x00o\x00\x00\x00\x00\x11\x1d\x00o\x00\x00\x00\x00\x1c\x1d\x00u\x00\x00\x00\x00 \x1d\x00v\x00\x00\x00\x00!\x1d\x00w\x00\x00\x00\x00\"\x1d\x00z\x00\x00\x00\x00&\x1d\x00r\x00\x00\x00\x00k\x1d\x00ue\x00\x00\x00\x83\x1d\x00g\x00\x00\x00\x00\x8c\x1d\x00y\x00\x00\x00\x00\x9d\x1e\x00f\x00\x00\x00\x00\xff\x1e\x00y\x00\x00\x00\x00\xbd\x1f\x00\'\x00\x00\x00\x00\xbe\x1f\x00i\x00\x00\x00\x00\xbf\x1f\x00\'\x00\x00\x00\x00\xc0\x1f\x00~\x00\x00\x00\x00\xef\x1f\x00\'\x00\x00\x00\x00\xfd\x1f\x00\'\x00\x00\x00\x00\xfe\x1f\x00\'\x00\x00\x00\x00\x00 \x00 \x00\x00\x00\x00\x01 \x00 \x00\x00\x00\x00\x02 \x00 \x00\x00\x00\x00\x03 \x00 \x00\x00\x00\x00\x04 \x00 \x00\x00\x00\x00\x05 \x00 \x00\x00\x00\x00\x06 \x00 \x00\x00\x00\x00\x07 \x00 \x00\x00\x00\x00\x08 \x00 \x00\x00\x00\x00\t \x00 \x00\x00\x00\x00\n \x00 \x00\x00\x00\x00\x10 \x00-\x00\x00\x00\x00\x11 \x00-\x00\x00\x00\x00\x12 \x00-\x00\x00\x00\x00\x13 \x00-\x00\x00\x00\x00\x16 \x00ll\x00\x00\x00\x18 \x00\'\x00\x00\x00\x00\x19 \x00\'\x00\x00\x00\x00\x1a \x00,\x00\x00\x00\x00\x1b \x00\'\x00\x00\x00\x00\x1c \x00\"\x00\x00\x00\x00\x1d \x00\"\x00\x00\x00\x00\x1f \x00\"\x00\x00\x00\x00$ \x00.\x00\x00\x00\x00% \x00..\x00\x00\x00& \x00...\x00\x00( \x00 \x00\x00\x00\x00) \x00 \x00\x00\x00\x00/ \x00 \x00\x00\x00\x002 \x00\'\x00\x00\x00\x003 \x00\"\x00\x00\x00\x004 \x00\'\'\'\x00\x005 \x00\'\x00\x00\x00\x006 \x00\"\x00\x00\x00\x007 \x00\'\'\'\x00\x009 \x00<\x00\x00\x00\x00: \x00>\x00\x00\x00\x00< \x00!!\x00\x00\x00A \x00/\x00\x00\x00\x00C \x00-\x00\x00\x00\x00D \x00/\x00\x00\x00\x00G \x00??\x00\x00\x00H \x00?!\x00\x00\x00I \x00!?\x00\x00\x00N \x00*\x00\x00\x00\x00S \x00~\x00\x00\x00\x00W \x00\'\'\'\'\x00Z \x00:\x00\x00\x00\x00_ \x00 \x00\x00\x00\x00\xa8 \x00Rs\x00\x00\x00\xb6 \x00lt\x00\x00\x00\x00!\x00a/c\x00\x00\x01!\x00a/s\x00\x00\x02!\x00C\x00\x00\x00\x00\x05!\x00c/o\x00\x00\x06!\x00c/u\x00\x00\n!\x00g\x00\x00\x00\x00\x0b!\x00H\x00\x00\x00\x00\x0c!\x00H\x00\x00\x00\x00\r!\x00H\x00\x00\x00\x00\x0e!\x00h\x00\x00\x00\x00\x10!\x00l\x00\x00\x00\x00\x11!\x00l\x00\x00\x00\x00\x12!\x00L\x00\x00\x00\x00\x13!\x00l\x00\x00\x00\x00\x15!\x00N\x00\x00\x00\x00\x16!\x00No\x00\x00\x00\x19!\x00P\x00\x00\x00\x00\x1a!\x00Q\x00\x00\x00\x00\x1b!\x00R\x00\x00\x00\x00\x1c!\x00R\x00\x00\x00\x00\x1d!\x00R\x00\x00\x00\x00!!\x00TEL\x00\x00$!\x00Z\x00\x00\x00\x00(!\x00Z\x00\x00\x00\x00*!\x00K\x00\x00\x00\x00,!\x00B\x00\x00\x00\x00-!\x00C\x00\x00\x00\x00.!\x00e\x00\x00\x00\x00/!\x00e\x00\x00\x00\x000!\x00E\x00\x00\x00\x001!\x00F\x00\x00\x00\x003!\x00M\x00\x00\x00\x004!\x00o\x00\x00\x00\x009!\x00i\x00\x00\x00\x00;!\x00FAX\x00\x00=!\x00y\x00\x00\x00\x00E!\x00D\x00\x00\x00\x00F!\x00d\x00\x00\x00\x00G!\x00e\x00\x00\x00\x00H!\x00i\x00\x00\x00\x00I!\x00j\x00\x00\x00\x00`!\x00l\x00\x00\x00\x00a!\x00ll\x00\x00\x00b!\x00lll\x00\x00c!\x00lV\x00\x00\x00d!\x00V\x00\x00\x00\x00e!\x00Vl\x00\x00\x00f!\x00Vll\x00\x00g!\x00Vlll\x00h!\x00lX\x00\x00\x00i!\x00X\x00\x00\x00\x00j!\x00Xl\x00\x00\x00k!\x00Xll\x00\x00l!\x00L\x00\x00\x00\x00m!\x00C\x00\x00\x00\x00n!\x00D\x00\x00\x00\x00o!\x00M\x00\x00\x00\x00p!\x00i\x00\x00\x00\x00q!\x00ii\x00\x00\x00r!\x00iii\x00\x00s!\x00iv\x00\x00\x00t!\x00v\x00\x00\x00\x00u!\x00vi\x00\x00\x00v!\x00vii\x00\x00w!\x00viii\x00x!\x00ix\x00\x00\x00y!\x00x\x00\x00\x00\x00z!\x00xi\x00\x00\x00{!\x00xii\x00\x00|!\x00l\x00\x00\x00\x00}!\x00c\x00\x00\x00\x00~!\x00d\x00\x00\x00\x00\x7f!\x00rn\x00\x00\x00\x12\"\x00-\x00\x00\x00\x00\x15\"\x00/\x00\x00\x00\x00\x16\"\x00\\\x00\x00\x00\x00\x17\"\x00*\x00\x00\x00\x00\x1e\"\x00oo\x00\x00\x00#\"\x00l\x00\x00\x00\x00%\"\x00ll\x00\x00\x00(\"\x00v\x00\x00\x00\x00*\"\x00U\x00\x00\x00\x006\"\x00:\x00\x00\x00\x00<\"\x00~\x00\x00\x00\x00j\"\x00<<\x00\x00\x00k\"\x00>>\x00\x00\x00\xa4\"\x00T\x00\x00\x00\x00\xc1\"\x00v\x00\x00\x00\x00\xc3\"\x00U\x00\x00\x00\x00\xd8\"\x00<<<\x00\x00\xd9\"\x00>>>\x00\x00\xff\"\x00E\x00\x00\x00\x00s#\x00i\x00\x00\x00\x00t#\x00p\x00\x00\x00\x00z#\x00a\x00\x00\x00\x00\xfd#\x00l\x00\x00\x00\x00J$\x00\\\\\x00\x00\x00t$\x00(l)\x00\x00u$\x00(2)\x00\x00v$\x00(3)\x00\x00w$\x00(4)\x00\x00x$\x00(5)\x00\x00y$\x00(6)\x00\x00z$\x00(7)\x00\x00{$\x00(8)\x00\x00|$\x00(9)\x00\x00}$\x00(lO)\x00~$\x00(ll)\x00\x7f$\x00(l2)\x00\x80$\x00(l3)\x00\x81$\x00(l4)\x00\x82$\x00(l5)\x00\x83$\x00(l6)\x00\x84$\x00(l7)\x00\x85$\x00(l8)\x00\x86$\x00(l9)\x00\x87$\x00(2O)\x00\x88$\x00l.\x00\x00\x00\x89$\x002.\x00\x00\x00\x8a$\x003.\x00\x00\x00\x8b$\x004.\x00\x00\x00\x8c$\x005.\x00\x00\x00\x8d$\x006.\x00\x00\x00\x8e$\x007.\x00\x00\x00\x8f$\x008.\x00\x00\x00\x90$\x009.\x00\x00\x00\x91$\x00lO.\x00\x00\x92$\x00ll.\x00\x00\x93$\x00l2.\x00\x00\x94$\x00l3.\x00\x00\x95$\x00l4.\x00\x00\x96$\x00l5.\x00\x00\x97$\x00l6.\x00\x00\x98$\x00l7.\x00\x00\x99$\x00l8.\x00\x00\x9a$\x00l9.\x00\x00\x9b$\x002O.\x00\x00\x9c$\x00(a)\x00\x00\x9d$\x00(b)\x00\x00\x9e$\x00(c)\x00\x00\x9f$\x00(d)\x00\x00\xa0$\x00(e)\x00\x00\xa1$\x00(f)\x00\x00\xa2$\x00(g)\x00\x00\xa3$\x00(h)\x00\x00\xa4$\x00(i)\x00\x00\xa5$\x00(j)\x00\x00\xa6$\x00(k)\x00\x00\xa7$\x00(l)\x00\x00\xa8$\x00(rn)\x00\xa9$\x00(n)\x00\x00\xaa$\x00(o)\x00\x00\xab$\x00(p)\x00\x00\xac$\x00(q)\x00\x00\xad$\x00(r)\x00\x00\xae$\x00(s)\x00\x00\xaf$\x00(t)\x00\x00\xb0$\x00(u)\x00\x00\xb1$\x00(v)\x00\x00\xb2$\x00(w)\x00\x00\xb3$\x00(x)\x00\x00\xb4$\x00(y)\x00\x00\xb5$\x00(z)\x00\x00q%\x00/\x00\x00\x00\x00s%\x00X\x00\x00\x00\x00h\'\x00(\x00\x00\x00\x00i\'\x00)\x00\x00\x00\x00n\'\x00<\x00\x00\x00\x00o\'\x00>\x00\x00\x00\x00r\'\x00(\x00\x00\x00\x00s\'\x00)\x00\x00\x00\x00t\'\x00{\x00\x00\x00\x00u\'\x00}\x00\x00\x00\x00\x95\'\x00+\x00\x00\x00\x00\x96\'\x00-\x00\x00\x00\x00\xcb\'\x00/\x00\x00\x00\x00\xcd\'\x00\\\x00\x00\x00\x00\xd9\'\x00T\x00\x00\x00\x00+)\x00x\x00\x00\x00\x00,)\x00x\x00\x00\x00\x00\xf5)\x00\\\x00\x00\x00\x00\xf8)\x00/\x00\x00\x00\x00\xf9)\x00\\\x00\x00\x00\x00 *\x00>>\x00\x00\x00/*\x00x\x00\x00\x00\x00t*\x00::=\x00\x00u*\x00==\x00\x00\x00v*\x00===\x00\x00\xa5*\x00><\x00\x00\x00\xfb*\x00///\x00\x00\xfd*\x00//\x00\x00\x00\x85,\x00r\x00\x00\x00\x00\x8e,\x00H\x00\x00\x00\x00\x92,\x00l\x00\x00\x00\x00\x94,\x00K\x00\x00\x00\x00\x98,\x00M\x00\x00\x00\x00\x9a,\x00N\x00\x00\x00\x00\x9e,\x00O\x00\x00\x00\x00\x9f,\x00o\x00\x00\x00\x00\xa2,\x00P\x00\x00\x00\x00\xa3,\x00p\x00\x00\x00\x00\xa4,\x00C\x00\x00\x00\x00\xa5,\x00c\x00\x00\x00\x00\xa6,\x00T\x00\x00\x00\x00\xa8,\x00Y\x00\x00\x00\x00\xac,\x00X\x00\x00\x00\x00\xba,\x00-\x00\x00\x00\x00\xc6,\x00/\x00\x00\x00\x00\xca,\x009\x00\x00\x00\x00\xcc,\x003\x00\x00\x00\x00\xd0,\x00L\x00\x00\x00\x00\xd2,\x006\x00\x00\x00\x00\xf9,\x00\\\\\x00\x00\x008-\x00V\x00\x00\x00\x009-\x00E\x00\x00\x00\x00O-\x00l\x00\x00\x00\x00Q-\x00!\x00\x00\x00\x00T-\x00O\x00\x00\x00\x00U-\x00Q\x00\x00\x00\x00]-\x00X\x00\x00\x00\x00(.\x00((\x00\x00\x00).\x00))\x00\x00\x00@.\x00=\x00\x00\x00\x00\x02/\x00\\\x00\x00\x00\x00\x03/\x00/\x00\x00\x00\x00\x030\x00\"\x00\x00\x00\x00\x070\x00O\x00\x00\x00\x00\x140\x00(\x00\x00\x00\x00\x150\x00)\x00\x00\x00\x0030\x00/\x00\x00\x00\x00\xa00\x00=\x00\x00\x00\x00\xce0\x00/\x00\x00\x00\x00\xd31\x00/\x00\x00\x00\x00\xd41\x00\\\x00\x00\x00\x006N\x00\\\x00\x00\x00\x00?N\x00/\x00\x00\x00\x00\xd0\xa4\x00B\x00\x00\x00\x00\xd1\xa4\x00P\x00\x00\x00\x00\xd2\xa4\x00d\x00\x00\x00\x00\xd3\xa4\x00D\x00\x00\x00\x00\xd4\xa4\x00T\x00\x00\x00\x00\xd6\xa4\x00G\x00\x00\x00\x00\xd7\xa4\x00K\x00\x00\x00\x00\xd9\xa4\x00J\x00\x00\x00\x00\xda\xa4\x00C\x00\x00\x00\x00\xdc\xa4\x00Z\x00\x00\x00\x00\xdd\xa4\x00F\x00\x00\x00\x00\xdf\xa4\x00M\x00\x00\x00\x00\xe0\xa4\x00N\x00\x00\x00\x00\xe1\xa4\x00L\x00\x00\x00\x00\xe2\xa4\x00S\x00\x00\x00\x00\xe3\xa4\x00R\x00\x00\x00\x00\xe6\xa4\x00V\x00\x00\x00\x00\xe7\xa4\x00H\x00\x00\x00\x00\xea\xa4\x00W\x00\x00\x00\x00\xeb\xa4\x00X\x00\x00\x00\x00\xec\xa4\x00Y\x00\x00\x00\x00\xee\xa4\x00A\x00\x00\x00\x00\xf0\xa4\x00E\x00\x00\x00\x00\xf2\xa4\x00l\x00\x00\x00\x00\xf3\xa4\x00O\x00\x00\x00\x00\xf4\xa4\x00U\x00\x00\x00\x00\xf8\xa4\x00.\x00\x00\x00\x00\xf9\xa4\x00,\x00\x00\x00\x00\xfa\xa4\x00..\x00\x00\x00\xfb\xa4\x00.,\x00\x00\x00\xfd\xa4\x00:\x00\x00\x00\x00\xfe\xa4\x00-.\x00\x00\x00\xff\xa4\x00=\x00\x00\x00\x00\x0e\xa6\x00.\x00\x00\x00\x00D\xa6\x002\x00\x00\x00\x00G\xa6\x00i\x00\x00\x00\x00\x98\xa6\x00OO\x00\x00\x00\x99\xa6\x00oo\x00\x00\x00\xdf\xa6\x00V\x00\x00\x00\x00\xeb\xa6\x00?\x00\x00\x00\x00\xef\xa6\x002\x00\x00\x00\x00(\xa7\x00T3\x00\x00\x001\xa7\x00s\x00\x00\x00\x002\xa7\x00AA\x00\x00\x003\xa7\x00aa\x00\x00\x004\xa7\x00AO\x00\x00\x005\xa7\x00ao\x00\x00\x006\xa7\x00AU\x00\x00\x007\xa7\x00au\x00\x00\x008\xa7\x00AV\x00\x00\x009\xa7\x00av\x00\x00\x00:\xa7\x00AV\x00\x00\x00;\xa7\x00av\x00\x00\x00<\xa7\x00AY\x00\x00\x00=\xa7\x00ay\x00\x00\x00N\xa7\x00OO\x00\x00\x00O\xa7\x00oo\x00\x00\x00Z\xa7\x002\x00\x00\x00\x00j\xa7\x003\x00\x00\x00\x00n\xa7\x009\x00\x00\x00\x00w\xa7\x00tf\x00\x00\x00x\xa7\x00&\x00\x00\x00\x00\x89\xa7\x00:\x00\x00\x00\x00\x8c\xa7\x00\'\x00\x00\x00\x00\x98\xa7\x00F\x00\x00\x00\x00\x99\xa7\x00f\x00\x00\x00\x00\x9f\xa7\x00u\x00\x00\x00\x00\xab\xa7\x003\x00\x00\x00\x00\xb2\xa7\x00J\x00\x00\x00\x00\xb3\xa7\x00X\x00\x00\x00\x00\xb4\xa7\x00B\x00\x00\x00\x002\xab\x00e\x00\x00\x00\x005\xab\x00f\x00\x00\x00\x00=\xab\x00o\x00\x00\x00\x00G\xab\x00r\x00\x00\x00\x00H\xab\x00r\x00\x00\x00\x00N\xab\x00u\x00\x00\x00\x00R\xab\x00u\x00\x00\x00\x00Z\xab\x00y\x00\x00\x00\x00c\xab\x00uo\x00\x00\x00u\xab\x00i\x00\x00\x00\x00\x81\xab\x00r\x00\x00\x00\x00\x83\xab\x00w\x00\x00\x00\x00\x93\xab\x00z\x00\x00\x00\x00\xa9\xab\x00v\x00\x00\x00\x00\xaa\xab\x00s\x00\x00\x00\x00\xaf\xab\x00c\x00\x00\x00\x00\x00\xfb\x00ff\x00\x00\x00\x01\xfb\x00fi\x00\x00\x00\x02\xfb\x00fl\x00\x00\x00\x03\xfb\x00ffi\x00\x00\x04\xfb\x00ffl\x00\x00\x06\xfb\x00st\x00\x00\x00\xa6\xfb\x00o\x00\x00\x00\x00\xa7\xfb\x00o\x00\x00\x00\x00\xa8\xfb\x00o\x00\x00\x00\x00\xa9\xfb\x00o\x00\x00\x00\x00\xaa\xfb\x00o\x00\x00\x00\x00\xab\xfb\x00o\x00\x00\x00\x00\xac\xfb\x00o\x00\x00\x00\x00\xad\xfb\x00o\x00\x00\x00\x00>\xfd\x00(\x00\x00\x00\x00?\xfd\x00)\x00\x00\x00\x000\xfe\x00:\x00\x00\x00\x00M\xfe\x00_\x00\x00\x00\x00N\xfe\x00_\x00\x00\x00\x00O\xfe\x00_\x00\x00\x00\x00X\xfe\x00-\x00\x00\x00\x00h\xfe\x00\\\x00\x00\x00\x00\x8d\xfe\x00l\x00\x00\x00\x00\x8e\xfe\x00l\x00\x00\x00\x00\xe9\xfe\x00o\x00\x00\x00\x00\xea\xfe\x00o\x00\x00\x00\x00\xeb\xfe\x00o\x00\x00\x00\x00\xec\xfe\x00o\x00\x00\x00\x00\x01\xff\x00!\x00\x00\x00\x00\x02\xff\x00\"\x00\x00\x00\x00\x07\xff\x00\'\x00\x00\x00\x00\x1a\xff\x00:\x00\x00\x00\x00!\xff\x00A\x00\x00\x00\x00\"\xff\x00B\x00\x00\x00\x00#\xff\x00C\x00\x00\x00\x00%\xff\x00E\x00\x00\x00\x00(\xff\x00H\x00\x00\x00\x00)\xff\x00l\x00\x00\x00\x00*\xff\x00J\x00\x00\x00\x00+\xff\x00K\x00\x00\x00\x00-\xff\x00M\x00\x00\x00\x00.\xff\x00N\x00\x00\x00\x00/\xff\x00O\x00\x00\x00\x000\xff\x00P\x00\x00\x00\x003\xff\x00S\x00\x00\x00\x004\xff\x00T\x00\x00\x00\x008\xff\x00X\x00\x00\x00\x009\xff\x00Y\x00\x00\x00\x00:\xff\x00Z\x00\x00\x00\x00;\xff\x00(\x00\x00\x00\x00<\xff\x00\\\x00\x00\x00\x00=\xff\x00)\x00\x00\x00\x00@\xff\x00\'\x00\x00\x00\x00A\xff\x00a\x00\x00\x00\x00C\xff\x00c\x00\x00\x00\x00E\xff\x00e\x00\x00\x00\x00G\xff\x00g\x00\x00\x00\x00H\xff\x00h\x00\x00\x00\x00I\xff\x00i\x00\x00\x00\x00J\xff\x00j\x00\x00\x00\x00L\xff\x00l\x00\x00\x00\x00O\xff\x00o\x00\x00\x00\x00P\xff\x00p\x00\x00\x00\x00S\xff\x00s\x00\x00\x00\x00V\xff\x00v\x00\x00\x00\x00X\xff\x00x\x00\x00\x00\x00Y\xff\x00y\x00\x00\x00\x00\xe8\xff\x00l\x00\x00\x00\x00\x82\x02\x01B\x00\x00\x00\x00\x86\x02\x01E\x00\x00\x00\x00\x87\x02\x01F\x00\x00\x00\x00\x8a\x02\x01l\x00\x00\x00\x00\x90\x02\x01X\x00\x00\x00\x00\x92\x02\x01O\x00\x00\x00\x00\x95\x02\x01P\x00\x00\x00\x00\x96\x02\x01S\x00\x00\x00\x00\x97\x02\x01T\x00\x00\x00\x00\x9b\x02\x01+\x00\x00\x00\x00\xa0\x02\x01A\x00\x00\x00\x00\xa1\x02\x01B\x00\x00\x00\x00\xa2\x02\x01C\x00\x00\x00\x00\xa5\x02\x01F\x00\x00\x00\x00\xab\x02\x01O\x00\x00\x00\x00\xb0\x02\x01M\x00\x00\x00\x00\xb1\x02\x01T\x00\x00\x00\x00\xb2\x02\x01Y\x00\x00\x00\x00\xb4\x02\x01X\x00\x00\x00\x00\xcf\x02\x01H\x00\x00\x00\x00\xf5\x02\x01Z\x00\x00\x00\x00\x01\x03\x01B\x00\x00\x00\x00\x02\x03\x01C\x00\x00\x00\x00\t\x03\x01l\x00\x00\x00\x00\x11\x03\x01M\x00\x00\x00\x00\x15\x03\x01T\x00\x00\x00\x00\x17\x03\x01X\x00\x00\x00\x00\x1a\x03\x018\x00\x00\x00\x00\x1f\x03\x01*\x00\x00\x00\x00 \x03\x01l\x00\x00\x00\x00\"\x03\x01X\x00\x00\x00\x00\x04\x04\x01O\x00\x00\x00\x00\x15\x04\x01C\x00\x00\x00\x00\x1b\x04\x01L\x00\x00\x00\x00 \x04\x01S\x00\x00\x00\x00,\x04\x01o\x00\x00\x00\x00=\x04\x01c\x00\x00\x00\x00H\x04\x01s\x00\x00\x00\x00\xb4\x04\x01R\x00\x00\x00\x00\xc2\x04\x01O\x00\x00\x00\x00\xce\x04\x01U\x00\x00\x00\x00\xd2\x04\x017\x00\x00\x00\x00\xea\x04\x01o\x00\x00\x00\x00\xf6\x04\x01u\x00\x00\x00\x00\x13\x05\x01N\x00\x00\x00\x00\x16\x05\x01O\x00\x00\x00\x00\x18\x05\x01K\x00\x00\x00\x00\x1c\x05\x01C\x00\x00\x00\x00\x1d\x05\x01V\x00\x00\x00\x00%\x05\x01F\x00\x00\x00\x00&\x05\x01L\x00\x00\x00\x00\'\x05\x01X\x00\x00\x00\x00P\n\x01.\x00\x00\x00\x00\xd0\x14\x01O\x00\x00\x00\x00\x00\x17\x01rn\x00\x00\x00\x06\x17\x01v\x00\x00\x00\x00\n\x17\x01w\x00\x00\x00\x00\x0e\x17\x01w\x00\x00\x00\x00\x0f\x17\x01w\x00\x00\x00\x00\xa0\x18\x01V\x00\x00\x00\x00\xa2\x18\x01F\x00\x00\x00\x00\xa3\x18\x01L\x00\x00\x00\x00\xa4\x18\x01Y\x00\x00\x00\x00\xa6\x18\x01E\x00\x00\x00\x00\xa9\x18\x01Z\x00\x00\x00\x00\xac\x18\x019\x00\x00\x00\x00\xae\x18\x01E\x00\x00\x00\x00\xaf\x18\x014\x00\x00\x00\x00\xb2\x18\x01L\x00\x00\x00\x00\xb5\x18\x01O\x00\x00\x00\x00\xb8\x18\x01U\x00\x00\x00\x00\xbb\x18\x015\x00\x00\x00\x00\xbc\x18\x01T\x00\x00\x00\x00\xc0\x18\x01v\x00\x00\x00\x00\xc1\x18\x01s\x00\x00\x00\x00\xc2\x18\x01F\x00\x00\x00\x00\xc3\x18\x01i\x00\x00\x00\x00\xc4\x18\x01z\x00\x00\x00\x00\xc6\x18\x017\x00\x00\x00\x00\xc8\x18\x01o\x00\x00\x00\x00\xca\x18\x013\x00\x00\x00\x00\xcc\x18\x019\x00\x00\x00\x00\xd5\x18\x016\x00\x00\x00\x00\xd6\x18\x019\x00\x00\x00\x00\xd7\x18\x01o\x00\x00\x00\x00\xd8\x18\x01u\x00\x00\x00\x00\xdc\x18\x01y\x00\x00\x00\x00\xe0\x18\x01O\x00\x00\x00\x00\xe3\x18\x01rn\x00\x00\x00\xe5\x18\x01Z\x00\x00\x00\x00\xe6\x18\x01W\x00\x00\x00\x00\xe9\x18\x01C\x00\x00\x00\x00\xec\x18\x01X\x00\x00\x00\x00\xef\x18\x01W\x00\x00\x00\x00\xf2\x18\x01C\x00\x00\x00\x00\x08o\x01V\x00\x00\x00\x00\no\x01T\x00\x00\x00\x00\x16o\x01L\x00\x00\x00\x00(o\x01l\x00\x00\x00\x005o\x01R\x00\x00\x00\x00:o\x01S\x00\x00\x00\x00;o\x013\x00\x00\x00\x00?o\x01>\x00\x00\x00\x00@o\x01A\x00\x00\x00\x00Bo\x01U\x00\x00\x00\x00Co\x01Y\x00\x00\x00\x00Qo\x01\'\x00\x00\x00\x00Ro\x01\'\x00\x00\x00\x00\x14\xd1\x01{\x00\x00\x00\x00m\xd1\x01.\x00\x00\x00\x00\x06\xd2\x013\x00\x00\x00\x00\r\xd2\x01V\x00\x00\x00\x00\x0f\xd2\x01\\\x00\x00\x00\x00\x12\xd2\x017\x00\x00\x00\x00\x13\xd2\x01F\x00\x00\x00\x00\x16\xd2\x01R\x00\x00\x00\x00*\xd2\x01L\x00\x00\x00\x006\xd2\x01<\x00\x00\x00\x007\xd2\x01>\x00\x00\x00\x00:\xd2\x01/\x00\x00\x00\x00;\xd2\x01\\\x00\x00\x00\x00\x00\xd4\x01A\x00\x00\x00\x00\x01\xd4\x01B\x00\x00\x00\x00\x02\xd4\x01C\x00\x00\x00\x00\x03\xd4\x01D\x00\x00\x00\x00\x04\xd4\x01E\x00\x00\x00\x00\x05\xd4\x01F\x00\x00\x00\x00\x06\xd4\x01G\x00\x00\x00\x00\x07\xd4\x01H\x00\x00\x00\x00\x08\xd4\x01l\x00\x00\x00\x00\t\xd4\x01J\x00\x00\x00\x00\n\xd4\x01K\x00\x00\x00\x00\x0b\xd4\x01L\x00\x00\x00\x00\x0c\xd4\x01M\x00\x00\x00\x00\r\xd4\x01N\x00\x00\x00\x00\x0e\xd4\x01O\x00\x00\x00\x00\x0f\xd4\x01P\x00\x00\x00\x00\x10\xd4\x01Q\x00\x00\x00\x00\x11\xd4\x01R\x00\x00\x00\x00\x12\xd4\x01S\x00\x00\x00\x00\x13\xd4\x01T\x00\x00\x00\x00\x14\xd4\x01U\x00\x00\x00\x00\x15\xd4\x01V\x00\x00\x00\x00\x16\xd4\x01W\x00\x00\x00\x00\x17\xd4\x01X\x00\x00\x00\x00\x18\xd4\x01Y\x00\x00\x00\x00\x19\xd4\x01Z\x00\x00\x00\x00\x1a\xd4\x01a\x00\x00\x00\x00\x1b\xd4\x01b\x00\x00\x00\x00\x1c\xd4\x01c\x00\x00\x00\x00\x1d\xd4\x01d\x00\x00\x00\x00\x1e\xd4\x01e\x00\x00\x00\x00\x1f\xd4\x01f\x00\x00\x00\x00 \xd4\x01g\x00\x00\x00\x00!\xd4\x01h\x00\x00\x00\x00\"\xd4\x01i\x00\x00\x00\x00#\xd4\x01j\x00\x00\x00\x00$\xd4\x01k\x00\x00\x00\x00%\xd4\x01l\x00\x00\x00\x00&\xd4\x01rn\x00\x00\x00\'\xd4\x01n\x00\x00\x00\x00(\xd4\x01o\x00\x00\x00\x00)\xd4\x01p\x00\x00\x00\x00*\xd4\x01q\x00\x00\x00\x00+\xd4\x01r\x00\x00\x00\x00,\xd4\x01s\x00\x00\x00\x00-\xd4\x01t\x00\x00\x00\x00.\xd4\x01u\x00\x00\x00\x00/\xd4\x01v\x00\x00\x00\x000\xd4\x01w\x00\x00\x00\x001\xd4\x01x\x00\x00\x00\x002\xd4\x01y\x00\x00\x00\x003\xd4\x01z\x00\x00\x00\x004\xd4\x01A\x00\x00\x00\x005\xd4\x01B\x00\x00\x00\x006\xd4\x01C\x00\x00\x00\x007\xd4\x01D\x00\x00\x00\x008\xd4\x01E\x00\x00\x00\x009\xd4\x01F\x00\x00\x00\x00:\xd4\x01G\x00\x00\x00\x00;\xd4\x01H\x00\x00\x00\x00<\xd4\x01l\x00\x00\x00\x00=\xd4\x01J\x00\x00\x00\x00>\xd4\x01K\x00\x00\x00\x00?\xd4\x01L\x00\x00\x00\x00@\xd4\x01M\x00\x00\x00\x00A\xd4\x01N\x00\x00\x00\x00B\xd4\x01O\x00\x00\x00\x00C\xd4\x01P\x00\x00\x00\x00D\xd4\x01Q\x00\x00\x00\x00E\xd4\x01R\x00\x00\x00\x00F\xd4\x01S\x00\x00\x00\x00G\xd4\x01T\x00\x00\x00\x00H\xd4\x01U\x00\x00\x00\x00I\xd4\x01V\x00\x00\x00\x00J\xd4\x01W\x00\x00\x00\x00K\xd4\x01X\x00\x00\x00\x00L\xd4\x01Y\x00\x00\x00\x00M\xd4\x01Z\x00\x00\x00\x00N\xd4\x01a\x00\x00\x00\x00O\xd4\x01b\x00\x00\x00\x00P\xd4\x01c\x00\x00\x00\x00Q\xd4\x01d\x00\x00\x00\x00R\xd4\x01e\x00\x00\x00\x00S\xd4\x01f\x00\x00\x00\x00T\xd4\x01g\x00\x00\x00\x00V\xd4\x01i\x00\x00\x00\x00W\xd4\x01j\x00\x00\x00\x00X\xd4\x01k\x00\x00\x00\x00Y\xd4\x01l\x00\x00\x00\x00Z\xd4\x01rn\x00\x00\x00[\xd4\x01n\x00\x00\x00\x00\\\xd4\x01o\x00\x00\x00\x00]\xd4\x01p\x00\x00\x00\x00^\xd4\x01q\x00\x00\x00\x00_\xd4\x01r\x00\x00\x00\x00`\xd4\x01s\x00\x00\x00\x00a\xd4\x01t\x00\x00\x00\x00b\xd4\x01u\x00\x00\x00\x00c\xd4\x01v\x00\x00\x00\x00d\xd4\x01w\x00\x00\x00\x00e\xd4\x01x\x00\x00\x00\x00f\xd4\x01y\x00\x00\x00\x00g\xd4\x01z\x00\x00\x00\x00h\xd4\x01A\x00\x00\x00\x00i\xd4\x01B\x00\x00\x00\x00j\xd4\x01C\x00\x00\x00\x00k\xd4\x01D\x00\x00\x00\x00l\xd4\x01E\x00\x00\x00\x00m\xd4\x01F\x00\x00\x00\x00n\xd4\x01G\x00\x00\x00\x00o\xd4\x01H\x00\x00\x00\x00p\xd4\x01l\x00\x00\x00\x00q\xd4\x01J\x00\x00\x00\x00r\xd4\x01K\x00\x00\x00\x00s\xd4\x01L\x00\x00\x00\x00t\xd4\x01M\x00\x00\x00\x00u\xd4\x01N\x00\x00\x00\x00v\xd4\x01O\x00\x00\x00\x00w\xd4\x01P\x00\x00\x00\x00x\xd4\x01Q\x00\x00\x00\x00y\xd4\x01R\x00\x00\x00\x00z\xd4\x01S\x00\x00\x00\x00{\xd4\x01T\x00\x00\x00\x00|\xd4\x01U\x00\x00\x00\x00}\xd4\x01V\x00\x00\x00\x00~\xd4\x01W\x00\x00\x00\x00\x7f\xd4\x01X\x00\x00\x00\x00\x80\xd4\x01Y\x00\x00\x00\x00\x81\xd4\x01Z\x00\x00\x00\x00\x82\xd4\x01a\x00\x00\x00\x00\x83\xd4\x01b\x00\x00\x00\x00\x84\xd4\x01c\x00\x00\x00\x00\x85\xd4\x01d\x00\x00\x00\x00\x86\xd4\x01e\x00\x00\x00\x00\x87\xd4\x01f\x00\x00\x00\x00\x88\xd4\x01g\x00\x00\x00\x00\x89\xd4\x01h\x00\x00\x00\x00\x8a\xd4\x01i\x00\x00\x00\x00\x8b\xd4\x01j\x00\x00\x00\x00\x8c\xd4\x01k\x00\x00\x00\x00\x8d\xd4\x01l\x00\x00\x00\x00\x8e\xd4\x01rn\x00\x00\x00\x8f\xd4\x01n\x00\x00\x00\x00\x90\xd4\x01o\x00\x00\x00\x00\x91\xd4\x01p\x00\x00\x00\x00\x92\xd4\x01q\x00\x00\x00\x00\x93\xd4\x01r\x00\x00\x00\x00\x94\xd4\x01s\x00\x00\x00\x00\x95\xd4\x01t\x00\x00\x00\x00\x96\xd4\x01u\x00\x00\x00\x00\x97\xd4\x01v\x00\x00\x00\x00\x98\xd4\x01w\x00\x00\x00\x00\x99\xd4\x01x\x00\x00\x00\x00\x9a\xd4\x01y\x00\x00\x00\x00\x9b\xd4\x01z\x00\x00\x00\x00\x9c\xd4\x01A\x00\x00\x00\x00\x9e\xd4\x01C\x00\x00\x00\x00\x9f\xd4\x01D\x00\x00\x00\x00\xa2\xd4\x01G\x00\x00\x00\x00\xa5\xd4\x01J\x00\x00\x00\x00\xa6\xd4\x01K\x00\x00\x00\x00\xa9\xd4\x01N\x00\x00\x00\x00\xaa\xd4\x01O\x00\x00\x00\x00\xab\xd4\x01P\x00\x00\x00\x00\xac\xd4\x01Q\x00\x00\x00\x00\xae\xd4\x01S\x00\x00\x00\x00\xaf\xd4\x01T\x00\x00\x00\x00\xb0\xd4\x01U\x00\x00\x00\x00\xb1\xd4\x01V\x00\x00\x00\x00\xb2\xd4\x01W\x00\x00\x00\x00\xb3\xd4\x01X\x00\x00\x00\x00\xb4\xd4\x01Y\x00\x00\x00\x00\xb5\xd4\x01Z\x00\x00\x00\x00\xb6\xd4\x01a\x00\x00\x00\x00\xb7\xd4\x01b\x00\x00\x00\x00\xb8\xd4\x01c\x00\x00\x00\x00\xb9\xd4\x01d\x00\x00\x00\x00\xbb\xd4\x01f\x00\x00\x00\x00\xbd\xd4\x01h\x00\x00\x00\x00\xbe\xd4\x01i\x00\x00\x00\x00\xbf\xd4\x01j\x00\x00\x00\x00\xc0\xd4\x01k\x00\x00\x00\x00\xc1\xd4\x01l\x00\x00\x00\x00\xc2\xd4\x01rn\x00\x00\x00\xc3\xd4\x01n\x00\x00\x00\x00\xc5\xd4\x01p\x00\x00\x00\x00\xc6\xd4\x01q\x00\x00\x00\x00\xc7\xd4\x01r\x00\x00\x00\x00\xc8\xd4\x01s\x00\x00\x00\x00\xc9\xd4\x01t\x00\x00\x00\x00\xca\xd4\x01u\x00\x00\x00\x00\xcb\xd4\x01v\x00\x00\x00\x00\xcc\xd4\x01w\x00\x00\x00\x00\xcd\xd4\x01x\x00\x00\x00\x00\xce\xd4\x01y\x00\x00\x00\x00\xcf\xd4\x01z\x00\x00\x00\x00\xd0\xd4\x01A\x00\x00\x00\x00\xd1\xd4\x01B\x00\x00\x00\x00\xd2\xd4\x01C\x00\x00\x00\x00\xd3\xd4\x01D\x00\x00\x00\x00\xd4\xd4\x01E\x00\x00\x00\x00\xd5\xd4\x01F\x00\x00\x00\x00\xd6\xd4\x01G\x00\x00\x00\x00\xd7\xd4\x01H\x00\x00\x00\x00\xd8\xd4\x01l\x00\x00\x00\x00\xd9\xd4\x01J\x00\x00\x00\x00\xda\xd4\x01K\x00\x00\x00\x00\xdb\xd4\x01L\x00\x00\x00\x00\xdc\xd4\x01M\x00\x00\x00\x00\xdd\xd4\x01N\x00\x00\x00\x00\xde\xd4\x01O\x00\x00\x00\x00\xdf\xd4\x01P\x00\x00\x00\x00\xe0\xd4\x01Q\x00\x00\x00\x00\xe1\xd4\x01R\x00\x00\x00\x00\xe2\xd4\x01S\x00\x00\x00\x00\xe3\xd4\x01T\x00\x00\x00\x00\xe4\xd4\x01U\x00\x00\x00\x00\xe5\xd4\x01V\x00\x00\x00\x00\xe6\xd4\x01W\x00\x00\x00\x00\xe7\xd4\x01X\x00\x00\x00\x00\xe8\xd4\x01Y\x00\x00\x00\x00\xe9\xd4\x01Z\x00\x00\x00\x00\xea\xd4\x01a\x00\x00\x00\x00\xeb\xd4\x01b\x00\x00\x00\x00\xec\xd4\x01c\x00\x00\x00\x00\xed\xd4\x01d\x00\x00\x00\x00\xee\xd4\x01e\x00\x00\x00\x00\xef\xd4\x01f\x00\x00\x00\x00\xf0\xd4\x01g\x00\x00\x00\x00\xf1\xd4\x01h\x00\x00\x00\x00\xf2\xd4\x01i\x00\x00\x00\x00\xf3\xd4\x01j\x00\x00\x00\x00\xf4\xd4\x01k\x00\x00\x00\x00\xf5\xd4\x01l\x00\x00\x00\x00\xf6\xd4\x01rn\x00\x00\x00\xf7\xd4\x01n\x00\x00\x00\x00\xf8\xd4\x01o\x00\x00\x00\x00\xf9\xd4\x01p\x00\x00\x00\x00\xfa\xd4\x01q\x00\x00\x00\x00\xfb\xd4\x01r\x00\x00\x00\x00\xfc\xd4\x01s\x00\x00\x00\x00\xfd\xd4\x01t\x00\x00\x00\x00\xfe\xd4\x01u\x00\x00\x00\x00\xff\xd4\x01v\x00\x00\x00\x00\x00\xd5\x01w\x00\x00\x00\x00\x01\xd5\x01x\x00\x00\x00\x00\x02\xd5\x01y\x00\x00\x00\x00\x03\xd5\x01z\x00\x00\x00\x00\x04\xd5\x01A\x00\x00\x00\x00\x05\xd5\x01B\x00\x00\x00\x00\x07\xd5\x01D\x00\x00\x00\x00\x08\xd5\x01E\x00\x00\x00\x00\t\xd5\x01F\x00\x00\x00\x00\n\xd5\x01G\x00\x00\x00\x00\r\xd5\x01J\x00\x00\x00\x00\x0e\xd5\x01K\x00\x00\x00\x00\x0f\xd5\x01L\x00\x00\x00\x00\x10\xd5\x01M\x00\x00\x00\x00\x11\xd5\x01N\x00\x00\x00\x00\x12\xd5\x01O\x00\x00\x00\x00\x13\xd5\x01P\x00\x00\x00\x00\x14\xd5\x01Q\x00\x00\x00\x00\x16\xd5\x01S\x00\x00\x00\x00\x17\xd5\x01T\x00\x00\x00\x00\x18\xd5\x01U\x00\x00\x00\x00\x19\xd5\x01V\x00\x00\x00\x00\x1a\xd5\x01W\x00\x00\x00\x00\x1b\xd5\x01X\x00\x00\x00\x00\x1c\xd5\x01Y\x00\x00\x00\x00\x1e\xd5\x01a\x00\x00\x00\x00\x1f\xd5\x01b\x00\x00\x00\x00 \xd5\x01c\x00\x00\x00\x00!\xd5\x01d\x00\x00\x00\x00\"\xd5\x01e\x00\x00\x00\x00#\xd5\x01f\x00\x00\x00\x00$\xd5\x01g\x00\x00\x00\x00%\xd5\x01h\x00\x00\x00\x00&\xd5\x01i\x00\x00\x00\x00\'\xd5\x01j\x00\x00\x00\x00(\xd5\x01k\x00\x00\x00\x00)\xd5\x01l\x00\x00\x00\x00*\xd5\x01rn\x00\x00\x00+\xd5\x01n\x00\x00\x00\x00,\xd5\x01o\x00\x00\x00\x00-\xd5\x01p\x00\x00\x00\x00.\xd5\x01q\x00\x00\x00\x00/\xd5\x01r\x00\x00\x00\x000\xd5\x01s\x00\x00\x00\x001\xd5\x01t\x00\x00\x00\x002\xd5\x01u\x00\x00\x00\x003\xd5\x01v\x00\x00\x00\x004\xd5\x01w\x00\x00\x00\x005\xd5\x01x\x00\x00\x00\x006\xd5\x01y\x00\x00\x00\x007\xd5\x01z\x00\x00\x00\x008\xd5\x01A\x00\x00\x00\x009\xd5\x01B\x00\x00\x00\x00;\xd5\x01D\x00\x00\x00\x00<\xd5\x01E\x00\x00\x00\x00=\xd5\x01F\x00\x00\x00\x00>\xd5\x01G\x00\x00\x00\x00@\xd5\x01l\x00\x00\x00\x00A\xd5\x01J\x00\x00\x00\x00B\xd5\x01K\x00\x00\x00\x00C\xd5\x01L\x00\x00\x00\x00D\xd5\x01M\x00\x00\x00\x00F\xd5\x01O\x00\x00\x00\x00J\xd5\x01S\x00\x00\x00\x00K\xd5\x01T\x00\x00\x00\x00L\xd5\x01U\x00\x00\x00\x00M\xd5\x01V\x00\x00\x00\x00N\xd5\x01W\x00\x00\x00\x00O\xd5\x01X\x00\x00\x00\x00P\xd5\x01Y\x00\x00\x00\x00R\xd5\x01a\x00\x00\x00\x00S\xd5\x01b\x00\x00\x00\x00T\xd5\x01c\x00\x00\x00\x00U\xd5\x01d\x00\x00\x00\x00V\xd5\x01e\x00\x00\x00\x00W\xd5\x01f\x00\x00\x00\x00X\xd5\x01g\x00\x00\x00\x00Y\xd5\x01h\x00\x00\x00\x00Z\xd5\x01i\x00\x00\x00\x00[\xd5\x01j\x00\x00\x00\x00\\\xd5\x01k\x00\x00\x00\x00]\xd5\x01l\x00\x00\x00\x00^\xd5\x01rn\x00\x00\x00_\xd5\x01n\x00\x00\x00\x00`\xd5\x01o\x00\x00\x00\x00a\xd5\x01p\x00\x00\x00\x00b\xd5\x01q\x00\x00\x00\x00c\xd5\x01r\x00\x00\x00\x00d\xd5\x01s\x00\x00\x00\x00e\xd5\x01t\x00\x00\x00\x00f\xd5\x01u\x00\x00\x00\x00g\xd5\x01v\x00\x00\x00\x00h\xd5\x01w\x00\x00\x00\x00i\xd5\x01x\x00\x00\x00\x00j\xd5\x01y\x00\x00\x00\x00k\xd5\x01z\x00\x00\x00\x00l\xd5\x01A\x00\x00\x00\x00m\xd5\x01B\x00\x00\x00\x00n\xd5\x01C\x00\x00\x00\x00o\xd5\x01D\x00\x00\x00\x00p\xd5\x01E\x00\x00\x00\x00q\xd5\x01F\x00\x00\x00\x00r\xd5\x01G\x00\x00\x00\x00s\xd5\x01H\x00\x00\x00\x00t\xd5\x01l\x00\x00\x00\x00u\xd5\x01J\x00\x00\x00\x00v\xd5\x01K\x00\x00\x00\x00w\xd5\x01L\x00\x00\x00\x00x\xd5\x01M\x00\x00\x00\x00y\xd5\x01N\x00\x00\x00\x00z\xd5\x01O\x00\x00\x00\x00{\xd5\x01P\x00\x00\x00\x00|\xd5\x01Q\x00\x00\x00\x00}\xd5\x01R\x00\x00\x00\x00~\xd5\x01S\x00\x00\x00\x00\x7f\xd5\x01T\x00\x00\x00\x00\x80\xd5\x01U\x00\x00\x00\x00\x81\xd5\x01V\x00\x00\x00\x00\x82\xd5\x01W\x00\x00\x00\x00\x83\xd5\x01X\x00\x00\x00\x00\x84\xd5\x01Y\x00\x00\x00\x00\x85\xd5\x01Z\x00\x00\x00\x00\x86\xd5\x01a\x00\x00\x00\x00\x87\xd5\x01b\x00\x00\x00\x00\x88\xd5\x01c\x00\x00\x00\x00\x89\xd5\x01d\x00\x00\x00\x00\x8a\xd5\x01e\x00\x00\x00\x00\x8b\xd5\x01f\x00\x00\x00\x00\x8c\xd5\x01g\x00\x00\x00\x00\x8d\xd5\x01h\x00\x00\x00\x00\x8e\xd5\x01i\x00\x00\x00\x00\x8f\xd5\x01j\x00\x00\x00\x00\x90\xd5\x01k\x00\x00\x00\x00\x91\xd5\x01l\x00\x00\x00\x00\x92\xd5\x01rn\x00\x00\x00\x93\xd5\x01n\x00\x00\x00\x00\x94\xd5\x01o\x00\x00\x00\x00\x95\xd5\x01p\x00\x00\x00\x00\x96\xd5\x01q\x00\x00\x00\x00\x97\xd5\x01r\x00\x00\x00\x00\x98\xd5\x01s\x00\x00\x00\x00\x99\xd5\x01t\x00\x00\x00\x00\x9a\xd5\x01u\x00\x00\x00\x00\x9b\xd5\x01v\x00\x00\x00\x00\x9c\xd5\x01w\x00\x00\x00\x00\x9d\xd5\x01x\x00\x00\x00\x00\x9e\xd5\x01y\x00\x00\x00\x00\x9f\xd5\x01z\x00\x00\x00\x00\xa0\xd5\x01A\x00\x00\x00\x00\xa1\xd5\x01B\x00\x00\x00\x00\xa2\xd5\x01C\x00\x00\x00\x00\xa3\xd5\x01D\x00\x00\x00\x00\xa4\xd5\x01E\x00\x00\x00\x00\xa5\xd5\x01F\x00\x00\x00\x00\xa6\xd5\x01G\x00\x00\x00\x00\xa7\xd5\x01H\x00\x00\x00\x00\xa8\xd5\x01l\x00\x00\x00\x00\xa9\xd5\x01J\x00\x00\x00\x00\xaa\xd5\x01K\x00\x00\x00\x00\xab\xd5\x01L\x00\x00\x00\x00\xac\xd5\x01M\x00\x00\x00\x00\xad\xd5\x01N\x00\x00\x00\x00\xae\xd5\x01O\x00\x00\x00\x00\xaf\xd5\x01P\x00\x00\x00\x00\xb0\xd5\x01Q\x00\x00\x00\x00\xb1\xd5\x01R\x00\x00\x00\x00\xb2\xd5\x01S\x00\x00\x00\x00\xb3\xd5\x01T\x00\x00\x00\x00\xb4\xd5\x01U\x00\x00\x00\x00\xb5\xd5\x01V\x00\x00\x00\x00\xb6\xd5\x01W\x00\x00\x00\x00\xb7\xd5\x01X\x00\x00\x00\x00\xb8\xd5\x01Y\x00\x00\x00\x00\xb9\xd5\x01Z\x00\x00\x00\x00\xba\xd5\x01a\x00\x00\x00\x00\xbb\xd5\x01b\x00\x00\x00\x00\xbc\xd5\x01c\x00\x00\x00\x00\xbd\xd5\x01d\x00\x00\x00\x00\xbe\xd5\x01e\x00\x00\x00\x00\xbf\xd5\x01f\x00\x00\x00\x00\xc0\xd5\x01g\x00\x00\x00\x00\xc1\xd5\x01h\x00\x00\x00\x00\xc2\xd5\x01i\x00\x00\x00\x00\xc3\xd5\x01j\x00\x00\x00\x00\xc4\xd5\x01k\x00\x00\x00\x00\xc5\xd5\x01l\x00\x00\x00\x00\xc6\xd5\x01rn\x00\x00\x00\xc7\xd5\x01n\x00\x00\x00\x00\xc8\xd5\x01o\x00\x00\x00\x00\xc9\xd5\x01p\x00\x00\x00\x00\xca\xd5\x01q\x00\x00\x00\x00\xcb\xd5\x01r\x00\x00\x00\x00\xcc\xd5\x01s\x00\x00\x00\x00\xcd\xd5\x01t\x00\x00\x00\x00\xce\xd5\x01u\x00\x00\x00\x00\xcf\xd5\x01v\x00\x00\x00\x00\xd0\xd5\x01w\x00\x00\x00\x00\xd1\xd5\x01x\x00\x00\x00\x00\xd2\xd5\x01y\x00\x00\x00\x00\xd3\xd5\x01z\x00\x00\x00\x00\xd4\xd5\x01A\x00\x00\x00\x00\xd5\xd5\x01B\x00\x00\x00\x00\xd6\xd5\x01C\x00\x00\x00\x00\xd7\xd5\x01D\x00\x00\x00\x00\xd8\xd5\x01E\x00\x00\x00\x00\xd9\xd5\x01F\x00\x00\x00\x00\xda\xd5\x01G\x00\x00\x00\x00\xdb\xd5\x01H\x00\x00\x00\x00\xdc\xd5\x01l\x00\x00\x00\x00\xdd\xd5\x01J\x00\x00\x00\x00\xde\xd5\x01K\x00\x00\x00\x00\xdf\xd5\x01L\x00\x00\x00\x00\xe0\xd5\x01M\x00\x00\x00\x00\xe1\xd5\x01N\x00\x00\x00\x00\xe2\xd5\x01O\x00\x00\x00\x00\xe3\xd5\x01P\x00\x00\x00\x00\xe4\xd5\x01Q\x00\x00\x00\x00\xe5\xd5\x01R\x00\x00\x00\x00\xe6\xd5\x01S\x00\x00\x00\x00\xe7\xd5\x01T\x00\x00\x00\x00\xe8\xd5\x01U\x00\x00\x00\x00\xe9\xd5\x01V\x00\x00\x00\x00\xea\xd5\x01W\x00\x00\x00\x00\xeb\xd5\x01X\x00\x00\x00\x00\xec\xd5\x01Y\x00\x00\x00\x00\xed\xd5\x01Z\x00\x00\x00\x00\xee\xd5\x01a\x00\x00\x00\x00\xef\xd5\x01b\x00\x00\x00\x00\xf0\xd5\x01c\x00\x00\x00\x00\xf1\xd5\x01d\x00\x00\x00\x00\xf2\xd5\x01e\x00\x00\x00\x00\xf3\xd5\x01f\x00\x00\x00\x00\xf4\xd5\x01g\x00\x00\x00\x00\xf5\xd5\x01h\x00\x00\x00\x00\xf6\xd5\x01i\x00\x00\x00\x00\xf7\xd5\x01j\x00\x00\x00\x00\xf8\xd5\x01k\x00\x00\x00\x00\xf9\xd5\x01l\x00\x00\x00\x00\xfa\xd5\x01rn\x00\x00\x00\xfb\xd5\x01n\x00\x00\x00\x00\xfc\xd5\x01o\x00\x00\x00\x00\xfd\xd5\x01p\x00\x00\x00\x00\xfe\xd5\x01q\x00\x00\x00\x00\xff\xd5\x01r\x00\x00\x00\x00\x00\xd6\x01s\x00\x00\x00\x00\x01\xd6\x01t\x00\x00\x00\x00\x02\xd6\x01u\x00\x00\x00\x00\x03\xd6\x01v\x00\x00\x00\x00\x04\xd6\x01w\x00\x00\x00\x00\x05\xd6\x01x\x00\x00\x00\x00\x06\xd6\x01y\x00\x00\x00\x00\x07\xd6\x01z\x00\x00\x00\x00\x08\xd6\x01A\x00\x00\x00\x00\t\xd6\x01B\x00\x00\x00\x00\n\xd6\x01C\x00\x00\x00\x00\x0b\xd6\x01D\x00\x00\x00\x00\x0c\xd6\x01E\x00\x00\x00\x00\r\xd6\x01F\x00\x00\x00\x00\x0e\xd6\x01G\x00\x00\x00\x00\x0f\xd6\x01H\x00\x00\x00\x00\x10\xd6\x01l\x00\x00\x00\x00\x11\xd6\x01J\x00\x00\x00\x00\x12\xd6\x01K\x00\x00\x00\x00\x13\xd6\x01L\x00\x00\x00\x00\x14\xd6\x01M\x00\x00\x00\x00\x15\xd6\x01N\x00\x00\x00\x00\x16\xd6\x01O\x00\x00\x00\x00\x17\xd6\x01P\x00\x00\x00\x00\x18\xd6\x01Q\x00\x00\x00\x00\x19\xd6\x01R\x00\x00\x00\x00\x1a\xd6\x01S\x00\x00\x00\x00\x1b\xd6\x01T\x00\x00\x00\x00\x1c\xd6\x01U\x00\x00\x00\x00\x1d\xd6\x01V\x00\x00\x00\x00\x1e\xd6\x01W\x00\x00\x00\x00\x1f\xd6\x01X\x00\x00\x00\x00 \xd6\x01Y\x00\x00\x00\x00!\xd6\x01Z\x00\x00\x00\x00\"\xd6\x01a\x00\x00\x00\x00#\xd6\x01b\x00\x00\x00\x00$\xd6\x01c\x00\x00\x00\x00%\xd6\x01d\x00\x00\x00\x00&\xd6\x01e\x00\x00\x00\x00\'\xd6\x01f\x00\x00\x00\x00(\xd6\x01g\x00\x00\x00\x00)\xd6\x01h\x00\x00\x00\x00*\xd6\x01i\x00\x00\x00\x00+\xd6\x01j\x00\x00\x00\x00,\xd6\x01k\x00\x00\x00\x00-\xd6\x01l\x00\x00\x00\x00.\xd6\x01rn\x00\x00\x00/\xd6\x01n\x00\x00\x00\x000\xd6\x01o\x00\x00\x00\x001\xd6\x01p\x00\x00\x00\x002\xd6\x01q\x00\x00\x00\x003\xd6\x01r\x00\x00\x00\x004\xd6\x01s\x00\x00\x00\x005\xd6\x01t\x00\x00\x00\x006\xd6\x01u\x00\x00\x00\x007\xd6\x01v\x00\x00\x00\x008\xd6\x01w\x00\x00\x00\x009\xd6\x01x\x00\x00\x00\x00:\xd6\x01y\x00\x00\x00\x00;\xd6\x01z\x00\x00\x00\x00<\xd6\x01A\x00\x00\x00\x00=\xd6\x01B\x00\x00\x00\x00>\xd6\x01C\x00\x00\x00\x00?\xd6\x01D\x00\x00\x00\x00@\xd6\x01E\x00\x00\x00\x00A\xd6\x01F\x00\x00\x00\x00B\xd6\x01G\x00\x00\x00\x00C\xd6\x01H\x00\x00\x00\x00D\xd6\x01l\x00\x00\x00\x00E\xd6\x01J\x00\x00\x00\x00F\xd6\x01K\x00\x00\x00\x00G\xd6\x01L\x00\x00\x00\x00H\xd6\x01M\x00\x00\x00\x00I\xd6\x01N\x00\x00\x00\x00J\xd6\x01O\x00\x00\x00\x00K\xd6\x01P\x00\x00\x00\x00L\xd6\x01Q\x00\x00\x00\x00M\xd6\x01R\x00\x00\x00\x00N\xd6\x01S\x00\x00\x00\x00O\xd6\x01T\x00\x00\x00\x00P\xd6\x01U\x00\x00\x00\x00Q\xd6\x01V\x00\x00\x00\x00R\xd6\x01W\x00\x00\x00\x00S\xd6\x01X\x00\x00\x00\x00T\xd6\x01Y\x00\x00\x00\x00U\xd6\x01Z\x00\x00\x00\x00V\xd6\x01a\x00\x00\x00\x00W\xd6\x01b\x00\x00\x00\x00X\xd6\x01c\x00\x00\x00\x00Y\xd6\x01d\x00\x00\x00\x00Z\xd6\x01e\x00\x00\x00\x00[\xd6\x01f\x00\x00\x00\x00\\\xd6\x01g\x00\x00\x00\x00]\xd6\x01h\x00\x00\x00\x00^\xd6\x01i\x00\x00\x00\x00_\xd6\x01j\x00\x00\x00\x00`\xd6\x01k\x00\x00\x00\x00a\xd6\x01l\x00\x00\x00\x00b\xd6\x01rn\x00\x00\x00c\xd6\x01n\x00\x00\x00\x00d\xd6\x01o\x00\x00\x00\x00e\xd6\x01p\x00\x00\x00\x00f\xd6\x01q\x00\x00\x00\x00g\xd6\x01r\x00\x00\x00\x00h\xd6\x01s\x00\x00\x00\x00i\xd6\x01t\x00\x00\x00\x00j\xd6\x01u\x00\x00\x00\x00k\xd6\x01v\x00\x00\x00\x00l\xd6\x01w\x00\x00\x00\x00m\xd6\x01x\x00\x00\x00\x00n\xd6\x01y\x00\x00\x00\x00o\xd6\x01z\x00\x00\x00\x00p\xd6\x01A\x00\x00\x00\x00q\xd6\x01B\x00\x00\x00\x00r\xd6\x01C\x00\x00\x00\x00s\xd6\x01D\x00\x00\x00\x00t\xd6\x01E\x00\x00\x00\x00u\xd6\x01F\x00\x00\x00\x00v\xd6\x01G\x00\x00\x00\x00w\xd6\x01H\x00\x00\x00\x00x\xd6\x01l\x00\x00\x00\x00y\xd6\x01J\x00\x00\x00\x00z\xd6\x01K\x00\x00\x00\x00{\xd6\x01L\x00\x00\x00\x00|\xd6\x01M\x00\x00\x00\x00}\xd6\x01N\x00\x00\x00\x00~\xd6\x01O\x00\x00\x00\x00\x7f\xd6\x01P\x00\x00\x00\x00\x80\xd6\x01Q\x00\x00\x00\x00\x81\xd6\x01R\x00\x00\x00\x00\x82\xd6\x01S\x00\x00\x00\x00\x83\xd6\x01T\x00\x00\x00\x00\x84\xd6\x01U\x00\x00\x00\x00\x85\xd6\x01V\x00\x00\x00\x00\x86\xd6\x01W\x00\x00\x00\x00\x87\xd6\x01X\x00\x00\x00\x00\x88\xd6\x01Y\x00\x00\x00\x00\x89\xd6\x01Z\x00\x00\x00\x00\x8a\xd6\x01a\x00\x00\x00\x00\x8b\xd6\x01b\x00\x00\x00\x00\x8c\xd6\x01c\x00\x00\x00\x00\x8d\xd6\x01d\x00\x00\x00\x00\x8e\xd6\x01e\x00\x00\x00\x00\x8f\xd6\x01f\x00\x00\x00\x00\x90\xd6\x01g\x00\x00\x00\x00\x91\xd6\x01h\x00\x00\x00\x00\x92\xd6\x01i\x00\x00\x00\x00\x93\xd6\x01j\x00\x00\x00\x00\x94\xd6\x01k\x00\x00\x00\x00\x95\xd6\x01l\x00\x00\x00\x00\x96\xd6\x01rn\x00\x00\x00\x97\xd6\x01n\x00\x00\x00\x00\x98\xd6\x01o\x00\x00\x00\x00\x99\xd6\x01p\x00\x00\x00\x00\x9a\xd6\x01q\x00\x00\x00\x00\x9b\xd6\x01r\x00\x00\x00\x00\x9c\xd6\x01s\x00\x00\x00\x00\x9d\xd6\x01t\x00\x00\x00\x00\x9e\xd6\x01u\x00\x00\x00\x00\x9f\xd6\x01v\x00\x00\x00\x00\xa0\xd6\x01w\x00\x00\x00\x00\xa1\xd6\x01x\x00\x00\x00\x00\xa2\xd6\x01y\x00\x00\x00\x00\xa3\xd6\x01z\x00\x00\x00\x00\xa4\xd6\x01i\x00\x00\x00\x00\xa8\xd6\x01A\x00\x00\x00\x00\xa9\xd6\x01B\x00\x00\x00\x00\xac\xd6\x01E\x00\x00\x00\x00\xad\xd6\x01Z\x00\x00\x00\x00\xae\xd6\x01H\x00\x00\x00\x00\xb0\xd6\x01l\x00\x00\x00\x00\xb1\xd6\x01K\x00\x00\x00\x00\xb3\xd6\x01M\x00\x00\x00\x00\xb4\xd6\x01N\x00\x00\x00\x00\xb6\xd6\x01O\x00\x00\x00\x00\xb8\xd6\x01P\x00\x00\x00\x00\xbb\xd6\x01T\x00\x00\x00\x00\xbc\xd6\x01Y\x00\x00\x00\x00\xbe\xd6\x01X\x00\x00\x00\x00\xc2\xd6\x01a\x00\x00\x00\x00\xc4\xd6\x01y\x00\x00\x00\x00\xca\xd6\x01i\x00\x00\x00\x00\xce\xd6\x01v\x00\x00\x00\x00\xd0\xd6\x01o\x00\x00\x00\x00\xd2\xd6\x01p\x00\x00\x00\x00\xd4\xd6\x01o\x00\x00\x00\x00\xd6\xd6\x01u\x00\x00\x00\x00\xe0\xd6\x01p\x00\x00\x00\x00\xe2\xd6\x01A\x00\x00\x00\x00\xe3\xd6\x01B\x00\x00\x00\x00\xe6\xd6\x01E\x00\x00\x00\x00\xe7\xd6\x01Z\x00\x00\x00\x00\xe8\xd6\x01H\x00\x00\x00\x00\xea\xd6\x01l\x00\x00\x00\x00\xeb\xd6\x01K\x00\x00\x00\x00\xed\xd6\x01M\x00\x00\x00\x00\xee\xd6\x01N\x00\x00\x00\x00\xf0\xd6\x01O\x00\x00\x00\x00\xf2\xd6\x01P\x00\x00\x00\x00\xf5\xd6\x01T\x00\x00\x00\x00\xf6\xd6\x01Y\x00\x00\x00\x00\xf8\xd6\x01X\x00\x00\x00\x00\xfc\xd6\x01a\x00\x00\x00\x00\xfe\xd6\x01y\x00\x00\x00\x00\x04\xd7\x01i\x00\x00\x00\x00\x08\xd7\x01v\x00\x00\x00\x00\n\xd7\x01o\x00\x00\x00\x00\x0c\xd7\x01p\x00\x00\x00\x00\x0e\xd7\x01o\x00\x00\x00\x00\x10\xd7\x01u\x00\x00\x00\x00\x1a\xd7\x01p\x00\x00\x00\x00\x1c\xd7\x01A\x00\x00\x00\x00\x1d\xd7\x01B\x00\x00\x00\x00 \xd7\x01E\x00\x00\x00\x00!\xd7\x01Z\x00\x00\x00\x00\"\xd7\x01H\x00\x00\x00\x00$\xd7\x01l\x00\x00\x00\x00%\xd7\x01K\x00\x00\x00\x00\'\xd7\x01M\x00\x00\x00\x00(\xd7\x01N\x00\x00\x00\x00*\xd7\x01O\x00\x00\x00\x00,\xd7\x01P\x00\x00\x00\x00/\xd7\x01T\x00\x00\x00\x000\xd7\x01Y\x00\x00\x00\x002\xd7\x01X\x00\x00\x00\x006\xd7\x01a\x00\x00\x00\x008\xd7\x01y\x00\x00\x00\x00>\xd7\x01i\x00\x00\x00\x00B\xd7\x01v\x00\x00\x00\x00D\xd7\x01o\x00\x00\x00\x00F\xd7\x01p\x00\x00\x00\x00H\xd7\x01o\x00\x00\x00\x00J\xd7\x01u\x00\x00\x00\x00T\xd7\x01p\x00\x00\x00\x00V\xd7\x01A\x00\x00\x00\x00W\xd7\x01B\x00\x00\x00\x00Z\xd7\x01E\x00\x00\x00\x00[\xd7\x01Z\x00\x00\x00\x00\\\xd7\x01H\x00\x00\x00\x00^\xd7\x01l\x00\x00\x00\x00_\xd7\x01K\x00\x00\x00\x00a\xd7\x01M\x00\x00\x00\x00b\xd7\x01N\x00\x00\x00\x00d\xd7\x01O\x00\x00\x00\x00f\xd7\x01P\x00\x00\x00\x00i\xd7\x01T\x00\x00\x00\x00j\xd7\x01Y\x00\x00\x00\x00l\xd7\x01X\x00\x00\x00\x00p\xd7\x01a\x00\x00\x00\x00r\xd7\x01y\x00\x00\x00\x00x\xd7\x01i\x00\x00\x00\x00|\xd7\x01v\x00\x00\x00\x00~\xd7\x01o\x00\x00\x00\x00\x80\xd7\x01p\x00\x00\x00\x00\x82\xd7\x01o\x00\x00\x00\x00\x84\xd7\x01u\x00\x00\x00\x00\x8e\xd7\x01p\x00\x00\x00\x00\x90\xd7\x01A\x00\x00\x00\x00\x91\xd7\x01B\x00\x00\x00\x00\x94\xd7\x01E\x00\x00\x00\x00\x95\xd7\x01Z\x00\x00\x00\x00\x96\xd7\x01H\x00\x00\x00\x00\x98\xd7\x01l\x00\x00\x00\x00\x99\xd7\x01K\x00\x00\x00\x00\x9b\xd7\x01M\x00\x00\x00\x00\x9c\xd7\x01N\x00\x00\x00\x00\x9e\xd7\x01O\x00\x00\x00\x00\xa0\xd7\x01P\x00\x00\x00\x00\xa3\xd7\x01T\x00\x00\x00\x00\xa4\xd7\x01Y\x00\x00\x00\x00\xa6\xd7\x01X\x00\x00\x00\x00\xaa\xd7\x01a\x00\x00\x00\x00\xac\xd7\x01y\x00\x00\x00\x00\xb2\xd7\x01i\x00\x00\x00\x00\xb6\xd7\x01v\x00\x00\x00\x00\xb8\xd7\x01o\x00\x00\x00\x00\xba\xd7\x01p\x00\x00\x00\x00\xbc\xd7\x01o\x00\x00\x00\x00\xbe\xd7\x01u\x00\x00\x00\x00\xc8\xd7\x01p\x00\x00\x00\x00\xca\xd7\x01F\x00\x00\x00\x00\xce\xd7\x01O\x00\x00\x00\x00\xcf\xd7\x01l\x00\x00\x00\x00\xd0\xd7\x012\x00\x00\x00\x00\xd1\xd7\x013\x00\x00\x00\x00\xd2\xd7\x014\x00\x00\x00\x00\xd3\xd7\x015\x00\x00\x00\x00\xd4\xd7\x016\x00\x00\x00\x00\xd5\xd7\x017\x00\x00\x00\x00\xd6\xd7\x018\x00\x00\x00\x00\xd7\xd7\x019\x00\x00\x00\x00\xd8\xd7\x01O\x00\x00\x00\x00\xd9\xd7\x01l\x00\x00\x00\x00\xda\xd7\x012\x00\x00\x00\x00\xdb\xd7\x013\x00\x00\x00\x00\xdc\xd7\x014\x00\x00\x00\x00\xdd\xd7\x015\x00\x00\x00\x00\xde\xd7\x016\x00\x00\x00\x00\xdf\xd7\x017\x00\x00\x00\x00\xe0\xd7\x018\x00\x00\x00\x00\xe1\xd7\x019\x00\x00\x00\x00\xe2\xd7\x01O\x00\x00\x00\x00\xe3\xd7\x01l\x00\x00\x00\x00\xe4\xd7\x012\x00\x00\x00\x00\xe5\xd7\x013\x00\x00\x00\x00\xe6\xd7\x014\x00\x00\x00\x00\xe7\xd7\x015\x00\x00\x00\x00\xe8\xd7\x016\x00\x00\x00\x00\xe9\xd7\x017\x00\x00\x00\x00\xea\xd7\x018\x00\x00\x00\x00\xeb\xd7\x019\x00\x00\x00\x00\xec\xd7\x01O\x00\x00\x00\x00\xed\xd7\x01l\x00\x00\x00\x00\xee\xd7\x012\x00\x00\x00\x00\xef\xd7\x013\x00\x00\x00\x00\xf0\xd7\x014\x00\x00\x00\x00\xf1\xd7\x015\x00\x00\x00\x00\xf2\xd7\x016\x00\x00\x00\x00\xf3\xd7\x017\x00\x00\x00\x00\xf4\xd7\x018\x00\x00\x00\x00\xf5\xd7\x019\x00\x00\x00\x00\xf6\xd7\x01O\x00\x00\x00\x00\xf7\xd7\x01l\x00\x00\x00\x00\xf8\xd7\x012\x00\x00\x00\x00\xf9\xd7\x013\x00\x00\x00\x00\xfa\xd7\x014\x00\x00\x00\x00\xfb\xd7\x015\x00\x00\x00\x00\xfc\xd7\x016\x00\x00\x00\x00\xfd\xd7\x017\x00\x00\x00\x00\xfe\xd7\x018\x00\x00\x00\x00\xff\xd7\x019\x00\x00\x00\x00\xc7\xe8\x01l\x00\x00\x00\x00\xcb\xe8\x018\x00\x00\x00\x00\x00\xee\x01l\x00\x00\x00\x00$\xee\x01o\x00\x00\x00\x00d\xee\x01o\x00\x00\x00\x00\x80\xee\x01l\x00\x00\x00\x00\x84\xee\x01o\x00\x00\x00\x00\x00\xf1\x01O.\x00\x00\x00\x01\xf1\x01O,\x00\x00\x00\x02\xf1\x01l,\x00\x00\x00\x03\xf1\x012,\x00\x00\x00\x04\xf1\x013,\x00\x00\x00\x05\xf1\x014,\x00\x00\x00\x06\xf1\x015,\x00\x00\x00\x07\xf1\x016,\x00\x00\x00\x08\xf1\x017,\x00\x00\x00\t\xf1\x018,\x00\x00\x00\n\xf1\x019,\x00\x00\x00\x10\xf1\x01(A)\x00\x00\x11\xf1\x01(B)\x00\x00\x12\xf1\x01(C)\x00\x00\x13\xf1\x01(D)\x00\x00\x14\xf1\x01(E)\x00\x00\x15\xf1\x01(F)\x00\x00\x16\xf1\x01(G)\x00\x00\x17\xf1\x01(H)\x00\x00\x18\xf1\x01(l)\x00\x00\x19\xf1\x01(J)\x00\x00\x1a\xf1\x01(K)\x00\x00\x1b\xf1\x01(L)\x00\x00\x1c\xf1\x01(M)\x00\x00\x1d\xf1\x01(N)\x00\x00\x1e\xf1\x01(O)\x00\x00\x1f\xf1\x01(P)\x00\x00 \xf1\x01(Q)\x00\x00!\xf1\x01(R)\x00\x00\"\xf1\x01(S)\x00\x00#\xf1\x01(T)\x00\x00$\xf1\x01(U)\x00\x00%\xf1\x01(V)\x00\x00&\xf1\x01(W)\x00\x00\'\xf1\x01(X)\x00\x00(\xf1\x01(Y)\x00\x00)\xf1\x01(Z)\x00\x00*\xf1\x01(S)\x00\x00\x00\xf7\x01QE\x00\x00\x00\x07\xf7\x01AR\x00\x00\x00L\xf7\x01C\x00\x00\x00\x00\\\xf7\x01sss\x00\x00h\xf7\x01T\x00\x00\x00\x00k\xf7\x01MB\x00\x00\x00l\xf7\x01VB\x00\x00\x00\x98\x13\x00\x00\'\x0e\x00\x00d\x0c\x00\x00\x9a\x0f\x00\x00Y\x0f\x00\x00\x93\x13\x00\x00\x9f\x0f\x00\x00#\x0b\x00\x00\xd0\x0c\x00\x00]\x0f\x00\x00\x8c\r\x00\x00\x14\x0e\x00\x00\xf4\r\x00\x00\xb0\x05\x00\x00(\x0b\x00\x00j\x07\x00\x00o\x0c\x00\x00\x9b\r\x00\x00q\x0f\x00\x00\xee\r\x00\x00\x9d\x12\x00\x00\x80\x14\x00\x00\x00\x00\x00\x00\xf0u\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00N4Luau10ParseErrorE\x00\xfc\xb7\x00\x00\xdcu\x00\x00\x1c\xb8\x00\x00\x00\x00\x00\x00\x06\x06\x06\x06\x07\x07\x07\x07\x07\x07\x07\x07\n\t\x05\x04\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x02\x02\x01\x01\xfe\x82+eG\x15g@\x00\x00\x00\x00\x00\x008C\x00\x00\xfa\xfeB.v\xbf:;\x9e\xbc\x9a\xf7\x0c\xbd\xbd\xfd\xff\xff\xff\xff\xdf?<TUUUU\xc5?\x91+\x17\xcfUU\xa5?\x17\xd0\xa4g\x11\x11\x81?\x00\x00\x00\x00\x00\x00\xc8B\xef9\xfa\xfeB.\xe6?$\xc4\x82\xff\xbd\xbf\xce?\xb5\xf4\x0c\xd7\x08k\xac?\xccPF\xd2\xab\xb2\x83?\x84:N\x9b\xe0\xd7U?")
	rt.store.string(MEMORY_LIST[0], 30366,"\xf0?n\xbf\x88\x1aO;\x9b<53\xfb\xa9=\xf6\xef?]\xdc\xd8\x9c\x13`q\xbca\x80w>\x9a\xec\xef?\xd1f\x87\x10z^\x90\xbc\x85\x7fn\xe8\x15\xe3\xef?\x13\xf6g5R\xd2\x8c<t\x85\x15\xd3\xb0\xd9\xef?\xfa\x8e\xf9#\x80\xce\x8b\xbc\xde\xf6\xdd)k\xd0\xef?a\xc8\xe6aN\xf7`<\xc8\x9bu\x18E\xc7\xef?\x99\xd33[\xe4\xa3\x90<\x83\xf3\xc6\xca>\xbe\xef?m{\x83]\xa6\x9a\x97<\x0f\x89\xf9lX\xb5\xef?\xfc\xef\xfd\x92\x1a\xb5\x8e<\xf7Gr+\x92\xac\xef?\xd1\x9c/p=\xbe><\xa2\xd1\xd32\xec\xa3\xef?\x0bn\x90\x894\x03j\xbc\x1b\xd3\xfe\xaff\x9b\xef?\x0e\xbd/*RV\x95\xbcQ[\x12\xd0\x01\x93\xef?U\xeaN\x8c\xef\x80P\xbc\xcc1l\xc0\xbd\x8a\xef?\x16\xf4\xd5\xb9#\xc9\x91\xbc\xe0-\xa9\xae\x9a\x82\xef?\xafU\\\xe9\xe3\xd3\x80<Q\x8e\xa5\xc8\x98z\xef?H\x93\xa5\xea\x15\x1b\x80\xbc{Q}<\xb8r\xef?=2\xdeU\xf0\x1f\x8f\xbc\xea\x8d\x8c8\xf9j\xef?\xbfS\x13?\x8c\x89\x8b<u\xcbo\xeb[c\xef?&\xeb\x11v\x9c\xd9\x96\xbc\xd4\\\x04\x84\xe0[\xef?`/:>\xf7\xec\x9a<\xaa\xb9h1\x87T\xef?\x9d8\x86\xcb\x82\xe7\x8f\xbc\x1d\xd9\xfc\"PM\xef?\x8d\xc3\xa6DAo\x8a<\xd6\x8cb\x88;F\xef?}\x04\xe4\xb0\x05z\x80<\x96\xdc}\x91I?\xef?\x94\xa8\xa8\xe3\xfd\x8e\x96<8bunz8\xef?}Ht\xf2\x18^\x87<?\xa6\xb2O\xce1\xef?\xf2\xe7\x1f\x98+G\x80<\xdd|\xe2eE+\xef?^\x08q?{\xb8\x96\xbc\x81c\xf5\xe1\xdf$\xef?1\xab\tm\xe1\xf7\x82<\xe1\xde\x1f\xf5\x9d\x1e\xef?\xfa\xbfo\x1a\x9b!=\xbc\x90\xd9\xda\xd0\x7f\x18\xef?\xb4\n\x0cr\x827\x8b<\x0b\x03\xe4\xa6\x85\x12\xef?\x8f\xcb\xce\x89\x92\x14n<V/>\xa9\xaf\x0c\xef?\xb6\xab\xb0MuM\x83<\x15\xb71\n\xfe\x06\xef?Lt\xac\xe2\x01B\x86<1\xd8L\xfcp\x01\xef?J\xf8\xd3]9\xdd\x8f<\xff\x16d\xb2\x08\xfc\xee?\x04[\x8e;\x80\xa3\x86\xbc\xf1\x9f\x92_\xc5\xf6\xee?hPK\xcc\xedJ\x92\xbc\xcb\xa9:7\xa7\xf1\xee?\x8e-Q\x1b\xf8\x07\x99\xbcf\xd8\x05m\xae\xec\xee?\xd26\x94>\xe8\xd1q\xbc\xf7\x9f\xe54\xdb\xe7\xee?\x15\x1b\xce\xb3\x19\x19\x99\xbc\xe5\xa8\x13\xc3-\xe3\xee?mL*\xa7H\x9f\x85<\"4\x12L\xa6\xde\xee?\x8ai(z`\x12\x93\xbc\x1c\x80\xac\x04E\xda\xee?[\x89\x17H\x8f\xa7X\xbc*.\xf7!\n\xd6\xee?\x1b\x9aIg\x9b,|\xbc\x97\xa8P\xd9\xf5\xd1\xee?\x11\xac\xc2`\xedcC<-\x89a`\x08\xce\xee?\xefd\x06;\tf\x96<W\x00\x1d\xedA\xca\xee?y\x03\xa1\xda\xe1\xccn<\xd0<\xc1\xb5\xa2\xc6\xee?0\x12\x0f?\x8e\xff\x93<\xde\xd3\xd7\xf0*\xc3\xee?\xb0\xafz\xbb\xce\x90v<\'*6\xd5\xda\xbf\xee?w\xe0T\xeb\xbd\x1d\x93<\r\xdd\xfd\x99\xb2\xbc\xee?\x8e\xa3q\x004\x94\x8f\xbc\xa7,\x9dv\xb2\xb9\xee?I\xa3\x93\xdc\xcc\xde\x87\xbcBf\xcf\xa2\xda\xb6\xee?_8\x0f\xbd\xc6\xdex\xbc\x82O\x9dV+\xb4\xee?\xf6\\{\xecF\x12\x86\xbc\x0f\x92]\xca\xa4\xb1\xee?\x8e\xd7\xfd\x18\x055\x93<\xda\'\xb56G\xaf\xee?\x05\x9b\x8a/\xb7\x98{<\xfd\xc7\x97\xd4\x12\xad\xee?\tT\x1c\xe2\xe1c\x90<)TH\xdd\x07\xab\xee?\xea\xc6\x19P\x85\xc74<\xb7FY\x8a&\xa9\xee?5\xc0d+\xe62\x94<H!\xad\x15o\xa7\xee?\x9fv\x99aJ\xe4\x8c\xbc\t\xdcv\xb9\xe1\xa5\xee?\xa8M\xef;\xc53\x8c\xbc\x85U:\xb0~\xa4\xee?\xae\xe9+\x89xS\x84\xbc \xc3\xcc4F\xa3\xee?XXVx\xdd\xce\x93\xbc%\"U\x828\xa2\xee?d\x19~\x80\xaa\x10W<s\xa9L\xd4U\xa1\xee?(\"^\xbf\xef\xb3\x93\xbc\xcd;\x7ff\x9e\xa0\xee?\x82\xb94\x87\xad\x12j\xbc\xbf\xda\x0bu\x12\xa0\xee?\xee\xa9m\xb8\xefgc\xbc/\x1ae<\xb2\x9f\xee?Q\x88\xe0T=\xdc\x80\xbc\x84\x94Q\xf9}\x9f\xee?\xcf>Z~d\x1fx\xbct_\xec\xe8u\x9f\xee?\xb0}\x8b\xc0J\xee\x86\xbct\x81\xa5H\x9a\x9f\xee?\x8a\xe6U\x1e2\x19\x86\xbc\xc9gBV\xeb\x9f\xee?\xd3\xd4\t^\xcb\x9c\x90<?]\xdeOi\xa0\xee?\x1d\xa5M\xb9\xdc2{\xbc\x87\x01\xebs\x14\xa1\xee?k\xc0gT\xfd\xec\x94<2\xc10\x01\xed\xa1\xee?Ul\xd6\xab\xe1\xebe<bN\xcf6\xf3\xa2\xee?B\xcf\xb3/\xc5\xa1\x88\xbc\x12\x1a>T\'\xa4\xee?47;\xf1\xb6i\x93\xbc\x13\xceL\x99\x89\xa5\xee?\x1e\xff\x19:\x84^\x80\xbc\xad\xc7#F\x1a\xa7\xee?nWr\xd8P\xd4\x94\xbc\xed\x92D\x9b\xd9\xa8\xee?\x00\x8a\x0e[g\xad\x90<\x99f\x8a\xd9\xc7\xaa\xee?\xb4\xea\xf0\xc1/\xb7\x8d<\xdb\xa0*B\xe5\xac\xee?\xff\xe7\xc5\x9c`\xb6e\xbc\x8cD\xb5\x162\xaf\xee?D_\xf3Y\x83\xf6{<6w\x15\x99\xae\xb1\xee?\x83=\x1e\xa7\x1f\t\x93\xbc\xc6\xff\x91\x0b[\xb4\xee?)\x1el\x8b\xb8\xa9]\xbc\xe5\xc5\xcd\xb07\xb7\xee?Y\xb9\x90|\xf9#l\xbc\x0fR\xc8\xcbD\xba\xee?\xaa\xf9\xf4\"CC\x92\xbcPN\xde\x9f\x82\xbd\xee?K\x8ef\xd7l\xca\x85\xbc\xba\x07\xcap\xf1\xc0\xee?\'\xce\x91+\xfc\xafq<\x90\xf0\xa3\x82\x91\xc4\xee?\xbbs\n\xe15\xd2m<##\xe3\x19c\xc8\xee?c\"b\"\x04\xc5\x87\xbce\xe5]{f\xcc\xee?\xd51\xe2\xe3\x86\x1c\x8b<3-J\xec\x9b\xd0\xee?\x15\xbb\xbc\xd3\xd1\xbb\x91\xbc]%>\xb2\x03\xd5\xee?\xd21\xee\x9c1\xcc\x90<X\xb30\x13\x9e\xd9\xee?\xb3Zsn\x84i\x84<\xbf\xfdyUk\xde\xee?\xb4\x9d\x8e\x97\xcd\xdf\x82\xbcz\xf3\xd3\xbfk\xe3\xee?\x873\xcb\x92w\x1a\x8c<\xad\xd3Z\x99\x9f\xe8\xee?\xfa\xd9\xd1J\x8f{\x90\xbcf\xb6\x8d)\x07\xee\xee?\xba\xae\xdcV\xd9\xc3U\xbc\xfb\x15O\xb8\xa2\xf3\xee?@\xf6\xa6=\x0e\xa4\x90\xbc:Y\xe5\x8dr\xf9\xee?4\x93\xad8\xf4\xd6h\xbcG^\xfb\xf2v\xff\xee?5\x8aXk\xe2\xee\x91\xbcJ\x06\xa10\xb0\x05\xef?\xcd\xdd_\n\xd7\xfft<\xd2\xc1K\x90\x1e\x0c\xef?\xac\x98\x92\xfa\xfb\xbd\x91\xbc\t\x1e\xd7[\xc2\x12\xef?\xb3\x0c\xaf0\xaens<\x9cR\x85\xdd\x9b\x19\xef?\x94\xfd\x9f\\2\xe3\x8e<z\xd0\xff_\xab \xef?\xacY\t\xd1\x8f\xe0\x84<K\xd1W.\xf1\'\xef?g\x1aN8\xaf\xcdc<\xb5\xe7\x06\x94m/\xef?h\x19\x92l,kg<i\x90\xef\xdc 7\xef?\xd2\xb5\xcc\x83\x18\x8a\x80\xbc\xfa\xc3]U\x0b?\xef?o\xfa\xff?]\xad\x8f\xbc|\x89\x07J-G\xef?I\xa9u8\xae\r\x90\xbc\xf2\x89\r\x08\x87O\xef?\xa7\x07=\xa6\x85\xa3t<\x87\xa4\xfb\xdc\x18X\xef?\x0f\"@ \x9e\x91\x82\xbc\x98\x83\xc9\x16\xe3`\xef?\xac\x92\xc1\xd5PZ\x8e<\x852\xdb\x03\xe6i\xef?Kk\x01\xacY:\x84<`\xb4\x01\xf3!s\xef?\x1f>\xb4\x07!\xd5\x82\xbc_\x9b{3\x97|\xef?\xc9\rG;\xb9*\x89\xbc)\xa1\xf5\x14F\x86\xef?\xd3\x88:`\x04\xb6t<\xf6?\x8b\xe7.\x90\xef?qr\x9dQ\xec\xc5\x83<\x83L\xc7\xfbQ\x9a\xef?\xf0\x91\xd3\x8f\x12\xf7\x8f\xbc\xda\x90\xa4\xa2\xaf\xa4\xef?}t#\xe2\x98\xae\x8d\xbc\xf1g\x8e-H\xaf\xef?\x08 \xaaA\xbc\xc3\x8e<\'Za\xee\x1b\xba\xef?2\xeb\xa9\xc3\x94+\x84<\x97\xbak7+\xc5\xef?\xee\x85\xd11\xa9d\x8a<@En[v\xd0\xef?\xed\xe3;\xe4\xba7\x8e\xbc\x14\xbe\x9c\xad\xfd\xdb\xef?\x9d\xcd\x91M;\x89w<\xd8\x90\x9e\x81\xc1\xe7\xef?\x89\xcc`A\xc1\x05S<\xf1q\x8f+\xc2\xf3\xef?\x00\x00 eG\x15\xf7?\x00\xa2\xef.\xfc\x05\xe7=9\x83+eG\x15\xe7\xbf\xbe\x04:\xdc\t\xc7\xde?\xfb/pdG\x15\xd7\xbfHL\x03Plw\xd2?\xbc\x92\xea(\xb3\xc7\xce\xbf.\xf9\x17\xe1%b\xca?\xfe\x82+eG\x15\xe7\xbf\xf7\x03:\xdc\t\xc7\xde??|+eG\x15\xd7\xbf\xe4[\xf0Plw\xd2?\xe5\x8fv\xdd\t\xc7\xce\xbf6\xe7\xc4\x1eva\xca?\x9b\xa7d\xbc?\x15\xc7\xbfJ\x1b\xf0T\xd1\x84\xc4?<8,\xa7\xe4\x89\xc2\xbff\xeeZ(/\xb3\xc0?\xf8\xac\xb1k($\xf7?\x00\xb0\xcd\xee_\t\xe1\xbf\xa1\xcc\xd2f\xf7\xe1\xf6?\x00\xd0v\xbd\x94\x84\xe0\xbf\x8a\xd40\x0e=\xa1\xf6?\x00\xf8\xe8\xaeC\x01\xe0\xbf\x85l\xd02\xeca\xf6?\x00@\x0b6\xc5\xfe\xde\xbf\xf8\x98\x11\x95\xfa#\xf6?\x00\xe0\xb7\x1a\xd9\xfd\xdd\xbfl\x02\xcf\xa4[\xe7\xf5?\x00\x90\xc7\x0c\xae\xff\xdc\xbf\xb8O!Z\x05\xac\xf5?\x00\xa0\xfd\x118\x04\xdc\xbf\x1en\x16\x0f\xedq\xf5?\x00\xe0:2g\x0b\xdb\xbf5\xf8\x0bY\t9\xf5?\x00\xb0-Z/\x15\xda\xbf\xdd\xada\xedO\x01\xf5?\x00`\xf8Z\x7f!\xd9\xbf\xd0{H\x8e\xb8\xca\xf4?\x00\x90q\xb0M0\xd8\xbf\xeeO3\xb49\x95\xf4?\x00\xe0\xa9\xf9\x89A\xd7\xbfi\xd5\xaf\xdf\xcb`\xf4?\x00\x90\x19\xb5+U\xd6\xbfS\xb9\xe4Nf-\xf4?\x00\x10\x9b\xa2#k\xd5\xbf\xa6\xd8\x1d\x11\x01\xfb\xf3?\x00\xa0_\x0fe\x83\xd4\xbf6X\x0c\xb7\x95\xc9\xf3?\x00\xa0\xf67\xe9\x9d\xd3\xbfJ\xfd\xb6J\x1c\x99\xf3?\x00`\x8dS\xa1\xba\xd2\xbf\xb5\x99\xe0\x0c\x8ei\xf3?\x00@\xca@\x83\xd9\xd1\xbf\xb2\xe7\x13\x82\xe4:\xf3?\x00\xe0@:\x85\xfa\xd0\xbf\xb1\xbd\x85\x19\x19\r\xf3?\x000\xe72\x9c\x1d\xd0\xbf\xd7q\xb2\xca%\xe0\xf2?\x00`\xfa\xa2}\x85\xce\xbf\x82\xcd\x13\xcf\x04\xb4\xf2?\x00\x80=c\xc8\xd3\xcc\xbfP\xcb|,\xb0\x88\xf2?\x00\xa0\x14L\x03&\xcb\xbf\xe5M\x94c\"^\xf2?\x00\xe0O/\x1c|\xc9\xbf\xb1\x15\x86=V4\xf2?\x00\x00\x80?\x02\xd6\xc7\xbf8\xaf>\xe3F\x0b\xf2?\x00\xe0\x05\x1a\xa73\xc6\xbf\xdd\xa3\xcd\xfd\xee\xe2\xf1?\x00\x00W\xe9\xf5\x94\xc4\xbf09\x0bXJ\xbb\xf1?\x00\xa0\xe0$\xe4\xf9\xc2\xbf\x00\"\x7f\x84S\x94\xf1?\x00\xc0\xfdZYb\xc1\xbf<\xd7\xd5\xc0\x06n\xf1?\x00\x80\xbdu\x9a\x9c\xbf\xbf\xc2\xe4\xb7G_H\xf1?\x00\xc0\xf9[W{\xbc\xbf\xd1\x85\x00\xadX#\xf1?\x00\x80\xf4\x0f\xc6`\xb9\xbf\'\"S\x0f\xf0\xfe\xf0?\x00\x00\xb6G\xe2L\xb6\xbf\x8f:\xd0w \xdb\xf0?\x00@\x01\xb2x?\xb3\xbf\xd9\x80Y\xd6\xe6\xb7\xf0?\x00\xc0B\x1a}8\xb0\xbf\x8d@{\xfe>\x95\xf0?\x00\x00\xb5\x08\x92o\xaa\xbf\x83;\xc5\xca%s\xf0?\x00\x00wO\x95z\xa4\xbf\\\x1b\r\xe4\x97Q\xf0?\x00\x00\x0c\xc5\xa8#\x9d\xbf\xa2\x8e \xc1\x910\xf0?\x00\x00x)&j\x91\xbf!~\xb3%\x10\x10\xf0?\x00\x00\xe8\xd8\xf8 w\xbfk\xa7\xca\xf9~\xc0\xef?\x00\x00P\xb1S\xfe\x86?\x84\xf1\xf6\xd3eD\xef?\x00\x80\x0f\xe1\xcc\x1c\xa1?\x7f\x10\x84\x9f\x07\xcc\xee?\x00\x80\x8b\x8c\xfcM\xac?\xe8Z\x97\x99:W\xee?\x00@W\x1e2\xaa\xb3?\xe6=\xbd\xf0\xd6\xe5\xed?\x00\x80\x8b\xd0\xa0\x18\xb9?\xb38\xff\x81\xb6w\xed?\x00@\x04\xda\xe9r\xbe?C\xe9Mr\xb5\x0c\xed?\x00`\x7fP\xd2\xdc\xc1?cu\x0e\xdc\xb2\xa4\xec?\x00\xa0\xde\x03\xabv\xc4?Q\xcb\xd6\xe8\x8e?\xec?\x00 \xe2wC\x07\xc7?L\x0c\x02O+\xdd\xeb?\x00@\xa9\x8b\xde\x8e\xc9?\xca\x15`\x00l}\xeb?\x00\xe0\xd2j\xb8\r\xcc?\x8f3.n6 \xeb?\x00\xe0\xce\xaf\n\x84\xce?9P)&p\xc5\xea?\x00\x80g\xb4\ny\xd0?\xdd1\'\xbc\x01m\xea?\x00\xc0\x01h\x05\xac\xd1?\x8b\xf1?\xbc\xd3\x16\xea?\x00\xe0\xfe\xd4\x11\xdb\xd2?\xad\xfegI\xd1\xc2\xe9?\x00\x80\xc5NF\x06\xd4?\x02\x99|\xf4\xe4p\xe9?\x00\xf0:\t\xbe-\xd5?\xf2\xbc\x829\xfb \xe9?\x00\xd0P \x90Q\xd6?\xf1Y\xf7\x87\x01\xd3\xe8?\x00\xf0\xea\xcd\xd2q\xd7?m\xf6\xb9\xeb\xe5\x86\xe8?\x00\x90}\x85\x9c\x8e\xd8?\x94\xb9X\xb6\x97<\xe8?\x00`\xe1U\x01\xa8\xd9?\"\x10\xc6\xff\x05\xf4\xe7?\x00\xd0\xd3n\x18\xbe\xda?\xca\x15\x14\x18\"\xad\xe7?\x00\xe0\xa0\xae\xf2\xd0\xdb?\x8c\xff\x9e\xf9\xdcg\xe7?\x00@\xbf=\xa4\xe0\xdc?\x8e\n\xb9\x12\x00 \xe6?\x05\xb6D\x06\xab\x04\x89<\xa64W\x04\x00`\xe6?\xa9\xf7b\xea\x9b\xffa<\xc5\xf2%\xc3\xff\x9f\xe6?\xba\x90<\xcb\xcf~\x82<\x04Z\xb98\x00\xe0\xe6?&\x93sV\x88\xff\x88<\xe3\x94\x99\xe0\xff\x1f\xe7?\xb1\x82_\'@\xfd\x8a<\x10\x0eY\x15\x00`\xe7?A\x83#\xb4u\xfdr\xbc\xd5[e\x12\x00\xa0\xe7?v+$|\xe6\x08x<\xa6\xe9Y2\x00\xe0\xe7?\xb7\"\xf6&\xe4\x08b\xbc\xd2\xb2\xb4\xed\xff\x1f\xe8?/\xc9\xa5\x1eF\x02\x84\xbc\xc3\xfc\xfa-\x00`\xe8?\x1f\x9a\xf2\xa2\xf4\xf7m<Pk\x8c\xf7\xff\x9f\xe8?\xfd\x95I\tS\x04\x8e\xbcf\x15g9\x00\xe0\xe8?E{\xc7\xbe\xf3\x04\x8a\xbcE\x17\xbf\xe2\xff\x1f\xe9?< \x0e@4\xfaw\xbc\xd1\x9f\\\xcc\xff_\xe9?]i\xa0\x05\x80\xffv\xbcgG\xba;\x00\xa0\xe9?\x03~\xec\xc4\xc4\xf8p<\xa5-\xb9\xe7\xff\xdf\xe9?\x02F\x8cG\xd9\x7f\x8e<\xaf\xfd.\xd7\xff\x1f\xea?~\xae\xcdMU\x0cj\xbc\x95\xff\x04\xde\xff_\xea?k\xb2\xe9\x8c\xa9}\x86<+\x8d^\xca\xff\x9f\xea?\xde\x13L\xb5\xc9\x84\x82\xbc\xea\x03\xad\xdd\xff\xdf\xea?<.`\xea\xc8\x12X<M=\r\xf1\xff\x1f\xeb?\x9cx\'\xad\xdd\xfa\x8e\xbcZ\x16!\xce\xff_\xeb?7\x12\xc6\x19\x17\xcbS<t\xe6P\xd9\xff\x9f\xeb?\x00\xce\x94A\xd9\xf7s<\xaf\xa8\x9c\x13\x00\xe0\xeb?\xc0\x9b]!\xc4\nu<\x99\xdfF[\x00 \xec?\xc9\xc1\xe9S\xa6\xeek<\xae\xf7\xb9@\x00`\xec?\xd6pJ\'\x9f\x07|\xbc\x8a\xfdUb\x00\xa0\xec?\x1fL\xe8v@\x0bz\xbc]\tL\xd9\xff\xdf\xec?\xd7\xb5\x9a\xf93\xf9\x88<\xcf\xd6u\xf9\xff\x1f\xed?\xbe\xe1_f\x08,X\xbc\x93\x1cV\xa2\xff_\xed?\xf3\x95\xd2\x9b(\x04{\xbc\x0c\x8b\"\x9d\xff\x9f\xed?6\xa2\x0f4Q\x02\x87<\x16~\xbce\x00\xe0\xed?\x0c\xd8\xa4\x16\x1e\x01u\xbc\x91G\xf6\x02\x00 \xee?\xe0b\xef\t/\x80\x89<\xd8\xa6\xd7W\x00`\xee?\xfa\xf7\x0cXu\x0b~\xbc\x0c\xc0\xed\'\x00\xa0\xee?\x11\x98E\t\x83\x84\x8c\xbc|\xcb\xf5l\x00\xe0\xee?\xf4v\x15\x95\'\x80\x8f\xbc\xcc}+x\x00 \xef?\x8fStr\xd9\x81\x8f\xbc\nE\x0c&\x00`\xef?\xdc\xff\'\'\x00q@\xbc3\xd5\x8c\xe8\xff\x9f\xef?\xb0\xa8\xfd\xe1\xdc\x1bX\xbc\x89\x86\x0f\xd5\xff\xdf\xef?n\x8e\x91\xcb\x1a\xf9\x87<g#)\x04\x00 \xf0?\x81F2e\xf3\x7f\x9b<h\xd6\xe3\xe3\xff_\xf0?{\x95\xae\xdd\x08\xfa\x86<W\xa7\x85\n\x00\xa0\xf0?\x91\xfb\xd3\x80\xde\xe2W\xbc\xcc?_\x1a\x00\xe0\xf0?\x14\xf0\xc5\x053\x82\x91\xbc\xf5\xba\xaf\xf8\xff\x1f\xf1?\xc2\xba\x80f\xbb\xfa\x8b\xbc\xad\x91M\xe5\xff_\xf1?\xef\xe77\x17\x12\x7f\x9d\xbc\xe16\xac\x11\x00\xa0\xf1?\xff\xf5\x16\x05\n\x00\x9c<HB\xc8\x19\x00\xe0\xf1?\xa0]\xda\xe4\xfb\x82\x90\xbcn^\xfe\x0f\x00 \xf2?C\xfb\x9cL\xd0\xfd\x88\xbc\x91\xd8\x9f&\x00`\xf2?\x82\xd1\x94y*\xfe\x8c<\xda\xe6\xa6)\x00\xa0\xf2?\xc5\x8b^qs\x02p\xbc9>)\xe0\xff\xdf\xf2?\xf9\xa6\xb2\xda9|\x9b<\x82\xf0\xdc\xf7\xff\x1f\xf3?TR\xdcn3\xf1}<`\x8bZ\xf0\xff_\xf3?\xeb1\xcdLV\x03\x9e\xbc\xcc\xae\x0e.\x00\xa0\xf3?w\xa4\xd3K\xe7\xf0u<6\xb2;\x04\x00\xe0\xf3?3\x88\x9d\x14\xcb}\x9c<\xff\x87\xd1\x02\x00 \xf4?(=-\xcf\xaf\x08~<\xb1|8\r\x00`\xf4?\xa6\x99e\x857\x08\x82<\x89\x9fV\x04\x00\xa0\xf4?\xd2\xbcO\x90\\\xfa\x89\xbc\xf3C5\x04\x00\xe0\xf4?)S\x17\xed%\x11x\xbc\x0f\x7f\x02\xcc\xff\x1f\xf5?\xdcTw\x84\xd8\x83\x98<o\xb3\x87\xfd\xff_\xf5?\x07(\xd01\xe7\t\x87\xbc\xba\xf7\x1d\xf2\xff\x9f\xf5?\x02{rh\x9f\xf7\x87<\x814\xfc\xeb\xff\xdf\xf5?>\xe90.\x90\x80\x91\xbc\x008\xfa\xfeB.\xe6?0g\xc7\x93W\xf3.=\x01\x00\x00\x00\x00\x00\xe0\xbf[0QUUU\xd5?\x90E\xeb\xff\xff\xff\xcf\xbf\x11\x01\xf1$\xb3\x99\xc9?\x9f\xc8\x06\xe5uU\xc5\xbf\x00\x00\x00\x00\x00\x00\xe0\xbfwUUUUU\xd5?\xcb\xfd\xff\xff\xff\xff\xcf\xbf\x0c\xdd\x95\x99\x99\x99\xc9?\xa7EgUUU\xc5\xbf0\xdeD\xa3$I\xc2?e=B\xa4\xff\xff\xbf\xbf\xca\xd6*(\x84q\xbc?\xffh\xb0C\xeb\x99\xb9\xbf\x85\xd0\xaf\xf7\x82\x81\xb7?\xcdE\xd1u\x13R\xb5\xbf\x9f\xde\xe0\xc3\xf04\xf7?\x00\x90\xe6y\x7f\xcc\xd7\xbf\x1f\xe9,jx\x13\xf7?\x00\x00\r\xc2\xeeo\xd7\xbf\xa0\xb5\xfa\x08`\xf2\xf6?\x00\xe0Q\x13\xe3\x13\xd7\xbf}\x8c\x13\x1f\xa6\xd1\xf6?\x00x(8[\xb8\xd6\xbf\xd1\xb4\xc5\x0bI\xb1\xf6?\x00x\x80\x90U]\xd6\xbf\xba\x0c/3G\x91\xf6?\x00\x00\x18v\xd0\x02\xd6\xbf#B\"\x18\x9fq\xf6?\x00\x90\x90\x86\xca\xa8\xd5\xbf\xd9\x1e\xa5\x99OR\xf6?\x00P\x03VCO\xd5\xbf\xc4$\x8f\xaaV3\xf6?\x00@k\xc37\xf6\xd4\xbf\x14\xdc\x9dk\xb3\x14\xf6?\x00P\xa8\xfd\xa7\x9d\xd4\xbfL\\\xc6Rd\xf6\xf5?\x00\xa8\x899\x92E\xd4\xbfO,\x91\xb5g\xd8\xf5?\x00\xb8\xb09\xf4\xed\xd3\xbf\xde\x90[\xcb\xbc\xba\xf5?\x00p\x8fD\xce\x96\xd3\xbfx\x1a\xd9\xf2a\x9d\xf5?\x00\xa0\xbd\x17\x1e@\xd3\xbf\x87VF\x12V\x80\xf5?\x00\x80F\xef\xe2\xe9\xd2\xbf\xd3k\xe7\xce\x97c\xf5?\x00\xe008\x1b\x94\xd2\xbf\x93\x7f\xa7\xe2%G\xf5?\x00\x88\xda\x8c\xc5>\xd2\xbf\x83E\x06B\xff*\xf5?\x00\x90\')\xe1\xe9\xd1\xbf\xdf\xbd\xb2\xdb\"\x0f\xf5?\x00\xf8H+m\x95\xd1\xbf\xd7\xde4G\x8f\xf3\xf4?\x00\xf8\xb9\x9agA\xd1\xbf@(\xde\xcfC\xd8\xf4?\x00\x98\xef\x94\xd0\xed\xd0\xbf\xc8\xa3x\xc0>\xbd\xf4?\x00\x10\xdb\x18\xa5\x9a\xd0\xbf\x8a%\xe0\xc3\x7f\xa2\xf4?\x00\xb8cR\xe6G\xd0\xbf4\x84\xd4$\x05\x88\xf4?\x00\xf0\x86E\"\xeb\xcf\xbf\x0b-\x19\x1b\xcem\xf4?\x00\xb0\x17uJG\xcf\xbfT\x189\xd3\xd9S\xf4?\x000\x10=D\xa4\xce\xbfZ\x84\xb4D\':\xf4?\x00\xb0\xe9D\r\x02\xce\xbf\xfb\xf8\x15A\xb5 \xf4?\x00\xf0w)\xa2`\xcd\xbf\xb1\xf4>\xda\x82\x07\xf4?\x00\x90\x95\x04\x01\xc0\xcc\xbf\x8f\xfeW]\x8f\xee\xf3?\x00\x10\x89V) \xcc\xbf\xe9L\x0b\xa0\xd9\xd5\xf3?\x00\x10\x81\x8d\x17\x81\xcb\xbf+\xc1\x10\xc0`\xbd\xf3?\x00\xd0\xd3\xcc\xc9\xe2\xca\xbf\xb8\xdau+$\xa5\xf3?\x00\x90\x12.@E\xca\xbf\x02\xd0\x9f\xcd\"\x8d\xf3?\x00\xf0\x1dhw\xa8\xc9\xbf\x1cz\x84\xc5[u\xf3?\x000Him\x0c\xc9\xbf\xe26\xadI\xce]\xf3?\x00\xc0E\xa6 q\xc8\xbf@\xd4M\x98yF\xf3?\x000\x14\xb4\x8f\xd6\xc7\xbf$\xcb\xff\xce\\/\xf3?\x00pb<\xb8<\xc7\xbfI\r\xa1uw\x18\xf3?\x00`7\x9b\x9a\xa3\xc6\xbf\x909>7\xc8\x01\xf3?\x00\xa0\xb7T1\x0b\xc6\xbfA\xf8\x95\xbbN\xeb\xf2?\x000$v}s\xc5\xbf\xd1\xa9\x19\x02\n\xd5\xf2?\x000\xc2\x8f{\xdc\xc4\xbf*\xfd\xb7\xa8\xf9\xbe\xf2?\x00\x00\xd2Q,F\xc4\xbf\xab\x1b\x0cz\x1c\xa9\xf2?\x00\x00\x83\xbc\x8a\xb0\xc3\xbf0\xb5\x14`r\x93\xf2?\x00\x00Ik\x99\x1b\xc3\xbf\xf5\xa1WW\xfa}\xf2?\x00@\xa4\x90T\x87\xc2\xbf\xbf;\x1d\x9b\xb3h\xf2?\x00\xa0y\xf8\xb9\xf3\xc1\xbf\xbd\xf5\x8f\x83\x9dS\xf2?\x00\xa0,%\xc8`\xc1\xbf;\x08\xc9\xaa\xb7>\xf2?\x00 \xf7W\x7f\xce\xc0\xbf\xb6@\xa9+\x01*\xf2?\x00\xa0\xfeI\xdc<\xc0\xbf2A\xcc\x96y\x15\xf2?\x00\x80K\xbc\xbdW\xbf\xbf\x9b\xfc\xd2\x1d \x01\xf2?\x00@@\x96\x087\xbe\xbf\x0bHMI\xf4\xec\xf1?\x00@\xf9>\x98\x17\xbd\xbfie\x8fR\xf5\xd8\xf1?\x00\xa0\xd8Ng\xf9\xbb\xbf|~W\x11#\xc5\xf1?\x00`/ y\xdc\xba\xbf\xe9&\xcbt|\xb1\xf1?\x00\x80(\xe7\xc3\xc0\xb9\xbf\xb6\x1a,\x0c\x01\x9e\xf1?\x00\xc0r\xb3F\xa6\xb8\xbf\xbdp\xb6{\xb0\x8a\xf1?\x00\x00\xac\xb3\x01\x8d\xb7\xbf\xb6\xbc\xef%\x8aw\xf1?\x00\x008E\xf1t\xb6\xbf\xda1L5\x8dd\xf1?\x00\x80\x87m\x0e^\xb5\xbf\xdd_\'\x90\xb9Q\xf1?\x00\xe0\xa1\xde\\H\xb4\xbfL\xd22\xa4\x0e?\xf1?\x00\xa0jM\xd93\xb3\xbf\xda\xf9\x10r\x8b,\xf1?\x00`\xc5\xf8y \xb2\xbf1\xb5\xec(0\x1a\xf1?\x00 b\x98F\x0e\xb1\xbf\xaf4\x84\xda\xfb\x07\xf1?\x00\x00\xd2jl\xfa\xaf\xbf\xb3kN\x0f\xee\xf5\xf0?\x00@wJ\x8d\xda\xad\xbf\xce\x9f*]\x06\xe4\xf0?\x00\x00\x85\xe4\xec\xbc\xab\xbf!\xa5,cD\xd2\xf0?\x00\xc0\x12@\x89\xa1\xa9\xbf\x1a\x98\xe2|\xa7\xc0\xf0?\x00\xc0\x023X\x88\xa7\xbf\xd16\xc6\x83/\xaf\xf0?\x00\x80\xd6g^q\xa5\xbf9\x13\xa0\x98\xdb\x9d\xf0?\x00\x80eI\x8a\\\xa3\xbf\xdf\xe7R\xaf\xab\x8c\xf0?\x00@\x15d\xe3I\xa1\xbf\xfb(N/\x9f{\xf0?\x00\x80\xeb\x82\xc0r\x9e\xbf\x19\x8f5\x8c\xb5j\xf0?\x00\x80RR\xf1U\x9a\xbf,\xf9\xec\xa5\xeeY\xf0?\x00\x80\x81\xcfb=\x96\xbf\x90,\xd1\xcdII\xf0?\x00\x00\xaa\x8c\xfb(\x92\xbf\xa9\xad\xf0\xc6\xc68\xf0?\x00\x00\xf9 {1\x8c\xbf\xa92y\x13e(\xf0?\x00\x00\xaa]5\x19\x84\xbfHs\xea\'$\x18\xf0?\x00\x00\xec\xc2\x03\x12x\xbf\x95\xb1\x14\x06\x04\x08\xf0?\x00\x00$y\t\x04`\xbf\x1a\xfa&\xf7\x1f\xe0\xef?\x00\x00\x90\x84\xf3\xefo?t\xeaa\xc2\x1c\xa1\xef?\x00\x00=5A\xdc\x87?.\x99\x81\xb0\x10c\xef?\x00\x80\xc2\xc4\xa3\xce\x93?\xcd\xad\xee<\xf6%\xef?\x00\x00\x89\x14\xc1\x9f\x9b?\xe7\x13\x91\x03\xc8\xe9\xee?\x00\x00\x11\xce\xd8\xb0\xa1?\xab\xb1\xcbx\x80\xae\xee?\x00\xc0\x01\xd0[\x8a\xa5?\x9b\x0c\x9d\xa2\x1at\xee?\x00\x80\xd8@\x83\\\xa9?\xb5\x99\n\x83\x91:\xee?\x00\x80W\xefj\'\xad?V\x9a`\t\xe0\x01\xee?\x00\xc0\x98\xe5\x98u\xb0?\x98\xbbw\xe5\x01\xca\xed?\x00 \r\xe3\xf5S\xb2?\x03\x91|\x0b\xf2\x92\xed?\x00\x008\x8b\xdd.\xb4?\xce\\\xfbf\xac\\\xed?\x00\xc0W\x87Y\x06\xb6?\x9d\xde^\xaa,\'\xed?\x00\x00j5v\xda\xb7?\xcd,k>n\xf2\xec?\x00`\x1cNC\xab\xb9?\x02y\xa7\xa2m\xbe\xec?\x00`\r\xbb\xc7x\xbb?m\x087m&\x8b\xec?\x00 \xe72\x13C\xbd?\x04X]\xbd\x94X\xec?\x00`\xdeq1\n\xbf?\x8c\x9f\xbb3\xb5&\xec?\x00@\x91+\x15g\xc0??\xe7\xec\xee\x83\xf5\xeb?\x00\xb0\x92\x82\x85G\xc1?\xc1\x96\xdbu\xfd\xc4\xeb?\x000\xca\xcdn&\xc2?(J\x86\x0c\x1e\x95\xeb?\x00P\xc5\xa6\xd7\x03\xc3?,>\xef\xc5\xe2e\xeb?\x00\x103<\xc3\xdf\xc3?\x8b\x88\xc9gH7\xeb?\x00\x80zk6\xba\xc4?J0\x1d!K\t\xeb?\x00\xf0\xd1(9\x93\xc5?~\xef\xf2\x85\xe8\xdb\xea?\x00\xf0\x18$\xcdj\xc6?\xa2=`1\x1d\xaf\xea?\x00\x90f\xec\xf8@\xc7?\xa7X\xd3?\xe6\x82\xea?\x00\xf0\x1a\xf5\xc0\x15\xc8?\x8bs\t\xef@W\xea?\x00\x80\xf6T)\xe9\xc8?\'K\xab\x90*,\xea?\x00@\xf8\x026\xbb\xc9?\xd1\xf2\x93\x13\xa0\x01\xea?\x00\x00,\x1c\xed\x8b\xca?\x1b<\xdb$\x9f\xd7\xe9?\x00\xd0\x01\\Q[\xcb?\x90\xb1\xc7\x05%\xae\xe9?\x00\xc0\xbc\xccg)\xcc?/\xce\x97\xf2.\x85\xe9?\x00`H\xd55\xf6\xcc?uK\xa4\xee\xba\\\xe9?\x00\xc0F4\xbd\xc1\xcd?8H\xe7\x9d\xc64\xe9?\x00\xe0\xcf\xb8\x01\x8c\xce?\xe6Rg/O\r\xe9?\x00\x90\x17\xc0\tU\xcf?\x9d\xd7\xff\x8eR\xe6\xe8?\x00\xb8\x1f\x12l\x0e\xd0?|\x00\xcc\x9f\xce\xbf\xe8?\x00\xd0\x93\x0e\xb8q\xd0?\x0e\xc3\xbe\xda\xc0\x99\xe8?\x00p\x86\x9ek\xd4\xd0?\xfb\x17#\xaa\'t\xe8?\x00\xd0K3\x876\xd1?\x08\x9a\xb3\xac\x00O\xe8?\x00H#g\r\x98\xd1?U>e\xe8I*\xe8?\x00\x80\xcc\xe0\xff\xf8\xd1?`\x02\xf4\x95\x01\x06\xe8?\x00hc\xd7_Y\xd2?)\xa3\xe0c%\xe2\xe7?\x00\xa8\x14\t0\xb9\xd2?\xad\xb5\xdcw\xb3\xbe\xe7?\x00`C\x10r\x18\xd3?\xc2%\x97g\xaa\x9b\xe7?\x00\x18\xecm&w\xd3?W\x06\x17\xf2\x07y\xe7?\x000\xaf\xfbO\xd5\xd3?\x0c\x13\xd6\xdb\xcaV\xe7?\x00\xe0/\xe3\xee2\xd4?k\xb6O\x01\x00\x10\xe6?<[B\x91l\x02~<\x95\xb4M\x03\x000\xe6?A]\x00H\xea\xbf\x8d<x\xd4\x94\r\x00P\xe6?\xb7\xa5\xd6\x86\xa7\x7f\x8e<\xadoN\x07\x00p\xe6?L%Tk\xea\xfca<\xae\x0f\xdf\xfe\xff\x8f\xe6?\xfd\x0eYL\'~|\xbc\xbc\xc5c\x07\x00\xb0\xe6?\x01\xda\xdcHh\xc1\x8a\xbc\xf6\xc1\\\x1e\x00\xd0\xe6?\x11\x93I\x9d\x1c?\x83<>\xf6\x05\xeb\xff\xef\xe6?S-\xe2\x1a\x04\x80~\xbc\x80\x97\x86\x0e\x00\x10\xe7?Ry\tqf\xff{<\x12\xe9g\xfc\xff/\xe7?$\x87\xbd&\xe2\x00\x8c<j\x11\x81\xdf\xffO\xe7?\xd2\x01\xf1n\x91\x02n\xbc\x90\x9cg\x0f\x00p\xe7?t\x9cT\xcdq\xfcg\xbc5\xc8~\xfa\xff\x8f\xe7?\x83\x04\xf5\x9e\xc1\xbe\x81<\xe6\xc2 \xfe\xff\xaf\xe7?ed\xcc)\x17~p\xbc\x00\xc9?\xed\xff\xcf\xe7?\x1c\x8b{\x08r\x80\x80\xbcv\x1a&\xe9\xff\xef\xe7?\xae\xf9\x9dm(\xc0\x8d<\xe8\xa3\x9c\x04\x00\x10\xe8?3L\xe5Q\xd2\x7f\x89<\x8f,\x93\x17\x000\xe8?\x81\xf30\xb6\xe9\xfe\x8a\xbc\x9cs3\x06\x00P\xe8?\xbc5ek\xbf\xbf\x89<\xc6\x89B \x00p\xe8?u{\x11\xf3e\xbf\x8b\xbc\x04y\xf5\xeb\xff\x8f\xe8?W\xcb=\xa2n\x00\x89\xbc\xdf\x04\xbc\"\x00\xb0\xe8?\nK\xe08\xdf\x00}\xbc\x8a\x1b\x0c\xe5\xff\xcf\xe8?\x05\x9f\xffFq\x00\x88\xbcC\x8e\x91\xfc\xff\xef\xe8?8pz\xd0{\x81\x83<\xc7_\xfa\x1e\x00\x10\xe9?\x03\xb4\xdfv\x91>\x89<\xb9{F\x13\x000\xe9?v\x02\x98KN\x80\x7f<o\x07\xee\xe6\xffO\xe9?.b\xff\xd9\xf0~\x8f\xbc\xd1\x12<\xde\xffo\xe9?\xba8&\x96\xaa\x82p\xbc\r\x8aE\xf4\xff\x8f\xe9?\xef\xa8d\x91\x1b\x80\x87\xbc>.\x98\xdd\xff\xaf\xe9?7\x93Z\x8a\xe0@\x87\xbcf\xfbI\xed\xff\xcf\xe9?\x00\xe0\x9b\xc1\x08\xce?<Q\x9c\xf1 \x00\xf0\xe9?\n[\x88\'\xaa?\x8a\xbc\x06\xb0E\x11\x00\x10\xea?V\xdaX\x99H\xfft<\xfa\xf6\xbb\x07\x000\xea?\x18m+\x8a\xab\xbe\x8c<y\x1d\x97\x10\x00P\xea?0yx\xdd\xca\xfe\x88<H.\xf5\x1d\x00p\xea?\xdb\xab\xd8=vA\x8f\xbcR3Y\x1c\x00\x90\xea?\x12v\xc2\x84\x02\xbf\x8e\xbcK>O*\x00\xb0\xea?_?\xff<\x04\xfdi\xbc\xd1\x1e\xae\xd7\xff\xcf\xea?\xb4p\x90\x12\xe7>\x82\xbcx\x04Q\xee\xff\xef\xea?\xa3\xde\x0e\xe0>\x06j<[\re\xdb\xff\x0f\xeb?\xb9\n\x1f8\xc8\x06Z<W\xca\xaa\xfe\xff/\xeb?\x1d<#t\x1e\x01y\xbc\xdc\xba\x95\xd9\xffO\xeb?\x9f*\x86h\x10\xffy\xbc\x9ce\x9e$\x00p\xeb?>O\x86\xd0E\xff\x8a<@\x16\x87\xf9\xff\x8f\xeb?\xf9\xc3\xc2\x96w\xfe|<O\xcb\x04\xd2\xff\xaf\xeb?\xc4+\xf2\xee\'\xffc\xbcE\\A\xd2\xff\xcf\xeb?!\xea;\xee\xb7\xffl\xbc\xdf\tc\xf8\xff\xef\xeb?\\\x0b.\x97\x03A\x81\xbcSv\xb5\xe1\xff\x0f\xec?\x19j\xb7\x94d\xc1\x8b<\xe3W\xfa\xf1\xff/\xec?\xed\xc60\x8d\xef\xfed\xbc$\xe4\xbf\xdc\xffO\xec?uG\xec\xbch?\x84\xbc\xf7\xb9T\xed\xffo\xec?\xec\xe0S\xf0\xa3~\x84<\xd5\x8f\x99\xeb\xff\x8f\xec?\xf1\x92\xf9\x8d\x06\x83s<\x9a!%!\x00\xb0\xec?\x04\x0e\x18d\x8e\xfdh\xbc\x9cF\x94\xdd\xff\xcf\xec?r\xea\xc7\x1c\xbe~\x8e<v\xc4\xfd\xea\xff\xef\xec?\xfe\x88\x9f\xad9\xbe\x8e<+\xf8\x9a\x16\x00\x10\xed?qZ\xb9\xa8\x91}u<\x1d\xf7\x0f\r\x000\xed?\xda\xc7pi\x90\xc1\x89<\xc4\x0fy\xea\xffO\xed?\x0c\xfeX\xc57\x0eX\xbc\xe5\x87\xdc.\x00p\xed?D\x0f\xc1M\xd6\x80\x7f\xbc\xaa\x82\xdc!\x00\x90\xed?\\\\\xfd\x94\x8f|t\xbc\x83\x02k\xd8\xff\xaf\xed?~a!\xc5\x1d\x7f\x8c<9Gl)\x00\xd0\xed?S\xb1\xff\xb2\x9e\x01\x88<\xf5\x90D\xe5\xff\xef\xed?\x89\xccR\xc6\xd2\x00n<\x94\xf6\xab\xcd\xff\x0f\xee?\xd2i- @\x83\x7f\xbc\xdd\xc8R\xdb\xff/\xee?d\x08\x1b\xca\xc1\x00{<\xef\x16B\xf2\xffO\xee?Q\xab\x94\xb0\xa8\xffr<\x11^\x8a\xe8\xffo\xee?Y\xbe\xef\xb1s\xf6W\xbc\r\xff\x9e\x11\x00\x90\xee?\x01\xc8\x0b^\x8d\x80\x84\xbcD\x17\xa5\xdf\xff\xaf\xee?\xb5 C\xd5\x06\x00x<\xa1\x7f\x12\x1a\x00\xd0\xee?\x92\\V`\xf8\x02P\xbc\xc4\xbc\xba\x07\x00\xf0\xee?\x11\xe65]D@\x85\xbc\x02\x8dz\xf5\xff\x0f\xef?\x05\x91\xef91\xfbO\xbc\xc7\x8a\xe5\x1e\x000\xef?U\x11s\xf2\xac\x81\x8a<\x944\x82\xf5\xffO\xef?C\xc7\xd7\xd4A?\x8a<kL\xa9\xfc\xffo\xef?ux\x98\x1c\xf4\x02b\xbcA\xc4\xf9\xe1\xff\x8f\xef?K\xe7w\xf4\xd1}w<~\xe3\xe0\xd2\xff\xaf\xef?1\xa3|\x9a\x19\x01o\xbc\x9e\xe4w\x1c\x00\xd0\xef?\xb1\xac\xceK\xee\x81q<1\xc3\xe0\xf7\xff\xef\xef?Z\x87p\x017\x05n\xbcn`e\xf4\xff\x0f\xf0?\xda\n\x1cI\xad~\x8a\xbcXz\x86\xf3\xff/\xf0?\xe0\xb2\xfc\xc3i\x7f\x97\xbc\x17\r\xfc\xfd\xffO\xf0?[\x94\xcb4\xfe\xbf\x97<\x82M\xcd\x03\x00p\xf0?\xcbV\xe4\xc0\x83\x00\x82<\xe8\xcb\xf2\xf9\xff\x8f\xf0?\x1au7\xbe\xdf\xffm\xbce\xda\x0c\x01\x00\xb0\xf0?\xeb&\xe6\xae\x7f?\x91\xbc8\xd3\xa4\x01\x00\xd0\xf0?\xf7\x9fHy\xfa}\x80<\xfd\xfd\xda\xfa\xff\xef\xf0?\xc0k\xd6p\x05\x04w\xbc\x96\xfd\xba\x0b\x00\x10\xf1?b\x0bm\x84\xd4\x80\x8e<]\xf4\xe5\xfa\xff/\xf1?\xef6\xfdd\xfa\xbf\x9d<\xd9\x9a\xd5\r\x00P\xf1?\xaeP\x12pw\x00\x9a<\x9aU!\x0f\x00p\xf1?\xee\xde\xe3\xe2\xf9\xfd\x8d<&T\'\xfc\xff\x8f\xf1?sr;\xdc0\x00\x91<Y<=\x12\x00\xb0\xf1?\x88\x01\x03\x80y\x7f\x99<\xb7\x9e)\xf8\xff\xcf\xf1?g\x8c\x9f\xab2\xf9e\xbc\x00\xd4\x8a\xf4\xff\xef\xf1?\xeb[\xa7\x9d\xbf\x7f\x93<\xa4\x86\x8b\x0c\x00\x10\xf2?\"[\xfd\x91k\x80\x9f<\x03C\x85\x03\x000\xf2?3\xbf\x9f\xeb\xc2\xff\x93<\x84\xf6\xbc\xff\xffO\xf2?r..~\xe7\x01v<\xd9!)\xf5\xffo\xf2?a\x0c\x7fv\xbb\xfc\x7f<<:\x93\x14\x00\x90\xf2?+A\x02<\xca\x02r\xbc\x13cU\x14\x00\xb0\xf2?\x02\x1f\xf23\x82\x80\x92\xbc;R\xfe\xeb\xff\xcf\xf2?\xf2\xdcO8~\xff\x88\xbc\x96\xad\xb8\x0b\x00\xf0\xf2?\xc5A0PQ\xff\x85\xbc\xaf\xe2z\xfb\xff\x0f\xf3?\x9d(^\x88q\x00\x81\xbc\x7f_\xac\xfe\xff/\xf3?\x15\xb7\xb7?]\xff\x91\xbcVg\xa6\x0c\x00P\xf3?\xbd\x82\x8b\"\x82\x7f\x95<!\xf7\xfb\x11\x00p\xf3?\xcc\xd5\r\xc4\xba\x00\x80<\xb9/Y\xf9\xff\x8f\xf3?Q\xa7\xb2-\x9d?\x94\xbcB\xd2\xdd\x04\x00\xb0\xf3?\xe18vpk\x7f\x85<W\xc9\xb2\xf5\xff\xcf\xf3?1\x12\xbf\x10:\x02z<\x18\xb4\xb0\xea\xff\xef\xf3?\xb0R\xb1fm\x7f\x98<\xf4\xaf2\x15\x00\x10\xf4?$\x85\x19_7\xf8g<)\x8bG\x17\x000\xf4?CQ\xdcr\xe6\x01\x83<c\xb4\x95\xe7\xffO\xf4?Z\x89\xb2\xb8i\xff\x89<\xe0u\x04\xe8\xffo\xf4?T\xf2\xc2\x9b\xb1\xc0\x95\xbc\xe7\xc1o\xef\xff\x8f\xf4?r*:\xf2\t@\x9b<\x04\xa7\xbe\xe5\xff\xaf\xf4?E}\r\xbf\xb7\xff\x94\xbc\xde\'\x10\x17\x00\xd0\xf4?=j\xdcqd\xc0\x99\xbc\xe2>\xf0\x0f\x00\xf0\xf4?\x1cS\x85\x0b\x89\x7f\x97<\xd1K\xdc\x12\x00\x10\xf5?6\xa4fqe\x04`<z\'\x05\x16\x000\xf5?\t2#\xce\xce\xbf\x96\xbcLp\xdb\xec\xffO\xf5?\xd7\xa1\x05\x05r\x02\x89\xbc\xa9T_\xef\xffo\xf5?\x12d\xc9\x0e\xe6\xbf\x9b<\x12\x10\xe6\x17\x00\x90\xf5?\x90\xef\xaf\x81\xc5~\x88<\x92>\xc9\x03\x00\xb0\xf5?\xc0\x0c\xbf\n\x08A\x9f\xbc\xbc\x19I\x1d\x00\xd0\xf5?)G%\xfb*\x81\x98\xbc\x89z\xb8\xe7\xff\xef\xf5?\x04i\xed\x80\xb7~\x94\xbc\x008\xfa\xfeB.\xe6?0g\xc7\x93W\xf3.=\x00\x00\x00\x00\x00\x00\xe0\xbf`UUUUU\xe5\xbf\x06\x00\x00\x00\x00\x00\xe0?NUY\x99\x99\x99\xe9?z\xa4)UUU\xe5\xbf\xe9EH\x9b[I\xf2\xbf\xc3?&\x8b+\x00\xf0?\x00\x00\x00\x00\x00\xa0\xf6?")
	rt.store.string(MEMORY_LIST[0], 38921,"\xc8\xb9\xf2\x82,\xd6\xbf\x80V7($\xb4\xfa<\x00\x00\x00\x00\x00\x80\xf6?")
	rt.store.string(MEMORY_LIST[0], 38953,"\x08X\xbf\xbd\xd1\xd5\xbf \xf7\xe0\xd8\x08\xa5\x1c\xbd\x00\x00\x00\x00\x00`\xf6?")
	rt.store.string(MEMORY_LIST[0], 38985,"XE\x17wv\xd5\xbfmP\xb6\xd5\xa4b#\xbd\x00\x00\x00\x00\x00@\xf6?")
	rt.store.string(MEMORY_LIST[0], 39017,"\xf8-\x87\xad\x1a\xd5\xbf\xd5g\xb0\x9e\xe4\x84\xe6\xbc\x00\x00\x00\x00\x00 \xf6?")
	rt.store.string(MEMORY_LIST[0], 39049,"xw\x95_\xbe\xd4\xbf\xe0>)\x93i\x1b\x04\xbd\x00\x00\x00\x00\x00\x00\xf6?")
	rt.store.string(MEMORY_LIST[0], 39081,"`\x1c\xc2\x8ba\xd4\xbf\xcc\x84LH/\xd8\x13=\x00\x00\x00\x00\x00\xe0\xf5?")
	rt.store.string(MEMORY_LIST[0], 39113,"\xa8\x86\x860\x04\xd4\xbf:\x0b\x82\xed\xf3B\xdc<\x00\x00\x00\x00\x00\xc0\xf5?")
	rt.store.string(MEMORY_LIST[0], 39145,"HiUL\xa6\xd3\xbf`\x94Q\x86\xc6\xb1 =\x00\x00\x00\x00\x00\xa0\xf5?")
	rt.store.string(MEMORY_LIST[0], 39177,"\x80\x98\x9a\xddG\xd3\xbf\x92\x80\xc5\xd4MY%=\x00\x00\x00\x00\x00\x80\xf5?")
	rt.store.string(MEMORY_LIST[0], 39209," \xe1\xba\xe2\xe8\xd2\xbf\xd8+\xb7\x99\x1e{&=\x00\x00\x00\x00\x00`\xf5?")
	rt.store.string(MEMORY_LIST[0], 39241,"\x88\xde\x13Z\x89\xd2\xbf?\xb0\xcf\xb6\x14\xca\x15=\x00\x00\x00\x00\x00`\xf5?")
	rt.store.string(MEMORY_LIST[0], 39273,"\x88\xde\x13Z\x89\xd2\xbf?\xb0\xcf\xb6\x14\xca\x15=\x00\x00\x00\x00\x00@\xf5?")
	rt.store.string(MEMORY_LIST[0], 39305,"x\xcf\xfbA)\xd2\xbfv\xdaS($Z\x16\xbd\x00\x00\x00\x00\x00 \xf5?")
	rt.store.string(MEMORY_LIST[0], 39337,"\x98i\xc1\x98\xc8\xd1\xbf\x04T\xe7h\xbc\xaf\x1f\xbd\x00\x00\x00\x00\x00\x00\xf5?")
	rt.store.string(MEMORY_LIST[0], 39369,"\xa8\xab\xab\\g\xd1\xbf\xf0\xa8\x823\xc6\x1f\x1f=\x00\x00\x00\x00\x00\xe0\xf4?")
	rt.store.string(MEMORY_LIST[0], 39401,"H\xae\xf9\x8b\x05\xd1\xbffZ\x05\xfd\xc4\xa8&\xbd\x00\x00\x00\x00\x00\xc0\xf4?")
	rt.store.string(MEMORY_LIST[0], 39433,"\x90s\xe2$\xa3\xd0\xbf\x0e\x03\xf4~\xeek\x0c\xbd\x00\x00\x00\x00\x00\xa0\xf4?")
	rt.store.string(MEMORY_LIST[0], 39465,"\xd0\xb4\x94%@\xd0\xbf\x7f-\xf4\x9e\xb86\xf0\xbc\x00\x00\x00\x00\x00\xa0\xf4?")
	rt.store.string(MEMORY_LIST[0], 39497,"\xd0\xb4\x94%@\xd0\xbf\x7f-\xf4\x9e\xb86\xf0\xbc\x00\x00\x00\x00\x00\x80\xf4?")
	rt.store.string(MEMORY_LIST[0], 39529,"@^m\x18\xb9\xcf\xbf\x87<\x99\xab*W\r=\x00\x00\x00\x00\x00`\xf4?")
	rt.store.string(MEMORY_LIST[0], 39561,"`\xdc\xcb\xad\xf0\xce\xbf$\xaf\x86\x9c\xb7&+=\x00\x00\x00\x00\x00@\xf4?")
	rt.store.string(MEMORY_LIST[0], 39593,"\xf0*n\x07\'\xce\xbf\x10\xff?TO/\x17\xbd\x00\x00\x00\x00\x00 \xf4?")
	rt.store.string(MEMORY_LIST[0], 39625,"\xc0Ok!\\\xcd\xbf\x1bh\xca\xbb\x91\xba!=\x00\x00\x00\x00\x00\x00\xf4?")
	rt.store.string(MEMORY_LIST[0], 39657,"\xa0\x9a\xc7\xf7\x8f\xcc\xbf4\x84\x9fhOy\'=\x00\x00\x00\x00\x00\x00\xf4?")
	rt.store.string(MEMORY_LIST[0], 39689,"\xa0\x9a\xc7\xf7\x8f\xcc\xbf4\x84\x9fhOy\'=\x00\x00\x00\x00\x00\xe0\xf3?")
	rt.store.string(MEMORY_LIST[0], 39721,"\x90-t\x86\xc2\xcb\xbf\x8f\xb7\x8b1\xb0N\x19=\x00\x00\x00\x00\x00\xc0\xf3?")
	rt.store.string(MEMORY_LIST[0], 39753,"\xc0\x80N\xc9\xf3\xca\xbff\x90\xcd?cN\xba<\x00\x00\x00\x00\x00\xa0\xf3?")
	rt.store.string(MEMORY_LIST[0], 39785,"\xb0\xe2\x1f\xbc#\xca\xbf\xea\xc1F\xdcd\x8c%\xbd\x00\x00\x00\x00\x00\xa0\xf3?")
	rt.store.string(MEMORY_LIST[0], 39817,"\xb0\xe2\x1f\xbc#\xca\xbf\xea\xc1F\xdcd\x8c%\xbd\x00\x00\x00\x00\x00\x80\xf3?")
	rt.store.string(MEMORY_LIST[0], 39849,"P\xf4\x9cZR\xc9\xbf\xe3\xd4\xc1\x04\xd9\xd1*\xbd\x00\x00\x00\x00\x00`\xf3?")
	rt.store.string(MEMORY_LIST[0], 39881,"\xd0 e\xa0\x7f\xc8\xbf\t\xfa\xdb\x7f\xbf\xbd+=\x00\x00\x00\x00\x00@\xf3?")
	rt.store.string(MEMORY_LIST[0], 39913,"\xe0\x10\x02\x89\xab\xc7\xbfXJSr\x90\xdb+=\x00\x00\x00\x00\x00@\xf3?")
	rt.store.string(MEMORY_LIST[0], 39945,"\xe0\x10\x02\x89\xab\xc7\xbfXJSr\x90\xdb+=\x00\x00\x00\x00\x00 \xf3?")
	rt.store.string(MEMORY_LIST[0], 39977,"\xd0\x19\xe7\x0f\xd6\xc6\xbff\xe2\xb2\xa3j\xe4\x10\xbd\x00\x00\x00\x00\x00\x00\xf3?")
	rt.store.string(MEMORY_LIST[0], 40009,"\x90\xa7p0\xff\xc5\xbf9P\x10\x9fC\x9e\x1e\xbd\x00\x00\x00\x00\x00\x00\xf3?")
	rt.store.string(MEMORY_LIST[0], 40041,"\x90\xa7p0\xff\xc5\xbf9P\x10\x9fC\x9e\x1e\xbd\x00\x00\x00\x00\x00\xe0\xf2?")
	rt.store.string(MEMORY_LIST[0], 40073,"\xb0\xa1\xe3\xe5&\xc5\xbf\x8f[\x07\x90\x8b\xde \xbd\x00\x00\x00\x00\x00\xc0\xf2?")
	rt.store.string(MEMORY_LIST[0], 40105,"\x80\xcbl+M\xc4\xbf<x5a\xc1\x0c\x17=\x00\x00\x00\x00\x00\xc0\xf2?")
	rt.store.string(MEMORY_LIST[0], 40137,"\x80\xcbl+M\xc4\xbf<x5a\xc1\x0c\x17=\x00\x00\x00\x00\x00\xa0\xf2?")
	rt.store.string(MEMORY_LIST[0], 40169,"\x90\x1e \xfcq\xc3\xbf:T\'M\x86x\xf1<\x00\x00\x00\x00\x00\x80\xf2?")
	rt.store.string(MEMORY_LIST[0], 40201,"\xf0\x1f\xf8R\x95\xc2\xbf\x08\xc4q\x170\x8d$\xbd\x00\x00\x00\x00\x00`\xf2?")
	rt.store.string(MEMORY_LIST[0], 40233,"`/\xd5*\xb7\xc1\xbf\x96\xa3\x11\x18\xa4\x80.\xbd\x00\x00\x00\x00\x00`\xf2?")
	rt.store.string(MEMORY_LIST[0], 40265,"`/\xd5*\xb7\xc1\xbf\x96\xa3\x11\x18\xa4\x80.\xbd\x00\x00\x00\x00\x00@\xf2?")
	rt.store.string(MEMORY_LIST[0], 40297,"\x90\xd0|~\xd7\xc0\xbf\xf4[\xe8\x88\x96i\n=\x00\x00\x00\x00\x00@\xf2?")
	rt.store.string(MEMORY_LIST[0], 40329,"\x90\xd0|~\xd7\xc0\xbf\xf4[\xe8\x88\x96i\n=\x00\x00\x00\x00\x00 \xf2?")
	rt.store.string(MEMORY_LIST[0], 40361,"\xe0\xdb1\x91\xec\xbf\xbf\xf23\xa3\\Tu%\xbd\x00\x00\x00\x00\x00\x00\xf2?")
	rt.store.string(MEMORY_LIST[0], 40394,"+n\x07\'\xbe\xbf<\x00\xf0*,4*=\x00\x00\x00\x00\x00\x00\xf2?")
	rt.store.string(MEMORY_LIST[0], 40426,"+n\x07\'\xbe\xbf<\x00\xf0*,4*=\x00\x00\x00\x00\x00\xe0\xf1?")
	rt.store.string(MEMORY_LIST[0], 40457,"\xc0[\x8fT^\xbc\xbf\x06\xbe_XW\x0c\x1d\xbd\x00\x00\x00\x00\x00\xc0\xf1?")
	rt.store.string(MEMORY_LIST[0], 40489,"\xe0J:m\x92\xba\xbf\xc8\xaa[\xe859%=\x00\x00\x00\x00\x00\xc0\xf1?")
	rt.store.string(MEMORY_LIST[0], 40521,"\xe0J:m\x92\xba\xbf\xc8\xaa[\xe859%=\x00\x00\x00\x00\x00\xa0\xf1?")
	rt.store.string(MEMORY_LIST[0], 40553,"\xa01\xd6E\xc3\xb8\xbfhV/M)|\x13=\x00\x00\x00\x00\x00\xa0\xf1?")
	rt.store.string(MEMORY_LIST[0], 40585,"\xa01\xd6E\xc3\xb8\xbfhV/M)|\x13=\x00\x00\x00\x00\x00\x80\xf1?")
	rt.store.string(MEMORY_LIST[0], 40617,"`\xe5\x8a\xd2\xf0\xb6\xbf\xdas3\xc97\x97&\xbd\x00\x00\x00\x00\x00`\xf1?")
	rt.store.string(MEMORY_LIST[0], 40649," \x06?\x07\x1b\xb5\xbfW^\xc6a[\x02\x1f=\x00\x00\x00\x00\x00`\xf1?")
	rt.store.string(MEMORY_LIST[0], 40681," \x06?\x07\x1b\xb5\xbfW^\xc6a[\x02\x1f=\x00\x00\x00\x00\x00@\xf1?")
	rt.store.string(MEMORY_LIST[0], 40713,"\xe0\x1b\x96\xd7A\xb3\xbf\xdf\x13\xf9\xcc\xda^,=\x00\x00\x00\x00\x00@\xf1?")
	rt.store.string(MEMORY_LIST[0], 40745,"\xe0\x1b\x96\xd7A\xb3\xbf\xdf\x13\xf9\xcc\xda^,=\x00\x00\x00\x00\x00 \xf1?")
	rt.store.string(MEMORY_LIST[0], 40777,"\x80\xa3\xee6e\xb1\xbf\t\xa3\x8fv^|\x14=\x00\x00\x00\x00\x00\x00\xf1?")
	rt.store.string(MEMORY_LIST[0], 40809,"\x80\x11\xc00\n\xaf\xbf\x91\x8e6\x83\x9eY-=\x00\x00\x00\x00\x00\x00\xf1?")
	rt.store.string(MEMORY_LIST[0], 40841,"\x80\x11\xc00\n\xaf\xbf\x91\x8e6\x83\x9eY-=\x00\x00\x00\x00\x00\xe0\xf0?")
	rt.store.string(MEMORY_LIST[0], 40873,"\x80\x19q\xddB\xab\xbfLp\xd6\xe5z\x82\x1c=\x00\x00\x00\x00\x00\xe0\xf0?")
	rt.store.string(MEMORY_LIST[0], 40905,"\x80\x19q\xddB\xab\xbfLp\xd6\xe5z\x82\x1c=\x00\x00\x00\x00\x00\xc0\xf0?")
	rt.store.string(MEMORY_LIST[0], 40937,"\xc02\xf6Xt\xa7\xbf\xee\xa1\xf24F\xfc,\xbd\x00\x00\x00\x00\x00\xc0\xf0?")
	rt.store.string(MEMORY_LIST[0], 40969,"\xc02\xf6Xt\xa7\xbf\xee\xa1\xf24F\xfc,\xbd\x00\x00\x00\x00\x00\xa0\xf0?")
	rt.store.string(MEMORY_LIST[0], 41001,"\xc0\xfe\xb9\x87\x9e\xa3\xbf\xaa\xfe&\xf5\xb7\x02\xf5<\x00\x00\x00\x00\x00\xa0\xf0?")
	rt.store.string(MEMORY_LIST[0], 41033,"\xc0\xfe\xb9\x87\x9e\xa3\xbf\xaa\xfe&\xf5\xb7\x02\xf5<\x00\x00\x00\x00\x00\x80\xf0?")
	rt.store.string(MEMORY_LIST[0], 41066,"x\x0e\x9b\x82\x9f\xbf\xe4\t~|&\x80)\xbd\x00\x00\x00\x00\x00\x80\xf0?")
	rt.store.string(MEMORY_LIST[0], 41098,"x\x0e\x9b\x82\x9f\xbf\xe4\t~|&\x80)\xbd\x00\x00\x00\x00\x00`\xf0?")
	rt.store.string(MEMORY_LIST[0], 41129,"\x80\xd5\x07\x1b\xb9\x97\xbf9\xa6\xfa\x93T\x8d(\xbd\x00\x00\x00\x00\x00@\xf0?")
	rt.store.string(MEMORY_LIST[0], 41162,"\xfc\xb0\xa8\xc0\x8f\xbf\x9c\xa6\xd3\xf6|\x1e\xdf\xbc\x00\x00\x00\x00\x00@\xf0?")
	rt.store.string(MEMORY_LIST[0], 41194,"\xfc\xb0\xa8\xc0\x8f\xbf\x9c\xa6\xd3\xf6|\x1e\xdf\xbc\x00\x00\x00\x00\x00 \xf0?")
	rt.store.string(MEMORY_LIST[0], 41226,"\x10k*\xe0\x7f\xbf\xe4@\xda\r?\xe2\x19\xbd\x00\x00\x00\x00\x00 \xf0?")
	rt.store.string(MEMORY_LIST[0], 41258,"\x10k*\xe0\x7f\xbf\xe4@\xda\r?\xe2\x19\xbd\x00\x00\x00\x00\x00\x00\xf0?")
	rt.store.string(MEMORY_LIST[0], 41310,"\xf0?")
	rt.store.string(MEMORY_LIST[0], 41341,"\xc0\xef?")
	rt.store.string(MEMORY_LIST[0], 41354,"\x89u\x15\x10\x80?\xe8+\x9d\x99k\xc7\x10\xbd\x00\x00\x00\x00\x00\x80\xef?")
	rt.store.string(MEMORY_LIST[0], 41385,"\x80\x93XV \x90?\xd2\xf7\xe2\x06[\xdc#\xbd\x00\x00\x00\x00\x00@\xef?")
	rt.store.string(MEMORY_LIST[0], 41418,"\xc9(%I\x98?4\x0cZ2\xba\xa0*\xbd\x00\x00\x00\x00\x00\x00\xef?")
	rt.store.string(MEMORY_LIST[0], 41449,"@\xe7\x89]A\xa0?S\xd7\xf1\\\xc0\x11\x01=\x00\x00\x00\x00\x00\xc0\xee?")
	rt.store.string(MEMORY_LIST[0], 41482,".\xd4\xaef\xa4?(\xfd\xbdus\x16,\xbd\x00\x00\x00\x00\x00\x80\xee?")
	rt.store.string(MEMORY_LIST[0], 41513,"\xc0\x9f\x14\xaa\x94\xa8?}&Z\xd0\x95y\x19\xbd\x00\x00\x00\x00\x00@\xee?")
	rt.store.string(MEMORY_LIST[0], 41545,"\xc0\xdd\xcds\xcb\xac?\x07(\xd8G\xf2h\x1a\xbd\x00\x00\x00\x00\x00 \xee?")
	rt.store.string(MEMORY_LIST[0], 41577,"\xc0\x06\xc01\xea\xae?{;\xc9O>\x11\x0e\xbd\x00\x00\x00\x00\x00\xe0\xed?")
	rt.store.string(MEMORY_LIST[0], 41609,"`F\xd1;\x97\xb1?\x9b\x9e\rV]2%\xbd\x00\x00\x00\x00\x00\xa0\xed?")
	rt.store.string(MEMORY_LIST[0], 41641,"\xe0\xd1\xa7\xf5\xbd\xb3?\xd7N\xdb\xa5^\xc8,=\x00\x00\x00\x00\x00`\xed?")
	rt.store.string(MEMORY_LIST[0], 41673,"\xa0\x97MZ\xe9\xb5?\x1e\x1d]<\x06i,\xbd\x00\x00\x00\x00\x00@\xed?")
	rt.store.string(MEMORY_LIST[0], 41705,"\xc0\xea\n\xd3\x00\xb7?2\xed\x9d\xa9\x8d\x1e\xec<\x00\x00\x00\x00\x00\x00\xed?")
	rt.store.string(MEMORY_LIST[0], 41737,"@Y]^3\xb9?\xdaG\xbd:\\\x11#=\x00\x00\x00\x00\x00\xc0\xec?")
	rt.store.string(MEMORY_LIST[0], 41769,"`\xad\x8d\xc8j\xbb?\xe5h\xf7+\x80\x90\x13\xbd\x00\x00\x00\x00\x00\xa0\xec?")
	rt.store.string(MEMORY_LIST[0], 41801,"@\xbc\x01X\x88\xbc?\xd3\xacZ\xc6\xd1F&=\x00\x00\x00\x00\x00`\xec?")
	rt.store.string(MEMORY_LIST[0], 41833," \n\x839\xc7\xbe?\xe0E\xe6\xafh\xc0-\xbd\x00\x00\x00\x00\x00@\xec?")
	rt.store.string(MEMORY_LIST[0], 41865,"\xe0\xdb9\x91\xe8\xbf?\xfd\n\xa1O\xd64%\xbd\x00\x00\x00\x00\x00\x00\xec?")
	rt.store.string(MEMORY_LIST[0], 41897,"\xe0\'\x82\x8e\x17\xc1?\xf2\x07-\xcex\xef!=\x00\x00\x00\x00\x00\xe0\xeb?")
	rt.store.string(MEMORY_LIST[0], 41929,"\xf0#~+\xaa\xc1?4\x998D\x8e\xa7,=\x00\x00\x00\x00\x00\xa0\xeb?")
	rt.store.string(MEMORY_LIST[0], 41961,"\x80\x86\x0ca\xd1\xc2?\xa1\xb4\x81\xcbl\x9d\x03=\x00\x00\x00\x00\x00\x80\xeb?")
	rt.store.string(MEMORY_LIST[0], 41993,"\x90\x15\xb0\xfce\xc3?\x89rK#\xa8/\xc6<\x00\x00\x00\x00\x00@\xeb?")
	rt.store.string(MEMORY_LIST[0], 42025,"\xb03\x83=\x91\xc4?x\xb6\xfdTy\x83%=\x00\x00\x00\x00\x00 \xeb?")
	rt.store.string(MEMORY_LIST[0], 42057,"\xb0\xa1\xe4\xe5\'\xc5?\xc7}i\xe5\xe83&=\x00\x00\x00\x00\x00\xe0\xea?")
	rt.store.string(MEMORY_LIST[0], 42089,"\x10\x8c\xbeNW\xc6?x.<,\x8b\xcf\x19=\x00\x00\x00\x00\x00\xc0\xea?")
	rt.store.string(MEMORY_LIST[0], 42121,"pu\x8b\x12\xf0\xc6?\xe1!\x9c\xe5\x8d\x11%\xbd\x00\x00\x00\x00\x00\xa0\xea?")
	rt.store.string(MEMORY_LIST[0], 42153,"PD\x85\x8d\x89\xc7?\x05C\x91p\x10f\x1c\xbd\x00\x00\x00\x00\x00`\xea?")
	rt.store.string(MEMORY_LIST[0], 42186,"9\xeb\xaf\xbe\xc8?\xd1,\xe9\xaaT=\x07\xbd\x00\x00\x00\x00\x00@\xea?")
	rt.store.string(MEMORY_LIST[0], 42218,"\xf7\xdcZZ\xc9?o\xff\xa0X(\xf2\x07=\x00\x00\x00\x00\x00\x00\xea?")
	rt.store.string(MEMORY_LIST[0], 42249,"\xe0\x8a<\xed\x93\xca?i!VPCr(\xbd\x00\x00\x00\x00\x00\xe0\xe9?")
	rt.store.string(MEMORY_LIST[0], 42281,"\xd0[W\xd81\xcb?\xaa\xe1\xacN\x8d5\x0c\xbd\x00\x00\x00\x00\x00\xc0\xe9?")
	rt.store.string(MEMORY_LIST[0], 42313,"\xe0;8\x87\xd0\xcb?\xb6\x12TY\xc4K-\xbd\x00\x00\x00\x00\x00\xa0\xe9?")
	rt.store.string(MEMORY_LIST[0], 42345,"\x10\xf0\xc6\xfbo\xcc?\xd2+\x96\xc5r\xec\xf1\xbc\x00\x00\x00\x00\x00`\xe9?")
	rt.store.string(MEMORY_LIST[0], 42377,"\x90\xd4\xb0=\xb1\xcd?5\xb0\x15\xf7*\xff*\xbd\x00\x00\x00\x00\x00@\xe9?")
	rt.store.string(MEMORY_LIST[0], 42409,"\x10\xe7\xff\x0eS\xce?0\xf4A`\'\x12\xc2<\x00\x00\x00\x00\x00 \xe9?")
	rt.store.string(MEMORY_LIST[0], 42442,"\xdd\xe4\xad\xf5\xce?\x11\x8e\xbbe\x15!\xca\xbc\x00\x00\x00\x00\x00\x00\xe9?")
	rt.store.string(MEMORY_LIST[0], 42473,"\xb0\xb3l\x1c\x99\xcf?0\xdf\x0c\xca\xec\xcb\x1b=\x00\x00\x00\x00\x00\xc0\xe8?")
	rt.store.string(MEMORY_LIST[0], 42505,"XM`8q\xd0?\x91N\xed\x16\xdb\x9c\xf8<\x00\x00\x00\x00\x00\xa0\xe8?")
	rt.store.string(MEMORY_LIST[0], 42537,"`ag-\xc4\xd0?\xe9\xea<\x16\x8b\x18\'=\x00\x00\x00\x00\x00\x80\xe8?")
	rt.store.string(MEMORY_LIST[0], 42569,"\xe8\'\x82\x8e\x17\xd1?\x1c\xf0\xa5c\x0e!,\xbd\x00\x00\x00\x00\x00`\xe8?")
	rt.store.string(MEMORY_LIST[0], 42601,"\xf8\xac\xcb\\k\xd1?\x81\x16\xa5\xf7\xcd\x9a+=\x00\x00\x00\x00\x00@\xe8?")
	rt.store.string(MEMORY_LIST[0], 42633,"hZc\x99\xbf\xd1?\xb7\xbdGQ\xed\xa6,=\x00\x00\x00\x00\x00 \xe8?")
	rt.store.string(MEMORY_LIST[0], 42665,"\xb8\x0emE\x14\xd2?\xea\xbaF\xba\xde\x87\n=\x00\x00\x00\x00\x00\xe0\xe7?")
	rt.store.string(MEMORY_LIST[0], 42697,"\x90\xdc|\xf0\xbe\xd2?\xf4\x04PJ\xfa\x9c*=\x00\x00\x00\x00\x00\xc0\xe7?")
	rt.store.string(MEMORY_LIST[0], 42729,"`\xd3\xe1\xf1\x14\xd3?\xb8<!\xd3z\xe2(\xbd\x00\x00\x00\x00\x00\xa0\xe7?")
	rt.store.string(MEMORY_LIST[0], 42761,"\x10\xbevgk\xd3?\xc8w\xf1\xb0\xcdn\x11=\x00\x00\x00\x00\x00\x80\xe7?")
	rt.store.string(MEMORY_LIST[0], 42793,"03wR\xc2\xd3?\\\xbd\x06\xb6T;\x18=\x00\x00\x00\x00\x00`\xe7?")
	rt.store.string(MEMORY_LIST[0], 42825,"\xe8\xd5#\xb4\x19\xd4?\x9d\xe0\x90\xec6\xe4\x08=\x00\x00\x00\x00\x00@\xe7?")
	rt.store.string(MEMORY_LIST[0], 42857,"\xc8q\xc2\x8dq\xd4?u\xd6g\t\xce\'/\xbd\x00\x00\x00\x00\x00 \xe7?")
	rt.store.string(MEMORY_LIST[0], 42889,"0\x17\x9e\xe0\xc9\xd4?\xa4\xd8\n\x1b\x89 .\xbd\x00\x00\x00\x00\x00\x00\xe7?")
	rt.store.string(MEMORY_LIST[0], 42921,"\xa08\x07\xae\"\xd5?Y\xc7d\x81p\xbe.=\x00\x00\x00\x00\x00\xe0\xe6?")
	rt.store.string(MEMORY_LIST[0], 42953,"\xd0\xc8S\xf7{\xd5?\xef@]\xee\xed\xad\x1f=\x00\x00\x00\x00\x00\xc0\xe6?")
	rt.store.string(MEMORY_LIST[0], 42985,"`Y\xdf\xbd\xd5\xd5?\xdce\xa4\x08*\x0b\n\xbd\x00\x00\x00\x00\x00\x00\x00\x00O\xbba\x05g\xac\xdd?\x18-DT\xfb!\xe9?\x9b\xf6\x81\xd2\x0bs\xef?\x18-DT\xfb!\xf9?\xe2e/\"\x7f+z<\x07\\\x143&\xa6\x81<\xbd\xcb\xf0z\x88\x07p<\x07\\\x143&\xa6\x91<\x18-DT\xfb!\xe9?\x18-DT\xfb!\xe9\xbf\xd2!3\x7f|\xd9\x02@\xd2!3\x7f|\xd9\x02\xc0")
	rt.store.string(MEMORY_LIST[0], 43119,"\x80\x18-DT\xfb!\t@\x18-DT\xfb!\t\xc0\x03\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x06\x00\x00\x00\x83\xf9\xa2\x00DNn\x00\xfc)\x15\x00\xd1W\'\x00\xdd4\xf5\x00b\xdb\xc0\x00<\x99\x95\x00A\x90C\x00cQ\xfe\x00\xbb\xde\xab\x00\xb7a\xc5\x00:n$\x00\xd2MB\x00I\x06\xe0\x00\t\xea.\x00\x1c\x92\xd1\x00\xeb\x1d\xfe\x00)\xb1\x1c\x00\xe8>\xa7\x00\xf55\x82\x00D\xbb.\x00\x9c\xe9\x84\x00\xb4&p\x00A~_\x00\xd6\x919\x00S\x839\x00\x9c\xf49\x00\x8b_\x84\x00(\xf9\xbd\x00\xf8\x1f;\x00\xde\xff\x97\x00\x0f\x98\x05\x00\x11/\xef\x00\nZ\x8b\x00m\x1fm\x00\xcf~6\x00\t\xcb\'\x00FO\xb7\x00\x9ef?\x00-\xea_\x00\xba\'u\x00\xe5\xeb\xc7\x00={\xf1\x00\xf79\x07\x00\x92R\x8a\x00\xfbk\xea\x00\x1f\xb1_\x00\x08]\x8d\x000\x03V\x00{\xfcF\x00\xf0\xabk\x00 \xbc\xcf\x006\xf4\x9a\x00\xe3\xa9\x1d\x00^a\x91\x00\x08\x1b\xe6\x00\x85\x99e\x00\xa0\x14_\x00\x8d@h\x00\x80\xd8\xff\x00\'sM\x00\x06\x061\x00\xcaV\x15\x00\xc9\xa8s\x00{\xe2`\x00k\x8c\xc0\x00\x19\xc4G\x00\xcdg\xc3\x00\t\xe8\xdc\x00Y\x83*\x00\x8bv\xc4\x00\xa6\x1c\x96\x00D\xaf\xdd\x00\x19W\xd1\x00\xa5>\x05\x00\x05\x07\xff\x003~?\x00\xc22\xe8\x00\x98O\xde\x00\xbb}2\x00&=\xc3\x00\x1ek\xef\x00\x9f\xf8^\x005\x1f:\x00\x7f\xf2\xca\x00\xf1\x87\x1d\x00|\x90!\x00j$|\x00\xd5n\xfa\x000-w\x00\x15;C\x00\xb5\x14\xc6\x00\xc3\x19\x9d\x00\xad\xc4\xc2\x00,MA\x00\x0c\x00]\x00\x86}F\x00\xe3q-\x00\x9b\xc6\x9a\x003b\x00\x00\xb4\xd2|\x00\xb4\xa7\x97\x007U\xd5\x00\xd7>\xf6\x00\xa3\x10\x18\x00Mv\xfc\x00d\x9d*\x00p\xd7\xab\x00c|\xf8\x00z\xb0W\x00\x17\x15\xe7\x00\xc0IV\x00;\xd6\xd9\x00\xa7\x848\x00$#\xcb\x00\xd6\x8aw\x00ZT#\x00\x00\x1f\xb9\x00\xf1\n\x1b\x00\x19\xce\xdf\x00\x9f1\xff\x00f\x1ej\x00\x99Wa\x00\xac\xfbG\x00~\x7f\xd8\x00\"e\xb7\x002\xe8\x89\x00\xe6\xbf`\x00\xef\xc4\xcd\x00l6\t\x00]?\xd4\x00\x16\xde\xd7\x00X;\xde\x00\xde\x9b\x92\x00\xd2\"(\x00(\x86\xe8\x00\xe2XM\x00\xc6\xca2\x00\x08\xe3\x16\x00\xe0}\xcb\x00\x17\xc0P\x00\xf3\x1d\xa7\x00\x18\xe0[\x00.\x134\x00\x83\x12b\x00\x83H\x01\x00\xf5\x8e[\x00\xad\xb0\x7f\x00\x1e\xe9\xf2\x00HJC\x00\x10g\xd3\x00\xaa\xdd\xd8\x00\xae_B\x00ja\xce\x00\n(\xa4\x00\xd3\x99\xb4\x00\x06\xa6\xf2\x00\\w\x7f\x00\xa3\xc2\x83\x00a<\x88\x00\x8asx\x00\xaf\x8cZ\x00o\xd7\xbd\x00-\xa6c\x00\xf4\xbf\xcb\x00\x8d\x81\xef\x00&\xc1g\x00U\xcaE\x00\xca\xd96\x00(\xa8\xd2\x00\xc2a\x8d\x00\x12\xc9w\x00\x04&\x14\x00\x12F\x9b\x00\xc4Y\xc4\x00\xc8\xc5D\x00M\xb2\x91\x00\x00\x17\xf3\x00\xd4C\xad\x00)I\xe5\x00\xfd\xd5\x10\x00\x00\xbe\xfc\x00\x1e\x94\xcc\x00p\xce\xee\x00\x13>\xf5\x00\xec\xf1\x80\x00\xb3\xe7\xc3\x00\xc7\xf8(\x00\x93\x05\x94\x00\xc1q>\x00.\t\xb3\x00\x0bE\xf3\x00\x88\x12\x9c\x00\xab {\x00.\xb5\x9f\x00G\x92\xc2\x00{2/\x00\x0cUm\x00r\xa7\x90\x00k\xe7\x1f\x001\xcb\x96\x00y\x16J\x00Ay\xe2\x00\xf4\xdf\x89\x00\xe8\x94\x97\x00\xe2\xe6\x84\x00\x991\x97\x00\x88\xedk\x00__6\x00\xbb\xfd\x0e\x00H\x9a\xb4\x00g\xa4l\x00qrB\x00\x8d]2\x00\x9f\x15\xb8\x00\xbc\xe5\t\x00\x8d1%\x00\xf7t9\x000\x05\x1c\x00\r\x0c\x01\x00K\x08h\x00,\xeeX\x00G\xaa\x90\x00t\xe7\x02\x00\xbd\xd6$\x00\xf7}\xa6\x00nHr\x00\x9f\x16\xef\x00\x8e\x94\xa6\x00\xb4\x91\xf6\x00\xd1SQ\x00\xcf\n\xf2\x00 \x983\x00\xf5K~\x00\xb2ch\x00\xdd>_\x00@]\x03\x00\x85\x89\x7f\x00UR)\x007d\xc0\x00m\xd8\x10\x002H2\x00[Lu\x00Nq\xd4\x00ETn\x00\x0b\t\xc1\x00*\xf5i\x00\x14f\xd5\x00\'\x07\x9d\x00]\x04P\x00\xb4;\xdb\x00\xeav\xc5\x00\x87\xf9\x17\x00Ik}\x00\x1d\'\xba\x00\x96i)\x00\xc6\xcc\xac\x00\xad\x14T\x00\x90\xe2j\x00\x88\xd9\x89\x00,rP\x00\x04\xa4\xbe\x00w\x07\x94\x00\xf30p\x00\x00\xfc\'\x00\xeaq\xa8\x00f\xc2I\x00d\xe0=\x00\x97\xdd\x83\x00\xa3?\x97\x00C\x94\xfd\x00\r\x86\x8c\x001A\xde\x00\x929\x9d\x00\xddp\x8c\x00\x17\xb7\xe7\x00\x08\xdf;\x00\x157+\x00\\\x80\xa0\x00Z\x80\x93\x00\x10\x11\x92\x00\x0f\xe8\xd8\x00l\x80\xaf\x00\xdb\xffK\x008\x90\x0f\x00Y\x18v\x00b\xa5\x15\x00a\xcb\xbb\x00\xc7\x89\xb9\x00\x10@\xbd\x00\xd2\xf2\x04\x00Iu\'\x00\xeb\xb6\xf6\x00\xdb\"\xbb\x00\n\x14\xaa\x00\x89&/\x00d\x83v\x00\t;3\x00\x0e\x94\x1a\x00Q:\xaa\x00\x1d\xa3\xc2\x00\xaf\xed\xae\x00\\&\x12\x00m\xc2M\x00-z\x9c\x00\xc0V\x97\x00\x03?\x83\x00\t\xf0\xf6\x00+@\x8c\x00m1\x99\x009\xb4\x07\x00\x0c \x15\x00\xd8\xc3[\x00\xf5\x92\xc4\x00\xc6\xadK\x00N\xca\xa5\x00\xa77\xcd\x00\xe6\xa96\x00\xab\x92\x94\x00\xddBh\x00\x19c\xde\x00v\x8c\xef\x00h\x8bR\x00\xfc\xdb7\x00\xae\xa1\xab\x00\xdf\x151\x00\x00\xae\xa1\x00\x0c\xfb\xda\x00dMf\x00\xed\x05\xb7\x00)e0\x00WV\xbf\x00G\xff:\x00j\xf9\xb9\x00u\xbe\xf3\x00(\x93\xdf\x00\xab\x800\x00f\x8c\xf6\x00\x04\xcb\x15\x00\xfa\"\x06\x00\xd9\xe4\x1d\x00=\xb3\xa4\x00W\x1b\x8f\x006\xcd\t\x00NB\xe9\x00\x13\xbe\xa4\x003#\xb5\x00\xf0\xaa\x1a\x00Oe\xa8\x00\xd2\xc1\xa5\x00\x0b?\x0f\x00[x\xcd\x00#\xf9v\x00{\x8b\x04\x00\x89\x17r\x00\xc6\xa6S\x00on\xe2\x00\xef\xeb\x00\x00\x9bJX\x00\xc4\xda\xb7\x00\xaaf\xba\x00v\xcf\xcf\x00\xd1\x02\x1d\x00\xb1\xf1-\x00\x8c\x99\xc1\x00\xc3\xadw\x00\x86H\xda\x00\xf7]\xa0\x00\xc6\x80\xf4\x00\xac\xf0/\x00\xdd\xec\x9a\x00?\\\xbc\x00\xd0\xdem\x00\x90\xc7\x1f\x00*\xdb\xb6\x00\xa3%:\x00\x00\xaf\x9a\x00\xadS\x93\x00\xb6W\x04\x00)-\xb4\x00K\x80~\x00\xda\x07\xa7\x00v\xaa\x0e\x00{Y\xa1\x00\x16\x12*\x00\xdc\xb7-\x00\xfa\xe5\xfd\x00\x89\xdb\xfe\x00\x89\xbe\xfd\x00\xe4vl\x00\x06\xa9\xfc\x00>\x80p\x00\x85n\x15\x00\xfd\x87\xff\x00(>\x07\x00ag3\x00*\x18\x86\x00M\xbd\xea\x00\xb3\xe7\xaf\x00\x8fmn\x00\x95g9\x001\xbf[\x00\x84\xd7H\x000\xdf\x16\x00\xc7-C\x00%a5\x00\xc9p\xce\x000\xcb\xb8\x00\xbfl\xfd\x00\xa4\x00\xa2\x00\x05l\xe4\x00Z\xdd\xa0\x00!oG\x00b\x12\xd2\x00\xb9\\\x84\x00paI\x00kV\xe0\x00\x99R\x01\x00PU7\x00\x1e\xd5\xb7\x003\xf1\xc4\x00\x13n_\x00]0\xe4\x00\x85.\xa9\x00\x1d\xb2\xc3\x00\xa126\x00\x08\xb7\xa4\x00\xea\xb1\xd4\x00\x16\xf7!\x00\x8fi\xe4\x00\'\xffw\x00\x0c\x03\x80\x00\x8d@-\x00O\xcd\xa0\x00 \xa5\x99\x00\xb3\xa2\xd3\x00/]\n\x00\xb4\xf9B\x00\x11\xda\xcb\x00}\xbe\xd0\x00\x9b\xdb\xc1\x00\xab\x17\xbd\x00\xca\xa2\x81\x00\x08j\\\x00.U\x17\x00\'\x00U\x00\x7f\x14\xf0\x00\xe1\x07\x86\x00\x14\x0bd\x00\x96A\x8d\x00\x87\xbe\xde\x00\xda\xfd*\x00k%\xb6\x00{\x894\x00\x05\xf3\xfe\x00\xb9\xbf\x9e\x00hjO\x00J*\xa8\x00O\xc4Z\x00-\xf8\xbc\x00\xd7Z\x98\x00\xf4\xc7\x95\x00\rM\x8d\x00 :\xa6\x00\xa4W_\x00\x14?\xb1\x00\x808\x95\x00\xcc \x01\x00q\xdd\x86\x00\xc9\xde\xb6\x00\xbf`\xf5\x00Me\x11\x00\x01\x07k\x00\x8c\xb0\xac\x00\xb2\xc0\xd0\x00QUH\x00\x1e\xfb\x0e\x00\x95r\xc3\x00\xa3\x06;\x00\xc0@5\x00\x06\xdc{\x00\xe0E\xcc\x00N)\xfa\x00\xd6\xca\xc8\x00\xe8\xf3A\x00|d\xde\x00\x9bd\xd8\x00\xd9\xbe1\x00\xa4\x97\xc3\x00wX\xd4\x00i\xe3\xc5\x00\xf0\xda\x13\x00\xba:<\x00F\x18F\x00Uu_\x00\xd2\xbd\xf5\x00n\x92\xc6\x00\xac.]\x00\x0eD\xed\x00\x1c>B\x00a\xc4\x87\x00)\xfd\xe9\x00\xe7\xd6\xf3\x00\"|\xca\x00o\x915\x00\x08\xe0\xc5\x00\xff\xd7\x8d\x00nj\xe2\x00\xb0\xfd\xc6\x00\x93\x08\xc1\x00|]t\x00k\xad\xb2\x00\xcdn\x9d\x00>r{\x00\xc6\x11j\x00\xf7\xcf\xa9\x00)s\xdf\x00\xb5\xc9\xba\x00\xb7\x00Q\x00\xe2\xb2\r\x00t\xba$\x00\xe5}`\x00t\xd8\x8a\x00\r\x15,\x00\x81\x18\x0c\x00~f\x94\x00\x01)\x16\x00\x9fzv\x00\xfd\xfd\xbe\x00VE\xef\x00\xd9~6\x00\xec\xd9\x13\x00\x8b\xba\xb9\x00\xc4\x97\xfc\x001\xa8\'\x00\xf1n\xc3\x00\x94\xc56\x00\xd8\xa8V\x00\xb4\xa8\xb5\x00\xcf\xcc\x0e\x00\x12\x89-\x00oW4\x00,V\x89\x00\x99\xce\xe3\x00\xd6 \xb9\x00k^\xaa\x00>*\x9c\x00\x11_\xcc\x00\xfd\x0bJ\x00\xe1\xf4\xfb\x00\x8e;m\x00\xe2\x86,\x00\xe9\xd4\x84\x00\xfc\xb4\xa9\x00\xef\xee\xd1\x00.5\xc9\x00/9a\x008!D\x00\x1b\xd9\xc8\x00\x81\xfc\n\x00\xfbJj\x00/\x1c\xd8\x00S\xb4\x84\x00N\x99\x8c\x00T\"\xcc\x00*U\xdc\x00\xc0\xc6\xd6\x00\x0b\x19\x96\x00\x1ap\xb8\x00i\x95d\x00&Z`\x00?R\xee\x00\x7f\x11\x0f\x00\xf4\xb5\x11\x00\xfc\xcb\xf5\x004\xbc-\x004\xbc\xee\x00\xe8]\xcc\x00\xdd^`\x00g\x8e\x9b\x00\x923\xef\x00\xc9\x17\xb8\x00aX\x9b\x00\xe1W\xbc\x00Q\x83\xc6\x00\xd8>\x10\x00\xddqH\x00-\x1c\xdd\x00\xaf\x18\xa1\x00!,F\x00Y\xf3\xd7\x00\xd9z\x98\x00\x9eT\xc0\x00O\x86\xfa\x00V\x06\xfc\x00\xe5y\xae\x00\x89\"6\x008\xad\"\x00g\x93\xdc\x00U\xe8\xaa\x00\x82&8\x00\xca\xe7\x9b\x00Q\r\xa4\x00\x993\xb1\x00\xa9\xd7\x0e\x00i\x05H\x00e\xb2\xf0\x00\x7f\x88\xa7\x00\x88L\x97\x00\xf9\xd16\x00!\x92\xb3\x00{\x82J\x00\x98\xcf!\x00@\x9f\xdc\x00\xdcGU\x00\xe1t:\x00g\xebB\x00\xfe\x9d\xdf\x00^\xd4_\x00{g\xa4\x00\xba\xacz\x00U\xf6\xa2\x00+\x88#\x00A\xbaU\x00Yn\x08\x00!*\x86\x009G\x83\x00\x89\xe3\xe6\x00\xe5\x9e\xd4\x00I\xfb@\x00\xffV\xe9\x00\x1c\x0f\xca\x00\xc5Y\x8a\x00\x94\xfa+\x00\xd3\xc1\xc5\x00\x0f\xc5\xcf\x00\xdbZ\xae\x00G\xc5\x86\x00\x85Cb\x00!\x86;\x00,y\x94\x00\x10a\x87\x00*L{\x00\x80,\x1a\x00C\xbf\x12\x00\x88&\x90\x00x<\x89\x00\xa8\xc4\xe4\x00\xe5\xdb{\x00\xc4:\xc2\x00&\xf4\xea\x00\xf7g\x8a\x00\r\x92\xbf\x00e\xa3+\x00=\x93\xb1\x00\xbd|\x0b\x00\xa4Q\xdc\x00\'\xddc\x00i\xe1\xdd\x00\x9a\x94\x19\x00\xa8)\x95\x00h\xce(\x00\t\xed\xb4\x00D\x9f \x00N\x98\xca\x00p\x82c\x00~|#\x00\x0f\xb92\x00\xa7\xf5\x8e\x00\x14V\xe7\x00!\xf1\x08\x00\xb5\x9d*\x00o~M\x00\xa5\x19Q\x00\xb5\xf9\xab\x00\x82\xdf\xd6\x00\x96\xdda\x00\x166\x02\x00\xc4:\x9f\x00\x83\xa2\xa1\x00r\xedm\x009\x8dz\x00\x82\xb8\xa9\x00k2\\\x00F\'[\x00\x004\xed\x00\xd2\x00w\x00\xfc\xf4U\x00\x01YM\x00\xe0q\x80")
	rt.store.string(MEMORY_LIST[0], 45923,"@\xfb!\xf9?\x00\x00\x00\x00-Dt>\x00\x00\x00\x80\x98F\xf8<\x00\x00\x00`Q\xccx;\x00\x00\x00\x80\x83\x1b\xf09\x00\x00\x00@ %z8\x00\x00\x00\x80\"\x82\xe36\x00\x00\x00\x00\x1d\xf3i5\xd1t\x9e\x00W\x9d\xbd*\x80pR\x0f\xff\xff>\'\n\x00\x00\x00d\x00\x00\x00\xe8\x03\x00\x00\x10\'\x00\x00\xa0\x86\x01\x00@B\x0f\x00\x80\x96\x98\x00\x00\xe1\xf5\x05\x19\x00\n\x00\x19\x19\x19\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x11\n\x19\x19\x19\x03\n\x07\x00\x01\x00\t\x0b\x18\x00\x00\t\x06\x0b\x00\x00\x0b\x00\x06\x19\x00\x00\x00\x19\x19\x19")
	rt.store.string(MEMORY_LIST[0], 46113,"\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\n\r\x19\x19\x19\x00\r\x00\x00\x02\x00\t\x0e\x00\x00\x00\t\x00\x0e\x00\x00\x0e")
	rt.store.string(MEMORY_LIST[0], 46171,"\x0c")
	rt.store.string(MEMORY_LIST[0], 46183,"\x13\x00\x00\x00\x00\x13\x00\x00\x00\x00\t\x0c\x00\x00\x00\x00\x00\x0c\x00\x00\x0c")
	rt.store.string(MEMORY_LIST[0], 46229,"\x10")
	rt.store.string(MEMORY_LIST[0], 46241,"\x0f\x00\x00\x00\x04\x0f\x00\x00\x00\x00\t\x10\x00\x00\x00\x00\x00\x10\x00\x00\x10")
	rt.store.string(MEMORY_LIST[0], 46287,"\x12")
	rt.store.string(MEMORY_LIST[0], 46299,"\x11\x00\x00\x00\x00\x11\x00\x00\x00\x00\t\x12\x00\x00\x00\x00\x00\x12\x00\x00\x12\x00\x00\x1a\x00\x00\x00\x1a\x1a\x1a")
	rt.store.string(MEMORY_LIST[0], 46354,"\x1a\x00\x00\x00\x1a\x1a\x1a\x00\x00\x00\x00\x00\x00\t")
	rt.store.string(MEMORY_LIST[0], 46403,"\x14")
	rt.store.string(MEMORY_LIST[0], 46415,"\x17\x00\x00\x00\x00\x17\x00\x00\x00\x00\t\x14\x00\x00\x00\x00\x00\x14\x00\x00\x14")
	rt.store.string(MEMORY_LIST[0], 46461,"\x16")
	rt.store.string(MEMORY_LIST[0], 46473,"\x15\x00\x00\x00\x00\x15\x00\x00\x00\x00\t\x16\x00\x00\x00\x00\x00\x16\x00\x00\x16\x00\x000123456789ABCDEFN10__cxxabiv116__shim_type_infoE\x00\x00\x00\x00\xfc\xb7\x00\x00\xb0\xb5\x00\x00\xec\xb7\x00\x00N10__cxxabiv117__class_type_infoE\x00\x00\x00\xfc\xb7\x00\x00\xe0\xb5\x00\x00\xd4\xb5\x00\x00N10__cxxabiv117__pbase_type_infoE\x00\x00\x00\xfc\xb7\x00\x00\x10\xb6\x00\x00\xd4\xb5\x00\x00N10__cxxabiv119__pointer_type_infoE\x00\xfc\xb7\x00\x00@\xb6\x00\x004\xb6\x00\x00N10__cxxabiv120__si_class_type_infoE\x00\x00\x00\x00\xfc\xb7\x00\x00p\xb6\x00\x00\x04\xb6\x00\x00\x00\x00\x00\x00\xe8\xb6\x00\x00_\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\x00\x00\x00\x00\x10\xb7\x00\x00_\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00St9exception\x00St9bad_alloc\x00\x00\x00\xfc\xb7\x00\x00\xd9\xb6\x00\x00\x1c\xb8\x00\x00St20bad_array_new_length\x00\x00\x00\x00\xfc\xb7\x00\x00\xf4\xb6\x00\x00\xe8\xb6\x00\x00\x00\x00\x00\x00@\xb7\x00\x00s\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00St11logic_error\x00\xfc\xb7\x00\x000\xb7\x00\x00\x1c\xb8\x00\x00\x00\x00\x00\x00t\xb7\x00\x00s\x00\x00\x00\xb9\x00\x00\x00\xb8\x00\x00\x00St12length_error\x00\x00\x00\x00\xfc\xb7\x00\x00`\xb7\x00\x00@\xb7\x00\x00\x00\x00\x00\x00\xa8\xb7\x00\x00s\x00\x00\x00\xba\x00\x00\x00\xb8\x00\x00\x00St12out_of_range\x00\x00\x00\x00\xfc\xb7\x00\x00\x94\xb7\x00\x00@\xb7\x00\x00\x00\x00\x00\x00\x04\xb6\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00St9type_info\x00\x00\x00\x00\xbc\xb7\x00\x00\xdc\xb7\x00\x00\x00\x00\x00\x00\x98\xb6\x00\x00\xbb\x00\x00\x00\xc3\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xbc\xb7\x00\x00\xcc\xb6\x00\x00\x00\x00\x00\x00\x1c\xb8\x00\x00_\x00\x00\x00\xc7\x00\x00\x00\xc8\x00\x00\x00\xb0\xbc\x01\x00\xb2\x00\x00\x00\x00\x00\x00\x006\x07\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\x01\x00\x00\x00\x08\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\x01\x00\x00\x00\n\x00\x00\x00\x01\x00\x00\x00\x0b\x00\x00\x00\x01\x00\x00\x00\x0c\x00\x00\x00\x01\x00\x00\x00\r\x00\x00\x00\x01\x00\x00\x00\x0e\x00\x00\x00\x01\x00\x00\x00\x0f\x00\x00\x00\x01\x00\x00\x00\x10\x00\x00\x00\x01\x00\x00\x00\x11\x00\x00\x00\x01\x00\x00\x00\x12\x00\x00\x00\x01\x00\x00\x00\x13\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\x01\x00\x00\x00\x15\x00\x00\x00\x01\x00\x00\x00\x16\x00\x00\x00\x01\x00\x00\x00\x17\x00\x00\x00\x01\x00\x00\x00\x18\x00\x00\x00\x01\x00\x00\x00\x19\x00\x00\x00\x01\x00\x00\x00\x1a\x00\x00\x00\x01\x00\x00\x00\x1b\x00\x00\x00\x01\x00\x00\x00\x1c\x00\x00\x00\x01\x00\x00\x00\x1d\x00\x00\x00\x01\x00\x00\x00\x1e\x00\x00\x00\x01\x00\x00\x00\x1f\x00\x00\x00\x01\x00\x00\x00 \x00\x00\x00\x01\x00\x00\x00!\x00\x00\x00\x01\x00\x00\x00\"\x00\x00\x00\x01\x00\x00\x00#\x00\x00\x00\x01\x00\x00\x00$\x00\x00\x00\x01\x00\x00\x00%\x00\x00\x00\x01\x00\x00\x00&\x00\x00\x00\x01\x00\x00\x00\'\x00\x00\x00\x01\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00)\x00\x00\x00\x01\x00\x00\x00*\x00\x00\x00\x01\x00\x00\x00+\x00\x00\x00\x01\x00\x00\x00,\x00\x00\x00\x01\x00\x00\x00-\x00\x00\x00\x01\x00\x00\x00.\x00\x00\x00\x01\x00\x00\x00/\x00\x00\x00\x01\x00\x00\x000\x00\x00\x00\x01\x00\x00\x001\x00\x00\x00\x01\x00\x00\x002\x00\x00\x00\x01\x00\x00\x003\x00\x00\x00\x01\x00\x00\x00\x19\x00\x00\x00\x00\x00\x00\x00\x9c\x13\x00\x00\x00\x00\x00\x00,\x01\x00\x00\x00\x00\x00\x00\'\x05\x00\x00\xe4\xb9\x00\x00\x19\x00\x00\x00\x00\x00\x00\x00\xbb\x13\x00\x00\xf4\xb9\x00\x00,\x01\x00\x00\x00\x00\x00\x00N\x05\x00\x00\x04\xba\x00\x00\x05\x00\x00\x00\x00\x00\x00\x000\x0e\x00\x00\x14\xba\x00\x00\x00\x00\x00\x00\x82\x08\x00\x00@\xb8\x00\x00\x80\xba\x00\x003\x00\x00\x00\x00\x00\x00\x00!\x10\x00\x004\xba\x00\x00\x00\x00\x00\x00G\x04\x00\x00H\xba\x00\x00\xe8\x03\x00\x00\x00\x00\x00\x00L\x06\x00\x00$\xba\x00\x00\xe8\x03\x00\x00\x00\x00\x00\x00_\x06\x00\x00`\xba\x00\x00d\x00\x00\x00\x00\x00\x00\x008\x06\x00\x00p\xba\x00\x00\x00\x00\x00\x00+\x04\x00\x00T\xba\x00\x00\x00\x00\x00\x00v\x0c\x00\x00\x90\xba")
	rt.store.string(MEMORY_LIST[0], 48284,"\x9c\xba")
end

--[[
return function(wasm)
	FUNC_LIST[0] = wasm["env"].func_list["__cxa_throw"]
	FUNC_LIST[1] = wasm["env"].func_list["emscripten_memcpy_js"]
	FUNC_LIST[2] = wasm["env"].func_list["emscripten_resize_heap"]
	FUNC_LIST[3] = wasm["env"].func_list["abort"]
	run_init_code()
	memory_at_0 = MEMORY_LIST[0]
	return {
		rt = rt,
		func_list = {
			["luau_compile"] = FUNC_LIST[241],
			["set_flag"] = FUNC_LIST[534],
			["set_all_flags"] = FUNC_LIST[541],
			["reset_flags"] = FUNC_LIST[543],
			["strlen"] = FUNC_LIST[504],
			["malloc"] = FUNC_LIST[513],
			["free"] = FUNC_LIST[515],
			["stackSave"] = FUNC_LIST[523],
			["stackRestore"] = FUNC_LIST[524],
			["stackAlloc"] = FUNC_LIST[525],
			["__cxa_increment_exception_refcount"] = FUNC_LIST[693],
			["__cxa_is_pointer_type"] = FUNC_LIST[706],
		},
		table_list = {
			["__indirect_function_table"] = TABLE_LIST[0],
		},
		memory_list = {
			["memory"] = MEMORY_LIST[0],
		},
		global_list = {
		},
	}
end
--]]

local cfns = {
	["luau_compile"] = FUNC_LIST[241],
	["set_flag"] = FUNC_LIST[534],
	["set_all_flags"] = FUNC_LIST[541],
	["reset_flags"] = FUNC_LIST[543],
	["strlen"] = FUNC_LIST[504],
	["malloc"] = FUNC_LIST[513],
	["free"] = FUNC_LIST[515],
}

local function cstr(str)
	local strLen = #str
	local strPtr = cfns.malloc(strLen + 1)
	rt.store.string(memory_at_0, strPtr, str)
	rt.store.i32_n8(memory_at_0, strPtr + strLen, 0)
	return strPtr
end

local function stub(name, ret)
	return function(...)
		if (STUB_WARN) then print(`stub: {name} called`) end
		return ret
	end
end

--// TODO: Properly handle exceptions
local function invokeHandler(index)
	return function(...)
		local args = table.pack(...)
		local result = table.pack(pcall(function() return TABLE_LIST[0].data[index](table.unpack(args)) end))
		local success = table.remove(result, 1)
		assert(success, "exception occured in c")
		return table.unpack(result)
	end
end

--// __cxa_throw
FUNC_LIST[0] = function(except, _info, _dtor)
	assert(false, "exception occured in c")
end

--// emscripten_memcpy_js (emscripten_memcpy_big)
FUNC_LIST[1] = function(destination, source, size)
	rt.store.copy(memory_at_0, destination, memory_at_0, source, size)
end

--// emscripten_resize_heap
FUNC_LIST[2] = function(_requestedSize)
	assert(false, "OOM")
end

--// abort
FUNC_LIST[3] = function(reason)
	assert(false, `Aborted({reason})`)
end

run_init_code()
memory_at_0 = MEMORY_LIST[0]

local function luau_compile(src: string, optLevel: number?, dbgLevel: number?, covLevel: number?)
	--// Source string
	local srcPtr = cstr(src)

	--// Struct lua_CompileOptions (see luau/Compiler/include/luacode.h)
	local compileOptsPtr = cfns.malloc(28)
	rt.store.i32(memory_at_0, compileOptsPtr + 0, optLevel or 1) --// int optimizationLevel
	rt.store.i32(memory_at_0, compileOptsPtr + 4, dbgLevel or 1) --// int debugLevel
	rt.store.i32(memory_at_0, compileOptsPtr + 8, covLevel or 0) --// int coverageLevel
	rt.store.i32(memory_at_0, compileOptsPtr + 12, 0) --// const char* vectorLib
	rt.store.i32(memory_at_0, compileOptsPtr + 16, 0) --// const char* vectorCtor
	rt.store.i32(memory_at_0, compileOptsPtr + 20, 0) --// const char* vectorType
	rt.store.i32(memory_at_0, compileOptsPtr + 24, 0) --// const char* const* mutableGlobals

	--// Bytecode size
	local bcSizePtr = cfns.malloc(8)

	--// Compile
	local bcPtr = cfns.luau_compile(srcPtr, #src, compileOptsPtr, bcSizePtr)
	local bcSize = rt.load.i32(memory_at_0, bcSizePtr)
	local bc = rt.load.string(memory_at_0, bcPtr, bcSize)

	--// Cleanup
	cfns.free(srcPtr)
	cfns.free(bcPtr)
	cfns.free(bcSizePtr)
	cfns.free(compileOptsPtr)

	return bc, bcSize
end

local function luau_setflag(name: string, state: boolean)
	--// Flag name
	local flagNamePtr = cstr(name)

	--// Set the flag
	cfns.set_flag(flagNamePtr, if (state) then 1 else 0)

	--// Cleanup
	cfns.free(flagNamePtr)
	return
end

local function luau_setallflags(state: boolean)
	cfns.set_all_flags(if (state) then 1 else 0)
	return
end

local function luau_resetflags()
	cfns.reset_flags()
	return
end

return {
	luau_compile = luau_compile,
	luau_setflag = luau_setflag,
	luau_setallflags = luau_setallflags,
	luau_resetflags = luau_resetflags,
	wasm = {
		rt = rt,
		cfns = cfns,
		indirect_function_table = TABLE_LIST[0],
		memory = MEMORY_LIST[0]
	}
}